
H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014484  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002278  08014724  08014724  00024724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801699c  0801699c  0002699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080169a4  080169a4  000269a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080169a8  080169a8  000269a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  24000000  080169ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d6b0  24000208  08016bb4  00030208  2**3
                  ALLOC
  8 ._user_heap_stack 00001400  2401d8b8  08016bb4  0003d8b8  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08016bb4  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 11 .debug_info   000b3325  00000000  00000000  00030236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00011e12  00000000  00000000  000e355b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003890  00000000  00000000  000f5370  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00007fe0  00000000  00000000  000f8c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00053f7f  00000000  00000000  00100be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00050fa7  00000000  00000000  00154b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001b0e58  00000000  00000000  001a5b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007f  00000000  00000000  0035695e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c720  00000000  00000000  003569e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000485ea  00000000  00000000  00363100  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  003ab6ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801470c 	.word	0x0801470c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0801470c 	.word	0x0801470c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_DMA_Init+0x34>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	200b      	movs	r0, #11
{
 8000698:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 800069e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a0:	f044 0401 	orr.w	r4, r4, #1
 80006a4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80006a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80006b4:	f001 f81a 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006b8:	200b      	movs	r0, #11

}
 80006ba:	b002      	add	sp, #8
 80006bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	f001 b84a 	b.w	8001758 <HAL_NVIC_EnableIRQ>
 80006c4:	58024400 	.word	0x58024400

080006c8 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006ca:	2300      	movs	r3, #0

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <MX_FMC_Init+0x60>)
{
 80006ce:	b089      	sub	sp, #36	; 0x24
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006d0:	4c16      	ldr	r4, [pc, #88]	; (800072c <MX_FMC_Init+0x64>)
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
  /* Timing */
  Timing.AddressSetupTime = 8;
 80006d2:	2108      	movs	r1, #8
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80006d4:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80006d8:	f8df c054 	ldr.w	ip, [pc, #84]	; 8000730 <MX_FMC_Init+0x68>
  Timing.CLKDivision = 16;
  Timing.DataLatency = 17;
  Timing.AccessMode = FMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80006dc:	461a      	mov	r2, r3
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006de:	9307      	str	r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 80006e0:	260f      	movs	r6, #15
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80006e2:	6083      	str	r3, [r0, #8]
  Timing.DataSetupTime = 254;
 80006e4:	25fe      	movs	r5, #254	; 0xfe
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80006e6:	6403      	str	r3, [r0, #64]	; 0x40
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006e8:	6004      	str	r4, [r0, #0]
  Timing.CLKDivision = 16;
 80006ea:	2410      	movs	r4, #16
  Timing.AddressSetupTime = 8;
 80006ec:	9101      	str	r1, [sp, #4]
  Timing.BusTurnAroundDuration = 8;
 80006ee:	9104      	str	r1, [sp, #16]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80006f0:	a901      	add	r1, sp, #4
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80006f2:	f8c0 c004 	str.w	ip, [r0, #4]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80006f6:	6247      	str	r7, [r0, #36]	; 0x24
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80006f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80006fc:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000700:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000704:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000708:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800070c:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  Timing.DataLatency = 17;
 8000710:	2311      	movs	r3, #17
  Timing.DataSetupTime = 254;
 8000712:	e9cd 6502 	strd	r6, r5, [sp, #8]
  Timing.DataLatency = 17;
 8000716:	e9cd 4305 	strd	r4, r3, [sp, #20]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800071a:	f005 ff17 	bl	800654c <HAL_SRAM_Init>
 800071e:	b108      	cbz	r0, 8000724 <MX_FMC_Init+0x5c>
  {
    Error_Handler( );
 8000720:	f000 faf8 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000724:	b009      	add	sp, #36	; 0x24
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000728:	24014398 	.word	0x24014398
 800072c:	52004000 	.word	0x52004000
 8000730:	52004104 	.word	0x52004104

08000734 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8000736:	4c2d      	ldr	r4, [pc, #180]	; (80007ec <HAL_SRAM_MspInit+0xb8>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000738:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	2300      	movs	r3, #0
  if (FMC_Initialized) {
 800073c:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	9306      	str	r3, [sp, #24]
 8000740:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000744:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (FMC_Initialized) {
 8000748:	b109      	cbz	r1, 800074e <HAL_SRAM_MspInit+0x1a>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800074a:	b037      	add	sp, #220	; 0xdc
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800074e:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000750:	22b8      	movs	r2, #184	; 0xb8
 8000752:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8000754:	6023      	str	r3, [r4, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000756:	f013 f8b9 	bl	80138cc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800075a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800075e:	a836      	add	r0, sp, #216	; 0xd8
 8000760:	f840 3dbc 	str.w	r3, [r0, #-188]!
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000764:	f004 fd9c 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	b108      	cbz	r0, 800076e <HAL_SRAM_MspInit+0x3a>
      Error_Handler();
 800076a:	f000 fad3 	bl	8000d14 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_SRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000770:	2001      	movs	r0, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8000776:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2403      	movs	r4, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077c:	270c      	movs	r7, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800077e:	a902      	add	r1, sp, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8000780:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000784:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000788:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078c:	9002      	str	r0, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 800078e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <HAL_SRAM_MspInit+0xc0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	9603      	str	r6, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	e9cd 5404 	strd	r5, r4, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a0:	f002 ff62 	bl	8003668 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80007a4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a8:	a902      	add	r1, sp, #8
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <HAL_SRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80007ac:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b2:	e9cd 4705 	strd	r4, r7, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f002 ff57 	bl	8003668 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80007ba:	f24c 0333 	movw	r3, #49203	; 0xc033
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007be:	a902      	add	r1, sp, #8
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <HAL_SRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80007c2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007cc:	f002 ff4c 	bl	8003668 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007d0:	2280      	movs	r2, #128	; 0x80
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80007d2:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	a902      	add	r1, sp, #8
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <HAL_SRAM_MspInit+0xcc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007da:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80007dc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f002 ff41 	bl	8003668 <HAL_GPIO_Init>
}
 80007e6:	b037      	add	sp, #220	; 0xdc
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	24000224 	.word	0x24000224
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58021400 	.word	0x58021400
 80007f8:	58021000 	.word	0x58021000
 80007fc:	58020c00 	.word	0x58020c00
 8000800:	58020800 	.word	0x58020800

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b508      	push	{r3, lr}
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000806:	4c06      	ldr	r4, [pc, #24]	; (8000820 <StartDefaultTask+0x1c>)
  MX_USB_DEVICE_Init();
 8000808:	f012 fdae 	bl	8013368 <MX_USB_DEVICE_Init>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800080c:	4620      	mov	r0, r4
 800080e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000812:	f003 f84b 	bl	80038ac <HAL_GPIO_TogglePin>
    osDelay(100);
 8000816:	2064      	movs	r0, #100	; 0x64
 8000818:	f008 fd4a 	bl	80092b0 <osDelay>
 800081c:	e7f6      	b.n	800080c <StartDefaultTask+0x8>
 800081e:	bf00      	nop
 8000820:	58020400 	.word	0x58020400

08000824 <StartTaskGUI>:
{
  /* USER CODE BEGIN StartTaskGUI */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000824:	4c04      	ldr	r4, [pc, #16]	; (8000838 <StartTaskGUI+0x14>)
{
 8000826:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000828:	4620      	mov	r0, r4
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	f003 f83e 	bl	80038ac <HAL_GPIO_TogglePin>
    osDelay(100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f008 fd3d 	bl	80092b0 <osDelay>
 8000836:	e7f7      	b.n	8000828 <StartTaskGUI+0x4>
 8000838:	58020400 	.word	0x58020400

0800083c <StartTaskMain>:
{
 800083c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800083e:	4c05      	ldr	r4, [pc, #20]	; (8000854 <StartTaskMain+0x18>)
    MX_LWIP_Init();
 8000840:	f007 fad0 	bl	8007de4 <MX_LWIP_Init>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000844:	4620      	mov	r0, r4
 8000846:	2101      	movs	r1, #1
 8000848:	f003 f830 	bl	80038ac <HAL_GPIO_TogglePin>
    osDelay(100);
 800084c:	2064      	movs	r0, #100	; 0x64
 800084e:	f008 fd2f 	bl	80092b0 <osDelay>
 8000852:	e7f7      	b.n	8000844 <StartTaskMain+0x8>
 8000854:	58020400 	.word	0x58020400

08000858 <configureTimerForRunTimeStats>:
	ulHighFrequencyTimerTicks = 0;
 8000858:	4b01      	ldr	r3, [pc, #4]	; (8000860 <configureTimerForRunTimeStats+0x8>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
}
 800085e:	4770      	bx	lr
 8000860:	240143e8 	.word	0x240143e8

08000864 <getRunTimeCounterValue>:
	return ulHighFrequencyTimerTicks;
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <getRunTimeCounterValue+0x8>)
 8000866:	6818      	ldr	r0, [r3, #0]
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	240143e8 	.word	0x240143e8

08000870 <vApplicationStackOverflowHook>:
}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000874:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <MX_FREERTOS_Init+0x30>)
 8000878:	2100      	movs	r1, #0
 800087a:	480b      	ldr	r0, [pc, #44]	; (80008a8 <MX_FREERTOS_Init+0x34>)
 800087c:	f008 fcd4 	bl	8009228 <osThreadNew>
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_FREERTOS_Init+0x38>)
  myTaskMainHandle = osThreadNew(StartTaskMain, NULL, &myTaskMain_attributes);
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_FREERTOS_Init+0x3c>)
 8000884:	2100      	movs	r1, #0
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000886:	6018      	str	r0, [r3, #0]
  myTaskMainHandle = osThreadNew(StartTaskMain, NULL, &myTaskMain_attributes);
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <MX_FREERTOS_Init+0x40>)
 800088a:	f008 fccd 	bl	8009228 <osThreadNew>
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_FREERTOS_Init+0x44>)
  myTaskGUIHandle = osThreadNew(StartTaskGUI, NULL, &myTaskGUI_attributes);
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <MX_FREERTOS_Init+0x48>)
 8000892:	2100      	movs	r1, #0
  myTaskMainHandle = osThreadNew(StartTaskMain, NULL, &myTaskMain_attributes);
 8000894:	6018      	str	r0, [r3, #0]
  myTaskGUIHandle = osThreadNew(StartTaskGUI, NULL, &myTaskGUI_attributes);
 8000896:	480a      	ldr	r0, [pc, #40]	; (80008c0 <MX_FREERTOS_Init+0x4c>)
 8000898:	f008 fcc6 	bl	8009228 <osThreadNew>
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_FREERTOS_Init+0x50>)
 800089e:	6018      	str	r0, [r3, #0]
}
 80008a0:	bd08      	pop	{r3, pc}
 80008a2:	bf00      	nop
 80008a4:	08014724 	.word	0x08014724
 80008a8:	08000805 	.word	0x08000805
 80008ac:	240143e4 	.word	0x240143e4
 80008b0:	0801476c 	.word	0x0801476c
 80008b4:	0800083d 	.word	0x0800083d
 80008b8:	240143f0 	.word	0x240143f0
 80008bc:	08014748 	.word	0x08014748
 80008c0:	08000825 	.word	0x08000825
 80008c4:	240143ec 	.word	0x240143ec

080008c8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <MX_GPIO_Init+0x138>)
{
 80008cc:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	4f4c      	ldr	r7, [pc, #304]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80008d4:	f244 0181 	movw	r1, #16513	; 0x4081
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008da:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	9409      	str	r4, [sp, #36]	; 0x24
 80008de:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e0:	4d49      	ldr	r5, [pc, #292]	; (8000a08 <MX_GPIO_Init+0x140>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80008ea:	f040 0010 	orr.w	r0, r0, #16
 80008ee:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 80008f2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80008f6:	f000 0010 	and.w	r0, r0, #16
 80008fa:	9001      	str	r0, [sp, #4]
 80008fc:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000902:	f040 0004 	orr.w	r0, r0, #4
 8000906:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800090a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800090e:	f000 0004 	and.w	r0, r0, #4
 8000912:	9002      	str	r0, [sp, #8]
 8000914:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800091a:	f040 0020 	orr.w	r0, r0, #32
 800091e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000922:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000926:	f000 0020 	and.w	r0, r0, #32
 800092a:	9003      	str	r0, [sp, #12]
 800092c:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000932:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000936:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800093a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800093e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000942:	9004      	str	r0, [sp, #16]
 8000944:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800094a:	4330      	orrs	r0, r6
 800094c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000950:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000954:	4030      	ands	r0, r6
 8000956:	9005      	str	r0, [sp, #20]
 8000958:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800095e:	f040 0002 	orr.w	r0, r0, #2
 8000962:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000966:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800096a:	f000 0002 	and.w	r0, r0, #2
 800096e:	9006      	str	r0, [sp, #24]
 8000970:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000976:	f040 0008 	orr.w	r0, r0, #8
 800097a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800097e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000982:	f000 0008 	and.w	r0, r0, #8
 8000986:	9007      	str	r0, [sp, #28]
 8000988:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800098e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000992:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000996:	4638      	mov	r0, r7
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	9308      	str	r3, [sp, #32]
 80009a2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a4:	f002 ff7e 	bl	80038a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a8:	4622      	mov	r2, r4
 80009aa:	4628      	mov	r0, r5
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	f002 ff79 	bl	80038a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_GPIO_Init+0x144>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b8:	a909      	add	r1, sp, #36	; 0x24
 80009ba:	4815      	ldr	r0, [pc, #84]	; (8000a10 <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009bc:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f002 fe51 	bl	8003668 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c6:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	4638      	mov	r0, r7
 80009cc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f002 fe47 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009da:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009dc:	a909      	add	r1, sp, #36	; 0x24
 80009de:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f002 fe3e 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ec:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	a909      	add	r1, sp, #36	; 0x24
 80009f0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f002 fe36 	bl	8003668 <HAL_GPIO_Init>

}
 80009fc:	b00f      	add	sp, #60	; 0x3c
 80009fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a00:	58024400 	.word	0x58024400
 8000a04:	58020400 	.word	0x58020400
 8000a08:	58021800 	.word	0x58021800
 8000a0c:	11110000 	.word	0x11110000
 8000a10:	58020800 	.word	0x58020800

08000a14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a14:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_I2C1_Init+0x50>)
  hi2c1.Init.Timing = 0x00B03FDB;
  hi2c1.Init.OwnAddress1 = 0;
 8000a18:	2200      	movs	r2, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	2101      	movs	r1, #1
  hi2c1.Instance = I2C1;
 8000a1c:	4d12      	ldr	r5, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x00B03FDB;
 8000a1e:	4c13      	ldr	r4, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4618      	mov	r0, r3
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	621a      	str	r2, [r3, #32]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000a24:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c1.Init.OwnAddress1 = 0;
 8000a28:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	f002 ff44 	bl	80038c0 <HAL_I2C_Init>
 8000a38:	b988      	cbnz	r0, 8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x50>)
 8000a3e:	f002 ff93 	bl	8003968 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	b948      	cbnz	r0, 8000a58 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_I2C1_Init+0x50>)
 8000a48:	f002 ffb8 	bl	80039bc <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	b900      	cbnz	r0, 8000a50 <MX_I2C1_Init+0x3c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000a54:	f000 b95e 	b.w	8000d14 <Error_Handler>
    Error_Handler();
 8000a58:	f000 f95c 	bl	8000d14 <Error_Handler>
 8000a5c:	e7f2      	b.n	8000a44 <MX_I2C1_Init+0x30>
    Error_Handler();
 8000a5e:	f000 f959 	bl	8000d14 <Error_Handler>
 8000a62:	e7ea      	b.n	8000a3a <MX_I2C1_Init+0x26>
 8000a64:	240143f4 	.word	0x240143f4
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	00b03fdb 	.word	0x00b03fdb

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	2300      	movs	r3, #0
{
 8000a74:	b0b6      	sub	sp, #216	; 0xd8
 8000a76:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	22bc      	movs	r2, #188	; 0xbc
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	9306      	str	r3, [sp, #24]
 8000a80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000a84:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f012 ff20 	bl	80138cc <memset>
  if(i2cHandle->Instance==I2C1)
 8000a8c:	6822      	ldr	r2, [r4, #0]
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_I2C_MspInit+0x8c>)
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d001      	beq.n	8000a98 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a94:	b036      	add	sp, #216	; 0xd8
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a98:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9a:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a9c:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9e:	f004 fbff 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	bb40      	cbnz	r0, 8000af6 <HAL_I2C_MspInit+0x86>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4c16      	ldr	r4, [pc, #88]	; (8000b00 <HAL_I2C_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa6:	2012      	movs	r0, #18
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000aaa:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab2:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000abe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <HAL_I2C_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000aca:	9602      	str	r6, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	e9cd 2204 	strd	r2, r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f002 fdc7 	bl	8003668 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ada:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8000ae6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	9b01      	ldr	r3, [sp, #4]
}
 8000af2:	b036      	add	sp, #216	; 0xd8
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000af6:	f000 f90d 	bl	8000d14 <Error_Handler>
 8000afa:	e7d3      	b.n	8000aa4 <HAL_I2C_MspInit+0x34>
 8000afc:	40005400 	.word	0x40005400
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58020400 	.word	0x58020400

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0c:	224c      	movs	r2, #76	; 0x4c
 8000b0e:	2100      	movs	r1, #0
 8000b10:	a809      	add	r0, sp, #36	; 0x24
 8000b12:	f012 fedb 	bl	80138cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	a801      	add	r0, sp, #4
 8000b1c:	f012 fed6 	bl	80138cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f003 fcff 	bl	8004524 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <SystemClock_Config+0xc4>)
 8000b28:	2200      	movs	r2, #0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2a:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	6999      	ldr	r1, [r3, #24]
 8000b30:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <SystemClock_Config+0xc8>)
 8000b32:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000b36:	6199      	str	r1, [r3, #24]
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b52:	6983      	ldr	r3, [r0, #24]
 8000b54:	049b      	lsls	r3, r3, #18
 8000b56:	d5fc      	bpl.n	8000b52 <SystemClock_Config+0x4a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b58:	4c1e      	ldr	r4, [pc, #120]	; (8000bd4 <SystemClock_Config+0xcc>)
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b60:	2101      	movs	r1, #1
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b64:	2721      	movs	r7, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b66:	2678      	movs	r6, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b6a:	f023 0303 	bic.w	r3, r3, #3
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	62a3      	str	r3, [r4, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b72:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b74:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b76:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b78:	250c      	movs	r5, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b7a:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7c:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b7e:	9709      	str	r7, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b80:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b82:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b84:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b86:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b88:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b8e:	e9cd 5319 	strd	r5, r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f003 fd6d 	bl	8004670 <HAL_RCC_OscConfig>
 8000b96:	4602      	mov	r2, r0
 8000b98:	b108      	cbz	r0, 8000b9e <SystemClock_Config+0x96>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9a:	b672      	cpsid	i
 8000b9c:	e7fe      	b.n	8000b9c <SystemClock_Config+0x94>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b9e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	2503      	movs	r5, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba4:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000baa:	a801      	add	r0, sp, #4
 8000bac:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bae:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb0:	e9cd 6501 	strd	r6, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bb4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bb8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bbc:	f004 f8dc 	bl	8004d78 <HAL_RCC_ClockConfig>
 8000bc0:	b108      	cbz	r0, 8000bc6 <SystemClock_Config+0xbe>
 8000bc2:	b672      	cpsid	i
 8000bc4:	e7fe      	b.n	8000bc4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
  }
}
 8000bc6:	b01d      	add	sp, #116	; 0x74
 8000bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	58024800 	.word	0x58024800
 8000bd0:	58000400 	.word	0x58000400
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <main>:
{
 8000bd8:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bda:	2400      	movs	r4, #0
{
 8000bdc:	b084      	sub	sp, #16

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bde:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000be0:	e9cd 4400 	strd	r4, r4, [sp]
 8000be4:	e9cd 4402 	strd	r4, r4, [sp, #8]
  HAL_MPU_Disable();
 8000be8:	f000 fdc4 	bl	8001774 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bec:	4940      	ldr	r1, [pc, #256]	; (8000cf0 <main+0x118>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bf2:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <main+0x11c>)
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf4:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bf6:	f8ad 5000 	strh.w	r5, [sp]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bfa:	9303      	str	r3, [sp, #12]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bfc:	e9cd 1201 	strd	r1, r2, [sp, #4]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c00:	f000 fdda 	bl	80017b8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c04:	4a3c      	ldr	r2, [pc, #240]	; (8000cf8 <main+0x120>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c06:	230d      	movs	r3, #13
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c08:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c0a:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c0c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c10:	f88d 400f 	strb.w	r4, [sp, #15]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c14:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c18:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c1c:	f88d 500d 	strb.w	r5, [sp, #13]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c20:	f000 fdca 	bl	80017b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c24:	2004      	movs	r0, #4
 8000c26:	f000 fdb5 	bl	8001794 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <main+0x124>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000c32:	d111      	bne.n	8000c58 <main+0x80>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c38:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c3c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c48:	695a      	ldr	r2, [r3, #20]
 8000c4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c4e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c54:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <main+0x124>)
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8000c60:	d128      	bne.n	8000cb4 <main+0xdc>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c66:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c6e:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c72:	f3c2 05c9 	ubfx	r5, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c76:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000c7a:	07af      	lsls	r7, r5, #30
 8000c7c:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c7e:	ea02 060c 	and.w	r6, r2, ip
 8000c82:	463c      	mov	r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c84:	4628      	mov	r0, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c86:	ea46 0104 	orr.w	r1, r6, r4
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c8a:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8000c90:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000c94:	1c41      	adds	r1, r0, #1
 8000c96:	d1f6      	bne.n	8000c86 <main+0xae>
 8000c98:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000c9a:	f112 0f20 	cmn.w	r2, #32
 8000c9e:	d1ee      	bne.n	8000c7e <main+0xa6>
 8000ca0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000cb4:	f000 fca0 	bl	80015f8 <HAL_Init>
  SystemClock_Config();
 8000cb8:	f7ff ff26 	bl	8000b08 <SystemClock_Config>
  MX_GPIO_Init();
 8000cbc:	f7ff fe04 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc0:	f7ff fce6 	bl	8000690 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cc4:	f000 fb1c 	bl	8001300 <MX_USART3_UART_Init>
  MX_FMC_Init();
 8000cc8:	f7ff fcfe 	bl	80006c8 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8000ccc:	f000 f824 	bl	8000d18 <MX_QUADSPI_Init>
  MX_MBEDTLS_Init();
 8000cd0:	f007 fbc2 	bl	8008458 <MX_MBEDTLS_Init>
  MX_SPI1_Init();
 8000cd4:	f000 f90a 	bl	8000eec <MX_SPI1_Init>
  MX_I2C1_Init();
 8000cd8:	f7ff fe9c 	bl	8000a14 <MX_I2C1_Init>
  MX_RNG_Init();
 8000cdc:	f000 f8c6 	bl	8000e6c <MX_RNG_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ce0:	f008 fa6e 	bl	80091c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ce4:	f7ff fdc6 	bl	8000874 <MX_FREERTOS_Init>
  osKernelStart();
 8000ce8:	f008 fa7c 	bl	80091e4 <osKernelStart>
 8000cec:	e7fe      	b.n	8000cec <main+0x114>
 8000cee:	bf00      	nop
 8000cf0:	30040000 	.word	0x30040000
 8000cf4:	03000007 	.word	0x03000007
 8000cf8:	30044000 	.word	0x30044000
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d00:	6802      	ldr	r2, [r0, #0]
 8000d02:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d000      	beq.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d08:	4770      	bx	lr
    HAL_IncTick();
 8000d0a:	f000 bca7 	b.w	800165c <HAL_IncTick>
 8000d0e:	bf00      	nop
 8000d10:	40001000 	.word	0x40001000

08000d14 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
 8000d16:	e7fe      	b.n	8000d16 <Error_Handler+0x2>

08000d18 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d18:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
  hqspi.Init.ClockPrescaler = 2;
 8000d1a:	2202      	movs	r2, #2
  hqspi.Instance = QUADSPI;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_QUADSPI_Init+0x38>)
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <MX_QUADSPI_Init+0x3c>)
  hqspi.Init.FifoThreshold = 4;
 8000d20:	2004      	movs	r0, #4
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d22:	2510      	movs	r5, #16
  hqspi.Init.FlashSize = 25;
 8000d24:	2419      	movs	r4, #25
  hqspi.Instance = QUADSPI;
 8000d26:	6019      	str	r1, [r3, #0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000d28:	f44f 61a0 	mov.w	r1, #1280	; 0x500
  hqspi.Init.ClockPrescaler = 2;
 8000d2c:	605a      	str	r2, [r3, #4]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d2e:	2200      	movs	r2, #0
  hqspi.Init.FifoThreshold = 4;
 8000d30:	6098      	str	r0, [r3, #8]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d32:	4618      	mov	r0, r3
  hqspi.Init.FlashSize = 25;
 8000d34:	e9c3 5403 	strd	r5, r4, [r3, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d38:	e9c3 1205 	strd	r1, r2, [r3, #20]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d3c:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d40:	f003 fc46 	bl	80045d0 <HAL_QSPI_Init>
 8000d44:	b900      	cbnz	r0, 8000d48 <MX_QUADSPI_Init+0x30>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000d4c:	f7ff bfe2 	b.w	8000d14 <Error_Handler>
 8000d50:	24014440 	.word	0x24014440
 8000d54:	52005000 	.word	0x52005000

08000d58 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000d58:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	2300      	movs	r3, #0
{
 8000d5c:	b0b8      	sub	sp, #224	; 0xe0
 8000d5e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	22bc      	movs	r2, #188	; 0xbc
 8000d62:	4619      	mov	r1, r3
 8000d64:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	9308      	str	r3, [sp, #32]
 8000d68:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000d6c:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f012 fdac 	bl	80138cc <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <HAL_QSPI_MspInit+0x100>)
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d001      	beq.n	8000d80 <HAL_QSPI_MspInit+0x28>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000d7c:	b038      	add	sp, #224	; 0xe0
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d86:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d88:	f004 fa8a 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d15f      	bne.n	8000e50 <HAL_QSPI_MspInit+0xf8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_QSPI_MspInit+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d94:	2004      	movs	r0, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2400      	movs	r4, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d98:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d9c:	2609      	movs	r6, #9
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	a904      	add	r1, sp, #16
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000da4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000da8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000dac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000db0:	9200      	str	r2, [sp, #0]
 8000db2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000db8:	f042 0210 	orr.w	r2, r2, #16
 8000dbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dc4:	f002 0210 	and.w	r2, r2, #16
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dd0:	f042 0220 	orr.w	r2, r2, #32
 8000dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ddc:	f002 0220 	and.w	r2, r2, #32
 8000de0:	9202      	str	r2, [sp, #8]
 8000de2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000de8:	432a      	orrs	r2, r5
 8000dea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df2:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	402b      	ands	r3, r5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <HAL_QSPI_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	9303      	str	r3, [sp, #12]
 8000dfc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dfe:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	f002 fc30 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000e08:	f44f 6388 	mov.w	r3, #1088	; 0x440
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0c:	a904      	add	r1, sp, #16
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000e10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e16:	e9cd 4607 	strd	r4, r6, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1a:	f002 fc25 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e1e:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e22:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e24:	a904      	add	r1, sp, #16
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e28:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e2a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	e9cd 5405 	strd	r5, r4, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e32:	f002 fc19 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	a904      	add	r1, sp, #16
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e3e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	e9cd 5405 	strd	r5, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f002 fc0e 	bl	8003668 <HAL_GPIO_Init>
}
 8000e4c:	b038      	add	sp, #224	; 0xe0
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000e50:	f7ff ff60 	bl	8000d14 <Error_Handler>
 8000e54:	e79c      	b.n	8000d90 <HAL_QSPI_MspInit+0x38>
 8000e56:	bf00      	nop
 8000e58:	52005000 	.word	0x52005000
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58021000 	.word	0x58021000
 8000e64:	58021400 	.word	0x58021400
 8000e68:	58020400 	.word	0x58020400

08000e6c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e6c:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000e70:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e74:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 8000e76:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e7a:	f005 f8bb 	bl	8005ff4 <HAL_RNG_Init>
 8000e7e:	b900      	cbnz	r0, 8000e82 <MX_RNG_Init+0x16>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e80:	bd08      	pop	{r3, pc}
 8000e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e86:	f7ff bf45 	b.w	8000d14 <Error_Handler>
 8000e8a:	bf00      	nop
 8000e8c:	2401448c 	.word	0x2401448c
 8000e90:	48021800 	.word	0x48021800

08000e94 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e94:	b510      	push	{r4, lr}
 8000e96:	b0b0      	sub	sp, #192	; 0xc0
 8000e98:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9a:	22bc      	movs	r2, #188	; 0xbc
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	a801      	add	r0, sp, #4
 8000ea0:	f012 fd14 	bl	80138cc <memset>
  if(rngHandle->Instance==RNG)
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_RNG_MspInit+0x50>)
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d001      	beq.n	8000eb0 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000eac:	b030      	add	sp, #192	; 0xc0
 8000eae:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000eb6:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f004 f9f2 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	b970      	cbnz	r0, 8000edc <HAL_RNG_MspInit+0x48>
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_RNG_MspInit+0x54>)
 8000ec0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8000ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000ecc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	9b00      	ldr	r3, [sp, #0]
}
 8000ed8:	b030      	add	sp, #192	; 0xc0
 8000eda:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000edc:	f7ff ff1a 	bl	8000d14 <Error_Handler>
 8000ee0:	e7ed      	b.n	8000ebe <HAL_RNG_MspInit+0x2a>
 8000ee2:	bf00      	nop
 8000ee4:	48021800 	.word	0x48021800
 8000ee8:	58024400 	.word	0x58024400

08000eec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eec:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi1.Instance = SPI1;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI1_Init+0x58>)
 8000ef4:	4914      	ldr	r1, [pc, #80]	; (8000f48 <MX_SPI1_Init+0x5c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef6:	2007      	movs	r0, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000efc:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  hspi1.Instance = SPI1;
 8000f00:	6019      	str	r1, [r3, #0]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f08:	2200      	movs	r2, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0a:	60d8      	str	r0, [r3, #12]
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f0c:	4618      	mov	r0, r3
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0e:	6359      	str	r1, [r3, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f10:	609a      	str	r2, [r3, #8]
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f12:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f14:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f18:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1c:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8000f20:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f24:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f28:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f2c:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f30:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f34:	f005 f924 	bl	8006180 <HAL_SPI_Init>
 8000f38:	b900      	cbnz	r0, 8000f3c <MX_SPI1_Init+0x50>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f3a:	bd38      	pop	{r3, r4, r5, pc}
 8000f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000f40:	f7ff bee8 	b.w	8000d14 <Error_Handler>
 8000f44:	240144a0 	.word	0x240144a0
 8000f48:	40013000 	.word	0x40013000

08000f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	2300      	movs	r3, #0
{
 8000f52:	b0b8      	sub	sp, #224	; 0xe0
 8000f54:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f56:	22bc      	movs	r2, #188	; 0xbc
 8000f58:	4619      	mov	r1, r3
 8000f5a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	9308      	str	r3, [sp, #32]
 8000f5e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000f62:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f66:	f012 fcb1 	bl	80138cc <memset>
  if(spiHandle->Instance==SPI1)
 8000f6a:	682a      	ldr	r2, [r5, #0]
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <HAL_SPI_MspInit+0x108>)
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d002      	beq.n	8000f78 <HAL_SPI_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f72:	b038      	add	sp, #224	; 0xe0
 8000f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f7e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	f004 f98e 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d15e      	bne.n	8001046 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_SPI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f8a:	2060      	movs	r0, #96	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f8e:	2705      	movs	r7, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	f04f 0802 	mov.w	r8, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	a904      	add	r1, sp, #16
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8000f9a:	4c30      	ldr	r4, [pc, #192]	; (800105c <HAL_SPI_MspInit+0x110>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fa0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000fa4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000fa8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000fac:	9201      	str	r2, [sp, #4]
 8000fae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb4:	f042 0201 	orr.w	r2, r2, #1
 8000fb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc0:	f002 0201 	and.w	r2, r2, #1
 8000fc4:	9202      	str	r2, [sp, #8]
 8000fc6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fcc:	f042 0208 	orr.w	r2, r2, #8
 8000fd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fd8:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	4820      	ldr	r0, [pc, #128]	; (8001060 <HAL_SPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe0:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	9303      	str	r3, [sp, #12]
 8000fe4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	e9cd 6606 	strd	r6, r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f002 fb3b 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff2:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff4:	a904      	add	r1, sp, #16
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <HAL_SPI_MspInit+0x118>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ffa:	e9cd 6707 	strd	r6, r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	e9cd 8605 	strd	r8, r6, [sp, #20]
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001002:	4f19      	ldr	r7, [pc, #100]	; (8001068 <HAL_SPI_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	f002 fb30 	bl	8003668 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001008:	2126      	movs	r1, #38	; 0x26
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100a:	2240      	movs	r2, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800100c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001010:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	60e6      	str	r6, [r4, #12]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001014:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001016:	60a2      	str	r2, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101a:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	e9c4 6607 	strd	r6, r6, [r4, #28]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001022:	e9c4 7100 	strd	r7, r1, [r4]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001026:	f000 fd27 	bl	8001a78 <HAL_DMA_Init>
 800102a:	b978      	cbnz	r0, 800104c <HAL_SPI_MspInit+0x100>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2105      	movs	r1, #5
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001030:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001032:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001034:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001036:	f000 fb59 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800103a:	2023      	movs	r0, #35	; 0x23
 800103c:	f000 fb8c 	bl	8001758 <HAL_NVIC_EnableIRQ>
}
 8001040:	b038      	add	sp, #224	; 0xe0
 8001042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8001046:	f7ff fe65 	bl	8000d14 <Error_Handler>
 800104a:	e79d      	b.n	8000f88 <HAL_SPI_MspInit+0x3c>
      Error_Handler();
 800104c:	f7ff fe62 	bl	8000d14 <Error_Handler>
 8001050:	e7ec      	b.n	800102c <HAL_SPI_MspInit+0xe0>
 8001052:	bf00      	nop
 8001054:	40013000 	.word	0x40013000
 8001058:	58024400 	.word	0x58024400
 800105c:	24014528 	.word	0x24014528
 8001060:	58020000 	.word	0x58020000
 8001064:	58020c00 	.word	0x58020c00
 8001068:	40020010 	.word	0x40020010

0800106c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	210f      	movs	r1, #15
 8001072:	f06f 0001 	mvn.w	r0, #1
{
 8001076:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 800107c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	f044 0402 	orr.w	r4, r4, #2
 8001082:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 8001086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	b003      	add	sp, #12
 8001094:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001098:	f000 bb28 	b.w	80016ec <HAL_NVIC_SetPriority>
 800109c:	58024400 	.word	0x58024400

080010a0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a0:	280f      	cmp	r0, #15
 80010a2:	d901      	bls.n	80010a8 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80010a4:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80010a6:	4770      	bx	lr
{
 80010a8:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010aa:	4601      	mov	r1, r0
{
 80010ac:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	4604      	mov	r4, r0
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f000 fb1a 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010b8:	2036      	movs	r0, #54	; 0x36
 80010ba:	f000 fb4d 	bl	8001758 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c2:	4669      	mov	r1, sp
 80010c4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80010c6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80010cc:	f042 0210 	orr.w	r2, r2, #16
 80010d0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80010d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	f003 ffba 	bl	8005058 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010e4:	9b07      	ldr	r3, [sp, #28]
 80010e6:	b1c3      	cbz	r3, 800111a <HAL_InitTick+0x7a>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010e8:	f003 ff92 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80010ec:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
 80010f0:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 80010f2:	4c11      	ldr	r4, [pc, #68]	; (8001138 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010f4:	f240 35e7 	movw	r5, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f8:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 80010fc:	490f      	ldr	r1, [pc, #60]	; (800113c <HAL_InitTick+0x9c>)
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010fe:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001100:	60e5      	str	r5, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001102:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8001104:	6021      	str	r1, [r4, #0]
  htim6.Init.ClockDivision = 0;
 8001106:	6122      	str	r2, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001108:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800110a:	e9c4 3201 	strd	r3, r2, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800110e:	f005 fbcf 	bl	80068b0 <HAL_TIM_Base_Init>
 8001112:	b128      	cbz	r0, 8001120 <HAL_InitTick+0x80>
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	b00b      	add	sp, #44	; 0x2c
 8001118:	bd30      	pop	{r4, r5, pc}
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800111a:	f003 ff79 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 800111e:	e7e6      	b.n	80010ee <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001120:	4620      	mov	r0, r4
 8001122:	f005 fa49 	bl	80065b8 <HAL_TIM_Base_Start_IT>
}
 8001126:	b00b      	add	sp, #44	; 0x2c
 8001128:	bd30      	pop	{r4, r5, pc}
 800112a:	bf00      	nop
 800112c:	58024400 	.word	0x58024400
 8001130:	2400000c 	.word	0x2400000c
 8001134:	431bde83 	.word	0x431bde83
 8001138:	240145a0 	.word	0x240145a0
 800113c:	40001000 	.word	0x40001000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	e7fe      	b.n	8001140 <NMI_Handler>
 8001142:	bf00      	nop

08001144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001144:	e7fe      	b.n	8001144 <HardFault_Handler>
 8001146:	bf00      	nop

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler>
 800114a:	bf00      	nop

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	e7fe      	b.n	800114c <BusFault_Handler>
 800114e:	bf00      	nop

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler>
 8001152:	bf00      	nop

08001154 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <DMA1_Stream0_IRQHandler+0x8>)
 800115a:	f000 bf9d 	b.w	8002098 <HAL_DMA_IRQHandler>
 800115e:	bf00      	nop
 8001160:	24014528 	.word	0x24014528

08001164 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001164:	4801      	ldr	r0, [pc, #4]	; (800116c <SPI1_IRQHandler+0x8>)
 8001166:	f005 b8cb 	b.w	8006300 <HAL_SPI_IRQHandler>
 800116a:	bf00      	nop
 800116c:	240144a0 	.word	0x240144a0

08001170 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001170:	4801      	ldr	r0, [pc, #4]	; (8001178 <TIM6_DAC_IRQHandler+0x8>)
 8001172:	f005 ba7f 	b.w	8006674 <HAL_TIM_IRQHandler>
 8001176:	bf00      	nop
 8001178:	240145a0 	.word	0x240145a0

0800117c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800117c:	4801      	ldr	r0, [pc, #4]	; (8001184 <OTG_FS_IRQHandler+0x8>)
 800117e:	f002 bd01 	b.w	8003b84 <HAL_PCD_IRQHandler>
 8001182:	bf00      	nop
 8001184:	2401d4b0 	.word	0x2401d4b0

08001188 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	1e16      	subs	r6, r2, #0
 800118c:	dd07      	ble.n	800119e <_read+0x16>
 800118e:	460c      	mov	r4, r1
 8001190:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001192:	f3af 8000 	nop.w
 8001196:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	42a5      	cmp	r5, r4
 800119c:	d1f9      	bne.n	8001192 <_read+0xa>
	}

return len;
}
 800119e:	4630      	mov	r0, r6
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
 80011a2:	bf00      	nop

080011a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	1e16      	subs	r6, r2, #0
 80011a8:	dd07      	ble.n	80011ba <_write+0x16>
 80011aa:	460c      	mov	r4, r1
 80011ac:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80011ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80011b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	42a5      	cmp	r5, r4
 80011b8:	d1f9      	bne.n	80011ae <_write+0xa>
	}
	return len;
}
 80011ba:	4630      	mov	r0, r6
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	bf00      	nop

080011c0 <_close>:

int _close(int file)
{
	return -1;
}
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80011cc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80011ce:	604b      	str	r3, [r1, #4]
}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80011d4:	2001      	movs	r0, #1
 80011d6:	4770      	bx	lr

080011d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80011d8:	2000      	movs	r0, #0
 80011da:	4770      	bx	lr

080011dc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	490d      	ldr	r1, [pc, #52]	; (8001214 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80011e0:	680b      	ldr	r3, [r1, #0]
{
 80011e2:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4c0d      	ldr	r4, [pc, #52]	; (800121c <_sbrk+0x40>)
 80011e6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80011e8:	b183      	cbz	r3, 800120c <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4418      	add	r0, r3
 80011ec:	4290      	cmp	r0, r2
 80011ee:	d804      	bhi.n	80011fa <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011f0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011f8:	4770      	bx	lr
    errno = ENOMEM;
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <_sbrk+0x44>)
 80011fc:	210c      	movs	r1, #12
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001206:	6011      	str	r1, [r2, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800120c:	4c05      	ldr	r4, [pc, #20]	; (8001224 <_sbrk+0x48>)
 800120e:	4623      	mov	r3, r4
 8001210:	600c      	str	r4, [r1, #0]
 8001212:	e7ea      	b.n	80011ea <_sbrk+0xe>
 8001214:	24000228 	.word	0x24000228
 8001218:	20020000 	.word	0x20020000
 800121c:	00001000 	.word	0x00001000
 8001220:	2401bfd8 	.word	0x2401bfd8
 8001224:	2401d8b8 	.word	0x2401d8b8

08001228 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001228:	492a      	ldr	r1, [pc, #168]	; (80012d4 <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800122a:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800122c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8001234:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	2b06      	cmp	r3, #6
 8001242:	d805      	bhi.n	8001250 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f023 030f 	bic.w	r3, r3, #15
 800124a:	f043 0307 	orr.w	r3, r3, #7
 800124e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001252:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 8001256:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 800125a:	f041 0101 	orr.w	r1, r1, #1
 800125e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001260:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001268:	6803      	ldr	r3, [r0, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	2b07      	cmp	r3, #7
 8001270:	d905      	bls.n	800127e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001272:	6803      	ldr	r3, [r0, #0]
 8001274:	f023 030f 	bic.w	r3, r3, #15
 8001278:	f043 0307 	orr.w	r3, r3, #7
 800127c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <SystemInit+0xb4>)
 8001280:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001282:	4918      	ldr	r1, [pc, #96]	; (80012e4 <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 8001284:	4c18      	ldr	r4, [pc, #96]	; (80012e8 <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001286:	4819      	ldr	r0, [pc, #100]	; (80012ec <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8001288:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800128a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800128c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800128e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001290:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001292:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001296:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800129a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800129c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800129e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012a0:	4c13      	ldr	r4, [pc, #76]	; (80012f0 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80012a2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012a6:	4913      	ldr	r1, [pc, #76]	; (80012f4 <SystemInit+0xcc>)
  RCC->CR &= 0xFFFBFFFFU;
 80012a8:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80012aa:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	4019      	ands	r1, r3
 80012b0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80012b4:	d202      	bcs.n	80012bc <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <SystemInit+0xd0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012bc:	490f      	ldr	r1, [pc, #60]	; (80012fc <SystemInit+0xd4>)
 80012be:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SystemInit+0xac>)
 80012c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012c8:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80012ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ce:	609a      	str	r2, [r3, #8]
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	52002000 	.word	0x52002000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012e4:	01010280 	.word	0x01010280
 80012e8:	02020200 	.word	0x02020200
 80012ec:	01ff0000 	.word	0x01ff0000
 80012f0:	5c001000 	.word	0x5c001000
 80012f4:	ffff0000 	.word	0xffff0000
 80012f8:	51008108 	.word	0x51008108
 80012fc:	52004000 	.word	0x52004000

08001300 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001300:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_USART3_UART_Init+0x64>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001304:	2200      	movs	r2, #0
  huart3.Init.BaudRate = 115200;
 8001306:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Instance = USART3;
 800130a:	4d17      	ldr	r5, [pc, #92]	; (8001368 <MX_USART3_UART_Init+0x68>)
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800130c:	210c      	movs	r1, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130e:	4618      	mov	r0, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 8001310:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001312:	6159      	str	r1, [r3, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8001316:	e9c3 5400 	strd	r5, r4, [r3]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800131a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001322:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001326:	f005 fe7b 	bl	8007020 <HAL_UART_Init>
 800132a:	b9c0      	cbnz	r0, 800135e <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_USART3_UART_Init+0x64>)
 8001330:	f005 fee6 	bl	8007100 <HAL_UARTEx_SetTxFifoThreshold>
 8001334:	b980      	cbnz	r0, 8001358 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <MX_USART3_UART_Init+0x64>)
 800133a:	f005 ff0d 	bl	8007158 <HAL_UARTEx_SetRxFifoThreshold>
 800133e:	b940      	cbnz	r0, 8001352 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <MX_USART3_UART_Init+0x64>)
 8001342:	f005 febf 	bl	80070c4 <HAL_UARTEx_DisableFifoMode>
 8001346:	b900      	cbnz	r0, 800134a <MX_USART3_UART_Init+0x4a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001348:	bd38      	pop	{r3, r4, r5, pc}
 800134a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800134e:	f7ff bce1 	b.w	8000d14 <Error_Handler>
    Error_Handler();
 8001352:	f7ff fcdf 	bl	8000d14 <Error_Handler>
 8001356:	e7f3      	b.n	8001340 <MX_USART3_UART_Init+0x40>
    Error_Handler();
 8001358:	f7ff fcdc 	bl	8000d14 <Error_Handler>
 800135c:	e7eb      	b.n	8001336 <MX_USART3_UART_Init+0x36>
    Error_Handler();
 800135e:	f7ff fcd9 	bl	8000d14 <Error_Handler>
 8001362:	e7e3      	b.n	800132c <MX_USART3_UART_Init+0x2c>
 8001364:	240145ec 	.word	0x240145ec
 8001368:	40004800 	.word	0x40004800

0800136c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800136c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	2300      	movs	r3, #0
{
 8001370:	b0b6      	sub	sp, #216	; 0xd8
 8001372:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	22bc      	movs	r2, #188	; 0xbc
 8001376:	4619      	mov	r1, r3
 8001378:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	9306      	str	r3, [sp, #24]
 800137c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001380:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f012 faa2 	bl	80138cc <memset>
  if(uartHandle->Instance==USART3)
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_UART_MspInit+0x8c>)
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_UART_MspInit+0x28>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001390:	b036      	add	sp, #216	; 0xd8
 8001392:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001394:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001398:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f003 ff81 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	bb40      	cbnz	r0, 80013f2 <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013a2:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 80013aa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b0:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013b6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80013ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80013be:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013ca:	f042 0208 	orr.w	r2, r2, #8
 80013ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d6:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	f002 f93d 	bl	8003668 <HAL_GPIO_Init>
}
 80013ee:	b036      	add	sp, #216	; 0xd8
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80013f2:	f7ff fc8f 	bl	8000d14 <Error_Handler>
 80013f6:	e7d3      	b.n	80013a0 <HAL_UART_MspInit+0x34>
 80013f8:	40004800 	.word	0x40004800
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020c00 	.word	0x58020c00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001408:	f7ff ff0e 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f012 fa05 	bl	8013840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fbcf 	bl	8000bd8 <main>
  bx  lr
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001444:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 8001448:	080169ac 	.word	0x080169ac
  ldr r2, =_sbss
 800144c:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 8001450:	2401d8b8 	.word	0x2401d8b8

08001454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC3_IRQHandler>
	...

08001458 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001458:	b188      	cbz	r0, 800147e <LAN8742_RegisterBusIO+0x26>
 800145a:	68ca      	ldr	r2, [r1, #12]
 800145c:	b17a      	cbz	r2, 800147e <LAN8742_RegisterBusIO+0x26>
{
 800145e:	b470      	push	{r4, r5, r6}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001460:	688c      	ldr	r4, [r1, #8]
 8001462:	b17c      	cbz	r4, 8001484 <LAN8742_RegisterBusIO+0x2c>
 8001464:	690d      	ldr	r5, [r1, #16]
 8001466:	b16d      	cbz	r5, 8001484 <LAN8742_RegisterBusIO+0x2c>
 8001468:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 800146a:	680e      	ldr	r6, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 800146c:	2000      	movs	r0, #0
  pObj->IO.DeInit = ioctx->DeInit;
 800146e:	6849      	ldr	r1, [r1, #4]
  pObj->IO.GetTick = ioctx->GetTick;
 8001470:	619d      	str	r5, [r3, #24]
  pObj->IO.DeInit = ioctx->DeInit;
 8001472:	e9c3 6102 	strd	r6, r1, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001476:	e9c3 4204 	strd	r4, r2, [r3, #16]
}
 800147a:	bc70      	pop	{r4, r5, r6}
 800147c:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 800147e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001482:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	e7f7      	b.n	800147a <LAN8742_RegisterBusIO+0x22>
 800148a:	bf00      	nop

0800148c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800148c:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800148e:	2300      	movs	r3, #0
 {
 8001490:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8001492:	6845      	ldr	r5, [r0, #4]
 {
 8001494:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001496:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001498:	b175      	cbz	r5, 80014b8 <LAN8742_Init+0x2c>
 800149a:	6983      	ldr	r3, [r0, #24]
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 800149c:	4798      	blx	r3
 800149e:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014a0:	69a3      	ldr	r3, [r4, #24]
 80014a2:	4798      	blx	r3
 80014a4:	1b40      	subs	r0, r0, r5
 80014a6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80014aa:	d9f9      	bls.n	80014a0 <LAN8742_Init+0x14>
     {
     }
     pObj->Is_Initialized = 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	2600      	movs	r6, #0
 80014b0:	6063      	str	r3, [r4, #4]
   }
   
   return status;
 }
 80014b2:	4630      	mov	r0, r6
 80014b4:	b002      	add	sp, #8
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
     if(pObj->IO.Init != 0)
 80014b8:	6883      	ldr	r3, [r0, #8]
 80014ba:	b103      	cbz	r3, 80014be <LAN8742_Init+0x32>
       pObj->IO.Init();
 80014bc:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014be:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80014c0:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014c2:	6023      	str	r3, [r4, #0]
 80014c4:	e007      	b.n	80014d6 <LAN8742_Init+0x4a>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014c6:	9801      	ldr	r0, [sp, #4]
 80014c8:	f000 001f 	and.w	r0, r0, #31
 80014cc:	42a8      	cmp	r0, r5
 80014ce:	d00c      	beq.n	80014ea <LAN8742_Init+0x5e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014d0:	3501      	adds	r5, #1
 80014d2:	2d20      	cmp	r5, #32
 80014d4:	d02f      	beq.n	8001536 <LAN8742_Init+0xaa>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014d6:	6963      	ldr	r3, [r4, #20]
 80014d8:	aa01      	add	r2, sp, #4
 80014da:	2112      	movs	r1, #18
 80014dc:	4628      	mov	r0, r5
 80014de:	4798      	blx	r3
 80014e0:	2800      	cmp	r0, #0
 80014e2:	daf0      	bge.n	80014c6 <LAN8742_Init+0x3a>
         status = LAN8742_STATUS_READ_ERROR;
 80014e4:	f06f 0604 	mvn.w	r6, #4
 80014e8:	e7f2      	b.n	80014d0 <LAN8742_Init+0x44>
         pObj->DevAddr = addr;
 80014ea:	6025      	str	r5, [r4, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80014ec:	6923      	ldr	r3, [r4, #16]
 80014ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f2:	2100      	movs	r1, #0
 80014f4:	4798      	blx	r3
 80014f6:	2800      	cmp	r0, #0
 80014f8:	db29      	blt.n	800154e <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80014fa:	6963      	ldr	r3, [r4, #20]
 80014fc:	aa01      	add	r2, sp, #4
 80014fe:	2100      	movs	r1, #0
 8001500:	6820      	ldr	r0, [r4, #0]
 8001502:	4798      	blx	r3
 8001504:	2800      	cmp	r0, #0
 8001506:	db1f      	blt.n	8001548 <LAN8742_Init+0xbc>
           tickstart = pObj->IO.GetTick();
 8001508:	69a3      	ldr	r3, [r4, #24]
 800150a:	4798      	blx	r3
 800150c:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800150e:	e004      	b.n	800151a <LAN8742_Init+0x8e>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001510:	6963      	ldr	r3, [r4, #20]
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	4798      	blx	r3
 8001516:	2800      	cmp	r0, #0
 8001518:	db16      	blt.n	8001548 <LAN8742_Init+0xbc>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	69a3      	ldr	r3, [r4, #24]
 800151e:	0412      	lsls	r2, r2, #16
 8001520:	d5bc      	bpl.n	800149c <LAN8742_Init+0x10>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001522:	4798      	blx	r3
 8001524:	1b40      	subs	r0, r0, r5
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001526:	aa01      	add	r2, sp, #4
 8001528:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800152a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800152e:	d9ef      	bls.n	8001510 <LAN8742_Init+0x84>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001530:	f06f 0601 	mvn.w	r6, #1
   return status;
 8001534:	e7bd      	b.n	80014b2 <LAN8742_Init+0x26>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001536:	6820      	ldr	r0, [r4, #0]
 8001538:	281f      	cmp	r0, #31
 800153a:	d802      	bhi.n	8001542 <LAN8742_Init+0xb6>
     if(status == LAN8742_STATUS_OK)
 800153c:	2e00      	cmp	r6, #0
 800153e:	d0d5      	beq.n	80014ec <LAN8742_Init+0x60>
 8001540:	e7b7      	b.n	80014b2 <LAN8742_Init+0x26>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001542:	f06f 0602 	mvn.w	r6, #2
 8001546:	e7b4      	b.n	80014b2 <LAN8742_Init+0x26>
           status = LAN8742_STATUS_READ_ERROR;
 8001548:	f06f 0604 	mvn.w	r6, #4
 800154c:	e7b1      	b.n	80014b2 <LAN8742_Init+0x26>
         status = LAN8742_STATUS_WRITE_ERROR;
 800154e:	f06f 0603 	mvn.w	r6, #3
 8001552:	e7ae      	b.n	80014b2 <LAN8742_Init+0x26>

08001554 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	b082      	sub	sp, #8
  uint32_t readval = 0;
 8001558:	2600      	movs	r6, #0
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800155a:	6943      	ldr	r3, [r0, #20]
{
 800155c:	4604      	mov	r4, r0
  uint32_t readval = 0;
 800155e:	ad02      	add	r5, sp, #8
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001560:	2101      	movs	r1, #1
 8001562:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8001564:	f845 6d04 	str.w	r6, [r5, #-4]!
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001568:	462a      	mov	r2, r5
 800156a:	4798      	blx	r3
 800156c:	42b0      	cmp	r0, r6
 800156e:	db40      	blt.n	80015f2 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001570:	6963      	ldr	r3, [r4, #20]
 8001572:	462a      	mov	r2, r5
 8001574:	2101      	movs	r1, #1
 8001576:	6820      	ldr	r0, [r4, #0]
 8001578:	4798      	blx	r3
 800157a:	2800      	cmp	r0, #0
 800157c:	db39      	blt.n	80015f2 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	075b      	lsls	r3, r3, #29
 8001582:	d530      	bpl.n	80015e6 <LAN8742_GetLinkState+0x92>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001584:	4631      	mov	r1, r6
 8001586:	6963      	ldr	r3, [r4, #20]
 8001588:	462a      	mov	r2, r5
 800158a:	6820      	ldr	r0, [r4, #0]
 800158c:	4798      	blx	r3
 800158e:	2800      	cmp	r0, #0
 8001590:	db2f      	blt.n	80015f2 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	04de      	lsls	r6, r3, #19
 8001596:	d51a      	bpl.n	80015ce <LAN8742_GetLinkState+0x7a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001598:	462a      	mov	r2, r5
 800159a:	6963      	ldr	r3, [r4, #20]
 800159c:	6820      	ldr	r0, [r4, #0]
 800159e:	211f      	movs	r1, #31
 80015a0:	4798      	blx	r3
 80015a2:	2800      	cmp	r0, #0
 80015a4:	db25      	blt.n	80015f2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	04da      	lsls	r2, r3, #19
 80015aa:	d50a      	bpl.n	80015c2 <LAN8742_GetLinkState+0x6e>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015ac:	f003 031c 	and.w	r3, r3, #28
 80015b0:	2b18      	cmp	r3, #24
 80015b2:	d009      	beq.n	80015c8 <LAN8742_GetLinkState+0x74>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d019      	beq.n	80015ec <LAN8742_GetLinkState+0x98>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015b8:	2b14      	cmp	r3, #20
 80015ba:	d011      	beq.n	80015e0 <LAN8742_GetLinkState+0x8c>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015bc:	2005      	movs	r0, #5
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 80015be:	b002      	add	sp, #8
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015c2:	2006      	movs	r0, #6
}
 80015c4:	b002      	add	sp, #8
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015c8:	2002      	movs	r0, #2
}
 80015ca:	b002      	add	sp, #8
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80015ce:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 80015d2:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 80015d6:	d0f7      	beq.n	80015c8 <LAN8742_GetLinkState+0x74>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80015d8:	0498      	lsls	r0, r3, #18
 80015da:	d407      	bmi.n	80015ec <LAN8742_GetLinkState+0x98>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80015dc:	05d9      	lsls	r1, r3, #23
 80015de:	d5ed      	bpl.n	80015bc <LAN8742_GetLinkState+0x68>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015e0:	2004      	movs	r0, #4
}
 80015e2:	b002      	add	sp, #8
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 80015e6:	2001      	movs	r0, #1
}
 80015e8:	b002      	add	sp, #8
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015ec:	2003      	movs	r0, #3
}
 80015ee:	b002      	add	sp, #8
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
    return LAN8742_STATUS_READ_ERROR;
 80015f2:	f06f 0004 	mvn.w	r0, #4
 80015f6:	e7e2      	b.n	80015be <LAN8742_GetLinkState+0x6a>

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b530      	push	{r4, r5, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fa:	2003      	movs	r0, #3
{
 80015fc:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fe:	f000 f861 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001602:	4c12      	ldr	r4, [pc, #72]	; (800164c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001604:	f003 fb2c 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_Init+0x58>)
 800160a:	4912      	ldr	r1, [pc, #72]	; (8001654 <HAL_Init+0x5c>)
 800160c:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800160e:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001610:	f3c3 2303 	ubfx	r3, r3, #8, #4
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001614:	4d10      	ldr	r5, [pc, #64]	; (8001658 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001616:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800161a:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800161c:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800161e:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001622:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001626:	fa20 f303 	lsr.w	r3, r0, r3
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162a:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800162c:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8001630:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001632:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001634:	f7ff fd34 	bl	80010a0 <HAL_InitTick>
 8001638:	b110      	cbz	r0, 8001640 <HAL_Init+0x48>
  {
    return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800163c:	b003      	add	sp, #12
 800163e:	bd30      	pop	{r4, r5, pc}
 8001640:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8001642:	f7ff fd13 	bl	800106c <HAL_MspInit>
  return HAL_OK;
 8001646:	9801      	ldr	r0, [sp, #4]
}
 8001648:	b003      	add	sp, #12
 800164a:	bd30      	pop	{r4, r5, pc}
 800164c:	24000004 	.word	0x24000004
 8001650:	58024400 	.word	0x58024400
 8001654:	080147b4 	.word	0x080147b4
 8001658:	24000000 	.word	0x24000000

0800165c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x10>)
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <HAL_IncTick+0x14>)
 8001660:	6811      	ldr	r1, [r2, #0]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	440b      	add	r3, r1
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2401467c 	.word	0x2401467c
 8001670:	24000008 	.word	0x24000008

08001674 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <HAL_GetTick+0x8>)
 8001676:	6818      	ldr	r0, [r3, #0]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2401467c 	.word	0x2401467c

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fff6 	bl	8001674 <HAL_GetTick>
 8001688:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	1c63      	adds	r3, r4, #1
 800168c:	d002      	beq.n	8001694 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_Delay+0x20>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	1b40      	subs	r0, r0, r5
 800169a:	42a0      	cmp	r0, r4
 800169c:	d3fa      	bcc.n	8001694 <HAL_Delay+0x14>
  {
  }
}
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	24000008 	.word	0x24000008

080016a4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80016a4:	4b01      	ldr	r3, [pc, #4]	; (80016ac <HAL_GetREVID+0x8>)
 80016a6:	6818      	ldr	r0, [r3, #0]
}
 80016a8:	0c00      	lsrs	r0, r0, #16
 80016aa:	4770      	bx	lr
 80016ac:	5c001000 	.word	0x5c001000

080016b0 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80016b2:	6853      	ldr	r3, [r2, #4]
 80016b4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80016b8:	4318      	orrs	r0, r3
 80016ba:	6050      	str	r0, [r2, #4]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	58000400 	.word	0x58000400

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4907      	ldr	r1, [pc, #28]	; (80016e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c6:	0200      	lsls	r0, r0, #8
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ca:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80016d6:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016dc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016de:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80016e0:	60c8      	str	r0, [r1, #12]
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	05fa0000 	.word	0x05fa0000

080016ec <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_NVIC_SetPriority+0x60>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f6:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	2d04      	cmp	r5, #4
 80016fe:	bf28      	it	cs
 8001700:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	2c06      	cmp	r4, #6
 8001704:	d918      	bls.n	8001738 <HAL_NVIC_SetPriority+0x4c>
 8001706:	3b03      	subs	r3, #3
 8001708:	f04f 34ff 	mov.w	r4, #4294967295
 800170c:	409c      	lsls	r4, r3
 800170e:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001712:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001716:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	fa02 f205 	lsl.w	r2, r2, r5
 800171c:	ea21 0102 	bic.w	r1, r1, r2
 8001720:	fa01 f203 	lsl.w	r2, r1, r3
 8001724:	ea42 0204 	orr.w	r2, r2, r4
 8001728:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800172c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800172e:	db06      	blt.n	800173e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HAL_NVIC_SetPriority+0x64>)
 8001732:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001734:	bc30      	pop	{r4, r5}
 8001736:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001738:	2400      	movs	r4, #0
 800173a:	4623      	mov	r3, r4
 800173c:	e7e9      	b.n	8001712 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	f000 000f 	and.w	r0, r0, #15
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_NVIC_SetPriority+0x68>)
 8001744:	541a      	strb	r2, [r3, r0]
 8001746:	bc30      	pop	{r4, r5}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00
 8001750:	e000e400 	.word	0xe000e400
 8001754:	e000ed14 	.word	0xe000ed14

08001758 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001758:	2800      	cmp	r0, #0
 800175a:	db07      	blt.n	800176c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175c:	2301      	movs	r3, #1
 800175e:	f000 011f 	and.w	r1, r0, #31
 8001762:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_NVIC_EnableIRQ+0x18>)
 8001764:	0940      	lsrs	r0, r0, #5
 8001766:	408b      	lsls	r3, r1
 8001768:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001774:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800177a:	2000      	movs	r0, #0
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800177e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8001786:	6048      	str	r0, [r1, #4]
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	e000ed90 	.word	0xe000ed90

08001794 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001796:	f040 0001 	orr.w	r0, r0, #1
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MPU_Enable+0x20>)
 800179c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800179e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017aa:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	e000ed90 	.word	0xe000ed90

080017b8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_MPU_ConfigRegion+0x4c>)
 80017ba:	7843      	ldrb	r3, [r0, #1]
 80017bc:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 80017be:	7801      	ldrb	r1, [r0, #0]
 80017c0:	b911      	cbnz	r1, 80017c8 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80017c2:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80017c4:	6111      	str	r1, [r2, #16]
 80017c6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80017c8:	6843      	ldr	r3, [r0, #4]
{
 80017ca:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 80017cc:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017ce:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d0:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017d2:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017d4:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017d6:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d8:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017dc:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017de:	430b      	orrs	r3, r1
 80017e0:	7a01      	ldrb	r1, [r0, #8]
 80017e2:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017e6:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ec:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ee:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80017f2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80017f6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80017fa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 80017fe:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001800:	6113      	str	r3, [r2, #16]
}
 8001802:	4770      	bx	lr
 8001804:	e000ed90 	.word	0xe000ed90

08001808 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001808:	6802      	ldr	r2, [r0, #0]
{
 800180a:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800180c:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <DMA_CalcBaseAndBitshift+0xd8>)
 800180e:	4835      	ldr	r0, [pc, #212]	; (80018e4 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8001810:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001812:	4c35      	ldr	r4, [pc, #212]	; (80018e8 <DMA_CalcBaseAndBitshift+0xe0>)
 8001814:	4d35      	ldr	r5, [pc, #212]	; (80018ec <DMA_CalcBaseAndBitshift+0xe4>)
 8001816:	42a2      	cmp	r2, r4
 8001818:	bf18      	it	ne
 800181a:	429a      	cmpne	r2, r3
 800181c:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001820:	bf0c      	ite	eq
 8001822:	2301      	moveq	r3, #1
 8001824:	2300      	movne	r3, #0
 8001826:	4282      	cmp	r2, r0
 8001828:	bf08      	it	eq
 800182a:	f043 0301 	orreq.w	r3, r3, #1
 800182e:	3048      	adds	r0, #72	; 0x48
 8001830:	42aa      	cmp	r2, r5
 8001832:	bf08      	it	eq
 8001834:	f043 0301 	orreq.w	r3, r3, #1
 8001838:	3548      	adds	r5, #72	; 0x48
 800183a:	42a2      	cmp	r2, r4
 800183c:	bf08      	it	eq
 800183e:	f043 0301 	orreq.w	r3, r3, #1
 8001842:	3448      	adds	r4, #72	; 0x48
 8001844:	4282      	cmp	r2, r0
 8001846:	bf08      	it	eq
 8001848:	f043 0301 	orreq.w	r3, r3, #1
 800184c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001850:	42aa      	cmp	r2, r5
 8001852:	bf08      	it	eq
 8001854:	f043 0301 	orreq.w	r3, r3, #1
 8001858:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800185c:	42a2      	cmp	r2, r4
 800185e:	bf08      	it	eq
 8001860:	f043 0301 	orreq.w	r3, r3, #1
 8001864:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001868:	4282      	cmp	r2, r0
 800186a:	bf08      	it	eq
 800186c:	f043 0301 	orreq.w	r3, r3, #1
 8001870:	3048      	adds	r0, #72	; 0x48
 8001872:	42aa      	cmp	r2, r5
 8001874:	bf08      	it	eq
 8001876:	f043 0301 	orreq.w	r3, r3, #1
 800187a:	3548      	adds	r5, #72	; 0x48
 800187c:	42a2      	cmp	r2, r4
 800187e:	bf08      	it	eq
 8001880:	f043 0301 	orreq.w	r3, r3, #1
 8001884:	3448      	adds	r4, #72	; 0x48
 8001886:	4282      	cmp	r2, r0
 8001888:	bf08      	it	eq
 800188a:	f043 0301 	orreq.w	r3, r3, #1
 800188e:	3048      	adds	r0, #72	; 0x48
 8001890:	42aa      	cmp	r2, r5
 8001892:	bf08      	it	eq
 8001894:	f043 0301 	orreq.w	r3, r3, #1
 8001898:	42a2      	cmp	r2, r4
 800189a:	bf08      	it	eq
 800189c:	f043 0301 	orreq.w	r3, r3, #1
 80018a0:	4282      	cmp	r2, r0
 80018a2:	bf08      	it	eq
 80018a4:	f043 0301 	orreq.w	r3, r3, #1
 80018a8:	b913      	cbnz	r3, 80018b0 <DMA_CalcBaseAndBitshift+0xa8>
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <DMA_CalcBaseAndBitshift+0xe8>)
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d112      	bne.n	80018d6 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80018b0:	b2d3      	uxtb	r3, r2
 80018b2:	4d10      	ldr	r5, [pc, #64]	; (80018f4 <DMA_CalcBaseAndBitshift+0xec>)
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <DMA_CalcBaseAndBitshift+0xf0>)
 80018b6:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80018b8:	4c10      	ldr	r4, [pc, #64]	; (80018fc <DMA_CalcBaseAndBitshift+0xf4>)
 80018ba:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80018bc:	fba5 5303 	umull	r5, r3, r5, r3
 80018c0:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80018c2:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 80018c6:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80018c8:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80018ca:	bf88      	it	hi
 80018cc:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80018ce:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80018d0:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80018d2:	bc30      	pop	{r4, r5}
 80018d4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80018d6:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80018da:	6588      	str	r0, [r1, #88]	; 0x58
 80018dc:	e7f9      	b.n	80018d2 <DMA_CalcBaseAndBitshift+0xca>
 80018de:	bf00      	nop
 80018e0:	40020010 	.word	0x40020010
 80018e4:	40020040 	.word	0x40020040
 80018e8:	40020028 	.word	0x40020028
 80018ec:	40020058 	.word	0x40020058
 80018f0:	400204b8 	.word	0x400204b8
 80018f4:	aaaaaaab 	.word	0xaaaaaaab
 80018f8:	fffffc00 	.word	0xfffffc00
 80018fc:	080147c4 	.word	0x080147c4

08001900 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001900:	6801      	ldr	r1, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001902:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001904:	4a29      	ldr	r2, [pc, #164]	; (80019ac <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001906:	4291      	cmp	r1, r2
 8001908:	bf18      	it	ne
 800190a:	4299      	cmpne	r1, r3
 800190c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
{
 8001916:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001918:	4d25      	ldr	r5, [pc, #148]	; (80019b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800191a:	4c26      	ldr	r4, [pc, #152]	; (80019b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800191c:	42a9      	cmp	r1, r5
 800191e:	bf08      	it	eq
 8001920:	f043 0301 	orreq.w	r3, r3, #1
 8001924:	353c      	adds	r5, #60	; 0x3c
 8001926:	42a1      	cmp	r1, r4
 8001928:	bf08      	it	eq
 800192a:	f043 0301 	orreq.w	r3, r3, #1
 800192e:	343c      	adds	r4, #60	; 0x3c
 8001930:	4291      	cmp	r1, r2
 8001932:	bf08      	it	eq
 8001934:	f043 0301 	orreq.w	r3, r3, #1
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	42a9      	cmp	r1, r5
 800193c:	bf08      	it	eq
 800193e:	f043 0301 	orreq.w	r3, r3, #1
 8001942:	42a1      	cmp	r1, r4
 8001944:	bf08      	it	eq
 8001946:	f043 0301 	orreq.w	r3, r3, #1
 800194a:	b913      	cbnz	r3, 8001952 <DMA_CalcDMAMUXChannelBaseAndMask+0x52>
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800194e:	4299      	cmp	r1, r3
 8001950:	d113      	bne.n	800197a <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001952:	f1a2 0308 	sub.w	r3, r2, #8
 8001956:	4a19      	ldr	r2, [pc, #100]	; (80019bc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001958:	4919      	ldr	r1, [pc, #100]	; (80019c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800195a:	2401      	movs	r4, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001962:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001964:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001966:	4419      	add	r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001968:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800196c:	0089      	lsls	r1, r1, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800196e:	fa04 f303 	lsl.w	r3, r4, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001972:	6601      	str	r1, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001974:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8001976:	bc30      	pop	{r4, r5}
 8001978:	4770      	bx	lr
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800197c:	3a10      	subs	r2, #16
 800197e:	4c13      	ldr	r4, [pc, #76]	; (80019cc <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001980:	440b      	add	r3, r1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001982:	fba4 4202 	umull	r4, r2, r4, r2
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001986:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001988:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800198c:	d800      	bhi.n	8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 800198e:	3208      	adds	r2, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001992:	f002 051f 	and.w	r5, r2, #31
 8001996:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001998:	4c0e      	ldr	r4, [pc, #56]	; (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800199a:	4413      	add	r3, r2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800199c:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800199e:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80019a0:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80019a2:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80019a4:	6603      	str	r3, [r0, #96]	; 0x60
}
 80019a6:	e7e6      	b.n	8001976 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
 80019a8:	58025408 	.word	0x58025408
 80019ac:	5802541c 	.word	0x5802541c
 80019b0:	58025430 	.word	0x58025430
 80019b4:	58025444 	.word	0x58025444
 80019b8:	58025494 	.word	0x58025494
 80019bc:	cccccccd 	.word	0xcccccccd
 80019c0:	16009600 	.word	0x16009600
 80019c4:	58025880 	.word	0x58025880
 80019c8:	bffdfbf0 	.word	0xbffdfbf0
 80019cc:	aaaaaaab 	.word	0xaaaaaaab
 80019d0:	10008200 	.word	0x10008200
 80019d4:	40020880 	.word	0x40020880

080019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019d8:	b470      	push	{r4, r5, r6}
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019da:	7904      	ldrb	r4, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80019dc:	1e61      	subs	r1, r4, #1
 80019de:	2907      	cmp	r1, #7
 80019e0:	d830      	bhi.n	8001a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019e2:	6802      	ldr	r2, [r0, #0]
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x80>)
 80019e6:	4e1d      	ldr	r6, [pc, #116]	; (8001a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 80019e8:	4d1d      	ldr	r5, [pc, #116]	; (8001a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 80019ea:	42b2      	cmp	r2, r6
 80019ec:	bf18      	it	ne
 80019ee:	429a      	cmpne	r2, r3
 80019f0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	42aa      	cmp	r2, r5
 80019fc:	bf08      	it	eq
 80019fe:	f043 0301 	orreq.w	r3, r3, #1
 8001a02:	3528      	adds	r5, #40	; 0x28
 8001a04:	42b2      	cmp	r2, r6
 8001a06:	bf08      	it	eq
 8001a08:	f043 0301 	orreq.w	r3, r3, #1
 8001a0c:	3628      	adds	r6, #40	; 0x28
 8001a0e:	42aa      	cmp	r2, r5
 8001a10:	bf08      	it	eq
 8001a12:	f043 0301 	orreq.w	r3, r3, #1
 8001a16:	3528      	adds	r5, #40	; 0x28
 8001a18:	42b2      	cmp	r2, r6
 8001a1a:	bf08      	it	eq
 8001a1c:	f043 0301 	orreq.w	r3, r3, #1
 8001a20:	42aa      	cmp	r2, r5
 8001a22:	bf08      	it	eq
 8001a24:	f043 0301 	orreq.w	r3, r3, #1
 8001a28:	b913      	cbnz	r3, 8001a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x58>
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d10b      	bne.n	8001a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a34:	4423      	add	r3, r4
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001a36:	6702      	str	r2, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	fa03 f101 	lsl.w	r1, r3, r1
 8001a42:	6741      	str	r1, [r0, #116]	; 0x74
  }
}
 8001a44:	bc70      	pop	{r4, r5, r6}
 8001a46:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x9c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a4c:	4423      	add	r3, r4
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a4e:	6702      	str	r2, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001a54:	e7f2      	b.n	8001a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>
 8001a56:	bf00      	nop
 8001a58:	58025408 	.word	0x58025408
 8001a5c:	5802541c 	.word	0x5802541c
 8001a60:	58025430 	.word	0x58025430
 8001a64:	58025494 	.word	0x58025494
 8001a68:	1600963f 	.word	0x1600963f
 8001a6c:	58025940 	.word	0x58025940
 8001a70:	1000823f 	.word	0x1000823f
 8001a74:	40020940 	.word	0x40020940

08001a78 <HAL_DMA_Init>:
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff fdfa 	bl	8001674 <HAL_GetTick>
  if(hdma == NULL)
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	f000 8134 	beq.w	8001cee <HAL_DMA_Init+0x276>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	4605      	mov	r5, r0
 8001a8a:	4a9a      	ldr	r2, [pc, #616]	; (8001cf4 <HAL_DMA_Init+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d049      	beq.n	8001b24 <HAL_DMA_Init+0xac>
 8001a90:	3218      	adds	r2, #24
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d046      	beq.n	8001b24 <HAL_DMA_Init+0xac>
 8001a96:	3218      	adds	r2, #24
 8001a98:	4897      	ldr	r0, [pc, #604]	; (8001cf8 <HAL_DMA_Init+0x280>)
 8001a9a:	4998      	ldr	r1, [pc, #608]	; (8001cfc <HAL_DMA_Init+0x284>)
 8001a9c:	4283      	cmp	r3, r0
 8001a9e:	bf18      	it	ne
 8001aa0:	4293      	cmpne	r3, r2
 8001aa2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2201      	moveq	r2, #1
 8001aaa:	2200      	movne	r2, #0
 8001aac:	428b      	cmp	r3, r1
 8001aae:	bf08      	it	eq
 8001ab0:	f042 0201 	orreq.w	r2, r2, #1
 8001ab4:	3130      	adds	r1, #48	; 0x30
 8001ab6:	4283      	cmp	r3, r0
 8001ab8:	bf08      	it	eq
 8001aba:	f042 0201 	orreq.w	r2, r2, #1
 8001abe:	3030      	adds	r0, #48	; 0x30
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	bf08      	it	eq
 8001ac4:	f042 0201 	orreq.w	r2, r2, #1
 8001ac8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001acc:	4283      	cmp	r3, r0
 8001ace:	bf08      	it	eq
 8001ad0:	f042 0201 	orreq.w	r2, r2, #1
 8001ad4:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	bf08      	it	eq
 8001adc:	f042 0201 	orreq.w	r2, r2, #1
 8001ae0:	3130      	adds	r1, #48	; 0x30
 8001ae2:	4283      	cmp	r3, r0
 8001ae4:	bf08      	it	eq
 8001ae6:	f042 0201 	orreq.w	r2, r2, #1
 8001aea:	3030      	adds	r0, #48	; 0x30
 8001aec:	428b      	cmp	r3, r1
 8001aee:	bf08      	it	eq
 8001af0:	f042 0201 	orreq.w	r2, r2, #1
 8001af4:	3130      	adds	r1, #48	; 0x30
 8001af6:	4283      	cmp	r3, r0
 8001af8:	bf08      	it	eq
 8001afa:	f042 0201 	orreq.w	r2, r2, #1
 8001afe:	3030      	adds	r0, #48	; 0x30
 8001b00:	428b      	cmp	r3, r1
 8001b02:	bf08      	it	eq
 8001b04:	f042 0201 	orreq.w	r2, r2, #1
 8001b08:	3130      	adds	r1, #48	; 0x30
 8001b0a:	4283      	cmp	r3, r0
 8001b0c:	bf08      	it	eq
 8001b0e:	f042 0201 	orreq.w	r2, r2, #1
 8001b12:	428b      	cmp	r3, r1
 8001b14:	bf08      	it	eq
 8001b16:	f042 0201 	orreq.w	r2, r2, #1
 8001b1a:	b91a      	cbnz	r2, 8001b24 <HAL_DMA_Init+0xac>
 8001b1c:	4a78      	ldr	r2, [pc, #480]	; (8001d00 <HAL_DMA_Init+0x288>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	f040 8159 	bne.w	8001dd6 <HAL_DMA_Init+0x35e>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b24:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8001b26:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001b2c:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8001b2e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e006      	b.n	8001b48 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3a:	f7ff fd9b 	bl	8001674 <HAL_GetTick>
 8001b3e:	1b40      	subs	r0, r0, r5
 8001b40:	2805      	cmp	r0, #5
 8001b42:	f200 80cd 	bhi.w	8001ce0 <HAL_DMA_Init+0x268>
 8001b46:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	07d6      	lsls	r6, r2, #31
 8001b4c:	d4f5      	bmi.n	8001b3a <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 8001b4e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8001b54:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b56:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	4302      	orrs	r2, r0
 8001b5e:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b60:	4e68      	ldr	r6, [pc, #416]	; (8001d04 <HAL_DMA_Init+0x28c>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b62:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b68:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b6e:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b70:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 8001b72:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b76:	f000 80d5 	beq.w	8001d24 <HAL_DMA_Init+0x2ac>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b7a:	4e63      	ldr	r6, [pc, #396]	; (8001d08 <HAL_DMA_Init+0x290>)
 8001b7c:	4863      	ldr	r0, [pc, #396]	; (8001d0c <HAL_DMA_Init+0x294>)
 8001b7e:	6836      	ldr	r6, [r6, #0]
 8001b80:	4030      	ands	r0, r6
 8001b82:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8001b86:	f080 80da 	bcs.w	8001d3e <HAL_DMA_Init+0x2c6>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b8a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b8c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b8e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8001b92:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b94:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7ff fe36 	bl	8001808 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b9e:	233f      	movs	r3, #63	; 0x3f
 8001ba0:	f002 021f 	and.w	r2, r2, #31
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <HAL_DMA_Init+0x27c>)
 8001bac:	4958      	ldr	r1, [pc, #352]	; (8001d10 <HAL_DMA_Init+0x298>)
 8001bae:	4d59      	ldr	r5, [pc, #356]	; (8001d14 <HAL_DMA_Init+0x29c>)
 8001bb0:	428a      	cmp	r2, r1
 8001bb2:	bf18      	it	ne
 8001bb4:	429a      	cmpne	r2, r3
 8001bb6:	4850      	ldr	r0, [pc, #320]	; (8001cf8 <HAL_DMA_Init+0x280>)
 8001bb8:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	42aa      	cmp	r2, r5
 8001bc4:	bf08      	it	eq
 8001bc6:	f043 0301 	orreq.w	r3, r3, #1
 8001bca:	3548      	adds	r5, #72	; 0x48
 8001bcc:	4282      	cmp	r2, r0
 8001bce:	bf08      	it	eq
 8001bd0:	f043 0301 	orreq.w	r3, r3, #1
 8001bd4:	3048      	adds	r0, #72	; 0x48
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	bf08      	it	eq
 8001bda:	f043 0301 	orreq.w	r3, r3, #1
 8001bde:	3148      	adds	r1, #72	; 0x48
 8001be0:	42aa      	cmp	r2, r5
 8001be2:	bf08      	it	eq
 8001be4:	f043 0301 	orreq.w	r3, r3, #1
 8001be8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001bec:	4282      	cmp	r2, r0
 8001bee:	bf08      	it	eq
 8001bf0:	f043 0301 	orreq.w	r3, r3, #1
 8001bf4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001bf8:	428a      	cmp	r2, r1
 8001bfa:	bf08      	it	eq
 8001bfc:	f043 0301 	orreq.w	r3, r3, #1
 8001c00:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001c04:	42aa      	cmp	r2, r5
 8001c06:	bf08      	it	eq
 8001c08:	f043 0301 	orreq.w	r3, r3, #1
 8001c0c:	3548      	adds	r5, #72	; 0x48
 8001c0e:	4282      	cmp	r2, r0
 8001c10:	bf08      	it	eq
 8001c12:	f043 0301 	orreq.w	r3, r3, #1
 8001c16:	3048      	adds	r0, #72	; 0x48
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	bf08      	it	eq
 8001c1c:	f043 0301 	orreq.w	r3, r3, #1
 8001c20:	3148      	adds	r1, #72	; 0x48
 8001c22:	42aa      	cmp	r2, r5
 8001c24:	bf08      	it	eq
 8001c26:	f043 0301 	orreq.w	r3, r3, #1
 8001c2a:	3548      	adds	r5, #72	; 0x48
 8001c2c:	4282      	cmp	r2, r0
 8001c2e:	bf08      	it	eq
 8001c30:	f043 0301 	orreq.w	r3, r3, #1
 8001c34:	3048      	adds	r0, #72	; 0x48
 8001c36:	428a      	cmp	r2, r1
 8001c38:	bf08      	it	eq
 8001c3a:	f043 0301 	orreq.w	r3, r3, #1
 8001c3e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8001c42:	42aa      	cmp	r2, r5
 8001c44:	bf08      	it	eq
 8001c46:	f043 0301 	orreq.w	r3, r3, #1
 8001c4a:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8001c4e:	4d32      	ldr	r5, [pc, #200]	; (8001d18 <HAL_DMA_Init+0x2a0>)
 8001c50:	4282      	cmp	r2, r0
 8001c52:	bf08      	it	eq
 8001c54:	f043 0301 	orreq.w	r3, r3, #1
 8001c58:	4830      	ldr	r0, [pc, #192]	; (8001d1c <HAL_DMA_Init+0x2a4>)
 8001c5a:	428a      	cmp	r2, r1
 8001c5c:	bf08      	it	eq
 8001c5e:	f043 0301 	orreq.w	r3, r3, #1
 8001c62:	313c      	adds	r1, #60	; 0x3c
 8001c64:	42aa      	cmp	r2, r5
 8001c66:	bf08      	it	eq
 8001c68:	f043 0301 	orreq.w	r3, r3, #1
 8001c6c:	353c      	adds	r5, #60	; 0x3c
 8001c6e:	4282      	cmp	r2, r0
 8001c70:	bf08      	it	eq
 8001c72:	f043 0301 	orreq.w	r3, r3, #1
 8001c76:	303c      	adds	r0, #60	; 0x3c
 8001c78:	428a      	cmp	r2, r1
 8001c7a:	bf08      	it	eq
 8001c7c:	f043 0301 	orreq.w	r3, r3, #1
 8001c80:	313c      	adds	r1, #60	; 0x3c
 8001c82:	42aa      	cmp	r2, r5
 8001c84:	bf08      	it	eq
 8001c86:	f043 0301 	orreq.w	r3, r3, #1
 8001c8a:	4282      	cmp	r2, r0
 8001c8c:	bf08      	it	eq
 8001c8e:	f043 0301 	orreq.w	r3, r3, #1
 8001c92:	428a      	cmp	r2, r1
 8001c94:	bf08      	it	eq
 8001c96:	f043 0301 	orreq.w	r3, r3, #1
 8001c9a:	b913      	cbnz	r3, 8001ca2 <HAL_DMA_Init+0x22a>
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_DMA_Init+0x2a8>)
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d118      	bne.n	8001cd4 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff fe2c 	bl	8001900 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ca8:	68a3      	ldr	r3, [r4, #8]
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d079      	beq.n	8001da2 <HAL_DMA_Init+0x32a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001cb2:	b2dd      	uxtb	r5, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cb4:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb6:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cba:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cbc:	6005      	str	r5, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cbe:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cc0:	d876      	bhi.n	8001db0 <HAL_DMA_Init+0x338>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff fe88 	bl	80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cc8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001cca:	2000      	movs	r0, #0
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ccc:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cd0:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cd2:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001cda:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ce2:	2303      	movs	r3, #3
        return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ce8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001cee:	2001      	movs	r0, #1
}
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020010 	.word	0x40020010
 8001cf8:	40020058 	.word	0x40020058
 8001cfc:	40020070 	.word	0x40020070
 8001d00:	400204b8 	.word	0x400204b8
 8001d04:	fe10803f 	.word	0xfe10803f
 8001d08:	5c001000 	.word	0x5c001000
 8001d0c:	ffff0000 	.word	0xffff0000
 8001d10:	40020028 	.word	0x40020028
 8001d14:	40020040 	.word	0x40020040
 8001d18:	5802541c 	.word	0x5802541c
 8001d1c:	58025430 	.word	0x58025430
 8001d20:	58025494 	.word	0x58025494
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d24:	486a      	ldr	r0, [pc, #424]	; (8001ed0 <HAL_DMA_Init+0x458>)
 8001d26:	4e6b      	ldr	r6, [pc, #428]	; (8001ed4 <HAL_DMA_Init+0x45c>)
 8001d28:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d2c:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d2e:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d30:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d34:	ea40 0707 	orr.w	r7, r0, r7
 8001d38:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d3c:	d344      	bcc.n	8001dc8 <HAL_DMA_Init+0x350>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d3e:	6866      	ldr	r6, [r4, #4]
 8001d40:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 8001d44:	2f1f      	cmp	r7, #31
 8001d46:	d925      	bls.n	8001d94 <HAL_DMA_Init+0x31c>
 8001d48:	3e4f      	subs	r6, #79	; 0x4f
 8001d4a:	2e03      	cmp	r6, #3
 8001d4c:	d926      	bls.n	8001d9c <HAL_DMA_Init+0x324>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d4e:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d50:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d52:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d54:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8001d58:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5c:	f47f af1a 	bne.w	8001b94 <HAL_DMA_Init+0x11c>
 8001d60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001d62:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001d64:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d66:	2800      	cmp	r0, #0
 8001d68:	f43f af14 	beq.w	8001b94 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d6c:	b329      	cbz	r1, 8001dba <HAL_DMA_Init+0x342>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d6e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8001d72:	f000 8094 	beq.w	8001e9e <HAL_DMA_Init+0x426>
    switch (hdma->Init.FIFOThreshold)
 8001d76:	2d02      	cmp	r5, #2
 8001d78:	d905      	bls.n	8001d86 <HAL_DMA_Init+0x30e>
 8001d7a:	2d03      	cmp	r5, #3
 8001d7c:	f47f af0a 	bne.w	8001b94 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d80:	01c1      	lsls	r1, r0, #7
 8001d82:	f57f af07 	bpl.w	8001b94 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8001d86:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d88:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8001d8a:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d8c:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d94:	4850      	ldr	r0, [pc, #320]	; (8001ed8 <HAL_DMA_Init+0x460>)
 8001d96:	40f8      	lsrs	r0, r7
 8001d98:	07c0      	lsls	r0, r0, #31
 8001d9a:	d5d5      	bpl.n	8001d48 <HAL_DMA_Init+0x2d0>
        registerValue |= DMA_SxCR_TRBUFF;
 8001d9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001da0:	e7d5      	b.n	8001d4e <HAL_DMA_Init+0x2d6>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001da2:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001da6:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001daa:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dac:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dae:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8001db0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8001db2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001db6:	6763      	str	r3, [r4, #116]	; 0x74
 8001db8:	e78c      	b.n	8001cd4 <HAL_DMA_Init+0x25c>
    switch (hdma->Init.FIFOThreshold)
 8001dba:	2d01      	cmp	r5, #1
 8001dbc:	d06a      	beq.n	8001e94 <HAL_DMA_Init+0x41c>
 8001dbe:	d3df      	bcc.n	8001d80 <HAL_DMA_Init+0x308>
 8001dc0:	2d02      	cmp	r5, #2
 8001dc2:	f47f aee7 	bne.w	8001b94 <HAL_DMA_Init+0x11c>
 8001dc6:	e7db      	b.n	8001d80 <HAL_DMA_Init+0x308>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001dc8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dca:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dcc:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8001dd0:	f042 0204 	orr.w	r2, r2, #4
 8001dd4:	e7c5      	b.n	8001d62 <HAL_DMA_Init+0x2ea>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dd6:	4a41      	ldr	r2, [pc, #260]	; (8001edc <HAL_DMA_Init+0x464>)
 8001dd8:	4941      	ldr	r1, [pc, #260]	; (8001ee0 <HAL_DMA_Init+0x468>)
 8001dda:	4842      	ldr	r0, [pc, #264]	; (8001ee4 <HAL_DMA_Init+0x46c>)
 8001ddc:	428b      	cmp	r3, r1
 8001dde:	bf18      	it	ne
 8001de0:	4293      	cmpne	r3, r2
 8001de2:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001de6:	4d40      	ldr	r5, [pc, #256]	; (8001ee8 <HAL_DMA_Init+0x470>)
 8001de8:	bf0c      	ite	eq
 8001dea:	2201      	moveq	r2, #1
 8001dec:	2200      	movne	r2, #0
 8001dee:	4283      	cmp	r3, r0
 8001df0:	bf08      	it	eq
 8001df2:	f042 0201 	orreq.w	r2, r2, #1
 8001df6:	303c      	adds	r0, #60	; 0x3c
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	bf08      	it	eq
 8001dfc:	f042 0201 	orreq.w	r2, r2, #1
 8001e00:	313c      	adds	r1, #60	; 0x3c
 8001e02:	42ab      	cmp	r3, r5
 8001e04:	bf08      	it	eq
 8001e06:	f042 0201 	orreq.w	r2, r2, #1
 8001e0a:	4283      	cmp	r3, r0
 8001e0c:	bf08      	it	eq
 8001e0e:	f042 0201 	orreq.w	r2, r2, #1
 8001e12:	428b      	cmp	r3, r1
 8001e14:	bf08      	it	eq
 8001e16:	f042 0201 	orreq.w	r2, r2, #1
 8001e1a:	b912      	cbnz	r2, 8001e22 <HAL_DMA_Init+0x3aa>
 8001e1c:	4a33      	ldr	r2, [pc, #204]	; (8001eec <HAL_DMA_Init+0x474>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d14e      	bne.n	8001ec0 <HAL_DMA_Init+0x448>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e22:	2102      	movs	r1, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e24:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e26:	4f32      	ldr	r7, [pc, #200]	; (8001ef0 <HAL_DMA_Init+0x478>)
    __HAL_UNLOCK(hdma);
 8001e28:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e2e:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e30:	6819      	ldr	r1, [r3, #0]
    __HAL_UNLOCK(hdma);
 8001e32:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e36:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e3a:	d03f      	beq.n	8001ebc <HAL_DMA_Init+0x444>
 8001e3c:	2a80      	cmp	r2, #128	; 0x80
 8001e3e:	bf14      	ite	ne
 8001e40:	4601      	movne	r1, r0
 8001e42:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e46:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e48:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e4a:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e4c:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e4e:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e50:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8001ef8 <HAL_DMA_Init+0x480>
 8001e54:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e58:	69a6      	ldr	r6, [r4, #24]
 8001e5a:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e5e:	69e5      	ldr	r5, [r4, #28]
 8001e60:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e64:	4e23      	ldr	r6, [pc, #140]	; (8001ef4 <HAL_DMA_Init+0x47c>)
 8001e66:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8001e6a:	441e      	add	r6, r3
 8001e6c:	6a25      	ldr	r5, [r4, #32]
 8001e6e:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8001e72:	fbac 6506 	umull	r6, r5, ip, r6
 8001e76:	433a      	orrs	r2, r7
 8001e78:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e7a:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e7c:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e7e:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e80:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e82:	f7ff fcc1 	bl	8001808 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f002 021f 	and.w	r2, r2, #31
 8001e8e:	4093      	lsls	r3, r2
 8001e90:	6043      	str	r3, [r0, #4]
 8001e92:	e689      	b.n	8001ba8 <HAL_DMA_Init+0x130>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e94:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001e98:	f47f ae7c 	bne.w	8001b94 <HAL_DMA_Init+0x11c>
 8001e9c:	e773      	b.n	8001d86 <HAL_DMA_Init+0x30e>
    switch (hdma->Init.FIFOThreshold)
 8001e9e:	2d03      	cmp	r5, #3
 8001ea0:	f63f ae78 	bhi.w	8001b94 <HAL_DMA_Init+0x11c>
 8001ea4:	a101      	add	r1, pc, #4	; (adr r1, 8001eac <HAL_DMA_Init+0x434>)
 8001ea6:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001d87 	.word	0x08001d87
 8001eb0:	08001d81 	.word	0x08001d81
 8001eb4:	08001d87 	.word	0x08001d87
 8001eb8:	08001e95 	.word	0x08001e95
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	e7c2      	b.n	8001e46 <HAL_DMA_Init+0x3ce>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec0:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ec2:	2303      	movs	r3, #3
    return HAL_ERROR;
 8001ec4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec6:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	5c001000 	.word	0x5c001000
 8001ed4:	ffff0000 	.word	0xffff0000
 8001ed8:	c3c0003f 	.word	0xc3c0003f
 8001edc:	58025408 	.word	0x58025408
 8001ee0:	5802541c 	.word	0x5802541c
 8001ee4:	58025430 	.word	0x58025430
 8001ee8:	58025458 	.word	0x58025458
 8001eec:	58025494 	.word	0x58025494
 8001ef0:	fffe000f 	.word	0xfffe000f
 8001ef4:	a7fdabf8 	.word	0xa7fdabf8
 8001ef8:	cccccccd 	.word	0xcccccccd

08001efc <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d060      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f00:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001f04:	2a02      	cmp	r2, #2
{
 8001f06:	b538      	push	{r3, r4, r5, lr}
 8001f08:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0a:	d003      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f14:	6801      	ldr	r1, [r0, #0]
 8001f16:	4a57      	ldr	r2, [pc, #348]	; (8002074 <HAL_DMA_Abort_IT+0x178>)
 8001f18:	4291      	cmp	r1, r2
 8001f1a:	d049      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xb4>
 8001f1c:	3218      	adds	r2, #24
 8001f1e:	4291      	cmp	r1, r2
 8001f20:	d046      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0xb4>
 8001f22:	3230      	adds	r2, #48	; 0x30
 8001f24:	4854      	ldr	r0, [pc, #336]	; (8002078 <HAL_DMA_Abort_IT+0x17c>)
 8001f26:	4c55      	ldr	r4, [pc, #340]	; (800207c <HAL_DMA_Abort_IT+0x180>)
 8001f28:	4281      	cmp	r1, r0
 8001f2a:	bf18      	it	ne
 8001f2c:	4291      	cmpne	r1, r2
 8001f2e:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001f32:	4d53      	ldr	r5, [pc, #332]	; (8002080 <HAL_DMA_Abort_IT+0x184>)
 8001f34:	bf0c      	ite	eq
 8001f36:	2201      	moveq	r2, #1
 8001f38:	2200      	movne	r2, #0
 8001f3a:	42a1      	cmp	r1, r4
 8001f3c:	bf08      	it	eq
 8001f3e:	f042 0201 	orreq.w	r2, r2, #1
 8001f42:	3448      	adds	r4, #72	; 0x48
 8001f44:	4281      	cmp	r1, r0
 8001f46:	bf08      	it	eq
 8001f48:	f042 0201 	orreq.w	r2, r2, #1
 8001f4c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001f50:	42a9      	cmp	r1, r5
 8001f52:	bf08      	it	eq
 8001f54:	f042 0201 	orreq.w	r2, r2, #1
 8001f58:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001f5c:	42a1      	cmp	r1, r4
 8001f5e:	bf08      	it	eq
 8001f60:	f042 0201 	orreq.w	r2, r2, #1
 8001f64:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001f68:	4281      	cmp	r1, r0
 8001f6a:	bf08      	it	eq
 8001f6c:	f042 0201 	orreq.w	r2, r2, #1
 8001f70:	3048      	adds	r0, #72	; 0x48
 8001f72:	42a9      	cmp	r1, r5
 8001f74:	bf08      	it	eq
 8001f76:	f042 0201 	orreq.w	r2, r2, #1
 8001f7a:	3548      	adds	r5, #72	; 0x48
 8001f7c:	42a1      	cmp	r1, r4
 8001f7e:	bf08      	it	eq
 8001f80:	f042 0201 	orreq.w	r2, r2, #1
 8001f84:	3448      	adds	r4, #72	; 0x48
 8001f86:	4281      	cmp	r1, r0
 8001f88:	bf08      	it	eq
 8001f8a:	f042 0201 	orreq.w	r2, r2, #1
 8001f8e:	3048      	adds	r0, #72	; 0x48
 8001f90:	42a9      	cmp	r1, r5
 8001f92:	bf08      	it	eq
 8001f94:	f042 0201 	orreq.w	r2, r2, #1
 8001f98:	42a1      	cmp	r1, r4
 8001f9a:	bf08      	it	eq
 8001f9c:	f042 0201 	orreq.w	r2, r2, #1
 8001fa0:	4281      	cmp	r1, r0
 8001fa2:	bf08      	it	eq
 8001fa4:	f042 0201 	orreq.w	r2, r2, #1
 8001fa8:	b912      	cbnz	r2, 8001fb0 <HAL_DMA_Abort_IT+0xb4>
 8001faa:	4a36      	ldr	r2, [pc, #216]	; (8002084 <HAL_DMA_Abort_IT+0x188>)
 8001fac:	4291      	cmp	r1, r2
 8001fae:	d10a      	bne.n	8001fc6 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	2204      	movs	r2, #4
  return HAL_OK;
 8001fb2:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	680b      	ldr	r3, [r1, #0]
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	600b      	str	r3, [r1, #0]
}
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
}
 8001fc4:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fc6:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <HAL_DMA_Abort_IT+0x18c>)
 8001fcc:	482f      	ldr	r0, [pc, #188]	; (800208c <HAL_DMA_Abort_IT+0x190>)
 8001fce:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8001fd2:	4d2f      	ldr	r5, [pc, #188]	; (8002090 <HAL_DMA_Abort_IT+0x194>)
 8001fd4:	42a1      	cmp	r1, r4
 8001fd6:	bf18      	it	ne
 8001fd8:	4291      	cmpne	r1, r2
 8001fda:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8001fde:	bf0c      	ite	eq
 8001fe0:	2201      	moveq	r2, #1
 8001fe2:	2200      	movne	r2, #0
 8001fe4:	4281      	cmp	r1, r0
 8001fe6:	bf08      	it	eq
 8001fe8:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fec:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fee:	42a9      	cmp	r1, r5
 8001ff0:	bf08      	it	eq
 8001ff2:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ff6:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ffa:	3528      	adds	r5, #40	; 0x28
 8001ffc:	42a1      	cmp	r1, r4
 8001ffe:	bf08      	it	eq
 8002000:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002004:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002006:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8002008:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200a:	42a9      	cmp	r1, r5
 800200c:	bf08      	it	eq
 800200e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8002012:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002016:	42a1      	cmp	r1, r4
 8002018:	bf08      	it	eq
 800201a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800201e:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002020:	b912      	cbnz	r2, 8002028 <HAL_DMA_Abort_IT+0x12c>
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_DMA_Abort_IT+0x198>)
 8002024:	4291      	cmp	r1, r2
 8002026:	d117      	bne.n	8002058 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002028:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800202a:	2101      	movs	r1, #1
 800202c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800202e:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002030:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002034:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800203a:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800203c:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800203e:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 8002040:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002044:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002046:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002048:	b132      	cbz	r2, 8002058 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800204a:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800204c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800204e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002050:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002054:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002056:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8002058:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800205a:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800205c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800205e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002062:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002066:	b11a      	cbz	r2, 8002070 <HAL_DMA_Abort_IT+0x174>
 8002068:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 800206a:	4790      	blx	r2
  return HAL_OK;
 800206c:	4620      	mov	r0, r4
}
 800206e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002070:	4610      	mov	r0, r2
}
 8002072:	bd38      	pop	{r3, r4, r5, pc}
 8002074:	40020010 	.word	0x40020010
 8002078:	40020040 	.word	0x40020040
 800207c:	40020070 	.word	0x40020070
 8002080:	400200a0 	.word	0x400200a0
 8002084:	400204b8 	.word	0x400204b8
 8002088:	5802541c 	.word	0x5802541c
 800208c:	58025430 	.word	0x58025430
 8002090:	58025444 	.word	0x58025444
 8002094:	58025494 	.word	0x58025494

08002098 <HAL_DMA_IRQHandler>:
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 800209c:	49a4      	ldr	r1, [pc, #656]	; (8002330 <HAL_DMA_IRQHandler+0x298>)
{
 800209e:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020a0:	4ea4      	ldr	r6, [pc, #656]	; (8002334 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 80020a2:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	4aa4      	ldr	r2, [pc, #656]	; (8002338 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a8:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80020ac:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020ae:	4293      	cmp	r3, r2
 80020b0:	bf18      	it	ne
 80020b2:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80020b4:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b6:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020b8:	bf08      	it	eq
 80020ba:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80020bc:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020c0:	bf18      	it	ne
 80020c2:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80020c4:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020c8:	d046      	beq.n	8002158 <HAL_DMA_IRQHandler+0xc0>
 80020ca:	3218      	adds	r2, #24
 80020cc:	4f9b      	ldr	r7, [pc, #620]	; (800233c <HAL_DMA_IRQHandler+0x2a4>)
 80020ce:	4c9c      	ldr	r4, [pc, #624]	; (8002340 <HAL_DMA_IRQHandler+0x2a8>)
 80020d0:	42bb      	cmp	r3, r7
 80020d2:	bf18      	it	ne
 80020d4:	4293      	cmpne	r3, r2
 80020d6:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80020da:	bf0c      	ite	eq
 80020dc:	2201      	moveq	r2, #1
 80020de:	2200      	movne	r2, #0
 80020e0:	42a3      	cmp	r3, r4
 80020e2:	bf08      	it	eq
 80020e4:	f042 0201 	orreq.w	r2, r2, #1
 80020e8:	3430      	adds	r4, #48	; 0x30
 80020ea:	42bb      	cmp	r3, r7
 80020ec:	bf08      	it	eq
 80020ee:	f042 0201 	orreq.w	r2, r2, #1
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	42a3      	cmp	r3, r4
 80020f6:	bf08      	it	eq
 80020f8:	f042 0201 	orreq.w	r2, r2, #1
 80020fc:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002100:	42bb      	cmp	r3, r7
 8002102:	bf08      	it	eq
 8002104:	f042 0201 	orreq.w	r2, r2, #1
 8002108:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800210c:	42a3      	cmp	r3, r4
 800210e:	bf08      	it	eq
 8002110:	f042 0201 	orreq.w	r2, r2, #1
 8002114:	3430      	adds	r4, #48	; 0x30
 8002116:	42bb      	cmp	r3, r7
 8002118:	bf08      	it	eq
 800211a:	f042 0201 	orreq.w	r2, r2, #1
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	42a3      	cmp	r3, r4
 8002122:	bf08      	it	eq
 8002124:	f042 0201 	orreq.w	r2, r2, #1
 8002128:	3430      	adds	r4, #48	; 0x30
 800212a:	42bb      	cmp	r3, r7
 800212c:	bf08      	it	eq
 800212e:	f042 0201 	orreq.w	r2, r2, #1
 8002132:	3730      	adds	r7, #48	; 0x30
 8002134:	42a3      	cmp	r3, r4
 8002136:	bf08      	it	eq
 8002138:	f042 0201 	orreq.w	r2, r2, #1
 800213c:	3430      	adds	r4, #48	; 0x30
 800213e:	42bb      	cmp	r3, r7
 8002140:	bf08      	it	eq
 8002142:	f042 0201 	orreq.w	r2, r2, #1
 8002146:	42a3      	cmp	r3, r4
 8002148:	bf08      	it	eq
 800214a:	f042 0201 	orreq.w	r2, r2, #1
 800214e:	b91a      	cbnz	r2, 8002158 <HAL_DMA_IRQHandler+0xc0>
 8002150:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_DMA_IRQHandler+0x2ac>)
 8002152:	4293      	cmp	r3, r2
 8002154:	f040 81ef 	bne.w	8002536 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002158:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800215a:	2208      	movs	r2, #8
 800215c:	f001 071f 	and.w	r7, r1, #31
 8002160:	40ba      	lsls	r2, r7
 8002162:	422a      	tst	r2, r5
 8002164:	f040 81d8 	bne.w	8002518 <HAL_DMA_IRQHandler+0x480>
 8002168:	4604      	mov	r4, r0
 800216a:	f04f 0c04 	mov.w	ip, #4
 800216e:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002170:	fa25 f207 	lsr.w	r2, r5, r7
 8002174:	fa0c fc07 	lsl.w	ip, ip, r7
 8002178:	40b8      	lsls	r0, r7
 800217a:	07d2      	lsls	r2, r2, #31
 800217c:	ea05 090c 	and.w	r9, r5, ip
 8002180:	ea05 0e00 	and.w	lr, r5, r0
 8002184:	d560      	bpl.n	8002248 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002186:	4a70      	ldr	r2, [pc, #448]	; (8002348 <HAL_DMA_IRQHandler+0x2b0>)
 8002188:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 800233c <HAL_DMA_IRQHandler+0x2a4>
 800218c:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8002340 <HAL_DMA_IRQHandler+0x2a8>
 8002190:	4293      	cmp	r3, r2
 8002192:	bf18      	it	ne
 8002194:	455b      	cmpne	r3, fp
 8002196:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800219a:	bf0c      	ite	eq
 800219c:	2201      	moveq	r2, #1
 800219e:	2200      	movne	r2, #0
 80021a0:	4553      	cmp	r3, sl
 80021a2:	bf08      	it	eq
 80021a4:	f042 0201 	orreq.w	r2, r2, #1
 80021a8:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80021ac:	455b      	cmp	r3, fp
 80021ae:	bf08      	it	eq
 80021b0:	f042 0201 	orreq.w	r2, r2, #1
 80021b4:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80021b8:	4553      	cmp	r3, sl
 80021ba:	bf08      	it	eq
 80021bc:	f042 0201 	orreq.w	r2, r2, #1
 80021c0:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 80021c4:	455b      	cmp	r3, fp
 80021c6:	bf08      	it	eq
 80021c8:	f042 0201 	orreq.w	r2, r2, #1
 80021cc:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 80021d0:	4553      	cmp	r3, sl
 80021d2:	bf08      	it	eq
 80021d4:	f042 0201 	orreq.w	r2, r2, #1
 80021d8:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80021dc:	455b      	cmp	r3, fp
 80021de:	bf08      	it	eq
 80021e0:	f042 0201 	orreq.w	r2, r2, #1
 80021e4:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80021e8:	4553      	cmp	r3, sl
 80021ea:	bf08      	it	eq
 80021ec:	f042 0201 	orreq.w	r2, r2, #1
 80021f0:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80021f4:	455b      	cmp	r3, fp
 80021f6:	bf08      	it	eq
 80021f8:	f042 0201 	orreq.w	r2, r2, #1
 80021fc:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8002200:	4553      	cmp	r3, sl
 8002202:	bf08      	it	eq
 8002204:	f042 0201 	orreq.w	r2, r2, #1
 8002208:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800220c:	455b      	cmp	r3, fp
 800220e:	bf08      	it	eq
 8002210:	f042 0201 	orreq.w	r2, r2, #1
 8002214:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8002218:	4553      	cmp	r3, sl
 800221a:	bf08      	it	eq
 800221c:	f042 0201 	orreq.w	r2, r2, #1
 8002220:	455b      	cmp	r3, fp
 8002222:	bf08      	it	eq
 8002224:	f042 0201 	orreq.w	r2, r2, #1
 8002228:	b912      	cbnz	r2, 8002230 <HAL_DMA_IRQHandler+0x198>
 800222a:	2e00      	cmp	r6, #0
 800222c:	f000 8245 	beq.w	80026ba <HAL_DMA_IRQHandler+0x622>
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	0612      	lsls	r2, r2, #24
 8002234:	d508      	bpl.n	8002248 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f707 	lsl.w	r7, r2, r7
 800223c:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002240:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002242:	f042 0202 	orr.w	r2, r2, #2
 8002246:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002248:	f1b9 0f00 	cmp.w	r9, #0
 800224c:	d055      	beq.n	80022fa <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800224e:	2e00      	cmp	r6, #0
 8002250:	d14a      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x250>
 8002252:	4a3d      	ldr	r2, [pc, #244]	; (8002348 <HAL_DMA_IRQHandler+0x2b0>)
 8002254:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800233c <HAL_DMA_IRQHandler+0x2a4>
 8002258:	4f39      	ldr	r7, [pc, #228]	; (8002340 <HAL_DMA_IRQHandler+0x2a8>)
 800225a:	454b      	cmp	r3, r9
 800225c:	bf18      	it	ne
 800225e:	4293      	cmpne	r3, r2
 8002260:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8002264:	bf0c      	ite	eq
 8002266:	2201      	moveq	r2, #1
 8002268:	2200      	movne	r2, #0
 800226a:	42bb      	cmp	r3, r7
 800226c:	bf08      	it	eq
 800226e:	f042 0201 	orreq.w	r2, r2, #1
 8002272:	3730      	adds	r7, #48	; 0x30
 8002274:	454b      	cmp	r3, r9
 8002276:	bf08      	it	eq
 8002278:	f042 0201 	orreq.w	r2, r2, #1
 800227c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8002280:	42bb      	cmp	r3, r7
 8002282:	bf08      	it	eq
 8002284:	f042 0201 	orreq.w	r2, r2, #1
 8002288:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800228c:	454b      	cmp	r3, r9
 800228e:	bf08      	it	eq
 8002290:	f042 0201 	orreq.w	r2, r2, #1
 8002294:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8002298:	42bb      	cmp	r3, r7
 800229a:	bf08      	it	eq
 800229c:	f042 0201 	orreq.w	r2, r2, #1
 80022a0:	3730      	adds	r7, #48	; 0x30
 80022a2:	454b      	cmp	r3, r9
 80022a4:	bf08      	it	eq
 80022a6:	f042 0201 	orreq.w	r2, r2, #1
 80022aa:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80022ae:	42bb      	cmp	r3, r7
 80022b0:	bf08      	it	eq
 80022b2:	f042 0201 	orreq.w	r2, r2, #1
 80022b6:	3730      	adds	r7, #48	; 0x30
 80022b8:	454b      	cmp	r3, r9
 80022ba:	bf08      	it	eq
 80022bc:	f042 0201 	orreq.w	r2, r2, #1
 80022c0:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80022c4:	42bb      	cmp	r3, r7
 80022c6:	bf08      	it	eq
 80022c8:	f042 0201 	orreq.w	r2, r2, #1
 80022cc:	3730      	adds	r7, #48	; 0x30
 80022ce:	454b      	cmp	r3, r9
 80022d0:	bf08      	it	eq
 80022d2:	f042 0201 	orreq.w	r2, r2, #1
 80022d6:	42bb      	cmp	r3, r7
 80022d8:	bf08      	it	eq
 80022da:	f042 0201 	orreq.w	r2, r2, #1
 80022de:	b91a      	cbnz	r2, 80022e8 <HAL_DMA_IRQHandler+0x250>
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_DMA_IRQHandler+0x2ac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 81b4 	bne.w	8002650 <HAL_DMA_IRQHandler+0x5b8>
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	0792      	lsls	r2, r2, #30
 80022ec:	d505      	bpl.n	80022fa <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022ee:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022fa:	f1be 0f00 	cmp.w	lr, #0
 80022fe:	d06d      	beq.n	80023dc <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002300:	2e00      	cmp	r6, #0
 8002302:	d155      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x318>
 8002304:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_DMA_IRQHandler+0x2b0>)
 8002306:	4f0d      	ldr	r7, [pc, #52]	; (800233c <HAL_DMA_IRQHandler+0x2a4>)
 8002308:	4e0d      	ldr	r6, [pc, #52]	; (8002340 <HAL_DMA_IRQHandler+0x2a8>)
 800230a:	42bb      	cmp	r3, r7
 800230c:	bf18      	it	ne
 800230e:	4293      	cmpne	r3, r2
 8002310:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8002314:	bf0c      	ite	eq
 8002316:	2201      	moveq	r2, #1
 8002318:	2200      	movne	r2, #0
 800231a:	42b3      	cmp	r3, r6
 800231c:	bf08      	it	eq
 800231e:	f042 0201 	orreq.w	r2, r2, #1
 8002322:	3630      	adds	r6, #48	; 0x30
 8002324:	42bb      	cmp	r3, r7
 8002326:	bf08      	it	eq
 8002328:	f042 0201 	orreq.w	r2, r2, #1
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	e00d      	b.n	800234c <HAL_DMA_IRQHandler+0x2b4>
 8002330:	24000000 	.word	0x24000000
 8002334:	40020010 	.word	0x40020010
 8002338:	40020028 	.word	0x40020028
 800233c:	40020058 	.word	0x40020058
 8002340:	40020070 	.word	0x40020070
 8002344:	400204b8 	.word	0x400204b8
 8002348:	40020040 	.word	0x40020040
 800234c:	42b3      	cmp	r3, r6
 800234e:	bf08      	it	eq
 8002350:	f042 0201 	orreq.w	r2, r2, #1
 8002354:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8002358:	42bb      	cmp	r3, r7
 800235a:	bf08      	it	eq
 800235c:	f042 0201 	orreq.w	r2, r2, #1
 8002360:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8002364:	42b3      	cmp	r3, r6
 8002366:	bf08      	it	eq
 8002368:	f042 0201 	orreq.w	r2, r2, #1
 800236c:	3630      	adds	r6, #48	; 0x30
 800236e:	42bb      	cmp	r3, r7
 8002370:	bf08      	it	eq
 8002372:	f042 0201 	orreq.w	r2, r2, #1
 8002376:	3730      	adds	r7, #48	; 0x30
 8002378:	42b3      	cmp	r3, r6
 800237a:	bf08      	it	eq
 800237c:	f042 0201 	orreq.w	r2, r2, #1
 8002380:	3630      	adds	r6, #48	; 0x30
 8002382:	42bb      	cmp	r3, r7
 8002384:	bf08      	it	eq
 8002386:	f042 0201 	orreq.w	r2, r2, #1
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	42b3      	cmp	r3, r6
 800238e:	bf08      	it	eq
 8002390:	f042 0201 	orreq.w	r2, r2, #1
 8002394:	3630      	adds	r6, #48	; 0x30
 8002396:	42bb      	cmp	r3, r7
 8002398:	bf08      	it	eq
 800239a:	f042 0201 	orreq.w	r2, r2, #1
 800239e:	42b3      	cmp	r3, r6
 80023a0:	bf08      	it	eq
 80023a2:	f042 0201 	orreq.w	r2, r2, #1
 80023a6:	b91a      	cbnz	r2, 80023b0 <HAL_DMA_IRQHandler+0x318>
 80023a8:	4aa0      	ldr	r2, [pc, #640]	; (800262c <HAL_DMA_IRQHandler+0x594>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	f040 813a 	bne.w	8002624 <HAL_DMA_IRQHandler+0x58c>
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80023b6:	b18a      	cbz	r2, 80023dc <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023b8:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	0357      	lsls	r7, r2, #13
 80023c0:	f100 80f7 	bmi.w	80025b2 <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	05d0      	lsls	r0, r2, #23
 80023c8:	d403      	bmi.n	80023d2 <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80023d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d4:	b113      	cbz	r3, 80023dc <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 80023d6:	4620      	mov	r0, r4
 80023d8:	4798      	blx	r3
 80023da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023dc:	f001 011f 	and.w	r1, r1, #31
 80023e0:	2220      	movs	r2, #32
 80023e2:	408a      	lsls	r2, r1
 80023e4:	422a      	tst	r2, r5
 80023e6:	d069      	beq.n	80024bc <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	4b91      	ldr	r3, [pc, #580]	; (8002630 <HAL_DMA_IRQHandler+0x598>)
 80023ec:	4e91      	ldr	r6, [pc, #580]	; (8002634 <HAL_DMA_IRQHandler+0x59c>)
 80023ee:	4d92      	ldr	r5, [pc, #584]	; (8002638 <HAL_DMA_IRQHandler+0x5a0>)
 80023f0:	42b0      	cmp	r0, r6
 80023f2:	bf18      	it	ne
 80023f4:	4298      	cmpne	r0, r3
 80023f6:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	42a8      	cmp	r0, r5
 8002402:	bf08      	it	eq
 8002404:	f043 0301 	orreq.w	r3, r3, #1
 8002408:	3530      	adds	r5, #48	; 0x30
 800240a:	42b0      	cmp	r0, r6
 800240c:	bf08      	it	eq
 800240e:	f043 0301 	orreq.w	r3, r3, #1
 8002412:	3630      	adds	r6, #48	; 0x30
 8002414:	42a8      	cmp	r0, r5
 8002416:	bf08      	it	eq
 8002418:	f043 0301 	orreq.w	r3, r3, #1
 800241c:	3530      	adds	r5, #48	; 0x30
 800241e:	42b0      	cmp	r0, r6
 8002420:	bf08      	it	eq
 8002422:	f043 0301 	orreq.w	r3, r3, #1
 8002426:	3630      	adds	r6, #48	; 0x30
 8002428:	42a8      	cmp	r0, r5
 800242a:	bf08      	it	eq
 800242c:	f043 0301 	orreq.w	r3, r3, #1
 8002430:	f505 755c 	add.w	r5, r5, #880	; 0x370
 8002434:	42b0      	cmp	r0, r6
 8002436:	bf08      	it	eq
 8002438:	f043 0301 	orreq.w	r3, r3, #1
 800243c:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8002440:	42a8      	cmp	r0, r5
 8002442:	bf08      	it	eq
 8002444:	f043 0301 	orreq.w	r3, r3, #1
 8002448:	3530      	adds	r5, #48	; 0x30
 800244a:	42b0      	cmp	r0, r6
 800244c:	bf08      	it	eq
 800244e:	f043 0301 	orreq.w	r3, r3, #1
 8002452:	3630      	adds	r6, #48	; 0x30
 8002454:	42a8      	cmp	r0, r5
 8002456:	bf08      	it	eq
 8002458:	f043 0301 	orreq.w	r3, r3, #1
 800245c:	3530      	adds	r5, #48	; 0x30
 800245e:	42b0      	cmp	r0, r6
 8002460:	bf08      	it	eq
 8002462:	f043 0301 	orreq.w	r3, r3, #1
 8002466:	3630      	adds	r6, #48	; 0x30
 8002468:	42a8      	cmp	r0, r5
 800246a:	bf08      	it	eq
 800246c:	f043 0301 	orreq.w	r3, r3, #1
 8002470:	3530      	adds	r5, #48	; 0x30
 8002472:	42b0      	cmp	r0, r6
 8002474:	bf08      	it	eq
 8002476:	f043 0301 	orreq.w	r3, r3, #1
 800247a:	42a8      	cmp	r0, r5
 800247c:	bf08      	it	eq
 800247e:	f043 0301 	orreq.w	r3, r3, #1
 8002482:	b91b      	cbnz	r3, 800248c <HAL_DMA_IRQHandler+0x3f4>
 8002484:	4b69      	ldr	r3, [pc, #420]	; (800262c <HAL_DMA_IRQHandler+0x594>)
 8002486:	4298      	cmp	r0, r3
 8002488:	f040 8121 	bne.w	80026ce <HAL_DMA_IRQHandler+0x636>
 800248c:	6803      	ldr	r3, [r0, #0]
 800248e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002492:	b19b      	cbz	r3, 80024bc <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002494:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002498:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800249c:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249e:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024a0:	f000 8090 	beq.w	80025c4 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024a4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024a8:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024aa:	f000 80a8 	beq.w	80025fe <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024ae:	0319      	lsls	r1, r3, #12
 80024b0:	f140 80b3 	bpl.w	800261a <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 80024b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024b6:	b10b      	cbz	r3, 80024bc <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 80024b8:	4620      	mov	r0, r4
 80024ba:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d074      	beq.n	80025ac <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80024c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024c4:	07da      	lsls	r2, r3, #31
 80024c6:	d51f      	bpl.n	8002508 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 80024c8:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80024ca:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 80024cc:	495b      	ldr	r1, [pc, #364]	; (800263c <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 80024ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80024d2:	6813      	ldr	r3, [r2, #0]
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024da:	9b01      	ldr	r3, [sp, #4]
 80024dc:	fba1 3103 	umull	r3, r1, r1, r3
 80024e0:	0a89      	lsrs	r1, r1, #10
 80024e2:	e002      	b.n	80024ea <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	07db      	lsls	r3, r3, #31
 80024e8:	d504      	bpl.n	80024f4 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 80024ea:	9b03      	ldr	r3, [sp, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	428b      	cmp	r3, r1
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	d9f7      	bls.n	80024e4 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024f4:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 80024f6:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024f8:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 80024fa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 80024fe:	bf4c      	ite	mi
 8002500:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002502:	2301      	movpl	r3, #1
 8002504:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8002508:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04e      	beq.n	80025ac <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 800250e:	4620      	mov	r0, r4
}
 8002510:	b005      	add	sp, #20
 8002512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 8002516:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002518:	681c      	ldr	r4, [r3, #0]
 800251a:	0764      	lsls	r4, r4, #29
 800251c:	f57f ae24 	bpl.w	8002168 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	f024 0404 	bic.w	r4, r4, #4
 8002526:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002528:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800252c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	6542      	str	r2, [r0, #84]	; 0x54
 8002534:	e618      	b.n	8002168 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002536:	4a42      	ldr	r2, [pc, #264]	; (8002640 <HAL_DMA_IRQHandler+0x5a8>)
 8002538:	4d42      	ldr	r5, [pc, #264]	; (8002644 <HAL_DMA_IRQHandler+0x5ac>)
 800253a:	4c43      	ldr	r4, [pc, #268]	; (8002648 <HAL_DMA_IRQHandler+0x5b0>)
 800253c:	42ab      	cmp	r3, r5
 800253e:	bf18      	it	ne
 8002540:	4293      	cmpne	r3, r2
 8002542:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8002546:	bf0c      	ite	eq
 8002548:	2201      	moveq	r2, #1
 800254a:	2200      	movne	r2, #0
 800254c:	42a3      	cmp	r3, r4
 800254e:	bf08      	it	eq
 8002550:	f042 0201 	orreq.w	r2, r2, #1
 8002554:	3428      	adds	r4, #40	; 0x28
 8002556:	42ab      	cmp	r3, r5
 8002558:	bf08      	it	eq
 800255a:	f042 0201 	orreq.w	r2, r2, #1
 800255e:	3528      	adds	r5, #40	; 0x28
 8002560:	42a3      	cmp	r3, r4
 8002562:	bf08      	it	eq
 8002564:	f042 0201 	orreq.w	r2, r2, #1
 8002568:	3428      	adds	r4, #40	; 0x28
 800256a:	42ab      	cmp	r3, r5
 800256c:	bf08      	it	eq
 800256e:	f042 0201 	orreq.w	r2, r2, #1
 8002572:	42a3      	cmp	r3, r4
 8002574:	bf08      	it	eq
 8002576:	f042 0201 	orreq.w	r2, r2, #1
 800257a:	b912      	cbnz	r2, 8002582 <HAL_DMA_IRQHandler+0x4ea>
 800257c:	4a33      	ldr	r2, [pc, #204]	; (800264c <HAL_DMA_IRQHandler+0x5b4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d114      	bne.n	80025ac <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002582:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002584:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002586:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002588:	f004 041f 	and.w	r4, r4, #31
 800258c:	40a5      	lsls	r5, r4
 800258e:	420d      	tst	r5, r1
 8002590:	d068      	beq.n	8002664 <HAL_DMA_IRQHandler+0x5cc>
 8002592:	0756      	lsls	r6, r2, #29
 8002594:	d566      	bpl.n	8002664 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002596:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002598:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800259c:	f140 80ac 	bpl.w	80026f8 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80025a0:	03d3      	lsls	r3, r2, #15
 80025a2:	f100 80af 	bmi.w	8002704 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1b1      	bne.n	8002510 <HAL_DMA_IRQHandler+0x478>
}
 80025ac:	b005      	add	sp, #20
 80025ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	031e      	lsls	r6, r3, #12
 80025b6:	f57f af0c 	bpl.w	80023d2 <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80025ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f af0a 	bne.w	80023d6 <HAL_DMA_IRQHandler+0x33e>
 80025c2:	e70b      	b.n	80023dc <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025c4:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ca:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025cc:	6943      	ldr	r3, [r0, #20]
 80025ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d2:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d041      	beq.n	800265c <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	f023 0308 	bic.w	r3, r3, #8
 80025de:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025e0:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80025e2:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80025e4:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025e6:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80025ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025ec:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 80025f0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80025f4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d188      	bne.n	800250e <HAL_DMA_IRQHandler+0x476>
 80025fc:	e7d6      	b.n	80025ac <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002602:	f47f af57 	bne.w	80024b4 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002606:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002608:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800260a:	f022 0210 	bic.w	r2, r2, #16
 800260e:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 8002610:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002614:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8002618:	e74c      	b.n	80024b4 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 800261a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800261c:	2b00      	cmp	r3, #0
 800261e:	f47f af4b 	bne.w	80024b8 <HAL_DMA_IRQHandler+0x420>
 8002622:	e74b      	b.n	80024bc <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800262a:	e6c4      	b.n	80023b6 <HAL_DMA_IRQHandler+0x31e>
 800262c:	400204b8 	.word	0x400204b8
 8002630:	40020010 	.word	0x40020010
 8002634:	40020028 	.word	0x40020028
 8002638:	40020040 	.word	0x40020040
 800263c:	1b4e81b5 	.word	0x1b4e81b5
 8002640:	58025408 	.word	0x58025408
 8002644:	5802541c 	.word	0x5802541c
 8002648:	58025430 	.word	0x58025430
 800264c:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002650:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002652:	f1be 0f00 	cmp.w	lr, #0
 8002656:	f43f aec1 	beq.w	80023dc <HAL_DMA_IRQHandler+0x344>
 800265a:	e653      	b.n	8002304 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ba      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x540>
 8002662:	e7bd      	b.n	80025e0 <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002664:	2502      	movs	r5, #2
 8002666:	40a5      	lsls	r5, r4
 8002668:	420d      	tst	r5, r1
 800266a:	d00c      	beq.n	8002686 <HAL_DMA_IRQHandler+0x5ee>
 800266c:	0796      	lsls	r6, r2, #30
 800266e:	d50a      	bpl.n	8002686 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002670:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002672:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002676:	d52e      	bpl.n	80026d6 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002678:	03d1      	lsls	r1, r2, #15
 800267a:	d438      	bmi.n	80026ee <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 800267c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f af46 	bne.w	8002510 <HAL_DMA_IRQHandler+0x478>
 8002684:	e792      	b.n	80025ac <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002686:	2508      	movs	r5, #8
 8002688:	40a5      	lsls	r5, r4
 800268a:	420d      	tst	r5, r1
 800268c:	d08e      	beq.n	80025ac <HAL_DMA_IRQHandler+0x514>
 800268e:	0712      	lsls	r2, r2, #28
 8002690:	d58c      	bpl.n	80025ac <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002692:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002694:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002696:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002698:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800269c:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a0:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 80026a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80026a4:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026a8:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80026aa:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80026ae:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f47f af2c 	bne.w	8002510 <HAL_DMA_IRQHandler+0x478>
 80026b8:	e778      	b.n	80025ac <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80026ba:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026bc:	f1b9 0f00 	cmp.w	r9, #0
 80026c0:	f47f adc7 	bne.w	8002252 <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026c4:	f1be 0f00 	cmp.w	lr, #0
 80026c8:	f43f ae88 	beq.w	80023dc <HAL_DMA_IRQHandler+0x344>
 80026cc:	e618      	b.n	8002300 <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026ce:	6803      	ldr	r3, [r0, #0]
 80026d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026d4:	e6dd      	b.n	8002492 <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026d6:	f012 0220 	ands.w	r2, r2, #32
 80026da:	d108      	bne.n	80026ee <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026dc:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80026de:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026e0:	f021 010a 	bic.w	r1, r1, #10
 80026e4:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 80026e6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80026ea:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80026ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f af0d 	bne.w	8002510 <HAL_DMA_IRQHandler+0x478>
 80026f6:	e759      	b.n	80025ac <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026f8:	0697      	lsls	r7, r2, #26
 80026fa:	d403      	bmi.n	8002704 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002704:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	f47f af02 	bne.w	8002510 <HAL_DMA_IRQHandler+0x478>
 800270c:	e74e      	b.n	80025ac <HAL_DMA_IRQHandler+0x514>
 800270e:	bf00      	nop

08002710 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002710:	b4f0      	push	{r4, r5, r6, r7}
 8002712:	688b      	ldr	r3, [r1, #8]
 8002714:	680c      	ldr	r4, [r1, #0]
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002716:	6802      	ldr	r2, [r0, #0]
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002718:	f64f 700d 	movw	r0, #65293	; 0xff0d
 800271c:	4323      	orrs	r3, r4
 800271e:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002720:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8002722:	4323      	orrs	r3, r4
 8002724:	698c      	ldr	r4, [r1, #24]
 8002726:	4d59      	ldr	r5, [pc, #356]	; (800288c <ETH_SetMACConfig+0x17c>)
 8002728:	4323      	orrs	r3, r4
 800272a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800272c:	4323      	orrs	r3, r4
 800272e:	6814      	ldr	r4, [r2, #0]
 8002730:	4333      	orrs	r3, r6
 8002732:	402c      	ands	r4, r5
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002734:	790e      	ldrb	r6, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002736:	4323      	orrs	r3, r4
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002738:	7b0d      	ldrb	r5, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800273a:	7b4c      	ldrb	r4, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800273c:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002740:	7c4e      	ldrb	r6, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002742:	ea43 53c5 	orr.w	r3, r3, r5, lsl #23
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002746:	7b8d      	ldrb	r5, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002748:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800274c:	7bcc      	ldrb	r4, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800274e:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002752:	7c8d      	ldrb	r5, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002754:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002758:	7f0c      	ldrb	r4, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800275a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800275e:	7f4d      	ldrb	r5, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002760:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002764:	7fcc      	ldrb	r4, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002766:	ea43 23c5 	orr.w	r3, r3, r5, lsl #11
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800276a:	7c0d      	ldrb	r5, [r1, #16]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800276c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002770:	2d00      	cmp	r5, #0
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002772:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002776:	7f8d      	ldrb	r5, [r1, #30]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002778:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800277c:	bf0c      	ite	eq
 800277e:	f44f 2400 	moveq.w	r4, #524288	; 0x80000
 8002782:	2400      	movne	r4, #0
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002784:	2e00      	cmp	r6, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002786:	ea43 0304 	orr.w	r3, r3, r4
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800278a:	bf0c      	ite	eq
 800278c:	f44f 3400 	moveq.w	r4, #131072	; 0x20000
 8002790:	2400      	movne	r4, #0
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002792:	2d00      	cmp	r5, #0
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002794:	f891 5020 	ldrb.w	r5, [r1, #32]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002798:	ea43 0304 	orr.w	r3, r3, r4
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800279c:	bf0c      	ite	eq
 800279e:	f44f 6480 	moveq.w	r4, #1024	; 0x400
 80027a2:	2400      	movne	r4, #0
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80027a4:	2d00      	cmp	r5, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027a6:	4d3a      	ldr	r5, [pc, #232]	; (8002890 <ETH_SetMACConfig+0x180>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027a8:	ea43 0304 	orr.w	r3, r3, r4
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80027ac:	bf0c      	ite	eq
 80027ae:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80027b2:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027b4:	4323      	orrs	r3, r4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80027b6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027b8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027ba:	6853      	ldr	r3, [r2, #4]
 80027bc:	402b      	ands	r3, r5
 80027be:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80027c0:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80027c4:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027c8:	432b      	orrs	r3, r5
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80027ca:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027ce:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80027d2:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027d6:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80027da:	2c00      	cmp	r4, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80027dc:	f891 5031 	ldrb.w	r5, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027e0:	4c2c      	ldr	r4, [pc, #176]	; (8002894 <ETH_SetMACConfig+0x184>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027e2:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80027e6:	bf0c      	ite	eq
 80027e8:	f44f 3580 	moveq.w	r5, #65536	; 0x10000
 80027ec:	2500      	movne	r5, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027ee:	432b      	orrs	r3, r5
 80027f0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027f2:	68d3      	ldr	r3, [r2, #12]
 80027f4:	6c4d      	ldr	r5, [r1, #68]	; 0x44
 80027f6:	401c      	ands	r4, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027f8:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
               macconf->PauseLowThreshold |
 80027fc:	6d0e      	ldr	r6, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027fe:	432c      	orrs	r4, r5
                   (macconf->PauseTime << 16));
 8002800:	6c8d      	ldr	r5, [r1, #72]	; 0x48

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002802:	f891 7055 	ldrb.w	r7, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002806:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800280a:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800280c:	6f13      	ldr	r3, [r2, #112]	; 0x70
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800280e:	f891 404c 	ldrb.w	r4, [r1, #76]	; 0x4c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002812:	4003      	ands	r3, r0
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002814:	f891 0056 	ldrb.w	r0, [r1, #86]	; 0x56
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002818:	2c00      	cmp	r4, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800281a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800281e:	f891 5054 	ldrb.w	r5, [r1, #84]	; 0x54
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002822:	bf0c      	ite	eq
 8002824:	2480      	moveq	r4, #128	; 0x80
 8002826:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002828:	4333      	orrs	r3, r6
  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800282a:	6d8e      	ldr	r6, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800282c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002830:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002832:	4323      	orrs	r3, r4
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002836:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800283a:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800283e:	f024 0403 	bic.w	r4, r4, #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002842:	2b00      	cmp	r3, #0
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002844:	ea40 0004 	orr.w	r0, r0, r4
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002848:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800284c:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002850:	f891 7062 	ldrb.w	r7, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002854:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002858:	bf08      	it	eq
 800285a:	2040      	moveq	r0, #64	; 0x40
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800285c:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002860:	bf18      	it	ne
 8002862:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002864:	f021 0172 	bic.w	r1, r1, #114	; 0x72
 8002868:	4331      	orrs	r1, r6
 800286a:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800286e:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 8002872:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8002876:	432b      	orrs	r3, r5
 8002878:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800287c:	ea43 03c7 	orr.w	r3, r3, r7, lsl #3
 8002880:	4303      	orrs	r3, r0
}
 8002882:	bcf0      	pop	{r4, r5, r6, r7}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002884:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	00048083 	.word	0x00048083
 8002890:	c0f88000 	.word	0xc0f88000
 8002894:	fffffef0 	.word	0xfffffef0

08002898 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002898:	6802      	ldr	r2, [r0, #0]
 800289a:	481e      	ldr	r0, [pc, #120]	; (8002914 <ETH_SetDMAConfig+0x7c>)
{
 800289c:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800289e:	f502 5680 	add.w	r6, r2, #4096	; 0x1000
 80028a2:	680f      	ldr	r7, [r1, #0]
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028a4:	f241 0504 	movw	r5, #4100	; 0x1004

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028a8:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028ac:	6833      	ldr	r3, [r6, #0]
 80028ae:	4018      	ands	r0, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80028b0:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028b2:	4338      	orrs	r0, r7
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80028b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028b6:	790f      	ldrb	r7, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028b8:	6030      	str	r0, [r6, #0]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028ba:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 80028be:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028c0:	5957      	ldr	r7, [r2, r5]
 80028c2:	4815      	ldr	r0, [pc, #84]	; (8002918 <ETH_SetDMAConfig+0x80>)
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028c4:	4333      	orrs	r3, r6
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028c6:	4e15      	ldr	r6, [pc, #84]	; (800291c <ETH_SetDMAConfig+0x84>)
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028c8:	4038      	ands	r0, r7
 80028ca:	4303      	orrs	r3, r0
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028cc:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028ce:	5153      	str	r3, [r2, r5]
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028d0:	f241 1504 	movw	r5, #4356	; 0x1104
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028d4:	6827      	ldr	r7, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028d6:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028d8:	403e      	ands	r6, r7
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028de:	7f4b      	ldrb	r3, [r1, #29]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028e0:	4330      	orrs	r0, r6
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028e2:	031b      	lsls	r3, r3, #12
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80028e4:	7d0e      	ldrb	r6, [r1, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028e6:	6020      	str	r0, [r4, #0]
  dmaregval = (dmaconf->TxDMABurstLength |
 80028e8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028ec:	5957      	ldr	r7, [r2, r5]
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ee:	6908      	ldr	r0, [r1, #16]
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028f0:	f241 1608 	movw	r6, #4360	; 0x1108
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <ETH_SetDMAConfig+0x88>)
  dmaregval = (dmaconf->TxDMABurstLength |
 80028f6:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028f8:	480a      	ldr	r0, [pc, #40]	; (8002924 <ETH_SetDMAConfig+0x8c>)
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028fa:	403c      	ands	r4, r7
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028fc:	7f0f      	ldrb	r7, [r1, #28]
 80028fe:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002900:	4323      	orrs	r3, r4
 8002902:	5153      	str	r3, [r2, r5]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002904:	ea41 73c7 	orr.w	r3, r1, r7, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002908:	5994      	ldr	r4, [r2, r6]
 800290a:	4020      	ands	r0, r4
 800290c:	4303      	orrs	r3, r0
 800290e:	5193      	str	r3, [r2, r6]
}
 8002910:	bcf0      	pop	{r4, r5, r6, r7}
 8002912:	4770      	bx	lr
 8002914:	ffff87fd 	.word	0xffff87fd
 8002918:	ffff2ffe 	.word	0xffff2ffe
 800291c:	fffec000 	.word	0xfffec000
 8002920:	ffc0efef 	.word	0xffc0efef
 8002924:	7fc0ffff 	.word	0x7fc0ffff

08002928 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800292c:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 800292e:	b085      	sub	sp, #20
 8002930:	9202      	str	r2, [sp, #8]
 8002932:	eb00 0284 	add.w	r2, r0, r4, lsl #2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t descnbr = 0, idx;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002936:	f8d2 e018 	ldr.w	lr, [r2, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800293a:	f8de 500c 	ldr.w	r5, [lr, #12]
 800293e:	2d00      	cmp	r5, #0
 8002940:	db01      	blt.n	8002946 <ETH_Prepare_Tx_Descriptors+0x1e>
 8002942:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002944:	b11a      	cbz	r2, 800294e <ETH_Prepare_Tx_Descriptors+0x26>
  {
    return HAL_ETH_ERROR_BUSY;
 8002946:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8002948:	b005      	add	sp, #20
 800294a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800294e:	680d      	ldr	r5, [r1, #0]
 8002950:	4673      	mov	r3, lr
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002952:	f8d1 8008 	ldr.w	r8, [r1, #8]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002956:	f015 0c04 	ands.w	ip, r5, #4
 800295a:	d033      	beq.n	80029c4 <ETH_Prepare_Tx_Descriptors+0x9c>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800295c:	f8de 700c 	ldr.w	r7, [lr, #12]
 8002960:	4eb1      	ldr	r6, [pc, #708]	; (8002c28 <ETH_Prepare_Tx_Descriptors+0x300>)
 8002962:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002964:	403e      	ands	r6, r7
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002966:	6807      	ldr	r7, [r0, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002968:	4332      	orrs	r2, r6
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800296a:	072e      	lsls	r6, r5, #28
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800296c:	f8ce 200c 	str.w	r2, [lr, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002970:	f8de 200c 	ldr.w	r2, [lr, #12]
 8002974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002978:	f8ce 200c 	str.w	r2, [lr, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800297c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800297e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002982:	663a      	str	r2, [r7, #96]	; 0x60
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002984:	d51e      	bpl.n	80029c4 <ETH_Prepare_Tx_Descriptors+0x9c>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002986:	f8de 6008 	ldr.w	r6, [lr, #8]
 800298a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800298c:	fa1f f986 	uxth.w	r9, r6
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002990:	6b0e      	ldr	r6, [r1, #48]	; 0x30
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002992:	ea49 4202 	orr.w	r2, r9, r2, lsl #16
 8002996:	f8ce 2008 	str.w	r2, [lr, #8]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800299a:	f8de 200c 	ldr.w	r2, [lr, #12]
 800299e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80029a2:	f8ce 200c 	str.w	r2, [lr, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80029a6:	f8de 200c 	ldr.w	r2, [lr, #12]
 80029aa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80029ae:	4332      	orrs	r2, r6
 80029b0:	f8ce 200c 	str.w	r2, [lr, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80029b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029ba:	667a      	str	r2, [r7, #100]	; 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80029bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029c2:	653a      	str	r2, [r7, #80]	; 0x50
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80029c4:	f015 0910 	ands.w	r9, r5, #16
 80029c8:	d00d      	beq.n	80029e6 <ETH_Prepare_Tx_Descriptors+0xbe>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80029ca:	f8de 7008 	ldr.w	r7, [lr, #8]
 80029ce:	4e97      	ldr	r6, [pc, #604]	; (8002c2c <ETH_Prepare_Tx_Descriptors+0x304>)
 80029d0:	698a      	ldr	r2, [r1, #24]
 80029d2:	403e      	ands	r6, r7
 80029d4:	4332      	orrs	r2, r6
 80029d6:	f8ce 2008 	str.w	r2, [lr, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80029da:	f8de 200c 	ldr.w	r2, [lr, #12]
 80029de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029e2:	f8ce 200c 	str.w	r2, [lr, #12]
  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80029e6:	f015 0f14 	tst.w	r5, #20
 80029ea:	d01c      	beq.n	8002a26 <ETH_Prepare_Tx_Descriptors+0xfe>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80029ec:	f8de 300c 	ldr.w	r3, [lr, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029f0:	1c62      	adds	r2, r4, #1
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80029f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029f6:	2a03      	cmp	r2, #3
 80029f8:	9201      	str	r2, [sp, #4]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80029fa:	f8ce 300c 	str.w	r3, [lr, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029fe:	f8de 300c 	ldr.w	r3, [lr, #12]
 8002a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a06:	f8ce 300c 	str.w	r3, [lr, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a0a:	d901      	bls.n	8002a10 <ETH_Prepare_Tx_Descriptors+0xe8>
 8002a0c:	1ee3      	subs	r3, r4, #3
 8002a0e:	9301      	str	r3, [sp, #4]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a10:	9b01      	ldr	r3, [sp, #4]
 8002a12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002a16:	699b      	ldr	r3, [r3, #24]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a18:	68de      	ldr	r6, [r3, #12]
 8002a1a:	2e00      	cmp	r6, #0
 8002a1c:	f2c0 8136 	blt.w	8002c8c <ETH_Prepare_Tx_Descriptors+0x364>
 8002a20:	f04f 0a02 	mov.w	sl, #2
 8002a24:	e002      	b.n	8002a2c <ETH_Prepare_Tx_Descriptors+0x104>
 8002a26:	f04f 0a01 	mov.w	sl, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a2a:	9401      	str	r4, [sp, #4]
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a2c:	f8d8 6000 	ldr.w	r6, [r8]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a30:	4f7e      	ldr	r7, [pc, #504]	; (8002c2c <ETH_Prepare_Tx_Descriptors+0x304>)
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a32:	601e      	str	r6, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a34:	689e      	ldr	r6, [r3, #8]
 8002a36:	4037      	ands	r7, r6
 8002a38:	e9d8 2601 	ldrd	r2, r6, [r8, #4]
 8002a3c:	4317      	orrs	r7, r2
 8002a3e:	609f      	str	r7, [r3, #8]
  if(txbuffer->next != NULL)
 8002a40:	2e00      	cmp	r6, #0
 8002a42:	f000 8116 	beq.w	8002c72 <ETH_Prepare_Tx_Descriptors+0x34a>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a46:	6832      	ldr	r2, [r6, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a48:	4f79      	ldr	r7, [pc, #484]	; (8002c30 <ETH_Prepare_Tx_Descriptors+0x308>)
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a4a:	605a      	str	r2, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a4c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8002a50:	6872      	ldr	r2, [r6, #4]
 8002a52:	ea0b 0707 	and.w	r7, fp, r7
 8002a56:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8002a5a:	609f      	str	r7, [r3, #8]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002a5c:	f1b9 0f00 	cmp.w	r9, #0
 8002a60:	f000 80c5 	beq.w	8002bee <ETH_Prepare_Tx_Descriptors+0x2c6>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a64:	68df      	ldr	r7, [r3, #12]
 8002a66:	6a0a      	ldr	r2, [r1, #32]
 8002a68:	f427 09f0 	bic.w	r9, r7, #7864320	; 0x780000
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a6c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8002c38 <ETH_Prepare_Tx_Descriptors+0x310>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a70:	ea49 47c2 	orr.w	r7, r9, r2, lsl #19
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a74:	f8d1 901c 	ldr.w	r9, [r1, #28]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a78:	60df      	str	r7, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a7a:	68df      	ldr	r7, [r3, #12]
 8002a7c:	ea07 0808 	and.w	r8, r7, r8
 8002a80:	ea48 0709 	orr.w	r7, r8, r9
 8002a84:	60df      	str	r7, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002a86:	68df      	ldr	r7, [r3, #12]
 8002a88:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
 8002a8c:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002a8e:	f1bc 0f00 	cmp.w	ip, #0
 8002a92:	d006      	beq.n	8002aa2 <ETH_Prepare_Tx_Descriptors+0x17a>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002a94:	689f      	ldr	r7, [r3, #8]
 8002a96:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002a98:	f427 4c40 	bic.w	ip, r7, #49152	; 0xc000
 8002a9c:	ea4c 0702 	orr.w	r7, ip, r2
 8002aa0:	609f      	str	r7, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002aa2:	68df      	ldr	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002aa4:	07aa      	lsls	r2, r5, #30
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002aa6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8002aaa:	60df      	str	r7, [r3, #12]
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002aac:	68df      	ldr	r7, [r3, #12]
 8002aae:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 8002ab2:	60df      	str	r7, [r3, #12]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ab4:	68df      	ldr	r7, [r3, #12]
 8002ab6:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8002aba:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002abc:	d506      	bpl.n	8002acc <ETH_Prepare_Tx_Descriptors+0x1a4>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002abe:	68df      	ldr	r7, [r3, #12]
 8002ac0:	68ca      	ldr	r2, [r1, #12]
 8002ac2:	f027 7c60 	bic.w	ip, r7, #58720256	; 0x3800000
 8002ac6:	ea4c 0702 	orr.w	r7, ip, r2
 8002aca:	60df      	str	r7, [r3, #12]
  while (txbuffer->next != NULL)
 8002acc:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8002ad0:	f1b9 0f00 	cmp.w	r9, #0
 8002ad4:	f000 80e2 	beq.w	8002c9c <ETH_Prepare_Tx_Descriptors+0x374>
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002ad8:	f005 0210 	and.w	r2, r5, #16
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002adc:	f005 0501 	and.w	r5, r5, #1
  while (txbuffer->next != NULL)
 8002ae0:	4656      	mov	r6, sl
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ae2:	f8df c148 	ldr.w	ip, [pc, #328]	; 8002c2c <ETH_Prepare_Tx_Descriptors+0x304>
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002ae6:	9203      	str	r2, [sp, #12]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ae8:	4f51      	ldr	r7, [pc, #324]	; (8002c30 <ETH_Prepare_Tx_Descriptors+0x308>)
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002aea:	9a01      	ldr	r2, [sp, #4]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002aec:	9500      	str	r5, [sp, #0]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002aee:	9401      	str	r4, [sp, #4]
 8002af0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002af4:	e01b      	b.n	8002b2e <ETH_Prepare_Tx_Descriptors+0x206>
 8002af6:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002c38 <ETH_Prepare_Tx_Descriptors+0x310>
 8002afa:	ea05 0909 	and.w	r9, r5, r9
 8002afe:	69cd      	ldr	r5, [r1, #28]
 8002b00:	ea49 0505 	orr.w	r5, r9, r5
 8002b04:	60dd      	str	r5, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002b06:	68dd      	ldr	r5, [r3, #12]
 8002b08:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8002b0c:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b0e:	68dd      	ldr	r5, [r3, #12]
 8002b10:	eba6 0b0a 	sub.w	fp, r6, sl
  while (txbuffer->next != NULL)
 8002b14:	f8d4 9008 	ldr.w	r9, [r4, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b18:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8002b1c:	60dd      	str	r5, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b1e:	68dc      	ldr	r4, [r3, #12]
 8002b20:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8002b24:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002b26:	f1b9 0f00 	cmp.w	r9, #0
 8002b2a:	f000 8087 	beq.w	8002c3c <ETH_Prepare_Tx_Descriptors+0x314>
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b2e:	1c55      	adds	r5, r2, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b30:	68dc      	ldr	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b32:	2d03      	cmp	r5, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b34:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b38:	bf8c      	ite	hi
 8002b3a:	3a03      	subhi	r2, #3
 8002b3c:	462a      	movls	r2, r5
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b3e:	60dc      	str	r4, [r3, #12]
 8002b40:	eb00 0582 	add.w	r5, r0, r2, lsl #2
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b44:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b46:	68dc      	ldr	r4, [r3, #12]
 8002b48:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8002b4c:	60dc      	str	r4, [r3, #12]
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b4e:	68dc      	ldr	r4, [r3, #12]
 8002b50:	2c00      	cmp	r4, #0
 8002b52:	db36      	blt.n	8002bc2 <ETH_Prepare_Tx_Descriptors+0x29a>
 8002b54:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8002b56:	2c00      	cmp	r4, #0
 8002b58:	d133      	bne.n	8002bc2 <ETH_Prepare_Tx_Descriptors+0x29a>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b5a:	f8d9 4000 	ldr.w	r4, [r9]
    descnbr += 1U;
 8002b5e:	3601      	adds	r6, #1
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b60:	f8d9 b004 	ldr.w	fp, [r9, #4]
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b64:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b66:	689d      	ldr	r5, [r3, #8]
    if (txbuffer->next != NULL)
 8002b68:	f8d9 4008 	ldr.w	r4, [r9, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b6c:	ea05 050c 	and.w	r5, r5, ip
 8002b70:	ea45 050b 	orr.w	r5, r5, fp
 8002b74:	609d      	str	r5, [r3, #8]
    if (txbuffer->next != NULL)
 8002b76:	b1f4      	cbz	r4, 8002bb6 <ETH_Prepare_Tx_Descriptors+0x28e>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b78:	e9d4 5900 	ldrd	r5, r9, [r4]
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b7c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b7e:	689d      	ldr	r5, [r3, #8]
 8002b80:	403d      	ands	r5, r7
 8002b82:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8002b86:	609d      	str	r5, [r3, #8]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002b88:	68dd      	ldr	r5, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002b8a:	f1b8 0f00 	cmp.w	r8, #0
 8002b8e:	d1b2      	bne.n	8002af6 <ETH_Prepare_Tx_Descriptors+0x1ce>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b90:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002c34 <ETH_Prepare_Tx_Descriptors+0x30c>
 8002b94:	ea05 0909 	and.w	r9, r5, r9
 8002b98:	684d      	ldr	r5, [r1, #4]
 8002b9a:	ea49 0505 	orr.w	r5, r9, r5
 8002b9e:	60dd      	str	r5, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002ba0:	9d00      	ldr	r5, [sp, #0]
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	d0b3      	beq.n	8002b0e <ETH_Prepare_Tx_Descriptors+0x1e6>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002ba6:	68dd      	ldr	r5, [r3, #12]
 8002ba8:	f425 3940 	bic.w	r9, r5, #196608	; 0x30000
 8002bac:	694d      	ldr	r5, [r1, #20]
 8002bae:	ea49 0505 	orr.w	r5, r9, r5
 8002bb2:	60dd      	str	r5, [r3, #12]
 8002bb4:	e7ab      	b.n	8002b0e <ETH_Prepare_Tx_Descriptors+0x1e6>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bb6:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bb8:	464c      	mov	r4, r9
 8002bba:	689d      	ldr	r5, [r3, #8]
 8002bbc:	403d      	ands	r5, r7
 8002bbe:	609d      	str	r5, [r3, #8]
 8002bc0:	e7e2      	b.n	8002b88 <ETH_Prepare_Tx_Descriptors+0x260>
 8002bc2:	9c01      	ldr	r4, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bc4:	4673      	mov	r3, lr
      for(idx = 0; idx < descnbr; idx ++)
 8002bc6:	2e00      	cmp	r6, #0
 8002bc8:	f43f aebd 	beq.w	8002946 <ETH_Prepare_Tx_Descriptors+0x1e>
 8002bcc:	2100      	movs	r1, #0
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bce:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bd0:	68da      	ldr	r2, [r3, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bd2:	3c03      	subs	r4, #3
      for(idx = 0; idx < descnbr; idx ++)
 8002bd4:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bd6:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bdc:	bf98      	it	ls
 8002bde:	462c      	movls	r4, r5
 8002be0:	60da      	str	r2, [r3, #12]
      for(idx = 0; idx < descnbr; idx ++)
 8002be2:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002be4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002be8:	699b      	ldr	r3, [r3, #24]
      for(idx = 0; idx < descnbr; idx ++)
 8002bea:	d1f0      	bne.n	8002bce <ETH_Prepare_Tx_Descriptors+0x2a6>
 8002bec:	e6ab      	b.n	8002946 <ETH_Prepare_Tx_Descriptors+0x1e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002bee:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8002bf2:	4f10      	ldr	r7, [pc, #64]	; (8002c34 <ETH_Prepare_Tx_Descriptors+0x30c>)
 8002bf4:	684a      	ldr	r2, [r1, #4]
 8002bf6:	ea09 0707 	and.w	r7, r9, r7
 8002bfa:	4317      	orrs	r7, r2
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002bfc:	07ea      	lsls	r2, r5, #31
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002bfe:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c00:	d506      	bpl.n	8002c10 <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c02:	68df      	ldr	r7, [r3, #12]
 8002c04:	694a      	ldr	r2, [r1, #20]
 8002c06:	f427 3840 	bic.w	r8, r7, #196608	; 0x30000
 8002c0a:	ea48 0702 	orr.w	r7, r8, r2
 8002c0e:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c10:	06af      	lsls	r7, r5, #26
 8002c12:	f57f af3c 	bpl.w	8002a8e <ETH_Prepare_Tx_Descriptors+0x166>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c16:	68df      	ldr	r7, [r3, #12]
 8002c18:	690a      	ldr	r2, [r1, #16]
 8002c1a:	f027 6840 	bic.w	r8, r7, #201326592	; 0xc000000
 8002c1e:	ea48 0702 	orr.w	r7, r8, r2
 8002c22:	60df      	str	r7, [r3, #12]
 8002c24:	e733      	b.n	8002a8e <ETH_Prepare_Tx_Descriptors+0x166>
 8002c26:	bf00      	nop
 8002c28:	ffff0000 	.word	0xffff0000
 8002c2c:	ffffc000 	.word	0xffffc000
 8002c30:	c000ffff 	.word	0xc000ffff
 8002c34:	ffff8000 	.word	0xffff8000
 8002c38:	fffc0000 	.word	0xfffc0000
 8002c3c:	9201      	str	r2, [sp, #4]
  if(ItMode != ((uint32_t)RESET))
 8002c3e:	9a02      	ldr	r2, [sp, #8]
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c40:	6899      	ldr	r1, [r3, #8]
  if(ItMode != ((uint32_t)RESET))
 8002c42:	b1fa      	cbz	r2, 8002c84 <ETH_Prepare_Tx_Descriptors+0x35c>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c44:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002c48:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c4a:	68d9      	ldr	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c4c:	9a01      	ldr	r2, [sp, #4]
 8002c4e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c54:	eb00 0482 	add.w	r4, r0, r2, lsl #2
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c58:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c5a:	62e5      	str	r5, [r4, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8002c5c:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5e:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002c60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c62:	3301      	adds	r3, #1
 8002c64:	445b      	add	r3, fp
 8002c66:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c68:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8002c6a:	2000      	movs	r0, #0
}
 8002c6c:	b005      	add	sp, #20
 8002c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c72:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c74:	4646      	mov	r6, r8
 8002c76:	4f0a      	ldr	r7, [pc, #40]	; (8002ca0 <ETH_Prepare_Tx_Descriptors+0x378>)
 8002c78:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8002c7c:	ea08 0707 	and.w	r7, r8, r7
 8002c80:	609f      	str	r7, [r3, #8]
 8002c82:	e6eb      	b.n	8002a5c <ETH_Prepare_Tx_Descriptors+0x134>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002c88:	6099      	str	r1, [r3, #8]
 8002c8a:	e7de      	b.n	8002c4a <ETH_Prepare_Tx_Descriptors+0x322>
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c8c:	f8de 300c 	ldr.w	r3, [lr, #12]
      return HAL_ETH_ERROR_BUSY;
 8002c90:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c96:	f8ce 300c 	str.w	r3, [lr, #12]
      return HAL_ETH_ERROR_BUSY;
 8002c9a:	e655      	b.n	8002948 <ETH_Prepare_Tx_Descriptors+0x20>
  while (txbuffer->next != NULL)
 8002c9c:	46cb      	mov	fp, r9
 8002c9e:	e7ce      	b.n	8002c3e <ETH_Prepare_Tx_Descriptors+0x316>
 8002ca0:	c000ffff 	.word	0xc000ffff

08002ca4 <HAL_ETH_DescAssignMemory>:
  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002ca4:	b1ba      	cbz	r2, 8002cd6 <HAL_ETH_DescAssignMemory+0x32>
 8002ca6:	2903      	cmp	r1, #3
 8002ca8:	d815      	bhi.n	8002cd6 <HAL_ETH_DescAssignMemory+0x32>
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8002caa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002cae:	6c41      	ldr	r1, [r0, #68]	; 0x44
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002cb0:	600a      	str	r2, [r1, #0]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002cb2:	68c8      	ldr	r0, [r1, #12]
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002cb4:	610a      	str	r2, [r1, #16]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002cb6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8002cba:	60c8      	str	r0, [r1, #12]
  if(pBuffer2 != NULL)
 8002cbc:	b12b      	cbz	r3, 8002cca <HAL_ETH_DescAssignMemory+0x26>
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002cbe:	608b      	str	r3, [r1, #8]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002cc0:	68ca      	ldr	r2, [r1, #12]
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002cc2:	614b      	str	r3, [r1, #20]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002cc4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002cc8:	60ca      	str	r2, [r1, #12]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002cca:	68cb      	ldr	r3, [r1, #12]
  return HAL_OK;
 8002ccc:	2000      	movs	r0, #0
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	60cb      	str	r3, [r1, #12]
}
 8002cd4:	4770      	bx	lr
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	6743      	str	r3, [r0, #116]	; 0x74
    return HAL_ERROR;
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <HAL_ETH_Start_IT>:
  if(heth->gState == HAL_ETH_STATE_READY)
 8002ce0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d001      	beq.n	8002cea <HAL_ETH_Start_IT+0xa>
    return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
}
 8002ce8:	4770      	bx	lr
{
 8002cea:	b470      	push	{r4, r5, r6}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cec:	2323      	movs	r3, #35	; 0x23
 8002cee:	4601      	mov	r1, r0
 8002cf0:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8002cf4:	f100 0454 	add.w	r4, r0, #84	; 0x54
 8002cf8:	66c3      	str	r3, [r0, #108]	; 0x6c
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002cfa:	f852 0b04 	ldr.w	r0, [r2], #4
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002cfe:	68c3      	ldr	r3, [r0, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d00:	42a2      	cmp	r2, r4
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d06:	60c3      	str	r3, [r0, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d08:	d1f7      	bne.n	8002cfa <HAL_ETH_Start_IT+0x1a>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d0a:	680b      	ldr	r3, [r1, #0]
    heth->RxDescList.ItMode = 1U;
 8002d0c:	2401      	movs	r4, #1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002d0e:	f241 1004 	movw	r0, #4356	; 0x1104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d12:	f241 1608 	movw	r6, #4360	; 0x1108
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d16:	681a      	ldr	r2, [r3, #0]
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002d18:	f503 558b 	add.w	r5, r3, #4448	; 0x1160
    heth->RxDescList.ItMode = 1U;
 8002d1c:	664c      	str	r4, [r1, #100]	; 0x64
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d1e:	f241 1434 	movw	r4, #4404	; 0x1134
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d22:	f042 0202 	orr.w	r2, r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002d30:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002d3c:	581a      	ldr	r2, [r3, r0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	501a      	str	r2, [r3, r0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d44:	f24d 0241 	movw	r2, #53313	; 0xd041
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d48:	5998      	ldr	r0, [r3, r6]
 8002d4a:	f040 0001 	orr.w	r0, r0, #1
 8002d4e:	5198      	str	r0, [r3, r6]
    heth->gState = HAL_ETH_STATE_READY;
 8002d50:	2610      	movs	r6, #16
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002d52:	6828      	ldr	r0, [r5, #0]
 8002d54:	f440 7081 	orr.w	r0, r0, #258	; 0x102
 8002d58:	6028      	str	r0, [r5, #0]
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002d5a:	2522      	movs	r5, #34	; 0x22
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d5c:	5918      	ldr	r0, [r3, r4]
 8002d5e:	4302      	orrs	r2, r0
    return HAL_OK;
 8002d60:	2000      	movs	r0, #0
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d62:	511a      	str	r2, [r3, r4]
    heth->gState = HAL_ETH_STATE_READY;
 8002d64:	66ce      	str	r6, [r1, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002d66:	670d      	str	r5, [r1, #112]	; 0x70
}
 8002d68:	bc70      	pop	{r4, r5, r6}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ETH_Stop_IT>:
  if(heth->gState != HAL_ETH_STATE_RESET)
 8002d6c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d037      	beq.n	8002de2 <HAL_ETH_Stop_IT+0x76>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d72:	4602      	mov	r2, r0
 8002d74:	491c      	ldr	r1, [pc, #112]	; (8002de8 <HAL_ETH_Stop_IT+0x7c>)
{
 8002d76:	b4f0      	push	{r4, r5, r6, r7}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d78:	2423      	movs	r4, #35	; 0x23
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d7a:	f852 3b44 	ldr.w	r3, [r2], #68
 8002d7e:	f241 1734 	movw	r7, #4404	; 0x1134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002d82:	f241 1604 	movw	r6, #4356	; 0x1104
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d86:	66c4      	str	r4, [r0, #108]	; 0x6c
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d88:	f241 1508 	movw	r5, #4360	; 0x1108
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002d8c:	59dc      	ldr	r4, [r3, r7]
 8002d8e:	4021      	ands	r1, r4
 8002d90:	f100 0454 	add.w	r4, r0, #84	; 0x54
 8002d94:	51d9      	str	r1, [r3, r7]
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002d96:	5999      	ldr	r1, [r3, r6]
 8002d98:	f021 0101 	bic.w	r1, r1, #1
 8002d9c:	5199      	str	r1, [r3, r6]
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d9e:	5959      	ldr	r1, [r3, r5]
 8002da0:	f021 0101 	bic.w	r1, r1, #1
 8002da4:	5159      	str	r1, [r3, r5]
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	f021 0101 	bic.w	r1, r1, #1
 8002dac:	6019      	str	r1, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002dae:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8002db2:	f041 0101 	orr.w	r1, r1, #1
 8002db6:	f8c3 1d00 	str.w	r1, [r3, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	f021 0102 	bic.w	r1, r1, #2
 8002dc0:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002dc2:	f852 1b04 	ldr.w	r1, [r2], #4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002dc6:	68cb      	ldr	r3, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002dc8:	42a2      	cmp	r2, r4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dce:	60cb      	str	r3, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002dd0:	d1f7      	bne.n	8002dc2 <HAL_ETH_Stop_IT+0x56>
    heth->gState = HAL_ETH_STATE_READY;
 8002dd2:	2110      	movs	r1, #16
    heth->RxDescList.ItMode = 0U;
 8002dd4:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8002dd6:	66c1      	str	r1, [r0, #108]	; 0x6c
    heth->RxDescList.ItMode = 0U;
 8002dd8:	6642      	str	r2, [r0, #100]	; 0x64
    heth->RxState = HAL_ETH_STATE_READY;
 8002dda:	6701      	str	r1, [r0, #112]	; 0x70
}
 8002ddc:	4610      	mov	r0, r2
 8002dde:	bcf0      	pop	{r4, r5, r6, r7}
 8002de0:	4770      	bx	lr
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	4770      	bx	lr
 8002de8:	ffff2fbe 	.word	0xffff2fbe

08002dec <HAL_ETH_Transmit>:
{
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	4603      	mov	r3, r0
  if(pTxConfig == NULL)
 8002df0:	b121      	cbz	r1, 8002dfc <HAL_ETH_Transmit+0x10>
  if(heth->gState == HAL_ETH_STATE_READY)
 8002df2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8002df4:	2c10      	cmp	r4, #16
 8002df6:	d006      	beq.n	8002e06 <HAL_ETH_Transmit+0x1a>
    return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
}
 8002dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002dfc:	6f42      	ldr	r2, [r0, #116]	; 0x74
    return HAL_ERROR;
 8002dfe:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e00:	4302      	orrs	r2, r0
 8002e02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e06:	4615      	mov	r5, r2
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	f7ff fd8c 	bl	8002928 <ETH_Prepare_Tx_Descriptors>
 8002e10:	bb00      	cbnz	r0, 8002e54 <HAL_ETH_Transmit+0x68>
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002e12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002e14:	1c53      	adds	r3, r2, #1
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002e16:	1d91      	adds	r1, r2, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002e18:	2b03      	cmp	r3, #3
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002e1a:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002e1e:	bf88      	it	hi
 8002e20:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002e22:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002e24:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002e26:	3306      	adds	r3, #6
 8002e28:	f502 5289 	add.w	r2, r2, #4384	; 0x1120
 8002e2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002e30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e32:	f7fe fc1f 	bl	8001674 <HAL_GetTick>
 8002e36:	4607      	mov	r7, r0
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002e38:	e007      	b.n	8002e4a <HAL_ETH_Transmit+0x5e>
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	04ca      	lsls	r2, r1, #19
 8002e44:	d40c      	bmi.n	8002e60 <HAL_ETH_Transmit+0x74>
      if(Timeout != HAL_MAX_DELAY)
 8002e46:	1c6b      	adds	r3, r5, #1
 8002e48:	d114      	bne.n	8002e74 <HAL_ETH_Transmit+0x88>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002e4a:	68f3      	ldr	r3, [r6, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dbf4      	blt.n	8002e3a <HAL_ETH_Transmit+0x4e>
    return HAL_OK;
 8002e50:	2000      	movs	r0, #0
}
 8002e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002e54:	6f63      	ldr	r3, [r4, #116]	; 0x74
      return HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6763      	str	r3, [r4, #116]	; 0x74
}
 8002e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e60:	6f62      	ldr	r2, [r4, #116]	; 0x74
        heth->gState = HAL_ETH_STATE_ERROR;
 8002e62:	21e0      	movs	r1, #224	; 0xe0
        return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e66:	f042 0208 	orr.w	r2, r2, #8
 8002e6a:	6762      	str	r2, [r4, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	67a3      	str	r3, [r4, #120]	; 0x78
        heth->gState = HAL_ETH_STATE_ERROR;
 8002e70:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8002e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002e74:	f7fe fbfe 	bl	8001674 <HAL_GetTick>
 8002e78:	1bc0      	subs	r0, r0, r7
 8002e7a:	42a8      	cmp	r0, r5
 8002e7c:	d801      	bhi.n	8002e82 <HAL_ETH_Transmit+0x96>
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	d1e3      	bne.n	8002e4a <HAL_ETH_Transmit+0x5e>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002e82:	6f63      	ldr	r3, [r4, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002e84:	22e0      	movs	r2, #224	; 0xe0
          return HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6763      	str	r3, [r4, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002e8e:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8002e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e92:	bf00      	nop

08002e94 <HAL_ETH_IsRxDataAvailable>:
  if(dmarxdesclist->AppDescNbr != 0U)
 8002e94:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002e96:	2a00      	cmp	r2, #0
 8002e98:	d168      	bne.n	8002f6c <HAL_ETH_IsRxDataAvailable+0xd8>
 8002e9a:	4601      	mov	r1, r0
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002e9c:	6d40      	ldr	r0, [r0, #84]	; 0x54
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002e9e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
{
 8002ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002ea8:	4617      	mov	r7, r2
 8002eaa:	4616      	mov	r6, r2
  uint32_t descscancnt = 0;
 8002eac:	4614      	mov	r4, r2
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002eae:	2c04      	cmp	r4, #4
 8002eb0:	68dd      	ldr	r5, [r3, #12]
 8002eb2:	d018      	beq.n	8002ee6 <HAL_ETH_IsRxDataAvailable+0x52>
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	db16      	blt.n	8002ee6 <HAL_ETH_IsRxDataAvailable+0x52>
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002eb8:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    descscancnt++;
 8002ebc:	3401      	adds	r4, #1
 8002ebe:	1c45      	adds	r5, r0, #1
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002ec0:	f01c 5f80 	tst.w	ip, #268435456	; 0x10000000
 8002ec4:	d154      	bne.n	8002f70 <HAL_ETH_IsRxDataAvailable+0xdc>
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	d545      	bpl.n	8002f58 <HAL_ETH_IsRxDataAvailable+0xc4>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002ecc:	2d03      	cmp	r5, #3
 8002ece:	4607      	mov	r7, r0
      appdesccnt = 1U;
 8002ed0:	f04f 0601 	mov.w	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002ed4:	bf88      	it	hi
 8002ed6:	1ec5      	subhi	r5, r0, #3
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002ed8:	2c04      	cmp	r4, #4
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002eda:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002ede:	4628      	mov	r0, r5
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002ee2:	68dd      	ldr	r5, [r3, #12]
 8002ee4:	d1e6      	bne.n	8002eb4 <HAL_ETH_IsRxDataAvailable+0x20>
  if(appdesccnt > 0U)
 8002ee6:	2e00      	cmp	r6, #0
 8002ee8:	d032      	beq.n	8002f50 <HAL_ETH_IsRxDataAvailable+0xbc>
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002eea:	eb01 0387 	add.w	r3, r1, r7, lsl #2
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002eee:	f8d1 8064 	ldr.w	r8, [r1, #100]	; 0x64
 8002ef2:	f106 3eff 	add.w	lr, r6, #4294967295
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002ef6:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002efc:	e9c1 0715 	strd	r0, r7, [r1, #84]	; 0x54
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002f00:	e9d3 5004 	ldrd	r5, r0, [r3, #16]
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002f04:	1c7c      	adds	r4, r7, #1
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002f06:	601d      	str	r5, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002f08:	f8c3 c00c 	str.w	ip, [r3, #12]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002f0c:	b120      	cbz	r0, 8002f18 <HAL_ETH_IsRxDataAvailable+0x84>
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002f0e:	6098      	str	r0, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002f10:	68d8      	ldr	r0, [r3, #12]
 8002f12:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002f16:	60d8      	str	r0, [r3, #12]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002f18:	68d8      	ldr	r0, [r3, #12]
 8002f1a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002f1e:	60d8      	str	r0, [r3, #12]
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002f20:	f1b8 0f00 	cmp.w	r8, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_ETH_IsRxDataAvailable+0x9a>
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002f26:	68d8      	ldr	r0, [r3, #12]
 8002f28:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8002f2c:	60d8      	str	r0, [r3, #12]
      if(descscancnt < (appdesccnt - 1U))
 8002f2e:	4596      	cmp	lr, r2
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002f30:	f102 0201 	add.w	r2, r2, #1
      if(descscancnt < (appdesccnt - 1U))
 8002f34:	d906      	bls.n	8002f44 <HAL_ETH_IsRxDataAvailable+0xb0>
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002f36:	2c03      	cmp	r4, #3
 8002f38:	bf88      	it	hi
 8002f3a:	1efc      	subhi	r4, r7, #3
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f3c:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8002f40:	4627      	mov	r7, r4
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002f44:	4296      	cmp	r6, r2
 8002f46:	d1db      	bne.n	8002f00 <HAL_ETH_IsRxDataAvailable+0x6c>
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002f48:	6808      	ldr	r0, [r1, #0]
 8002f4a:	f241 1228 	movw	r2, #4392	; 0x1128
 8002f4e:	5083      	str	r3, [r0, r2]
  dmarxdesclist->AppDescNbr = 0U;
 8002f50:	2000      	movs	r0, #0
 8002f52:	65c8      	str	r0, [r1, #92]	; 0x5c
}
 8002f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002f58:	2d03      	cmp	r5, #3
      appdesccnt += 1U;
 8002f5a:	f106 0601 	add.w	r6, r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002f5e:	bf8c      	ite	hi
 8002f60:	3803      	subhi	r0, #3
 8002f62:	4628      	movls	r0, r5
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f64:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	e7a0      	b.n	8002eae <HAL_ETH_IsRxDataAvailable+0x1a>
    return 0;
 8002f6c:	2000      	movs	r0, #0
}
 8002f6e:	4770      	bx	lr
      appdesccnt += 1U;
 8002f70:	3601      	adds	r6, #1
 8002f72:	2e01      	cmp	r6, #1
 8002f74:	bf08      	it	eq
 8002f76:	4607      	moveq	r7, r0
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002f78:	2d03      	cmp	r5, #3
 8002f7a:	bf88      	it	hi
 8002f7c:	1ec5      	subhi	r5, r0, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002f7e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	db09      	blt.n	8002f9e <HAL_ETH_IsRxDataAvailable+0x10a>
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	005a      	lsls	r2, r3, #1
 8002f8e:	d506      	bpl.n	8002f9e <HAL_ETH_IsRxDataAvailable+0x10a>
          dmarxdesclist->AppContextDesc = 1;
 8002f90:	2201      	movs	r2, #1
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002f92:	18ab      	adds	r3, r5, r2
          dmarxdesclist->AppContextDesc = 1;
 8002f94:	660a      	str	r2, [r1, #96]	; 0x60
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	bf8c      	ite	hi
 8002f9a:	3d03      	subhi	r5, #3
 8002f9c:	461d      	movls	r5, r3
      dmarxdesclist->CurRxDesc = descidx;
 8002f9e:	654d      	str	r5, [r1, #84]	; 0x54
      return 1;
 8002fa0:	2001      	movs	r0, #1
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002fa2:	e9c1 7616 	strd	r7, r6, [r1, #88]	; 0x58
      return 1;
 8002fa6:	e7d5      	b.n	8002f54 <HAL_ETH_IsRxDataAvailable+0xc0>

08002fa8 <HAL_ETH_GetRxDataBuffer>:
{
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	4606      	mov	r6, r0
  if(rxbuff == NULL)
 8002fac:	2900      	cmp	r1, #0
 8002fae:	d048      	beq.n	8003042 <HAL_ETH_GetRxDataBuffer+0x9a>
  if(dmarxdesclist->AppDescNbr == 0U)
 8002fb0:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	2d00      	cmp	r5, #0
 8002fb6:	d036      	beq.n	8003026 <HAL_ETH_GetRxDataBuffer+0x7e>
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002fb8:	6d82      	ldr	r2, [r0, #88]	; 0x58
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002fba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002fc0:	3d01      	subs	r5, #1
 8002fc2:	f8d6 e014 	ldr.w	lr, [r6, #20]
 8002fc6:	d01a      	beq.n	8002ffe <HAL_ETH_GetRxDataBuffer+0x56>
 8002fc8:	2100      	movs	r1, #0
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002fca:	f8d3 c010 	ldr.w	ip, [r3, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002fce:	1c50      	adds	r0, r2, #1
    if(dmarxdesc->BackupAddr1 != 0U)
 8002fd0:	695f      	ldr	r7, [r3, #20]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002fd2:	3a03      	subs	r2, #3
    rxbuff->len =  heth->Init.RxBuffLen;
 8002fd4:	e9c4 ce00 	strd	ip, lr, [r4]
 8002fd8:	68a4      	ldr	r4, [r4, #8]
    if(dmarxdesc->BackupAddr1 != 0U)
 8002fda:	b11f      	cbz	r7, 8002fe4 <HAL_ETH_GetRxDataBuffer+0x3c>
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002fdc:	695f      	ldr	r7, [r3, #20]
 8002fde:	e9c4 7e00 	strd	r7, lr, [r4]
 8002fe2:	68a4      	ldr	r4, [r4, #8]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002fe4:	2803      	cmp	r0, #3
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002fe6:	f101 0101 	add.w	r1, r1, #1
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002fea:	68df      	ldr	r7, [r3, #12]
 8002fec:	bf98      	it	ls
 8002fee:	4602      	movls	r2, r0
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002ff0:	42a9      	cmp	r1, r5
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ff2:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002ff8:	d1e7      	bne.n	8002fca <HAL_ETH_GetRxDataBuffer+0x22>
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002ffa:	f3c7 050e 	ubfx	r5, r7, #0, #15
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002ffe:	68da      	ldr	r2, [r3, #12]
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003000:	6919      	ldr	r1, [r3, #16]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8003002:	f3c2 020e 	ubfx	r2, r2, #0, #15
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003006:	6021      	str	r1, [r4, #0]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8003008:	1b55      	subs	r5, r2, r5
  if(lastdesclen <= heth->Init.RxBuffLen)
 800300a:	4575      	cmp	r5, lr
 800300c:	d916      	bls.n	800303c <HAL_ETH_GetRxDataBuffer+0x94>
  else if(dmarxdesc->BackupAddr1 != 0U)
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	b192      	cbz	r2, 8003038 <HAL_ETH_GetRxDataBuffer+0x90>
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003012:	695a      	ldr	r2, [r3, #20]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8003014:	eba5 050e 	sub.w	r5, r5, lr
    rxbuff = rxbuff->next;
 8003018:	68a3      	ldr	r3, [r4, #8]
  return HAL_OK;
 800301a:	2000      	movs	r0, #0
    rxbuff->len = heth->Init.RxBuffLen;
 800301c:	f8c4 e004 	str.w	lr, [r4, #4]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8003020:	e9c3 2500 	strd	r2, r5, [r3]
}
 8003024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003026:	f7ff ff35 	bl	8002e94 <HAL_ETH_IsRxDataAvailable>
 800302a:	b128      	cbz	r0, 8003038 <HAL_ETH_GetRxDataBuffer+0x90>
 800302c:	e9d6 2516 	ldrd	r2, r5, [r6, #88]	; 0x58
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003030:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	e7c3      	b.n	8002fc0 <HAL_ETH_GetRxDataBuffer+0x18>
      return HAL_ERROR;
 8003038:	2001      	movs	r0, #1
}
 800303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rxbuff->len = lastdesclen;
 800303c:	6065      	str	r5, [r4, #4]
  return HAL_OK;
 800303e:	2000      	movs	r0, #0
}
 8003040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003042:	2001      	movs	r0, #1
 8003044:	6770      	str	r0, [r6, #116]	; 0x74
}
 8003046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003048 <HAL_ETH_GetRxDataLength>:
{
 8003048:	b570      	push	{r4, r5, r6, lr}
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800304a:	e9d0 5316 	ldrd	r5, r3, [r0, #88]	; 0x58
{
 800304e:	4604      	mov	r4, r0
 8003050:	460e      	mov	r6, r1
  if(dmarxdesclist->AppDescNbr == 0U)
 8003052:	b16b      	cbz	r3, 8003070 <HAL_ETH_GetRxDataLength+0x28>
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003054:	442b      	add	r3, r5
  return HAL_OK;
 8003056:	2000      	movs	r0, #0
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003058:	1e5a      	subs	r2, r3, #1
 800305a:	2a03      	cmp	r2, #3
 800305c:	bf88      	it	hi
 800305e:	1f5a      	subhi	r2, r3, #5
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003060:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003064:	6c63      	ldr	r3, [r4, #68]	; 0x44
  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800306c:	6033      	str	r3, [r6, #0]
}
 800306e:	bd70      	pop	{r4, r5, r6, pc}
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003070:	f7ff ff10 	bl	8002e94 <HAL_ETH_IsRxDataAvailable>
 8003074:	b108      	cbz	r0, 800307a <HAL_ETH_GetRxDataLength+0x32>
 8003076:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003078:	e7ec      	b.n	8003054 <HAL_ETH_GetRxDataLength+0xc>
      return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
}
 800307c:	bd70      	pop	{r4, r5, r6, pc}
 800307e:	bf00      	nop

08003080 <HAL_ETH_BuildRxDescriptors>:
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8003082:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  if(dmarxdesclist->AppDescNbr == 0U)
 8003084:	2d00      	cmp	r5, #0
 8003086:	d03e      	beq.n	8003106 <HAL_ETH_BuildRxDescriptors+0x86>
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8003088:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(dmarxdesclist->AppContextDesc != 0U)
 800308a:	6e02      	ldr	r2, [r0, #96]	; 0x60
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800308c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  if(dmarxdesclist->AppContextDesc != 0U)
 8003092:	2a00      	cmp	r2, #0
 8003094:	d134      	bne.n	8003100 <HAL_ETH_BuildRxDescriptors+0x80>
    if(dmarxdesclist->ItMode != 0U)
 8003096:	f8d0 e064 	ldr.w	lr, [r0, #100]	; 0x64
 800309a:	f105 3cff 	add.w	ip, r5, #4294967295
 800309e:	2200      	movs	r2, #0
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80030a0:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80030a4:	6919      	ldr	r1, [r3, #16]
      INCR_RX_DESC_INDEX(descindex, 1U);
 80030a6:	1c66      	adds	r6, r4, #1
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80030a8:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80030aa:	60df      	str	r7, [r3, #12]
    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80030ac:	6959      	ldr	r1, [r3, #20]
 80030ae:	b129      	cbz	r1, 80030bc <HAL_ETH_BuildRxDescriptors+0x3c>
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80030b0:	6959      	ldr	r1, [r3, #20]
 80030b2:	6099      	str	r1, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80030b4:	68d9      	ldr	r1, [r3, #12]
 80030b6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80030ba:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80030bc:	68d9      	ldr	r1, [r3, #12]
 80030be:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80030c2:	60d9      	str	r1, [r3, #12]
    if(dmarxdesclist->ItMode != 0U)
 80030c4:	f1be 0f00 	cmp.w	lr, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_ETH_BuildRxDescriptors+0x52>
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80030ca:	68d9      	ldr	r1, [r3, #12]
 80030cc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80030d0:	60d9      	str	r1, [r3, #12]
    if(descscan < (totalappdescnbr - 1U))
 80030d2:	4594      	cmp	ip, r2
 80030d4:	d907      	bls.n	80030e6 <HAL_ETH_BuildRxDescriptors+0x66>
      INCR_RX_DESC_INDEX(descindex, 1U);
 80030d6:	2e03      	cmp	r6, #3
 80030d8:	f1a4 0403 	sub.w	r4, r4, #3
 80030dc:	bf98      	it	ls
 80030de:	4634      	movls	r4, r6
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80030e0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80030e6:	3201      	adds	r2, #1
 80030e8:	42aa      	cmp	r2, r5
 80030ea:	d3db      	bcc.n	80030a4 <HAL_ETH_BuildRxDescriptors+0x24>
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80030ec:	6804      	ldr	r4, [r0, #0]
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80030ee:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80030f0:	f241 1128 	movw	r1, #4392	; 0x1128
 80030f4:	5063      	str	r3, [r4, r1]
  return HAL_OK;
 80030f6:	4613      	mov	r3, r2
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80030f8:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003100:	3501      	adds	r5, #1
 8003102:	d1c8      	bne.n	8003096 <HAL_ETH_BuildRxDescriptors+0x16>
 8003104:	e7f2      	b.n	80030ec <HAL_ETH_BuildRxDescriptors+0x6c>
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800310c <HAL_ETH_ReadPHYRegister>:
{
 800310c:	b570      	push	{r4, r5, r6, lr}
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800310e:	6806      	ldr	r6, [r0, #0]
 8003110:	f8d6 4200 	ldr.w	r4, [r6, #512]	; 0x200
 8003114:	07e4      	lsls	r4, r4, #31
 8003116:	d501      	bpl.n	800311c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_ERROR;
 8003118:	2001      	movs	r0, #1
}
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	461d      	mov	r5, r3
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800311e:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
 8003122:	4604      	mov	r4, r0
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003124:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8003128:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800312c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003130:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8003134:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003138:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
  tickstart = HAL_GetTick();
 800313c:	f7fe fa9a 	bl	8001674 <HAL_GetTick>
 8003140:	4606      	mov	r6, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003142:	e005      	b.n	8003150 <HAL_ETH_ReadPHYRegister+0x44>
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003144:	f7fe fa96 	bl	8001674 <HAL_GetTick>
 8003148:	1b80      	subs	r0, r0, r6
 800314a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800314e:	d8e3      	bhi.n	8003118 <HAL_ETH_ReadPHYRegister+0xc>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003150:	6821      	ldr	r1, [r4, #0]
 8003152:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 8003156:	f012 0201 	ands.w	r2, r2, #1
 800315a:	d1f3      	bne.n	8003144 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800315c:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8003160:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003162:	b29b      	uxth	r3, r3
 8003164:	602b      	str	r3, [r5, #0]
}
 8003166:	bd70      	pop	{r4, r5, r6, pc}

08003168 <HAL_ETH_WritePHYRegister>:
{
 8003168:	b570      	push	{r4, r5, r6, lr}
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800316a:	6805      	ldr	r5, [r0, #0]
 800316c:	f8d5 4200 	ldr.w	r4, [r5, #512]	; 0x200
 8003170:	07e4      	lsls	r4, r4, #31
 8003172:	d501      	bpl.n	8003178 <HAL_ETH_WritePHYRegister+0x10>
    return HAL_ERROR;
 8003174:	2001      	movs	r0, #1
}
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	4604      	mov	r4, r0
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800317a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800317e:	b29d      	uxth	r5, r3
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003180:	4e11      	ldr	r6, [pc, #68]	; (80031c8 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003182:	f020 7378 	bic.w	r3, r0, #65011712	; 0x3e00000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003186:	f8c6 5204 	str.w	r5, [r6, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800318a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800318e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003196:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800319a:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800319e:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
  tickstart = HAL_GetTick();
 80031a2:	f7fe fa67 	bl	8001674 <HAL_GetTick>
 80031a6:	4605      	mov	r5, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80031a8:	e005      	b.n	80031b6 <HAL_ETH_WritePHYRegister+0x4e>
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80031aa:	f7fe fa63 	bl	8001674 <HAL_GetTick>
 80031ae:	1b40      	subs	r0, r0, r5
 80031b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031b4:	d8de      	bhi.n	8003174 <HAL_ETH_WritePHYRegister+0xc>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031bc:	f013 0301 	ands.w	r3, r3, #1
 80031c0:	d1f3      	bne.n	80031aa <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 80031c2:	4618      	mov	r0, r3
}
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
 80031c6:	bf00      	nop
 80031c8:	40028000 	.word	0x40028000

080031cc <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80031cc:	2900      	cmp	r1, #0
 80031ce:	f000 80cb 	beq.w	8003368 <HAL_ETH_GetMACConfig+0x19c>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80031d2:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80031d4:	2000      	movs	r0, #0
{
 80031d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80031da:	681f      	ldr	r7, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80031dc:	681e      	ldr	r6, [r3, #0]
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80031de:	681d      	ldr	r5, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80031e0:	f007 070c 	and.w	r7, r7, #12
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80031e4:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80031e6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80031ea:	f8d3 8000 	ldr.w	r8, [r3]
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80031ee:	f005 0560 	and.w	r5, r5, #96	; 0x60
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80031f2:	681a      	ldr	r2, [r3, #0]
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80031f4:	f484 7480 	eor.w	r4, r4, #256	; 0x100
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80031f8:	f8d3 e000 	ldr.w	lr, [r3]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80031fc:	f3c8 2840 	ubfx	r8, r8, #9, #1
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003200:	62cf      	str	r7, [r1, #44]	; 0x2c
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003202:	f3c4 2400 	ubfx	r4, r4, #8, #1
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003206:	681f      	ldr	r7, [r3, #0]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003208:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800320c:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003210:	f3ce 2ec0 	ubfx	lr, lr, #11, #1
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003214:	f3c7 3c00 	ubfx	ip, r7, #12, #1
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003218:	f3c2 2280 	ubfx	r2, r2, #10, #1
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800321c:	681f      	ldr	r7, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800321e:	681e      	ldr	r6, [r3, #0]
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003220:	624d      	str	r5, [r1, #36]	; 0x24
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003222:	f407 5700 	and.w	r7, r7, #8192	; 0x2000
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003226:	681d      	ldr	r5, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003228:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800322c:	f881 4020 	strb.w	r4, [r1, #32]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003230:	681c      	ldr	r4, [r3, #0]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003232:	f3c5 4500 	ubfx	r5, r5, #16, #1
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003236:	778a      	strb	r2, [r1, #30]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003238:	f484 3400 	eor.w	r4, r4, #131072	; 0x20000
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800323c:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800323e:	618f      	str	r7, [r1, #24]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003240:	f3c4 4440 	ubfx	r4, r4, #17, #1
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003244:	681f      	ldr	r7, [r3, #0]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003246:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800324a:	614e      	str	r6, [r1, #20]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800324c:	681e      	ldr	r6, [r3, #0]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800324e:	f3c7 5700 	ubfx	r7, r7, #20, #1
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003252:	748d      	strb	r5, [r1, #18]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003254:	f3c2 42c0 	ubfx	r2, r2, #19, #1
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003258:	681d      	ldr	r5, [r3, #0]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800325a:	f3c6 5640 	ubfx	r6, r6, #21, #1
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800325e:	744c      	strb	r4, [r1, #17]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003260:	f3c5 5480 	ubfx	r4, r5, #22, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003264:	f881 801f 	strb.w	r8, [r1, #31]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003268:	f881 e01d 	strb.w	lr, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800326c:	f881 c01c 	strb.w	ip, [r1, #28]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003270:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003272:	73cf      	strb	r7, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003274:	738e      	strb	r6, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003276:	734c      	strb	r4, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003278:	681c      	ldr	r4, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800327a:	681a      	ldr	r2, [r3, #0]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800327c:	f3c4 54c0 	ubfx	r4, r4, #23, #1
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003280:	681d      	ldr	r5, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003282:	f002 6ce0 	and.w	ip, r2, #117440512	; 0x7000000
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003286:	681f      	ldr	r7, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003288:	685e      	ldr	r6, [r3, #4]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800328a:	f3c5 65c0 	ubfx	r5, r5, #27, #1
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800328e:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003290:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003294:	f8d3 8004 	ldr.w	r8, [r3, #4]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003298:	f3c6 060d 	ubfx	r6, r6, #0, #14
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800329c:	730c      	strb	r4, [r1, #12]
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800329e:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80032a2:	685c      	ldr	r4, [r3, #4]
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80032a4:	f3c8 4840 	ubfx	r8, r8, #17, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80032a8:	f8c1 c008 	str.w	ip, [r1, #8]
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80032ac:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80032b0:	f3c4 4e80 	ubfx	lr, r4, #18, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80032b4:	685c      	ldr	r4, [r3, #4]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80032b6:	710d      	strb	r5, [r1, #4]
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80032b8:	f3c4 6c00 	ubfx	ip, r4, #24, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80032bc:	685d      	ldr	r5, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80032be:	68dc      	ldr	r4, [r3, #12]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80032c0:	600f      	str	r7, [r1, #0]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80032c2:	f3c5 6544 	ubfx	r5, r5, #25, #5
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80032c6:	68df      	ldr	r7, [r3, #12]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80032c8:	f3c4 2400 	ubfx	r4, r4, #8, #1
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80032cc:	634e      	str	r6, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80032ce:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80032d2:	f007 070f 	and.w	r7, r7, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80032d6:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80032d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80032da:	63cd      	str	r5, [r1, #60]	; 0x3c
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80032dc:	f3c6 0640 	ubfx	r6, r6, #1, #1
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80032e0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80032e2:	f082 0280 	eor.w	r2, r2, #128	; 0x80
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80032e6:	f881 4040 	strb.w	r4, [r1, #64]	; 0x40
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80032ea:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80032ec:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80032f0:	f005 0570 	and.w	r5, r5, #112	; 0x70
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80032f4:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80032f8:	0c24      	lsrs	r4, r4, #16
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80032fa:	644f      	str	r7, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80032fc:	f881 6054 	strb.w	r6, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003300:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003304:	650d      	str	r5, [r1, #80]	; 0x50
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003306:	f881 8031 	strb.w	r8, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800330a:	f881 e030 	strb.w	lr, [r1, #48]	; 0x30
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800330e:	648c      	str	r4, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003310:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003314:	f8d3 7090 	ldr.w	r7, [r3, #144]	; 0x90
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003318:	f002 0c01 	and.w	ip, r2, #1
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800331c:	f8d3 6d00 	ldr.w	r6, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003320:	f8d3 5d30 	ldr.w	r5, [r3, #3376]	; 0xd30
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003324:	f3c7 0740 	ubfx	r7, r7, #1, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003328:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800332c:	f006 0672 	and.w	r6, r6, #114	; 0x72
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003330:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003334:	f005 0523 	and.w	r5, r5, #35	; 0x23
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003338:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800333c:	f3c4 04c0 	ubfx	r4, r4, #3, #1
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003340:	f3c2 1200 	ubfx	r2, r2, #4, #1
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003344:	f881 c056 	strb.w	ip, [r1, #86]	; 0x56
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003348:	f083 0340 	eor.w	r3, r3, #64	; 0x40
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800334c:	f881 7055 	strb.w	r7, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003350:	658e      	str	r6, [r1, #88]	; 0x58
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003352:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003356:	65cd      	str	r5, [r1, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003358:	f881 4062 	strb.w	r4, [r1, #98]	; 0x62
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800335c:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003360:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
}
 8003364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003368:	2001      	movs	r0, #1
}
 800336a:	4770      	bx	lr

0800336c <HAL_ETH_SetMACConfig>:
  if(macconf == NULL)
 800336c:	b129      	cbz	r1, 800337a <HAL_ETH_SetMACConfig+0xe>
{
 800336e:	b508      	push	{r3, lr}
  if(heth->RxState == HAL_ETH_STATE_READY)
 8003370:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003372:	2b10      	cmp	r3, #16
 8003374:	d003      	beq.n	800337e <HAL_ETH_SetMACConfig+0x12>
    return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
}
 8003378:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800337a:	2001      	movs	r0, #1
}
 800337c:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 800337e:	f7ff f9c7 	bl	8002710 <ETH_SetMACConfig>
    return HAL_OK;
 8003382:	2000      	movs	r0, #0
}
 8003384:	bd08      	pop	{r3, pc}
 8003386:	bf00      	nop

08003388 <HAL_ETH_SetMDIOClockRange>:
{
 8003388:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800338a:	6803      	ldr	r3, [r0, #0]
{
 800338c:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 800338e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8003392:	f001 fe1b 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_ETH_SetMDIOClockRange+0x64>)
 8003398:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800339a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800339e:	4403      	add	r3, r0
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d91c      	bls.n	80033de <HAL_ETH_SetMDIOClockRange+0x56>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_ETH_SetMDIOClockRange+0x70>)
 80033a8:	4403      	add	r3, r0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d911      	bls.n	80033d2 <HAL_ETH_SetMDIOClockRange+0x4a>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_ETH_SetMDIOClockRange+0x74>)
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <HAL_ETH_SetMDIOClockRange+0x78>)
 80033b2:	4403      	add	r3, r0
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d90e      	bls.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x4e>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_ETH_SetMDIOClockRange+0x80>)
 80033bc:	4403      	add	r3, r0
 80033be:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033c0:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80033c2:	bf94      	ite	ls
 80033c4:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80033c8:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033cc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80033d0:	bd38      	pop	{r3, r4, r5, pc}
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80033d2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033d6:	682b      	ldr	r3, [r5, #0]
 80033d8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80033dc:	bd38      	pop	{r3, r4, r5, pc}
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80033de:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033e2:	682b      	ldr	r3, [r5, #0]
 80033e4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80033e8:	bd38      	pop	{r3, r4, r5, pc}
 80033ea:	bf00      	nop
 80033ec:	feced300 	.word	0xfeced300
 80033f0:	00e4e1bf 	.word	0x00e4e1bf
 80033f4:	fde9f140 	.word	0xfde9f140
 80033f8:	017d783f 	.word	0x017d783f
 80033fc:	fc6c7900 	.word	0xfc6c7900
 8003400:	026259ff 	.word	0x026259ff
 8003404:	fa0a1f00 	.word	0xfa0a1f00
 8003408:	02faf07f 	.word	0x02faf07f

0800340c <HAL_ETH_Init>:
  if(heth == NULL)
 800340c:	2800      	cmp	r0, #0
 800340e:	f000 811d 	beq.w	800364c <HAL_ETH_Init+0x240>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003412:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	4605      	mov	r5, r0
 8003418:	b0a5      	sub	sp, #148	; 0x94
  if(heth->gState == HAL_ETH_STATE_RESET)
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 810c 	beq.w	8003638 <HAL_ETH_Init+0x22c>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003420:	4b8e      	ldr	r3, [pc, #568]	; (800365c <HAL_ETH_Init+0x250>)
  heth->gState = HAL_ETH_STATE_BUSY;
 8003422:	2223      	movs	r2, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003424:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 8003426:	66ea      	str	r2, [r5, #108]	; 0x6c
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003428:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800342c:	f042 0202 	orr.w	r2, r2, #2
 8003430:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003440:	2800      	cmp	r0, #0
 8003442:	f040 80f6 	bne.w	8003632 <HAL_ETH_Init+0x226>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003446:	f7fe f933 	bl	80016b0 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003458:	f7fe f90c 	bl	8001674 <HAL_GetTick>
 800345c:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800345e:	e006      	b.n	800346e <HAL_ETH_Init+0x62>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003460:	f7fe f908 	bl	8001674 <HAL_GetTick>
 8003464:	1b80      	subs	r0, r0, r6
 8003466:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800346a:	f200 80e8 	bhi.w	800363e <HAL_ETH_Init+0x232>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	f014 0401 	ands.w	r4, r4, #1
 800347a:	d1f1      	bne.n	8003460 <HAL_ETH_Init+0x54>
  ETH_MAC_MDIO_ClkConfig(heth);
 800347c:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800347e:	2601      	movs	r6, #1
  ETH_MAC_MDIO_ClkConfig(heth);
 8003480:	f7ff ff82 	bl	8003388 <HAL_ETH_SetMDIOClockRange>
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003484:	f44f 67c3 	mov.w	r7, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003488:	f001 fda0 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 800348c:	4b74      	ldr	r3, [pc, #464]	; (8003660 <HAL_ETH_Init+0x254>)
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800348e:	2120      	movs	r1, #32
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003490:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003494:	fba3 2300 	umull	r2, r3, r3, r0
 8003498:	682a      	ldr	r2, [r5, #0]
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800349a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800349e:	9122      	str	r1, [sp, #136]	; 0x88
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80034a0:	0c9b      	lsrs	r3, r3, #18
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034a2:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80034a4:	900b      	str	r0, [sp, #44]	; 0x2c
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034a6:	4628      	mov	r0, r5
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80034a8:	3b01      	subs	r3, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034aa:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034ae:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80034b0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80034b8:	2302      	movs	r3, #2
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80034ba:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034be:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 80034c2:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80034c6:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80034ca:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80034cc:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80034d0:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80034d4:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80034d8:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 80034da:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80034de:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80034e2:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80034e4:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80034e6:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80034e8:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034ec:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80034f0:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80034f4:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ChecksumOffload = ENABLE;
 80034f8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80034fc:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003500:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003504:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 8003508:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 800350c:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 8003510:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003514:	9718      	str	r7, [sp, #96]	; 0x60
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003516:	9210      	str	r2, [sp, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003518:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitFlowControl = DISABLE;
 800351c:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003520:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003524:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003528:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800352a:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.Watchdog = ENABLE;
 800352c:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003530:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003534:	f7ff f8ec 	bl	8002710 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003538:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaDefaultConf.MaximumSegmentSize = 536;
 800353c:	f44f 7206 	mov.w	r2, #536	; 0x218
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003540:	a902      	add	r1, sp, #8
 8003542:	4628      	mov	r0, r5
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003544:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003546:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800354a:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800354e:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003552:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003556:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800355a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800355c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 800355e:	920a      	str	r2, [sp, #40]	; 0x28
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003560:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003564:	9604      	str	r6, [sp, #16]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003566:	f7ff f997 	bl	8002898 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800356a:	6829      	ldr	r1, [r5, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800356c:	696c      	ldr	r4, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800356e:	f501 5288 	add.w	r2, r1, #4352	; 0x1100
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800357c:	6013      	str	r3, [r2, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800357e:	f014 0203 	ands.w	r2, r4, #3
 8003582:	d165      	bne.n	8003650 <HAL_ETH_Init+0x244>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003584:	f241 1c08 	movw	ip, #4360	; 0x1108
 8003588:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_ETH_Init+0x258>)
 800358a:	68ef      	ldr	r7, [r5, #12]
 800358c:	f105 0018 	add.w	r0, r5, #24
 8003590:	f851 600c 	ldr.w	r6, [r1, ip]
 8003594:	4033      	ands	r3, r6
 8003596:	f107 0660 	add.w	r6, r7, #96	; 0x60
 800359a:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 800359e:	463b      	mov	r3, r7
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80035a0:	f841 400c 	str.w	r4, [r1, ip]
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80035a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80035a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80035aa:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035ac:	f840 3b04 	str.w	r3, [r0], #4
 80035b0:	3318      	adds	r3, #24
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035b2:	42b3      	cmp	r3, r6
 80035b4:	d1f6      	bne.n	80035a4 <HAL_ETH_Init+0x198>
    dmarxdesc =  heth->Init.RxDesc + i;
 80035b6:	f8d5 c010 	ldr.w	ip, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80035ba:	f241 132c 	movw	r3, #4396	; 0x112c
 80035be:	2603      	movs	r6, #3
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80035c0:	f241 1014 	movw	r0, #4372	; 0x1114
  heth->TxDescList.CurTxDesc = 0;
 80035c4:	62aa      	str	r2, [r5, #40]	; 0x28
 80035c6:	f10c 0460 	add.w	r4, ip, #96	; 0x60
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80035ca:	50ce      	str	r6, [r1, r3]
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035cc:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80035ce:	500f      	str	r7, [r1, r0]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80035d0:	f501 5689 	add.w	r6, r1, #4384	; 0x1120
    dmarxdesc =  heth->Init.RxDesc + i;
 80035d4:	4663      	mov	r3, ip
 80035d6:	f105 0044 	add.w	r0, r5, #68	; 0x44
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80035da:	6037      	str	r7, [r6, #0]
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80035de:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80035e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80035e2:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80035e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80035e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035e8:	f840 3b04 	str.w	r3, [r0], #4
 80035ec:	3318      	adds	r3, #24
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	d1f4      	bne.n	80035dc <HAL_ETH_Init+0x1d0>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80035f2:	f241 1430 	movw	r4, #4400	; 0x1130
 80035f6:	2703      	movs	r7, #3
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80035f8:	656a      	str	r2, [r5, #84]	; 0x54
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80035fa:	f10c 0648 	add.w	r6, ip, #72	; 0x48
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80035fe:	f241 131c 	movw	r3, #4380	; 0x111c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003602:	f241 1028 	movw	r0, #4392	; 0x1128
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003606:	e9c5 2216 	strd	r2, r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800360a:	e9c5 2218 	strd	r2, r2, [r5, #96]	; 0x60
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800360e:	510f      	str	r7, [r1, r4]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003610:	686c      	ldr	r4, [r5, #4]
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003612:	f841 c003 	str.w	ip, [r1, r3]
  heth->gState = HAL_ETH_STATE_READY;
 8003616:	2310      	movs	r3, #16
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003618:	500e      	str	r6, [r1, r0]
  return HAL_OK;
 800361a:	2000      	movs	r0, #0
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800361c:	88a6      	ldrh	r6, [r4, #4]
 800361e:	f8c1 6300 	str.w	r6, [r1, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003622:	6824      	ldr	r4, [r4, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003624:	f8c1 4304 	str.w	r4, [r1, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003628:	676a      	str	r2, [r5, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800362a:	66eb      	str	r3, [r5, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800362c:	672b      	str	r3, [r5, #112]	; 0x70
}
 800362e:	b025      	add	sp, #148	; 0x94
 8003630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003632:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003636:	e706      	b.n	8003446 <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 8003638:	f004 fd28 	bl	800808c <HAL_ETH_MspInit>
 800363c:	e6f0      	b.n	8003420 <HAL_ETH_Init+0x14>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800363e:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8003640:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8003642:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003644:	676a      	str	r2, [r5, #116]	; 0x74
      heth->gState = HAL_ETH_STATE_ERROR;
 8003646:	66eb      	str	r3, [r5, #108]	; 0x6c
}
 8003648:	b025      	add	sp, #148	; 0x94
 800364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800364c:	2001      	movs	r0, #1
}
 800364e:	4770      	bx	lr
    heth->gState = HAL_ETH_STATE_ERROR;
 8003650:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8003652:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003654:	676e      	str	r6, [r5, #116]	; 0x74
    heth->gState = HAL_ETH_STATE_ERROR;
 8003656:	66eb      	str	r3, [r5, #108]	; 0x6c
}
 8003658:	b025      	add	sp, #148	; 0x94
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365c:	58024400 	.word	0x58024400
 8003660:	431bde83 	.word	0x431bde83
 8003664:	ffff8001 	.word	0xffff8001

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800366e:	6809      	ldr	r1, [r1, #0]
{
 8003670:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003672:	2900      	cmp	r1, #0
 8003674:	f000 80cd 	beq.w	8003812 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8003678:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800367a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8003890 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800367e:	2301      	movs	r3, #1
 8003680:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8003682:	ea13 0501 	ands.w	r5, r3, r1
 8003686:	f000 80bf 	beq.w	8003808 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800368e:	0077      	lsls	r7, r6, #1
 8003690:	f04f 0c03 	mov.w	ip, #3
 8003694:	f022 0910 	bic.w	r9, r2, #16
 8003698:	fa0c fc07 	lsl.w	ip, ip, r7
 800369c:	f109 34ff 	add.w	r4, r9, #4294967295
 80036a0:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a4:	2c01      	cmp	r4, #1
 80036a6:	d812      	bhi.n	80036ce <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 80036a8:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036aa:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036ae:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b2:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036b6:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ba:	40bc      	lsls	r4, r7
 80036bc:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 80036c0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80036c2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036c4:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036c8:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 80036cc:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80036ce:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d4:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d8:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036dc:	fa04 f407 	lsl.w	r4, r4, r7
 80036e0:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80036e4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e6:	d115      	bne.n	8003714 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 80036e8:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036ea:	f006 0907 	and.w	r9, r6, #7
 80036ee:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036f2:	f8de 4010 	ldr.w	r4, [lr, #16]
 80036f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036fa:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80036fe:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003702:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003706:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800370a:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800370e:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003712:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 8003714:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003716:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800371a:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800371e:	40bb      	lsls	r3, r7
 8003720:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8003724:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003726:	00d3      	lsls	r3, r2, #3
 8003728:	d56e      	bpl.n	8003808 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372a:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_GPIO_Init+0x210>)
 800372c:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003730:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003736:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373a:	f047 0c02 	orr.w	ip, r7, #2
 800373e:	4f4f      	ldr	r7, [pc, #316]	; (800387c <HAL_GPIO_Init+0x214>)
 8003740:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003742:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003748:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374c:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8003750:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003754:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003758:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800375c:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	f8cd c004 	str.w	ip, [sp, #4]
 8003762:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003766:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800376a:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800376e:	d026      	beq.n	80037be <HAL_GPIO_Init+0x156>
 8003770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003774:	4298      	cmp	r0, r3
 8003776:	d055      	beq.n	8003824 <HAL_GPIO_Init+0x1bc>
 8003778:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_GPIO_Init+0x218>)
 800377a:	4298      	cmp	r0, r3
 800377c:	d04c      	beq.n	8003818 <HAL_GPIO_Init+0x1b0>
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_GPIO_Init+0x21c>)
 8003780:	4298      	cmp	r0, r3
 8003782:	d05b      	beq.n	800383c <HAL_GPIO_Init+0x1d4>
 8003784:	4b40      	ldr	r3, [pc, #256]	; (8003888 <HAL_GPIO_Init+0x220>)
 8003786:	4298      	cmp	r0, r3
 8003788:	d05e      	beq.n	8003848 <HAL_GPIO_Init+0x1e0>
 800378a:	4b40      	ldr	r3, [pc, #256]	; (800388c <HAL_GPIO_Init+0x224>)
 800378c:	4298      	cmp	r0, r3
 800378e:	d04f      	beq.n	8003830 <HAL_GPIO_Init+0x1c8>
 8003790:	f8df c100 	ldr.w	ip, [pc, #256]	; 8003894 <HAL_GPIO_Init+0x22c>
 8003794:	4560      	cmp	r0, ip
 8003796:	d05d      	beq.n	8003854 <HAL_GPIO_Init+0x1ec>
 8003798:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8003898 <HAL_GPIO_Init+0x230>
 800379c:	4560      	cmp	r0, ip
 800379e:	d05f      	beq.n	8003860 <HAL_GPIO_Init+0x1f8>
 80037a0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800389c <HAL_GPIO_Init+0x234>
 80037a4:	4560      	cmp	r0, ip
 80037a6:	d061      	beq.n	800386c <HAL_GPIO_Init+0x204>
 80037a8:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 80038a0 <HAL_GPIO_Init+0x238>
 80037ac:	4560      	cmp	r0, ip
 80037ae:	bf0c      	ite	eq
 80037b0:	f04f 0c09 	moveq.w	ip, #9
 80037b4:	f04f 0c0a 	movne.w	ip, #10
 80037b8:	fa0c f309 	lsl.w	r3, ip, r9
 80037bc:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037be:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 80037c0:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 80037c2:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c6:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 80037c8:	bf4c      	ite	mi
 80037ca:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80037cc:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ce:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80037d4:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 80037d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 80037dc:	bf4c      	ite	mi
 80037de:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80037e0:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 80037e2:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 80037e6:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e8:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80037ea:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 80037ee:	bf4c      	ite	mi
 80037f0:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80037f2:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037f4:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80037f6:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 80037f8:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 80037fa:	bf54      	ite	pl
 80037fc:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 8003800:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003806:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 8003808:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800380a:	fa31 f306 	lsrs.w	r3, r1, r6
 800380e:	f47f af36 	bne.w	800367e <HAL_GPIO_Init+0x16>
  }
}
 8003812:	b003      	add	sp, #12
 8003814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003818:	f04f 0c02 	mov.w	ip, #2
 800381c:	fa0c f309 	lsl.w	r3, ip, r9
 8003820:	431c      	orrs	r4, r3
 8003822:	e7cc      	b.n	80037be <HAL_GPIO_Init+0x156>
 8003824:	f04f 0c01 	mov.w	ip, #1
 8003828:	fa0c f309 	lsl.w	r3, ip, r9
 800382c:	431c      	orrs	r4, r3
 800382e:	e7c6      	b.n	80037be <HAL_GPIO_Init+0x156>
 8003830:	f04f 0c05 	mov.w	ip, #5
 8003834:	fa0c f309 	lsl.w	r3, ip, r9
 8003838:	431c      	orrs	r4, r3
 800383a:	e7c0      	b.n	80037be <HAL_GPIO_Init+0x156>
 800383c:	f04f 0c03 	mov.w	ip, #3
 8003840:	fa0c f309 	lsl.w	r3, ip, r9
 8003844:	431c      	orrs	r4, r3
 8003846:	e7ba      	b.n	80037be <HAL_GPIO_Init+0x156>
 8003848:	f04f 0c04 	mov.w	ip, #4
 800384c:	fa0c f309 	lsl.w	r3, ip, r9
 8003850:	431c      	orrs	r4, r3
 8003852:	e7b4      	b.n	80037be <HAL_GPIO_Init+0x156>
 8003854:	f04f 0c06 	mov.w	ip, #6
 8003858:	fa0c f309 	lsl.w	r3, ip, r9
 800385c:	431c      	orrs	r4, r3
 800385e:	e7ae      	b.n	80037be <HAL_GPIO_Init+0x156>
 8003860:	f04f 0c07 	mov.w	ip, #7
 8003864:	fa0c f309 	lsl.w	r3, ip, r9
 8003868:	431c      	orrs	r4, r3
 800386a:	e7a8      	b.n	80037be <HAL_GPIO_Init+0x156>
 800386c:	f04f 0c08 	mov.w	ip, #8
 8003870:	fa0c f309 	lsl.w	r3, ip, r9
 8003874:	431c      	orrs	r4, r3
 8003876:	e7a2      	b.n	80037be <HAL_GPIO_Init+0x156>
 8003878:	58024400 	.word	0x58024400
 800387c:	58000400 	.word	0x58000400
 8003880:	58020800 	.word	0x58020800
 8003884:	58020c00 	.word	0x58020c00
 8003888:	58021000 	.word	0x58021000
 800388c:	58021400 	.word	0x58021400
 8003890:	58000080 	.word	0x58000080
 8003894:	58021800 	.word	0x58021800
 8003898:	58021c00 	.word	0x58021c00
 800389c:	58022000 	.word	0x58022000
 80038a0:	58022400 	.word	0x58022400

080038a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a4:	b902      	cbnz	r2, 80038a8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038a6:	0409      	lsls	r1, r1, #16
 80038a8:	6181      	str	r1, [r0, #24]
  }
}
 80038aa:	4770      	bx	lr

080038ac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ae:	ea01 0203 	and.w	r2, r1, r3
 80038b2:	ea21 0103 	bic.w	r1, r1, r3
 80038b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80038ba:	6181      	str	r1, [r0, #24]
}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop

080038c0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d04d      	beq.n	8003960 <HAL_I2C_Init+0xa0>
{
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80038ca:	4604      	mov	r4, r0
 80038cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d040      	beq.n	8003956 <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d4:	2124      	movs	r1, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038d6:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038d8:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e0:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 80038e2:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038e4:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 80038e8:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80038ea:	f020 0001 	bic.w	r0, r0, #1
 80038ee:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038f0:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80038f8:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038fa:	d028      	beq.n	800394e <HAL_I2C_Init+0x8e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003900:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003902:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003904:	d102      	bne.n	800390c <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800390a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800390c:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390e:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003910:	4814      	ldr	r0, [pc, #80]	; (8003964 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003914:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003916:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003918:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800391c:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800391e:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003920:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003922:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003924:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003928:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800392a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800392e:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003930:	60d8      	str	r0, [r3, #12]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003932:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003934:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003936:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003942:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003946:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	e7da      	b.n	800390c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8003956:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800395a:	f7fd f889 	bl	8000a70 <HAL_I2C_MspInit>
 800395e:	e7b9      	b.n	80038d4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003960:	2001      	movs	r0, #1
}
 8003962:	4770      	bx	lr
 8003964:	02008000 	.word	0x02008000

08003968 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b20      	cmp	r3, #32
{
 8003970:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003972:	d11f      	bne.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003978:	2a01      	cmp	r2, #1
 800397a:	d01b      	beq.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800397c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800397e:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003982:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003986:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8003988:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 800398a:	f025 0501 	bic.w	r5, r5, #1
 800398e:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003990:	6815      	ldr	r5, [r2, #0]
 8003992:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003996:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003998:	6815      	ldr	r5, [r2, #0]
 800399a:	4329      	orrs	r1, r5
 800399c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800399e:	6811      	ldr	r1, [r2, #0]
 80039a0:	f041 0101 	orr.w	r1, r1, #1
 80039a4:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80039a6:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 80039ae:	4620      	mov	r0, r4
 80039b0:	bc70      	pop	{r4, r5, r6}
 80039b2:	4770      	bx	lr
    return HAL_BUSY;
 80039b4:	2402      	movs	r4, #2
}
 80039b6:	4620      	mov	r0, r4
 80039b8:	bc70      	pop	{r4, r5, r6}
 80039ba:	4770      	bx	lr

080039bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
{
 80039c4:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	d11e      	bne.n	8003a06 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80039cc:	2a01      	cmp	r2, #1
 80039ce:	d01a      	beq.n	8003a06 <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d2:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80039da:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 80039dc:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 80039de:	f024 0401 	bic.w	r4, r4, #1
 80039e2:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80039e4:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80039e6:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80039ea:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80039ee:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80039f0:	6811      	ldr	r1, [r2, #0]
 80039f2:	f041 0101 	orr.w	r1, r1, #1
 80039f6:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80039f8:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003a00:	4628      	mov	r0, r5
 8003a02:	bc70      	pop	{r4, r5, r6}
 8003a04:	4770      	bx	lr
    return HAL_BUSY;
 8003a06:	2502      	movs	r5, #2
}
 8003a08:	4628      	mov	r0, r5
 8003a0a:	bc70      	pop	{r4, r5, r6}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop

08003a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f000 808a 	beq.w	8003b2e <HAL_PCD_Init+0x11e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a1a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003a1e:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8003a20:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a26:	b343      	cbz	r3, 8003a7a <HAL_PCD_Init+0x6a>
 8003a28:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a2a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a2c:	466f      	mov	r7, sp
 8003a2e:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a30:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a34:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a36:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a38:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8003a3c:	bf08      	it	eq
 8003a3e:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003a40:	f003 fd44 	bl	80074cc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a44:	f855 eb10 	ldr.w	lr, [r5], #16
 8003a48:	46ac      	mov	ip, r5
 8003a4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003a50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a54:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003a56:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003a5a:	e887 0003 	stmia.w	r7, {r0, r1}
 8003a5e:	4670      	mov	r0, lr
 8003a60:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003a64:	f003 fc5c 	bl	8007320 <USB_CoreInit>
 8003a68:	4607      	mov	r7, r0
 8003a6a:	b160      	cbz	r0, 8003a86 <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8003a6c:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6e:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8003a70:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a72:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8003a76:	b00b      	add	sp, #44	; 0x2c
 8003a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003a7a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8003a7e:	f00f fd49 	bl	8013514 <HAL_PCD_MspInit>
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	e7d1      	b.n	8003a2a <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a86:	4601      	mov	r1, r0
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	f003 fd27 	bl	80074dc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8e:	6860      	ldr	r0, [r4, #4]
 8003a90:	b360      	cbz	r0, 8003aec <HAL_PCD_Init+0xdc>
 8003a92:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8003a94:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a98:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8003a9a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9e:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8003aa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8003aa4:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aa8:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aac:	b2f9      	uxtb	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8003aae:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab2:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aba:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abe:	d3ec      	bcc.n	8003a9a <HAL_PCD_Init+0x8a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac0:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac8:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8003aca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8003ace:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad2:	b2fa      	uxtb	r2, r7
    hpcd->OUT_ep[i].is_in = 0U;
 8003ad4:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ada:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ade:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ae2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ae6:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aea:	d3eb      	bcc.n	8003ac4 <HAL_PCD_Init+0xb4>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aec:	466f      	mov	r7, sp
 8003aee:	f8d4 c000 	ldr.w	ip, [r4]
 8003af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003afe:	e887 0003 	stmia.w	r7, {r0, r1}
 8003b02:	4660      	mov	r0, ip
 8003b04:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003b08:	f003 fd00 	bl	800750c <USB_DevInit>
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d1ac      	bne.n	8003a6c <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 8003b12:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8003b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8003b16:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8003b1a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8003b1c:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8003b20:	d009      	beq.n	8003b36 <HAL_PCD_Init+0x126>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b22:	6820      	ldr	r0, [r4, #0]
 8003b24:	f004 f8d8 	bl	8007cd8 <USB_DevDisconnect>
}
 8003b28:	4628      	mov	r0, r5
 8003b2a:	b00b      	add	sp, #44	; 0x2c
 8003b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003b2e:	2501      	movs	r5, #1
}
 8003b30:	4628      	mov	r0, r5
 8003b32:	b00b      	add	sp, #44	; 0x2c
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b36:	4620      	mov	r0, r4
 8003b38:	f000 fcdc 	bl	80044f4 <HAL_PCDEx_ActivateLPM>
 8003b3c:	e7f1      	b.n	8003b22 <HAL_PCD_Init+0x112>
 8003b3e:	bf00      	nop

08003b40 <HAL_PCD_Start>:
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8003b40:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d01a      	beq.n	8003b7e <HAL_PCD_Start+0x3e>
 8003b48:	2101      	movs	r1, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b4c:	6803      	ldr	r3, [r0, #0]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b4e:	428a      	cmp	r2, r1
{
 8003b50:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003b52:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b56:	d00a      	beq.n	8003b6e <HAL_PCD_Start+0x2e>
 8003b58:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fcae 	bl	80074bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	f004 f8a9 	bl	8007cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8003b6c:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b6e:	6982      	ldr	r2, [r0, #24]
 8003b70:	428a      	cmp	r2, r1
 8003b72:	d0f1      	beq.n	8003b58 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b7c:	e7ec      	b.n	8003b58 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8003b7e:	2002      	movs	r0, #2
}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop

08003b84 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b88:	6806      	ldr	r6, [r0, #0]
{
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f004 f8e4 	bl	8007d5c <USB_GetMode>
 8003b94:	b110      	cbz	r0, 8003b9c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8003b96:	b009      	add	sp, #36	; 0x24
 8003b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9c:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	f004 f8aa 	bl	8007cf8 <USB_ReadInterrupts>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d0f6      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ba8:	6820      	ldr	r0, [r4, #0]
 8003baa:	f004 f8a5 	bl	8007cf8 <USB_ReadInterrupts>
 8003bae:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bb2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bb4:	d003      	beq.n	8003bbe <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bb6:	6943      	ldr	r3, [r0, #20]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bbe:	f004 f89b 	bl	8007cf8 <USB_ReadInterrupts>
 8003bc2:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bc8:	d011      	beq.n	8003bee <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bca:	6983      	ldr	r3, [r0, #24]
 8003bcc:	f023 0310 	bic.w	r3, r3, #16
 8003bd0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8003bd2:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bd4:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003bd8:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d07d      	beq.n	8003cdc <HAL_PCD_IRQHandler+0x158>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003be0:	2b06      	cmp	r3, #6
 8003be2:	f000 82ae 	beq.w	8004142 <HAL_PCD_IRQHandler+0x5be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be6:	6983      	ldr	r3, [r0, #24]
 8003be8:	f043 0310 	orr.w	r3, r3, #16
 8003bec:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bee:	f004 f883 	bl	8007cf8 <USB_ReadInterrupts>
 8003bf2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bf6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bf8:	f040 8169 	bne.w	8003ece <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bfc:	f004 f87c 	bl	8007cf8 <USB_ReadInterrupts>
 8003c00:	0347      	lsls	r7, r0, #13
 8003c02:	f100 80a8 	bmi.w	8003d56 <HAL_PCD_IRQHandler+0x1d2>
 8003c06:	f8d4 b000 	ldr.w	fp, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c0a:	4658      	mov	r0, fp
 8003c0c:	f004 f874 	bl	8007cf8 <USB_ReadInterrupts>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f2c0 8083 	blt.w	8003d1c <HAL_PCD_IRQHandler+0x198>
 8003c16:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c18:	f004 f86e 	bl	8007cf8 <USB_ReadInterrupts>
 8003c1c:	0500      	lsls	r0, r0, #20
 8003c1e:	d44a      	bmi.n	8003cb6 <HAL_PCD_IRQHandler+0x132>
 8003c20:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c22:	f004 f869 	bl	8007cf8 <USB_ReadInterrupts>
 8003c26:	0102      	lsls	r2, r0, #4
 8003c28:	d513      	bpl.n	8003c52 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c2a:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 8003c2c:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c30:	6953      	ldr	r3, [r2, #20]
 8003c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c36:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d146      	bne.n	8003cca <HAL_PCD_IRQHandler+0x146>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c3c:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003c3e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c40:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c42:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003c46:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c4a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c4e:	f000 fc67 	bl	8004520 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c52:	6820      	ldr	r0, [r4, #0]
 8003c54:	f004 f850 	bl	8007cf8 <USB_ReadInterrupts>
 8003c58:	04c3      	lsls	r3, r0, #19
 8003c5a:	f100 8191 	bmi.w	8003f80 <HAL_PCD_IRQHandler+0x3fc>
 8003c5e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c60:	f004 f84a 	bl	8007cf8 <USB_ReadInterrupts>
 8003c64:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c68:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c6a:	f040 8172 	bne.w	8003f52 <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c6e:	f004 f843 	bl	8007cf8 <USB_ReadInterrupts>
 8003c72:	0707      	lsls	r7, r0, #28
 8003c74:	f100 8164 	bmi.w	8003f40 <HAL_PCD_IRQHandler+0x3bc>
 8003c78:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c7a:	f004 f83d 	bl	8007cf8 <USB_ReadInterrupts>
 8003c7e:	02c6      	lsls	r6, r0, #11
 8003c80:	f100 81d9 	bmi.w	8004036 <HAL_PCD_IRQHandler+0x4b2>
 8003c84:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c86:	f004 f837 	bl	8007cf8 <USB_ReadInterrupts>
 8003c8a:	0285      	lsls	r5, r0, #10
 8003c8c:	f100 81c9 	bmi.w	8004022 <HAL_PCD_IRQHandler+0x49e>
 8003c90:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c92:	f004 f831 	bl	8007cf8 <USB_ReadInterrupts>
 8003c96:	0040      	lsls	r0, r0, #1
 8003c98:	d454      	bmi.n	8003d44 <HAL_PCD_IRQHandler+0x1c0>
 8003c9a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c9c:	f004 f82c 	bl	8007cf8 <USB_ReadInterrupts>
 8003ca0:	0741      	lsls	r1, r0, #29
 8003ca2:	f57f af78 	bpl.w	8003b96 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003caa:	076a      	lsls	r2, r5, #29
 8003cac:	d411      	bmi.n	8003cd2 <HAL_PCD_IRQHandler+0x14e>
      hpcd->Instance->GOTGINT |= temp;
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	432a      	orrs	r2, r5
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	e76f      	b.n	8003b96 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cb6:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8003cba:	07d9      	lsls	r1, r3, #31
 8003cbc:	d42a      	bmi.n	8003d14 <HAL_PCD_IRQHandler+0x190>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	6943      	ldr	r3, [r0, #20]
 8003cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc6:	6143      	str	r3, [r0, #20]
 8003cc8:	e7ab      	b.n	8003c22 <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_SuspendCallback(hpcd);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f00f fcc6 	bl	801365c <HAL_PCD_SuspendCallback>
 8003cd0:	e7bf      	b.n	8003c52 <HAL_PCD_IRQHandler+0xce>
        HAL_PCD_DisconnectCallback(hpcd);
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f00f fcea 	bl	80136ac <HAL_PCD_DisconnectCallback>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	e7e8      	b.n	8003cae <HAL_PCD_IRQHandler+0x12a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cdc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ce0:	421f      	tst	r7, r3
 8003ce2:	d080      	beq.n	8003be6 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ce4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8003ce8:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8003cec:	4630      	mov	r0, r6
 8003cee:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8003cf2:	463a      	mov	r2, r7
 8003cf4:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8003cf8:	f003 ff4a 	bl	8007b90 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cfc:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d00:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d04:	443a      	add	r2, r7
 8003d06:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d08:	441f      	add	r7, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d0a:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d0e:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
 8003d12:	e768      	b.n	8003be6 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f00f fca1 	bl	801365c <HAL_PCD_SuspendCallback>
 8003d1a:	e7d0      	b.n	8003cbe <HAL_PCD_IRQHandler+0x13a>
      if (hpcd->LPM_State == LPM_L1)
 8003d1c:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d20:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003d24:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003d2e:	f000 81dc 	beq.w	80040ea <HAL_PCD_IRQHandler+0x566>
        HAL_PCD_ResumeCallback(hpcd);
 8003d32:	4620      	mov	r0, r4
 8003d34:	f00f fcaa 	bl	801368c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	6943      	ldr	r3, [r0, #20]
 8003d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	6143      	str	r3, [r0, #20]
 8003d42:	e769      	b.n	8003c18 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_ConnectCallback(hpcd);
 8003d44:	4620      	mov	r0, r4
 8003d46:	f00f fcad 	bl	80136a4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	6943      	ldr	r3, [r0, #20]
 8003d4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d52:	6143      	str	r3, [r0, #20]
 8003d54:	e7a2      	b.n	8003c9c <HAL_PCD_IRQHandler+0x118>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d56:	6820      	ldr	r0, [r4, #0]
 8003d58:	f003 ffda 	bl	8007d10 <USB_ReadDevAllInEpInterrupt>
 8003d5c:	f8d4 b000 	ldr.w	fp, [r4]
      while (ep_intr != 0U)
 8003d60:	4681      	mov	r9, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	f43f af51 	beq.w	8003c0a <HAL_PCD_IRQHandler+0x86>
 8003d68:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 8003d6c:	46a0      	mov	r8, r4
      epnum = 0U;
 8003d6e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d72:	9505      	str	r5, [sp, #20]
 8003d74:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8003d78:	e007      	b.n	8003d8a <HAL_PCD_IRQHandler+0x206>
      while (ep_intr != 0U)
 8003d7a:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8003d7e:	f10a 0a01 	add.w	sl, sl, #1
 8003d82:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 8003d86:	f000 8160 	beq.w	800404a <HAL_PCD_IRQHandler+0x4c6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d8a:	f019 0f01 	tst.w	r9, #1
 8003d8e:	d0f4      	beq.n	8003d7a <HAL_PCD_IRQHandler+0x1f6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d90:	fa5f f68a 	uxtb.w	r6, sl
 8003d94:	4658      	mov	r0, fp
 8003d96:	4631      	mov	r1, r6
 8003d98:	f003 ffcc 	bl	8007d34 <USB_ReadDevInEPInterrupt>
 8003d9c:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d9e:	07e8      	lsls	r0, r5, #31
 8003da0:	d518      	bpl.n	8003dd4 <HAL_PCD_IRQHandler+0x250>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003da2:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003da4:	2701      	movs	r7, #1
 8003da6:	f00a 010f 	and.w	r1, sl, #15
 8003daa:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dac:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003db0:	fa07 f101 	lsl.w	r1, r7, r1
 8003db4:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003db8:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8003dbc:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dbe:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8003dc2:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003dc8:	f000 8196 	beq.w	80040f8 <HAL_PCD_IRQHandler+0x574>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dcc:	4631      	mov	r1, r6
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f00f fc20 	bl	8013614 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dd4:	0729      	lsls	r1, r5, #28
 8003dd6:	d504      	bpl.n	8003de2 <HAL_PCD_IRQHandler+0x25e>
 8003dd8:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dda:	2208      	movs	r2, #8
 8003ddc:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003de0:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003de2:	06ea      	lsls	r2, r5, #27
 8003de4:	d504      	bpl.n	8003df0 <HAL_PCD_IRQHandler+0x26c>
 8003de6:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003de8:	2210      	movs	r2, #16
 8003dea:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003dee:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003df0:	066b      	lsls	r3, r5, #25
 8003df2:	d504      	bpl.n	8003dfe <HAL_PCD_IRQHandler+0x27a>
 8003df4:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003dfc:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dfe:	07af      	lsls	r7, r5, #30
 8003e00:	d504      	bpl.n	8003e0c <HAL_PCD_IRQHandler+0x288>
 8003e02:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e04:	2202      	movs	r2, #2
 8003e06:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e0e:	062d      	lsls	r5, r5, #24
 8003e10:	46bb      	mov	fp, r7
 8003e12:	d5b2      	bpl.n	8003d7a <HAL_PCD_IRQHandler+0x1f6>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8003e14:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d8ae      	bhi.n	8003d7a <HAL_PCD_IRQHandler+0x1f6>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e1c:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 8003e1e:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e22:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003e26:	4285      	cmp	r5, r0
 8003e28:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e2a:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len32b = (len + 3U) / 4U;
 8003e2e:	bf28      	it	cs
 8003e30:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e32:	9106      	str	r1, [sp, #24]
 8003e34:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8003e36:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e3a:	b289      	uxth	r1, r1
 8003e3c:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 8003e40:	d335      	bcc.n	8003eae <HAL_PCD_IRQHandler+0x32a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e42:	b3a2      	cbz	r2, 8003eae <HAL_PCD_IRQHandler+0x32a>
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d232      	bcs.n	8003eae <HAL_PCD_IRQHandler+0x32a>
 8003e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8003e4c:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8003e50:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003e54:	e00b      	b.n	8003e6e <HAL_PCD_IRQHandler+0x2ea>
 8003e56:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	eba2 0503 	sub.w	r5, r2, r3
 8003e60:	f240 8182 	bls.w	8004168 <HAL_PCD_IRQHandler+0x5e4>
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	f000 817f 	beq.w	8004168 <HAL_PCD_IRQHandler+0x5e4>
 8003e6a:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8003e6e:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e70:	4632      	mov	r2, r6
 8003e72:	bf28      	it	cs
 8003e74:	4605      	movcs	r5, r0
 8003e76:	7c20      	ldrb	r0, [r4, #16]
 8003e78:	b2ab      	uxth	r3, r5
 8003e7a:	9000      	str	r0, [sp, #0]
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f003 fe71 	bl	8007b64 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e82:	f8da 2018 	ldr.w	r2, [sl, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8003e86:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8003e8a:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 8003e8c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e90:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8003e92:	4429      	add	r1, r5
    ep->xfer_count += len;
 8003e94:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e96:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8003e9a:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 8003e9e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea2:	d2d8      	bcs.n	8003e56 <HAL_PCD_IRQHandler+0x2d2>
 8003ea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003ea8:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8003eac:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	f0c0 815e 	bcc.w	8004170 <HAL_PCD_IRQHandler+0x5ec>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eb4:	f50b 6100 	add.w	r1, fp, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eb8:	f00a 020f 	and.w	r2, sl, #15
 8003ebc:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ebe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003ec0:	46bb      	mov	fp, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ec2:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ec6:	ea23 0302 	bic.w	r3, r3, r2
 8003eca:	634b      	str	r3, [r1, #52]	; 0x34
 8003ecc:	e755      	b.n	8003d7a <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ece:	f003 ff17 	bl	8007d00 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8003ed2:	4607      	mov	r7, r0
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	2f00      	cmp	r7, #0
 8003ed8:	f43f ae90 	beq.w	8003bfc <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 8003edc:	f04f 0800 	mov.w	r8, #0
 8003ee0:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 8003ee4:	e004      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x36c>
      while (ep_intr != 0U)
 8003ee6:	087f      	lsrs	r7, r7, #1
        epnum++;
 8003ee8:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8003eec:	f43f ae86 	beq.w	8003bfc <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 8003ef0:	07f9      	lsls	r1, r7, #31
 8003ef2:	d5f8      	bpl.n	8003ee6 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ef4:	fa5f fb88 	uxtb.w	fp, r8
 8003ef8:	4659      	mov	r1, fp
 8003efa:	f003 ff11 	bl	8007d20 <USB_ReadDevOutEPInterrupt>
 8003efe:	4681      	mov	r9, r0
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f00:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f02:	f019 0f01 	tst.w	r9, #1
 8003f06:	f040 80a3 	bne.w	8004050 <HAL_PCD_IRQHandler+0x4cc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f0a:	f019 0f08 	tst.w	r9, #8
 8003f0e:	f040 80c4 	bne.w	800409a <HAL_PCD_IRQHandler+0x516>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f12:	f019 0f10 	tst.w	r9, #16
 8003f16:	d003      	beq.n	8003f20 <HAL_PCD_IRQHandler+0x39c>
 8003f18:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f20:	f019 0f20 	tst.w	r9, #32
 8003f24:	d003      	beq.n	8003f2e <HAL_PCD_IRQHandler+0x3aa>
 8003f26:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f2e:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8003f32:	d0d8      	beq.n	8003ee6 <HAL_PCD_IRQHandler+0x362>
 8003f34:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	e7d2      	b.n	8003ee6 <HAL_PCD_IRQHandler+0x362>
      HAL_PCD_SOFCallback(hpcd);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f00f fb71 	bl	8013628 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	6943      	ldr	r3, [r0, #20]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	6143      	str	r3, [r0, #20]
 8003f50:	e693      	b.n	8003c7a <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f52:	f003 ff07 	bl	8007d64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	f003 fbba 	bl	80076d0 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f5c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f5e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f60:	f001 f834 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8003f64:	7b22      	ldrb	r2, [r4, #12]
 8003f66:	4601      	mov	r1, r0
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f003 fa27 	bl	80073bc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f00f fb5e 	bl	8013630 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	6943      	ldr	r3, [r0, #20]
 8003f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f7c:	6143      	str	r3, [r0, #20]
 8003f7e:	e676      	b.n	8003c6e <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f80:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8003f84:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f90:	f003 fb8c 	bl	80076ac <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f94:	6860      	ldr	r0, [r4, #4]
 8003f96:	b308      	cbz	r0, 8003fdc <HAL_PCD_IRQHandler+0x458>
 8003f98:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f9c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003fa0:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa2:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa8:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003faa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003fae:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fb2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8003fb6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003fba:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fbe:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8003fc6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003fca:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fce:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8003fd2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003fd6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	d1e1      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x41c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fde:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fe0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fe4:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d075      	beq.n	80040d6 <HAL_PCD_IRQHandler+0x552>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fee:	f043 030b 	orr.w	r3, r3, #11
 8003ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff8:	f043 030b 	orr.w	r3, r3, #11
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ffe:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004002:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8004006:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004008:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800400c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800400e:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004012:	f003 febd 	bl	8007d90 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	6943      	ldr	r3, [r0, #20]
 800401a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401e:	6143      	str	r3, [r0, #20]
 8004020:	e61e      	b.n	8003c60 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004022:	4620      	mov	r0, r4
 8004024:	2100      	movs	r1, #0
 8004026:	f00f fb35 	bl	8013694 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	6943      	ldr	r3, [r0, #20]
 800402e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004032:	6143      	str	r3, [r0, #20]
 8004034:	e62d      	b.n	8003c92 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004036:	4620      	mov	r0, r4
 8004038:	2100      	movs	r1, #0
 800403a:	f00f fb2f 	bl	801369c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	6943      	ldr	r3, [r0, #20]
 8004042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004046:	6143      	str	r3, [r0, #20]
 8004048:	e61d      	b.n	8003c86 <HAL_PCD_IRQHandler+0x102>
 800404a:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 800404e:	e5dc      	b.n	8003c0a <HAL_PCD_IRQHandler+0x86>
 8004050:	ea4f 1348 	mov.w	r3, r8, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8004054:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004056:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800405a:	f04f 0c01 	mov.w	ip, #1
 800405e:	eb0a 0103 	add.w	r1, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8004062:	2a01      	cmp	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004064:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004066:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800406a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800406e:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8004070:	d05a      	beq.n	8004128 <HAL_PCD_IRQHandler+0x5a4>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004072:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <HAL_PCD_IRQHandler+0x668>)
 8004074:	4594      	cmp	ip, r2
 8004076:	d07d      	beq.n	8004174 <HAL_PCD_IRQHandler+0x5f0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004078:	f1b8 0f00 	cmp.w	r8, #0
 800407c:	d107      	bne.n	800408e <HAL_PCD_IRQHandler+0x50a>
 800407e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8004082:	b923      	cbnz	r3, 800408e <HAL_PCD_IRQHandler+0x50a>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004084:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8004088:	4641      	mov	r1, r8
 800408a:	f003 fe81 	bl	8007d90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800408e:	4620      	mov	r0, r4
 8004090:	4659      	mov	r1, fp
 8004092:	f00f fab5 	bl	8013600 <HAL_PCD_DataOutStageCallback>
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	e737      	b.n	8003f0a <HAL_PCD_IRQHandler+0x386>
 800409a:	ea4f 1348 	mov.w	r3, r8, lsl #5
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800409e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040a2:	f04f 0c08 	mov.w	ip, #8
 80040a6:	eb0a 0103 	add.w	r1, sl, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040aa:	4413      	add	r3, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040ac:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040b0:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b2:	484f      	ldr	r0, [pc, #316]	; (80041f0 <HAL_PCD_IRQHandler+0x66c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040b4:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b6:	4282      	cmp	r2, r0
 80040b8:	d931      	bls.n	800411e <HAL_PCD_IRQHandler+0x59a>
 80040ba:	040a      	lsls	r2, r1, #16
 80040bc:	d502      	bpl.n	80040c4 <HAL_PCD_IRQHandler+0x540>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040c2:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040c4:	4620      	mov	r0, r4
 80040c6:	f00f fa95 	bl	80135f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	2901      	cmp	r1, #1
 80040ce:	f000 8084 	beq.w	80041da <HAL_PCD_IRQHandler+0x656>
 80040d2:	6820      	ldr	r0, [r4, #0]
 80040d4:	e71d      	b.n	8003f12 <HAL_PCD_IRQHandler+0x38e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	f242 032b 	movw	r3, #8235	; 0x202b
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f043 030b 	orr.w	r3, r3, #11
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e789      	b.n	8003ffe <HAL_PCD_IRQHandler+0x47a>
        hpcd->LPM_State = LPM_L0;
 80040ea:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ec:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80040ee:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040f2:	f000 fa15 	bl	8004520 <HAL_PCDEx_LPM_Callback>
 80040f6:	e61f      	b.n	8003d38 <HAL_PCD_IRQHandler+0x1b4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040f8:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 80040fc:	4413      	add	r3, r2
 80040fe:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004102:	f1ba 0f00 	cmp.w	sl, #0
 8004106:	f47f ae61 	bne.w	8003dcc <HAL_PCD_IRQHandler+0x248>
 800410a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f ae5d 	bne.w	8003dcc <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004112:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	f003 fe3a 	bl	8007d90 <USB_EP0_OutStart>
 800411c:	e656      	b.n	8003dcc <HAL_PCD_IRQHandler+0x248>
  HAL_PCD_SetupStageCallback(hpcd);
 800411e:	4620      	mov	r0, r4
 8004120:	f00f fa68 	bl	80135f4 <HAL_PCD_SetupStageCallback>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	e6f4      	b.n	8003f12 <HAL_PCD_IRQHandler+0x38e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004128:	070a      	lsls	r2, r1, #28
 800412a:	d52a      	bpl.n	8004182 <HAL_PCD_IRQHandler+0x5fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800412c:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <HAL_PCD_IRQHandler+0x66c>)
 800412e:	4594      	cmp	ip, r2
 8004130:	f67f aeeb 	bls.w	8003f0a <HAL_PCD_IRQHandler+0x386>
 8004134:	0409      	lsls	r1, r1, #16
 8004136:	f57f aee8 	bpl.w	8003f0a <HAL_PCD_IRQHandler+0x386>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	e6e3      	b.n	8003f0a <HAL_PCD_IRQHandler+0x386>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004142:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004146:	2208      	movs	r2, #8
 8004148:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800414c:	4630      	mov	r0, r6
 800414e:	f003 fd1f 	bl	8007b90 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004152:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8004156:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 800415a:	6820      	ldr	r0, [r4, #0]
 800415c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8004160:	440b      	add	r3, r1
 8004162:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8004166:	e53e      	b.n	8003be6 <HAL_PCD_IRQHandler+0x62>
 8004168:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800416c:	6827      	ldr	r7, [r4, #0]
 800416e:	e69e      	b.n	8003eae <HAL_PCD_IRQHandler+0x32a>
 8004170:	46bb      	mov	fp, r7
 8004172:	e602      	b.n	8003d7a <HAL_PCD_IRQHandler+0x1f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004174:	040a      	lsls	r2, r1, #16
 8004176:	d4e0      	bmi.n	800413a <HAL_PCD_IRQHandler+0x5b6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004178:	0689      	lsls	r1, r1, #26
 800417a:	d588      	bpl.n	800408e <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800417c:	2220      	movs	r2, #32
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	e785      	b.n	800408e <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004182:	068a      	lsls	r2, r1, #26
 8004184:	d42f      	bmi.n	80041e6 <HAL_PCD_IRQHandler+0x662>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004186:	f011 0f28 	tst.w	r1, #40	; 0x28
 800418a:	f47f aebe 	bne.w	8003f0a <HAL_PCD_IRQHandler+0x386>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <HAL_PCD_IRQHandler+0x66c>)
 8004190:	4594      	cmp	ip, r2
 8004192:	d901      	bls.n	8004198 <HAL_PCD_IRQHandler+0x614>
 8004194:	0409      	lsls	r1, r1, #16
 8004196:	d4d0      	bmi.n	800413a <HAL_PCD_IRQHandler+0x5b6>
 8004198:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80041a2:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80041a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041aa:	eba2 0c01 	sub.w	ip, r2, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80041ae:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80041b2:	440a      	add	r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 80041b4:	f8c3 c214 	str.w	ip, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80041b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041bc:	f1b8 0f00 	cmp.w	r8, #0
 80041c0:	f47f af65 	bne.w	800408e <HAL_PCD_IRQHandler+0x50a>
 80041c4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f af60 	bne.w	800408e <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ce:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80041d2:	2101      	movs	r1, #1
 80041d4:	f003 fddc 	bl	8007d90 <USB_EP0_OutStart>
 80041d8:	e759      	b.n	800408e <HAL_PCD_IRQHandler+0x50a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041da:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80041de:	6820      	ldr	r0, [r4, #0]
 80041e0:	f003 fdd6 	bl	8007d90 <USB_EP0_OutStart>
 80041e4:	e775      	b.n	80040d2 <HAL_PCD_IRQHandler+0x54e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e6:	2220      	movs	r2, #32
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	e68e      	b.n	8003f0a <HAL_PCD_IRQHandler+0x386>
 80041ec:	4f54310a 	.word	0x4f54310a
 80041f0:	4f54300a 	.word	0x4f54300a

080041f4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80041f4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80041f8:	2a01      	cmp	r2, #1
 80041fa:	d00d      	beq.n	8004218 <HAL_PCD_SetAddress+0x24>
 80041fc:	2201      	movs	r2, #1
{
 80041fe:	b510      	push	{r4, lr}
 8004200:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8004202:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004206:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8004208:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800420c:	f003 fd42 	bl	8007c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004210:	2000      	movs	r0, #0
 8004212:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8004216:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004218:	2002      	movs	r0, #2
}
 800421a:	4770      	bx	lr

0800421c <HAL_PCD_EP_Open>:
{
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8004222:	0609      	lsls	r1, r1, #24
 8004224:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8004228:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800422c:	d422      	bmi.n	8004274 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800422e:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 8004232:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8004236:	2600      	movs	r6, #0
 8004238:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800423c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800423e:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8004242:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004244:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8004246:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8004248:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800424a:	b105      	cbz	r5, 800424e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800424c:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800424e:	2b02      	cmp	r3, #2
 8004250:	d101      	bne.n	8004256 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004256:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800425a:	2b01      	cmp	r3, #1
 800425c:	d015      	beq.n	800428a <HAL_PCD_EP_Open+0x6e>
 800425e:	4604      	mov	r4, r0
 8004260:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004262:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8004264:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004268:	f003 fa3e 	bl	80076e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800426c:	2000      	movs	r0, #0
 800426e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8004272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8004274:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 800427c:	2701      	movs	r7, #1
 800427e:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004282:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004284:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8004288:	e7db      	b.n	8004242 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800428a:	2002      	movs	r0, #2
}
 800428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428e:	bf00      	nop

08004290 <HAL_PCD_EP_Close>:
{
 8004290:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8004294:	0609      	lsls	r1, r1, #24
{
 8004296:	b538      	push	{r3, r4, r5, lr}
 8004298:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800429c:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80042a0:	d419      	bmi.n	80042d6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80042a6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80042aa:	2400      	movs	r4, #0
 80042ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80042b2:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042b6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80042b8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d019      	beq.n	80042f4 <HAL_PCD_EP_Close+0x64>
 80042c0:	4604      	mov	r4, r0
 80042c2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042c4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80042c6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042ca:	f003 fa4f 	bl	800776c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80042da:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80042de:	2501      	movs	r5, #1
 80042e0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80042e6:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042ea:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80042ec:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d1e5      	bne.n	80042c0 <HAL_PCD_EP_Close+0x30>
 80042f4:	2002      	movs	r0, #2
}
 80042f6:	bd38      	pop	{r3, r4, r5, pc}

080042f8 <HAL_PCD_EP_Receive>:
{
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 80042fe:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004300:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8004302:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004306:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800430a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800430e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8004312:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8004316:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800431a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800431e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8004322:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8004326:	6903      	ldr	r3, [r0, #16]
 8004328:	6800      	ldr	r0, [r0, #0]
 800432a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800432c:	bf08      	it	eq
 800432e:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8004332:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004334:	b11d      	cbz	r5, 800433e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004336:	f003 fa79 	bl	800782c <USB_EPStartXfer>
}
 800433a:	2000      	movs	r0, #0
 800433c:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800433e:	f003 fb89 	bl	8007a54 <USB_EP0StartXfer>
}
 8004342:	2000      	movs	r0, #0
 8004344:	bd70      	pop	{r4, r5, r6, pc}
 8004346:	bf00      	nop

08004348 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004348:	f001 010f 	and.w	r1, r1, #15
 800434c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004350:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8004354:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop

0800435c <HAL_PCD_EP_Transmit>:
{
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8004362:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8004364:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004366:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8004368:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800436c:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8004370:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004374:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8004376:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8004378:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 800437a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800437e:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8004380:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8004384:	6903      	ldr	r3, [r0, #16]
 8004386:	6800      	ldr	r0, [r0, #0]
 8004388:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800438a:	bf08      	it	eq
 800438c:	64e2      	streq	r2, [r4, #76]	; 0x4c
 800438e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004390:	b11d      	cbz	r5, 800439a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004392:	f003 fa4b 	bl	800782c <USB_EPStartXfer>
}
 8004396:	2000      	movs	r0, #0
 8004398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800439a:	f003 fb5b 	bl	8007a54 <USB_EP0StartXfer>
}
 800439e:	2000      	movs	r0, #0
 80043a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a2:	bf00      	nop

080043a4 <HAL_PCD_EP_SetStall>:
{
 80043a4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043a6:	6843      	ldr	r3, [r0, #4]
 80043a8:	f001 050f 	and.w	r5, r1, #15
 80043ac:	429d      	cmp	r5, r3
 80043ae:	d81f      	bhi.n	80043f0 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 80043b0:	060b      	lsls	r3, r1, #24
 80043b2:	d41f      	bmi.n	80043f4 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 80043b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80043b8:	241c      	movs	r4, #28
    ep->is_in = 0U;
 80043ba:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80043bc:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 80043c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 80043c4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80043c8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80043cc:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ce:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80043d0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80043d2:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d01e      	beq.n	8004418 <HAL_PCD_EP_SetStall+0x74>
 80043da:	4604      	mov	r4, r0
 80043dc:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043e0:	6800      	ldr	r0, [r0, #0]
 80043e2:	f003 fbfb 	bl	8007bdc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043e6:	b1cd      	cbz	r5, 800441c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
}
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f4:	211c      	movs	r1, #28
    ep->is_in = 1U;
 80043f6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80043fa:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fc:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8004400:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004404:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800440a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800440c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800440e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004410:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8004414:	429a      	cmp	r2, r3
 8004416:	d1e0      	bne.n	80043da <HAL_PCD_EP_SetStall+0x36>
 8004418:	2002      	movs	r0, #2
}
 800441a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800441c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8004420:	7c21      	ldrb	r1, [r4, #16]
 8004422:	6820      	ldr	r0, [r4, #0]
 8004424:	f003 fcb4 	bl	8007d90 <USB_EP0_OutStart>
 8004428:	e7de      	b.n	80043e8 <HAL_PCD_EP_SetStall+0x44>
 800442a:	bf00      	nop

0800442c <HAL_PCD_EP_ClrStall>:
{
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004432:	6843      	ldr	r3, [r0, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d821      	bhi.n	800447c <HAL_PCD_EP_ClrStall+0x50>
 8004438:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800443c:	0609      	lsls	r1, r1, #24
 800443e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004442:	d41d      	bmi.n	8004480 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004444:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8004448:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 800444c:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800444e:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8004450:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8004454:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8004458:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800445a:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800445c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800445e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8004462:	2b01      	cmp	r3, #1
 8004464:	d01c      	beq.n	80044a0 <HAL_PCD_EP_ClrStall+0x74>
 8004466:	4604      	mov	r4, r0
 8004468:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800446a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800446c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004470:	f003 fbe4 	bl	8007c3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004474:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8004478:	4628      	mov	r0, r5
}
 800447a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800447c:	2001      	movs	r0, #1
}
 800447e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8004480:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004484:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8004486:	2501      	movs	r5, #1
 8004488:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800448e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8004492:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004494:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8004496:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004498:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800449c:	2b01      	cmp	r3, #1
 800449e:	d1e2      	bne.n	8004466 <HAL_PCD_EP_ClrStall+0x3a>
 80044a0:	2002      	movs	r0, #2
}
 80044a2:	bd38      	pop	{r3, r4, r5, pc}

080044a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044a4:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044a6:	6805      	ldr	r5, [r0, #0]
 80044a8:	0412      	lsls	r2, r2, #16
 80044aa:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 80044ac:	b1c1      	cbz	r1, 80044e0 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80044b0:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80044b6:	d00b      	beq.n	80044d0 <HAL_PCDEx_SetTxFiFo+0x2c>
 80044b8:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ba:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 80044be:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044c0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80044c4:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044c6:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80044c8:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ca:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80044ce:	d3f4      	bcc.n	80044ba <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044d0:	3140      	adds	r1, #64	; 0x40
 80044d2:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 80044d4:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044d6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80044da:	604c      	str	r4, [r1, #4]
}
 80044dc:	bc30      	pop	{r4, r5}
 80044de:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044e0:	4314      	orrs	r4, r2
}
 80044e2:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044e4:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80044e6:	bc30      	pop	{r4, r5}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80044ec:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80044ee:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80044f0:	6259      	str	r1, [r3, #36]	; 0x24
}
 80044f2:	4770      	bx	lr

080044f4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044f4:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 80044f6:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_PCDEx_ActivateLPM+0x28>)
{
 80044fa:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 80044fc:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8004500:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004502:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8004504:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004506:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 800450a:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 800450e:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004510:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004512:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004514:	430a      	orrs	r2, r1
}
 8004516:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
}
 800451a:	4770      	bx	lr
 800451c:	10000003 	.word	0x10000003

08004520 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004524:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_PWREx_ConfigSupply+0x48>)
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	0752      	lsls	r2, r2, #29
 800452c:	d406      	bmi.n	800453c <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004534:	1a18      	subs	r0, r3, r0
 8004536:	bf18      	it	ne
 8004538:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800453a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800453c:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800453e:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004540:	f022 0207 	bic.w	r2, r2, #7
 8004544:	4310      	orrs	r0, r2
 8004546:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8004548:	f7fd f894 	bl	8001674 <HAL_GetTick>
 800454c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800454e:	e005      	b.n	800455c <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004550:	f7fd f890 	bl	8001674 <HAL_GetTick>
 8004554:	1b40      	subs	r0, r0, r5
 8004556:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800455a:	d804      	bhi.n	8004566 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	049b      	lsls	r3, r3, #18
 8004560:	d5f6      	bpl.n	8004550 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8004562:	2000      	movs	r0, #0
}
 8004564:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004566:	2001      	movs	r0, #1
}
 8004568:	bd38      	pop	{r3, r4, r5, pc}
 800456a:	bf00      	nop
 800456c:	58024800 	.word	0x58024800

08004570 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004570:	4a02      	ldr	r2, [pc, #8]	; (800457c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8004572:	68d3      	ldr	r3, [r2, #12]
 8004574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004578:	60d3      	str	r3, [r2, #12]
}
 800457a:	4770      	bx	lr
 800457c:	58024800 	.word	0x58024800

08004580 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	9d08      	ldr	r5, [sp, #32]
 8004586:	4680      	mov	r8, r0
 8004588:	460f      	mov	r7, r1
 800458a:	4616      	mov	r6, r2
 800458c:	4699      	mov	r9, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800458e:	f8d8 4000 	ldr.w	r4, [r8]
 8004592:	e001      	b.n	8004598 <QSPI_WaitFlagStateUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004594:	1c6b      	adds	r3, r5, #1
 8004596:	d109      	bne.n	80045ac <QSPI_WaitFlagStateUntilTimeout+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004598:	68a0      	ldr	r0, [r4, #8]
 800459a:	4238      	tst	r0, r7
 800459c:	bf14      	ite	ne
 800459e:	2001      	movne	r0, #1
 80045a0:	2000      	moveq	r0, #0
 80045a2:	42b0      	cmp	r0, r6
 80045a4:	d1f6      	bne.n	8004594 <QSPI_WaitFlagStateUntilTimeout+0x14>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80045a6:	2000      	movs	r0, #0
}
 80045a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fd f862 	bl	8001674 <HAL_GetTick>
 80045b0:	eba0 0009 	sub.w	r0, r0, r9
 80045b4:	42a8      	cmp	r0, r5
 80045b6:	d801      	bhi.n	80045bc <QSPI_WaitFlagStateUntilTimeout+0x3c>
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	d1e8      	bne.n	800458e <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045bc:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045be:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045c0:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045c4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80045c8:	4303      	orrs	r3, r0
 80045ca:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 80045ce:	e7eb      	b.n	80045a8 <QSPI_WaitFlagStateUntilTimeout+0x28>

080045d0 <HAL_QSPI_Init>:
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80045d6:	f7fd f84d 	bl	8001674 <HAL_GetTick>
  if(hqspi == NULL)
 80045da:	2c00      	cmp	r4, #0
 80045dc:	d041      	beq.n	8004662 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80045de:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80045e2:	4605      	mov	r5, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d034      	beq.n	8004652 <HAL_QSPI_Init+0x82>
 80045e8:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80045ea:	6826      	ldr	r6, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80045ec:	462b      	mov	r3, r5
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80045ee:	68a1      	ldr	r1, [r4, #8]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80045f0:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80045f2:	6835      	ldr	r5, [r6, #0]
 80045f4:	1e48      	subs	r0, r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80045f6:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80045f8:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80045fc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004600:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004602:	6035      	str	r5, [r6, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004604:	9700      	str	r7, [sp, #0]
 8004606:	f7ff ffbb 	bl	8004580 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800460a:	bb00      	cbnz	r0, 800464e <HAL_QSPI_Init+0x7e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800460c:	68e3      	ldr	r3, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 800460e:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004610:	e9d4 2607 	ldrd	r2, r6, [r4, #28]
 8004614:	4313      	orrs	r3, r2
 8004616:	e9d4 1200 	ldrd	r1, r2, [r4]
 800461a:	4333      	orrs	r3, r6
 800461c:	4e12      	ldr	r6, [pc, #72]	; (8004668 <HAL_QSPI_Init+0x98>)
 800461e:	680f      	ldr	r7, [r1, #0]
 8004620:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004624:	6962      	ldr	r2, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004626:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004628:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800462a:	4333      	orrs	r3, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800462c:	4e0f      	ldr	r6, [pc, #60]	; (800466c <HAL_QSPI_Init+0x9c>)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800462e:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004630:	ea42 0307 	orr.w	r3, r2, r7
 8004634:	684f      	ldr	r7, [r1, #4]
 8004636:	6922      	ldr	r2, [r4, #16]
 8004638:	403e      	ands	r6, r7
 800463a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800463e:	4333      	orrs	r3, r6
 8004640:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8004642:	680b      	ldr	r3, [r1, #0]
 8004644:	432b      	orrs	r3, r5
 8004646:	600b      	str	r3, [r1, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004648:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800464a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 800464e:	b003      	add	sp, #12
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_QSPI_MspInit(hqspi);
 8004652:	4620      	mov	r0, r4
 8004654:	f7fc fb80 	bl	8000d58 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8004658:	f241 3388 	movw	r3, #5000	; 0x1388
 800465c:	461f      	mov	r7, r3
 800465e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004660:	e7c3      	b.n	80045ea <HAL_QSPI_Init+0x1a>
    return HAL_ERROR;
 8004662:	2001      	movs	r0, #1
}
 8004664:	b003      	add	sp, #12
 8004666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004668:	00ffff2f 	.word	0x00ffff2f
 800466c:	ffe0f8fe 	.word	0xffe0f8fe

08004670 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004670:	2800      	cmp	r0, #0
 8004672:	f000 819d 	beq.w	80049b0 <HAL_RCC_OscConfig+0x340>
{
 8004676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004678:	6803      	ldr	r3, [r0, #0]
 800467a:	4604      	mov	r4, r0
 800467c:	07d9      	lsls	r1, r3, #31
 800467e:	d533      	bpl.n	80046e8 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004680:	49a7      	ldr	r1, [pc, #668]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 8004682:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004684:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004686:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800468a:	2a10      	cmp	r2, #16
 800468c:	f000 8112 	beq.w	80048b4 <HAL_RCC_OscConfig+0x244>
 8004690:	2a18      	cmp	r2, #24
 8004692:	f000 810a 	beq.w	80048aa <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_OscConfig+0x50>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 816f 	beq.w	8004982 <HAL_RCC_OscConfig+0x312>
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a8:	4b9d      	ldr	r3, [pc, #628]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f000 81e4 	beq.w	8004a78 <HAL_RCC_OscConfig+0x408>
 80046b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e004      	b.n	80046ca <HAL_RCC_OscConfig+0x5a>
 80046c0:	4a97      	ldr	r2, [pc, #604]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fc ffd3 	bl	8001674 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ce:	4d94      	ldr	r5, [pc, #592]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80046d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046d2:	e005      	b.n	80046e0 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fc ffce 	bl	8001674 <HAL_GetTick>
 80046d8:	1b80      	subs	r0, r0, r6
 80046da:	2864      	cmp	r0, #100	; 0x64
 80046dc:	f200 814f 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	039f      	lsls	r7, r3, #14
 80046e4:	d5f6      	bpl.n	80046d4 <HAL_RCC_OscConfig+0x64>
 80046e6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e8:	0799      	lsls	r1, r3, #30
 80046ea:	f100 808e 	bmi.w	800480a <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046ee:	06d9      	lsls	r1, r3, #27
 80046f0:	d534      	bpl.n	800475c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f2:	4a8b      	ldr	r2, [pc, #556]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80046f4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	f000 80e9 	beq.w	80048d4 <HAL_RCC_OscConfig+0x264>
 8004702:	2b18      	cmp	r3, #24
 8004704:	f000 80e1 	beq.w	80048ca <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004708:	69e3      	ldr	r3, [r4, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8178 	beq.w	8004a00 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004710:	4b83      	ldr	r3, [pc, #524]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 8004712:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004714:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8004716:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800471a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800471c:	f7fc ffaa 	bl	8001674 <HAL_GetTick>
 8004720:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004722:	e005      	b.n	8004730 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004724:	f7fc ffa6 	bl	8001674 <HAL_GetTick>
 8004728:	1b80      	subs	r0, r0, r6
 800472a:	2802      	cmp	r0, #2
 800472c:	f200 8127 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	05db      	lsls	r3, r3, #23
 8004734:	d5f6      	bpl.n	8004724 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004736:	f7fc ffb5 	bl	80016a4 <HAL_GetREVID>
 800473a:	f241 0303 	movw	r3, #4099	; 0x1003
 800473e:	4298      	cmp	r0, r3
 8004740:	f200 825d 	bhi.w	8004bfe <HAL_RCC_OscConfig+0x58e>
 8004744:	6a22      	ldr	r2, [r4, #32]
 8004746:	686b      	ldr	r3, [r5, #4]
 8004748:	2a20      	cmp	r2, #32
 800474a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800474e:	bf0c      	ite	eq
 8004750:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004754:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004758:	606b      	str	r3, [r5, #4]
 800475a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475c:	071d      	lsls	r5, r3, #28
 800475e:	d517      	bpl.n	8004790 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004760:	6963      	ldr	r3, [r4, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8126 	beq.w	80049b4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004768:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 800476a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800476c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004774:	f7fc ff7e 	bl	8001674 <HAL_GetTick>
 8004778:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800477a:	e005      	b.n	8004788 <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477c:	f7fc ff7a 	bl	8001674 <HAL_GetTick>
 8004780:	1b80      	subs	r0, r0, r6
 8004782:	2802      	cmp	r0, #2
 8004784:	f200 80fb 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004788:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800478a:	0798      	lsls	r0, r3, #30
 800478c:	d5f6      	bpl.n	800477c <HAL_RCC_OscConfig+0x10c>
 800478e:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004790:	069a      	lsls	r2, r3, #26
 8004792:	d517      	bpl.n	80047c4 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004794:	69a3      	ldr	r3, [r4, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 811f 	beq.w	80049da <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800479c:	4b60      	ldr	r3, [pc, #384]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 800479e:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047a0:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80047a8:	f7fc ff64 	bl	8001674 <HAL_GetTick>
 80047ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047ae:	e005      	b.n	80047bc <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047b0:	f7fc ff60 	bl	8001674 <HAL_GetTick>
 80047b4:	1b80      	subs	r0, r0, r6
 80047b6:	2802      	cmp	r0, #2
 80047b8:	f200 80e1 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	049f      	lsls	r7, r3, #18
 80047c0:	d5f6      	bpl.n	80047b0 <HAL_RCC_OscConfig+0x140>
 80047c2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c4:	0759      	lsls	r1, r3, #29
 80047c6:	f100 80a0 	bmi.w	800490a <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047cc:	b1d8      	cbz	r0, 8004806 <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80047d6:	2a18      	cmp	r2, #24
 80047d8:	f000 81c9 	beq.w	8004b6e <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047dc:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e0:	f000 815b 	beq.w	8004a9a <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e8:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80047ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047ec:	f7fc ff42 	bl	8001674 <HAL_GetTick>
 80047f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047f2:	e005      	b.n	8004800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fc ff3e 	bl	8001674 <HAL_GetTick>
 80047f8:	1b40      	subs	r0, r0, r5
 80047fa:	2802      	cmp	r0, #2
 80047fc:	f200 80bf 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	019b      	lsls	r3, r3, #6
 8004804:	d4f6      	bmi.n	80047f4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004806:	2000      	movs	r0, #0
}
 8004808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480a:	4a45      	ldr	r2, [pc, #276]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 800480c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800480e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004810:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8004814:	d02f      	beq.n	8004876 <HAL_RCC_OscConfig+0x206>
 8004816:	2b18      	cmp	r3, #24
 8004818:	d02b      	beq.n	8004872 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800481a:	68e2      	ldr	r2, [r4, #12]
 800481c:	2a00      	cmp	r2, #0
 800481e:	f000 8103 	beq.w	8004a28 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004822:	493f      	ldr	r1, [pc, #252]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 8004824:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004826:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004828:	f023 0319 	bic.w	r3, r3, #25
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8004830:	f7fc ff20 	bl	8001674 <HAL_GetTick>
 8004834:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004836:	e005      	b.n	8004844 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004838:	f7fc ff1c 	bl	8001674 <HAL_GetTick>
 800483c:	1b80      	subs	r0, r0, r6
 800483e:	2802      	cmp	r0, #2
 8004840:	f200 809d 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	075f      	lsls	r7, r3, #29
 8004848:	d5f6      	bpl.n	8004838 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	f7fc ff2b 	bl	80016a4 <HAL_GetREVID>
 800484e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004852:	4298      	cmp	r0, r3
 8004854:	f200 81e2 	bhi.w	8004c1c <HAL_RCC_OscConfig+0x5ac>
 8004858:	6922      	ldr	r2, [r4, #16]
 800485a:	686b      	ldr	r3, [r5, #4]
 800485c:	2a40      	cmp	r2, #64	; 0x40
 800485e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004862:	bf0c      	ite	eq
 8004864:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8004868:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800486c:	606b      	str	r3, [r5, #4]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	e73d      	b.n	80046ee <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004872:	0792      	lsls	r2, r2, #30
 8004874:	d1d1      	bne.n	800481a <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004876:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	075b      	lsls	r3, r3, #29
 800487c:	d501      	bpl.n	8004882 <HAL_RCC_OscConfig+0x212>
 800487e:	68e3      	ldr	r3, [r4, #12]
 8004880:	b30b      	cbz	r3, 80048c6 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004882:	f7fc ff0f 	bl	80016a4 <HAL_GetREVID>
 8004886:	f241 0303 	movw	r3, #4099	; 0x1003
 800488a:	4298      	cmp	r0, r3
 800488c:	f200 80e0 	bhi.w	8004a50 <HAL_RCC_OscConfig+0x3e0>
 8004890:	6922      	ldr	r2, [r4, #16]
 8004892:	2a40      	cmp	r2, #64	; 0x40
 8004894:	f000 80f8 	beq.w	8004a88 <HAL_RCC_OscConfig+0x418>
 8004898:	4921      	ldr	r1, [pc, #132]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 800489a:	684b      	ldr	r3, [r1, #4]
 800489c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80048a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80048a4:	604b      	str	r3, [r1, #4]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	e721      	b.n	80046ee <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048aa:	f001 0103 	and.w	r1, r1, #3
 80048ae:	2902      	cmp	r1, #2
 80048b0:	f47f aef1 	bne.w	8004696 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	0392      	lsls	r2, r2, #14
 80048ba:	f57f af15 	bpl.w	80046e8 <HAL_RCC_OscConfig+0x78>
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	f47f af11 	bne.w	80046e8 <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 80048c6:	2001      	movs	r0, #1
}
 80048c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	2a01      	cmp	r2, #1
 80048d0:	f47f af1a 	bne.w	8004708 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	05da      	lsls	r2, r3, #23
 80048da:	d502      	bpl.n	80048e2 <HAL_RCC_OscConfig+0x272>
 80048dc:	69e3      	ldr	r3, [r4, #28]
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d1f1      	bne.n	80048c6 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048e2:	f7fc fedf 	bl	80016a4 <HAL_GetREVID>
 80048e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80048ea:	4298      	cmp	r0, r3
 80048ec:	f200 80ba 	bhi.w	8004a64 <HAL_RCC_OscConfig+0x3f4>
 80048f0:	6a22      	ldr	r2, [r4, #32]
 80048f2:	2a20      	cmp	r2, #32
 80048f4:	f000 81a1 	beq.w	8004c3a <HAL_RCC_OscConfig+0x5ca>
 80048f8:	4909      	ldr	r1, [pc, #36]	; (8004920 <HAL_RCC_OscConfig+0x2b0>)
 80048fa:	684b      	ldr	r3, [r1, #4]
 80048fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004900:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004904:	604b      	str	r3, [r1, #4]
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	e728      	b.n	800475c <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_OscConfig+0x2b4>)
 800490c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800490e:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8004910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004916:	f7fc fead 	bl	8001674 <HAL_GetTick>
 800491a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800491c:	e009      	b.n	8004932 <HAL_RCC_OscConfig+0x2c2>
 800491e:	bf00      	nop
 8004920:	58024400 	.word	0x58024400
 8004924:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004928:	f7fc fea4 	bl	8001674 <HAL_GetTick>
 800492c:	1b80      	subs	r0, r0, r6
 800492e:	2864      	cmp	r0, #100	; 0x64
 8004930:	d825      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004932:	682b      	ldr	r3, [r5, #0]
 8004934:	05da      	lsls	r2, r3, #23
 8004936:	d5f7      	bpl.n	8004928 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004938:	68a3      	ldr	r3, [r4, #8]
 800493a:	2b01      	cmp	r3, #1
 800493c:	f000 8177 	beq.w	8004c2e <HAL_RCC_OscConfig+0x5be>
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8142 	beq.w	8004bca <HAL_RCC_OscConfig+0x55a>
 8004946:	2b05      	cmp	r3, #5
 8004948:	4bb1      	ldr	r3, [pc, #708]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 800494a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800494c:	f000 817e 	beq.w	8004c4c <HAL_RCC_OscConfig+0x5dc>
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	671a      	str	r2, [r3, #112]	; 0x70
 8004956:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004958:	f022 0204 	bic.w	r2, r2, #4
 800495c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800495e:	f7fc fe89 	bl	8001674 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004962:	4dab      	ldr	r5, [pc, #684]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8004964:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496a:	e004      	b.n	8004976 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496c:	f7fc fe82 	bl	8001674 <HAL_GetTick>
 8004970:	1bc0      	subs	r0, r0, r7
 8004972:	42b0      	cmp	r0, r6
 8004974:	d803      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004976:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004978:	079b      	lsls	r3, r3, #30
 800497a:	d5f7      	bpl.n	800496c <HAL_RCC_OscConfig+0x2fc>
 800497c:	e725      	b.n	80047ca <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 800497e:	2003      	movs	r0, #3
}
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004982:	4ba3      	ldr	r3, [pc, #652]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 8004984:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004986:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004988:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004994:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004996:	f7fc fe6d 	bl	8001674 <HAL_GetTick>
 800499a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800499c:	e004      	b.n	80049a8 <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800499e:	f7fc fe69 	bl	8001674 <HAL_GetTick>
 80049a2:	1b80      	subs	r0, r0, r6
 80049a4:	2864      	cmp	r0, #100	; 0x64
 80049a6:	d8ea      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	0398      	lsls	r0, r3, #14
 80049ac:	d4f7      	bmi.n	800499e <HAL_RCC_OscConfig+0x32e>
 80049ae:	e69a      	b.n	80046e6 <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 80049b0:	2001      	movs	r0, #1
}
 80049b2:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 80049b4:	4b96      	ldr	r3, [pc, #600]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 80049b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049b8:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80049c0:	f7fc fe58 	bl	8001674 <HAL_GetTick>
 80049c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049c6:	e004      	b.n	80049d2 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fc fe54 	bl	8001674 <HAL_GetTick>
 80049cc:	1b80      	subs	r0, r0, r6
 80049ce:	2802      	cmp	r0, #2
 80049d0:	d8d5      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80049d4:	0799      	lsls	r1, r3, #30
 80049d6:	d4f7      	bmi.n	80049c8 <HAL_RCC_OscConfig+0x358>
 80049d8:	e6d9      	b.n	800478e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 80049da:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 80049dc:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049de:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80049e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80049e6:	f7fc fe45 	bl	8001674 <HAL_GetTick>
 80049ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049ec:	e004      	b.n	80049f8 <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80049ee:	f7fc fe41 	bl	8001674 <HAL_GetTick>
 80049f2:	1b80      	subs	r0, r0, r6
 80049f4:	2802      	cmp	r0, #2
 80049f6:	d8c2      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	0498      	lsls	r0, r3, #18
 80049fc:	d4f7      	bmi.n	80049ee <HAL_RCC_OscConfig+0x37e>
 80049fe:	e6e0      	b.n	80047c2 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 8004a00:	4b83      	ldr	r3, [pc, #524]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 8004a02:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a04:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8004a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a0c:	f7fc fe32 	bl	8001674 <HAL_GetTick>
 8004a10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a12:	e004      	b.n	8004a1e <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a14:	f7fc fe2e 	bl	8001674 <HAL_GetTick>
 8004a18:	1b80      	subs	r0, r0, r6
 8004a1a:	2802      	cmp	r0, #2
 8004a1c:	d8af      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	05df      	lsls	r7, r3, #23
 8004a22:	d4f7      	bmi.n	8004a14 <HAL_RCC_OscConfig+0x3a4>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	e699      	b.n	800475c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8004a28:	4b79      	ldr	r3, [pc, #484]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a2c:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a34:	f7fc fe1e 	bl	8001674 <HAL_GetTick>
 8004a38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a3a:	e004      	b.n	8004a46 <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fc fe1a 	bl	8001674 <HAL_GetTick>
 8004a40:	1b80      	subs	r0, r0, r6
 8004a42:	2802      	cmp	r0, #2
 8004a44:	d89b      	bhi.n	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	0758      	lsls	r0, r3, #29
 8004a4a:	d4f7      	bmi.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	e64e      	b.n	80046ee <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4a6f      	ldr	r2, [pc, #444]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 8004a52:	6921      	ldr	r1, [r4, #16]
 8004a54:	6853      	ldr	r3, [r2, #4]
 8004a56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a5e:	6053      	str	r3, [r2, #4]
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	e644      	b.n	80046ee <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a64:	4a6a      	ldr	r2, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 8004a66:	6a21      	ldr	r1, [r4, #32]
 8004a68:	68d3      	ldr	r3, [r2, #12]
 8004a6a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004a6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a72:	60d3      	str	r3, [r2, #12]
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	e671      	b.n	800475c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a78:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e620      	b.n	80046ca <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4a61      	ldr	r2, [pc, #388]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
 8004a8a:	6853      	ldr	r3, [r2, #4]
 8004a8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a94:	6053      	str	r3, [r2, #4]
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	e629      	b.n	80046ee <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a9e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004aa2:	f7fc fde7 	bl	8001674 <HAL_GetTick>
 8004aa6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fc fde3 	bl	8001674 <HAL_GetTick>
 8004aae:	1b80      	subs	r0, r0, r6
 8004ab0:	2802      	cmp	r0, #2
 8004ab2:	f63f af64 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	0199      	lsls	r1, r3, #6
 8004aba:	d4f6      	bmi.n	8004aaa <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004abc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004abe:	4b55      	ldr	r3, [pc, #340]	; (8004c14 <HAL_RCC_OscConfig+0x5a4>)
 8004ac0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ac6:	4954      	ldr	r1, [pc, #336]	; (8004c18 <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac8:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aca:	4e51      	ldr	r6, [pc, #324]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004acc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004ad0:	62ab      	str	r3, [r5, #40]	; 0x28
 8004ad2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8004ad4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8004ad8:	3f01      	subs	r7, #1
 8004ada:	1e50      	subs	r0, r2, #1
 8004adc:	3b01      	subs	r3, #1
 8004ade:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ae0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004ae4:	025b      	lsls	r3, r3, #9
 8004ae6:	0400      	lsls	r0, r0, #16
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8004af0:	0612      	lsls	r2, r2, #24
 8004af2:	4303      	orrs	r3, r0
 8004af4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004af8:	433b      	orrs	r3, r7
 8004afa:	4313      	orrs	r3, r2
 8004afc:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8004afe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b06:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004b08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004b0a:	4011      	ands	r1, r2
 8004b0c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004b10:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b16:	f023 030c 	bic.w	r3, r3, #12
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b20:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004b22:	f023 0302 	bic.w	r3, r3, #2
 8004b26:	4313      	orrs	r3, r2
 8004b28:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b40:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b52:	f7fc fd8f 	bl	8001674 <HAL_GetTick>
 8004b56:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b58:	e005      	b.n	8004b66 <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5a:	f7fc fd8b 	bl	8001674 <HAL_GetTick>
 8004b5e:	1b00      	subs	r0, r0, r4
 8004b60:	2802      	cmp	r0, #2
 8004b62:	f63f af0c 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b66:	6833      	ldr	r3, [r6, #0]
 8004b68:	019a      	lsls	r2, r3, #6
 8004b6a:	d5f6      	bpl.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
 8004b6c:	e64b      	b.n	8004806 <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b72:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b74:	f43f ae48 	beq.w	8004808 <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b7e:	428b      	cmp	r3, r1
 8004b80:	f47f aea1 	bne.w	80048c6 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b84:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	f47f ae9b 	bne.w	80048c6 <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b92:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8004b96:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	f47f ae94 	bne.w	80048c6 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ba0:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8004ba4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	f47f ae8d 	bne.w	80048c6 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bae:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8004bb2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	f47f ae86 	bne.w	80048c6 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004bbc:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8004bc0:	3801      	subs	r0, #1
    return HAL_ERROR;
 8004bc2:	1a28      	subs	r0, r5, r0
 8004bc4:	bf18      	it	ne
 8004bc6:	2001      	movne	r0, #1
 8004bc8:	e61e      	b.n	8004808 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bd2:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	671a      	str	r2, [r3, #112]	; 0x70
 8004bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bdc:	f022 0204 	bic.w	r2, r2, #4
 8004be0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004be2:	f7fc fd47 	bl	8001674 <HAL_GetTick>
 8004be6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004be8:	e005      	b.n	8004bf6 <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fc fd43 	bl	8001674 <HAL_GetTick>
 8004bee:	1b80      	subs	r0, r0, r6
 8004bf0:	42b8      	cmp	r0, r7
 8004bf2:	f63f aec4 	bhi.w	800497e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004bf8:	0798      	lsls	r0, r3, #30
 8004bfa:	d4f6      	bmi.n	8004bea <HAL_RCC_OscConfig+0x57a>
 8004bfc:	e5e5      	b.n	80047ca <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bfe:	68eb      	ldr	r3, [r5, #12]
 8004c00:	6a22      	ldr	r2, [r4, #32]
 8004c02:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004c06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c0a:	60eb      	str	r3, [r5, #12]
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	e5a5      	b.n	800475c <HAL_RCC_OscConfig+0xec>
 8004c10:	58024400 	.word	0x58024400
 8004c14:	fffffc0c 	.word	0xfffffc0c
 8004c18:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	686b      	ldr	r3, [r5, #4]
 8004c1e:	6922      	ldr	r2, [r4, #16]
 8004c20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c28:	606b      	str	r3, [r5, #4]
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	e55f      	b.n	80046ee <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2e:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <HAL_RCC_OscConfig+0x5ec>)
 8004c30:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	e691      	b.n	800495e <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c3a:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <HAL_RCC_OscConfig+0x5ec>)
 8004c3c:	6853      	ldr	r3, [r2, #4]
 8004c3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c46:	6053      	str	r3, [r2, #4]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	e587      	b.n	800475c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4c:	f042 0204 	orr.w	r2, r2, #4
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70
 8004c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	671a      	str	r2, [r3, #112]	; 0x70
 8004c5a:	e680      	b.n	800495e <HAL_RCC_OscConfig+0x2ee>
 8004c5c:	58024400 	.word	0x58024400

08004c60 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c60:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c62:	6913      	ldr	r3, [r2, #16]
 8004c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d04f      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0xac>
 8004c6c:	2b18      	cmp	r3, #24
 8004c6e:	d00b      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x28>
 8004c70:	b10b      	cbz	r3, 8004c76 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c72:	483b      	ldr	r0, [pc, #236]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c74:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	0699      	lsls	r1, r3, #26
 8004c7a:	d549      	bpl.n	8004d10 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	4839      	ldr	r0, [pc, #228]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c80:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c84:	40d8      	lsrs	r0, r3
 8004c86:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c88:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c8a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c8e:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8004c92:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c94:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8004c96:	b3b0      	cbz	r0, 8004d06 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c98:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c9c:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca0:	f001 0103 	and.w	r1, r1, #3
 8004ca4:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ca8:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8004cac:	2901      	cmp	r1, #1
 8004cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004cb2:	ee07 3a10 	vmov	s14, r3
 8004cb6:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8004cba:	d002      	beq.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x62>
 8004cbc:	d32d      	bcc.n	8004d1a <HAL_RCC_GetSysClockFreq+0xba>
 8004cbe:	2902      	cmp	r1, #2
 8004cc0:	d028      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cc2:	eddf 5a29 	vldr	s11, [pc, #164]	; 8004d68 <HAL_RCC_GetSysClockFreq+0x108>
 8004cc6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004cca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ce4:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004cf0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d02:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d0a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004d0c:	4817      	ldr	r0, [pc, #92]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d0e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d10:	4814      	ldr	r0, [pc, #80]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8004d12:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d14:	eddf 5a16 	vldr	s11, [pc, #88]	; 8004d70 <HAL_RCC_GetSysClockFreq+0x110>
 8004d18:	e7d5      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	069b      	lsls	r3, r3, #26
 8004d1e:	d51a      	bpl.n	8004d56 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d20:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d22:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d26:	490f      	ldr	r1, [pc, #60]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d28:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d2e:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d34:	ee06 1a90 	vmov	s13, r1
 8004d38:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8004d3c:	ee06 3a90 	vmov	s13, r3
 8004d40:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8004d44:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004d48:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004d4c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004d50:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004d54:	e7c8      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d56:	eddf 5a07 	vldr	s11, [pc, #28]	; 8004d74 <HAL_RCC_GetSysClockFreq+0x114>
 8004d5a:	e7b4      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x66>
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	003d0900 	.word	0x003d0900
 8004d64:	03d09000 	.word	0x03d09000
 8004d68:	4a742400 	.word	0x4a742400
 8004d6c:	007a1200 	.word	0x007a1200
 8004d70:	4af42400 	.word	0x4af42400
 8004d74:	4c742400 	.word	0x4c742400

08004d78 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004d78:	b178      	cbz	r0, 8004d9a <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d7a:	4a8e      	ldr	r2, [pc, #568]	; (8004fb4 <HAL_RCC_ClockConfig+0x23c>)
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	428b      	cmp	r3, r1
 8004d84:	d20b      	bcs.n	8004d9e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	6813      	ldr	r3, [r2, #0]
 8004d88:	f023 030f 	bic.w	r3, r3, #15
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d90:	6813      	ldr	r3, [r2, #0]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	428b      	cmp	r3, r1
 8004d98:	d001      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8004d9a:	2001      	movs	r0, #1
}
 8004d9c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d9e:	6803      	ldr	r3, [r0, #0]
{
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004da4:	075d      	lsls	r5, r3, #29
 8004da6:	d50b      	bpl.n	8004dc0 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004da8:	4c83      	ldr	r4, [pc, #524]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004daa:	6905      	ldr	r5, [r0, #16]
 8004dac:	69a2      	ldr	r2, [r4, #24]
 8004dae:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004db2:	4295      	cmp	r5, r2
 8004db4:	d904      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004db6:	69a2      	ldr	r2, [r4, #24]
 8004db8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dbc:	432a      	orrs	r2, r5
 8004dbe:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	071c      	lsls	r4, r3, #28
 8004dc2:	d50b      	bpl.n	8004ddc <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dc4:	4c7c      	ldr	r4, [pc, #496]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004dc6:	6945      	ldr	r5, [r0, #20]
 8004dc8:	69e2      	ldr	r2, [r4, #28]
 8004dca:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004dce:	4295      	cmp	r5, r2
 8004dd0:	d904      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dd2:	69e2      	ldr	r2, [r4, #28]
 8004dd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dd8:	432a      	orrs	r2, r5
 8004dda:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	06da      	lsls	r2, r3, #27
 8004dde:	d50b      	bpl.n	8004df8 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004de0:	4c75      	ldr	r4, [pc, #468]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004de2:	6985      	ldr	r5, [r0, #24]
 8004de4:	69e2      	ldr	r2, [r4, #28]
 8004de6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004dea:	4295      	cmp	r5, r2
 8004dec:	d904      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dee:	69e2      	ldr	r2, [r4, #28]
 8004df0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004df4:	432a      	orrs	r2, r5
 8004df6:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004df8:	069f      	lsls	r7, r3, #26
 8004dfa:	d50b      	bpl.n	8004e14 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dfc:	4c6e      	ldr	r4, [pc, #440]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004dfe:	69c5      	ldr	r5, [r0, #28]
 8004e00:	6a22      	ldr	r2, [r4, #32]
 8004e02:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004e06:	4295      	cmp	r5, r2
 8004e08:	d904      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e0a:	6a22      	ldr	r2, [r4, #32]
 8004e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e10:	432a      	orrs	r2, r5
 8004e12:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	079e      	lsls	r6, r3, #30
 8004e16:	4604      	mov	r4, r0
 8004e18:	460d      	mov	r5, r1
 8004e1a:	f003 0201 	and.w	r2, r3, #1
 8004e1e:	d55d      	bpl.n	8004edc <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e20:	4e65      	ldr	r6, [pc, #404]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004e22:	68c0      	ldr	r0, [r0, #12]
 8004e24:	69b1      	ldr	r1, [r6, #24]
 8004e26:	f001 010f 	and.w	r1, r1, #15
 8004e2a:	4288      	cmp	r0, r1
 8004e2c:	d904      	bls.n	8004e38 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2e:	69b1      	ldr	r1, [r6, #24]
 8004e30:	f021 010f 	bic.w	r1, r1, #15
 8004e34:	4301      	orrs	r1, r0
 8004e36:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d031      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e3c:	4a5e      	ldr	r2, [pc, #376]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004e3e:	68a1      	ldr	r1, [r4, #8]
 8004e40:	6993      	ldr	r3, [r2, #24]
 8004e42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e46:	430b      	orrs	r3, r1
 8004e48:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4a:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e4c:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	f000 80a2 	beq.w	8004f98 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	f000 80a5 	beq.w	8004fa4 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	f000 80a6 	beq.w	8004fac <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	0757      	lsls	r7, r2, #29
 8004e62:	d538      	bpl.n	8004ed6 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e64:	4954      	ldr	r1, [pc, #336]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6c:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6e:	f022 0207 	bic.w	r2, r2, #7
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8004e76:	f7fc fbfd 	bl	8001674 <HAL_GetTick>
 8004e7a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	e005      	b.n	8004e8a <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7e:	f7fc fbf9 	bl	8001674 <HAL_GetTick>
 8004e82:	1bc0      	subs	r0, r0, r7
 8004e84:	4540      	cmp	r0, r8
 8004e86:	f200 808b 	bhi.w	8004fa0 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	6933      	ldr	r3, [r6, #16]
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004e96:	d1f2      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079e      	lsls	r6, r3, #30
 8004e9c:	d50b      	bpl.n	8004eb6 <HAL_RCC_ClockConfig+0x13e>
 8004e9e:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ea0:	4945      	ldr	r1, [pc, #276]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004ea2:	698a      	ldr	r2, [r1, #24]
 8004ea4:	f002 020f 	and.w	r2, r2, #15
 8004ea8:	4282      	cmp	r2, r0
 8004eaa:	d904      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	698a      	ldr	r2, [r1, #24]
 8004eae:	f022 020f 	bic.w	r2, r2, #15
 8004eb2:	4310      	orrs	r0, r2
 8004eb4:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb6:	493f      	ldr	r1, [pc, #252]	; (8004fb4 <HAL_RCC_ClockConfig+0x23c>)
 8004eb8:	680a      	ldr	r2, [r1, #0]
 8004eba:	f002 020f 	and.w	r2, r2, #15
 8004ebe:	42aa      	cmp	r2, r5
 8004ec0:	d914      	bls.n	8004eec <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	680a      	ldr	r2, [r1, #0]
 8004ec4:	f022 020f 	bic.w	r2, r2, #15
 8004ec8:	432a      	orrs	r2, r5
 8004eca:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ecc:	680a      	ldr	r2, [r1, #0]
 8004ece:	f002 020f 	and.w	r2, r2, #15
 8004ed2:	42aa      	cmp	r2, r5
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 8004ed6:	2001      	movs	r0, #1
}
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d1ad      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee0:	4934      	ldr	r1, [pc, #208]	; (8004fb4 <HAL_RCC_ClockConfig+0x23c>)
 8004ee2:	680a      	ldr	r2, [r1, #0]
 8004ee4:	f002 020f 	and.w	r2, r2, #15
 8004ee8:	42aa      	cmp	r2, r5
 8004eea:	d8ea      	bhi.n	8004ec2 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004eec:	0758      	lsls	r0, r3, #29
 8004eee:	d50b      	bpl.n	8004f08 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ef0:	4931      	ldr	r1, [pc, #196]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004ef2:	6920      	ldr	r0, [r4, #16]
 8004ef4:	698a      	ldr	r2, [r1, #24]
 8004ef6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004efa:	4290      	cmp	r0, r2
 8004efc:	d204      	bcs.n	8004f08 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004efe:	698a      	ldr	r2, [r1, #24]
 8004f00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f04:	4302      	orrs	r2, r0
 8004f06:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	0719      	lsls	r1, r3, #28
 8004f0a:	d50b      	bpl.n	8004f24 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f0c:	492a      	ldr	r1, [pc, #168]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f0e:	6960      	ldr	r0, [r4, #20]
 8004f10:	69ca      	ldr	r2, [r1, #28]
 8004f12:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004f16:	4290      	cmp	r0, r2
 8004f18:	d204      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f1a:	69ca      	ldr	r2, [r1, #28]
 8004f1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f20:	4302      	orrs	r2, r0
 8004f22:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f24:	06da      	lsls	r2, r3, #27
 8004f26:	d50b      	bpl.n	8004f40 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f28:	4923      	ldr	r1, [pc, #140]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f2a:	69a0      	ldr	r0, [r4, #24]
 8004f2c:	69ca      	ldr	r2, [r1, #28]
 8004f2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004f32:	4290      	cmp	r0, r2
 8004f34:	d204      	bcs.n	8004f40 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f36:	69ca      	ldr	r2, [r1, #28]
 8004f38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f3c:	4302      	orrs	r2, r0
 8004f3e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f40:	069b      	lsls	r3, r3, #26
 8004f42:	d50b      	bpl.n	8004f5c <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f44:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f46:	69e1      	ldr	r1, [r4, #28]
 8004f48:	6a13      	ldr	r3, [r2, #32]
 8004f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	d204      	bcs.n	8004f5c <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f52:	6a13      	ldr	r3, [r2, #32]
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f5c:	f7ff fe80 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <HAL_RCC_ClockConfig+0x240>)
 8004f62:	4916      	ldr	r1, [pc, #88]	; (8004fbc <HAL_RCC_ClockConfig+0x244>)
 8004f64:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f66:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f68:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8004f6c:	4d14      	ldr	r5, [pc, #80]	; (8004fc0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f6e:	f002 020f 	and.w	r2, r2, #15
 8004f72:	4c14      	ldr	r4, [pc, #80]	; (8004fc4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f76:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f78:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8004f7c:	4912      	ldr	r1, [pc, #72]	; (8004fc8 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f7e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f82:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8004f86:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f88:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8004f8c:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f8e:	6022      	str	r2, [r4, #0]
}
 8004f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8004f94:	f7fc b884 	b.w	80010a0 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f98:	0390      	lsls	r0, r2, #14
 8004f9a:	f53f af63 	bmi.w	8004e64 <HAL_RCC_ClockConfig+0xec>
 8004f9e:	e79a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	e799      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fa4:	0191      	lsls	r1, r2, #6
 8004fa6:	f53f af5d 	bmi.w	8004e64 <HAL_RCC_ClockConfig+0xec>
 8004faa:	e794      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fac:	05d2      	lsls	r2, r2, #23
 8004fae:	f53f af59 	bmi.w	8004e64 <HAL_RCC_ClockConfig+0xec>
 8004fb2:	e790      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x15e>
 8004fb4:	52002000 	.word	0x52002000
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	080147b4 	.word	0x080147b4
 8004fc0:	2400000c 	.word	0x2400000c
 8004fc4:	24000004 	.word	0x24000004
 8004fc8:	24000000 	.word	0x24000000

08004fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fcc:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fce:	f7ff fe47 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_GetHCLKFreq+0x34>)
 8004fd4:	490b      	ldr	r1, [pc, #44]	; (8005004 <HAL_RCC_GetHCLKFreq+0x38>)
 8004fd6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fd8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fda:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fde:	4c0a      	ldr	r4, [pc, #40]	; (8005008 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004fe0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fe4:	4d09      	ldr	r5, [pc, #36]	; (800500c <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fe6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fea:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fee:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ff6:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8004ffa:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ffc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	58024400 	.word	0x58024400
 8005004:	080147b4 	.word	0x080147b4
 8005008:	24000004 	.word	0x24000004
 800500c:	24000000 	.word	0x24000000

08005010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005010:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005012:	f7ff ffdb 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005020:	5cd3      	ldrb	r3, [r2, r3]
 8005022:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005026:	40d8      	lsrs	r0, r3
 8005028:	bd08      	pop	{r3, pc}
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	080147b4 	.word	0x080147b4

08005034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005034:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005036:	f7ff ffc9 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800503c:	4a05      	ldr	r2, [pc, #20]	; (8005054 <HAL_RCC_GetPCLK2Freq+0x20>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005044:	5cd3      	ldrb	r3, [r2, r3]
 8005046:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800504a:	40d8      	lsrs	r0, r3
 800504c:	bd08      	pop	{r3, pc}
 800504e:	bf00      	nop
 8005050:	58024400 	.word	0x58024400
 8005054:	080147b4 	.word	0x080147b4

08005058 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800505a:	223f      	movs	r2, #63	; 0x3f
 800505c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	f002 0207 	and.w	r2, r2, #7
 8005064:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800506c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	f002 020f 	and.w	r2, r2, #15
 8005074:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800507c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005084:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800508c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800508e:	6a1b      	ldr	r3, [r3, #32]
{
 8005090:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005092:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005096:	4c05      	ldr	r4, [pc, #20]	; (80050ac <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005098:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800509a:	6823      	ldr	r3, [r4, #0]
}
 800509c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	600b      	str	r3, [r1, #0]
}
 80050a6:	4770      	bx	lr
 80050a8:	58024400 	.word	0x58024400
 80050ac:	52002000 	.word	0x52002000

080050b0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b0:	4a3b      	ldr	r2, [pc, #236]	; (80051a0 <RCCEx_PLL2_Config+0xf0>)
{
 80050b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d067      	beq.n	800518e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	460f      	mov	r7, r1
 80050c2:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050c4:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80050c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050cc:	f7fc fad2 	bl	8001674 <HAL_GetTick>
 80050d0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050d2:	e004      	b.n	80050de <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050d4:	f7fc face 	bl	8001674 <HAL_GetTick>
 80050d8:	1b80      	subs	r0, r0, r6
 80050da:	2802      	cmp	r0, #2
 80050dc:	d859      	bhi.n	8005192 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	d4f7      	bmi.n	80050d4 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050e6:	682a      	ldr	r2, [r5, #0]
 80050e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050ec:	492d      	ldr	r1, [pc, #180]	; (80051a4 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80050f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80050f4:	686e      	ldr	r6, [r5, #4]
 80050f6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80050fa:	3e01      	subs	r6, #1
 80050fc:	1e50      	subs	r0, r2, #1
 80050fe:	3b01      	subs	r3, #1
 8005100:	692a      	ldr	r2, [r5, #16]
 8005102:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005106:	025b      	lsls	r3, r3, #9
 8005108:	0400      	lsls	r0, r0, #16
 800510a:	3a01      	subs	r2, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8005112:	0612      	lsls	r2, r2, #24
 8005114:	4303      	orrs	r3, r0
 8005116:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800511a:	4333      	orrs	r3, r6
 800511c:	4313      	orrs	r3, r2
 800511e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005120:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005122:	696a      	ldr	r2, [r5, #20]
 8005124:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005128:	4313      	orrs	r3, r2
 800512a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800512c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800512e:	69aa      	ldr	r2, [r5, #24]
 8005130:	f023 0320 	bic.w	r3, r3, #32
 8005134:	4313      	orrs	r3, r2
 8005136:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005138:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005140:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005142:	69eb      	ldr	r3, [r5, #28]
 8005144:	4011      	ands	r1, r2
 8005146:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800514a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800514c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800514e:	f043 0310 	orr.w	r3, r3, #16
 8005152:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005154:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005156:	b1f7      	cbz	r7, 8005196 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005158:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800515a:	bf0c      	ite	eq
 800515c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005160:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005164:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <RCCEx_PLL2_Config+0xf0>)
 8005168:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800516a:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 800516c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005170:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005172:	f7fc fa7f 	bl	8001674 <HAL_GetTick>
 8005176:	4605      	mov	r5, r0
 8005178:	e004      	b.n	8005184 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800517a:	f7fc fa7b 	bl	8001674 <HAL_GetTick>
 800517e:	1b40      	subs	r0, r0, r5
 8005180:	2802      	cmp	r0, #2
 8005182:	d806      	bhi.n	8005192 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	d5f7      	bpl.n	800517a <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800518a:	2000      	movs	r0, #0
}
 800518c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800518e:	2001      	movs	r0, #1
}
 8005190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005192:	2003      	movs	r0, #3
}
 8005194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800519c:	e7e3      	b.n	8005166 <RCCEx_PLL2_Config+0xb6>
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400
 80051a4:	ffff0007 	.word	0xffff0007

080051a8 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051a8:	4a3b      	ldr	r2, [pc, #236]	; (8005298 <RCCEx_PLL3_Config+0xf0>)
{
 80051aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d067      	beq.n	8005286 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	460f      	mov	r7, r1
 80051ba:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051bc:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80051c4:	f7fc fa56 	bl	8001674 <HAL_GetTick>
 80051c8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051ca:	e004      	b.n	80051d6 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051cc:	f7fc fa52 	bl	8001674 <HAL_GetTick>
 80051d0:	1b80      	subs	r0, r0, r6
 80051d2:	2802      	cmp	r0, #2
 80051d4:	d859      	bhi.n	800528a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	009a      	lsls	r2, r3, #2
 80051da:	d4f7      	bmi.n	80051cc <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051de:	682a      	ldr	r2, [r5, #0]
 80051e0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051e4:	492d      	ldr	r1, [pc, #180]	; (800529c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051e6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80051ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ec:	686e      	ldr	r6, [r5, #4]
 80051ee:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80051f2:	3e01      	subs	r6, #1
 80051f4:	1e50      	subs	r0, r2, #1
 80051f6:	3b01      	subs	r3, #1
 80051f8:	692a      	ldr	r2, [r5, #16]
 80051fa:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80051fe:	025b      	lsls	r3, r3, #9
 8005200:	0400      	lsls	r0, r0, #16
 8005202:	3a01      	subs	r2, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800520a:	0612      	lsls	r2, r2, #24
 800520c:	4303      	orrs	r3, r0
 800520e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005212:	4333      	orrs	r3, r6
 8005214:	4313      	orrs	r3, r2
 8005216:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800521a:	696a      	ldr	r2, [r5, #20]
 800521c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005220:	4313      	orrs	r3, r2
 8005222:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005226:	69aa      	ldr	r2, [r5, #24]
 8005228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800522c:	4313      	orrs	r3, r2
 800522e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005236:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005238:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800523a:	69eb      	ldr	r3, [r5, #28]
 800523c:	4011      	ands	r1, r2
 800523e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8005242:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800524c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800524e:	b1f7      	cbz	r7, 800528e <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005250:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005252:	bf0c      	ite	eq
 8005254:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005258:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800525c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800525e:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <RCCEx_PLL3_Config+0xf0>)
 8005260:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005262:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8005264:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800526a:	f7fc fa03 	bl	8001674 <HAL_GetTick>
 800526e:	4605      	mov	r5, r0
 8005270:	e004      	b.n	800527c <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005272:	f7fc f9ff 	bl	8001674 <HAL_GetTick>
 8005276:	1b40      	subs	r0, r0, r5
 8005278:	2802      	cmp	r0, #2
 800527a:	d806      	bhi.n	800528a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	d5f7      	bpl.n	8005272 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8005282:	2000      	movs	r0, #0
}
 8005284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005286:	2001      	movs	r0, #1
}
 8005288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800528a:	2003      	movs	r0, #3
}
 800528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800528e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005292:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005294:	e7e3      	b.n	800525e <RCCEx_PLL3_Config+0xb6>
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
 800529c:	ffff0007 	.word	0xffff0007

080052a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80052a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052a4:	6803      	ldr	r3, [r0, #0]
{
 80052a6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052a8:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80052ac:	d015      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80052ae:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80052b0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80052b4:	f000 845b 	beq.w	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80052b8:	f240 850e 	bls.w	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 80052bc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80052c0:	f000 846e 	beq.w	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 80052c4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80052c8:	f040 851f 	bne.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052cc:	48a2      	ldr	r0, [pc, #648]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80052ce:	2600      	movs	r6, #0
 80052d0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80052d2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80052d6:	430a      	orrs	r2, r1
 80052d8:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052da:	05dd      	lsls	r5, r3, #23
 80052dc:	d50a      	bpl.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 80052de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80052e0:	2a04      	cmp	r2, #4
 80052e2:	d806      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052e4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80052e8:	03f003e9 	.word	0x03f003e9
 80052ec:	03aa03de 	.word	0x03aa03de
 80052f0:	03aa      	.short	0x03aa
      ret = HAL_ERROR;
 80052f2:	2601      	movs	r6, #1
 80052f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052f6:	0598      	lsls	r0, r3, #22
 80052f8:	d51b      	bpl.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 80052fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80052fc:	2a80      	cmp	r2, #128	; 0x80
 80052fe:	f000 8411 	beq.w	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8005302:	f200 84de 	bhi.w	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005306:	2a00      	cmp	r2, #0
 8005308:	f000 8450 	beq.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800530c:	2a40      	cmp	r2, #64	; 0x40
 800530e:	f040 84df 	bne.w	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005312:	2100      	movs	r1, #0
 8005314:	1d20      	adds	r0, r4, #4
 8005316:	f7ff fecb 	bl	80050b0 <RCCEx_PLL2_Config>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800531e:	2d00      	cmp	r5, #0
 8005320:	f040 840a 	bne.w	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005324:	498c      	ldr	r1, [pc, #560]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005328:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800532a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800532e:	4302      	orrs	r2, r0
 8005330:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005332:	0559      	lsls	r1, r3, #21
 8005334:	d51f      	bpl.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005336:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800533a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800533e:	f000 83e0 	beq.w	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x862>
 8005342:	f200 84a6 	bhi.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005346:	2a00      	cmp	r2, #0
 8005348:	f000 841d 	beq.w	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800534c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005350:	f040 84a7 	bne.w	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xa02>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005354:	2100      	movs	r1, #0
 8005356:	1d20      	adds	r0, r4, #4
 8005358:	f7ff feaa 	bl	80050b0 <RCCEx_PLL2_Config>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005360:	2d00      	cmp	r5, #0
 8005362:	f040 83d8 	bne.w	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005366:	497c      	ldr	r1, [pc, #496]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005368:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800536c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800536e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005372:	4302      	orrs	r2, r0
 8005374:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005376:	051a      	lsls	r2, r3, #20
 8005378:	d51f      	bpl.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 800537a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800537e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005382:	f000 83dc 	beq.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8005386:	f200 8490 	bhi.w	8005caa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800538a:	2a00      	cmp	r2, #0
 800538c:	f000 8415 	beq.w	8005bba <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8005390:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005394:	f040 8491 	bne.w	8005cba <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005398:	2100      	movs	r1, #0
 800539a:	1d20      	adds	r0, r4, #4
 800539c:	f7ff fe88 	bl	80050b0 <RCCEx_PLL2_Config>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	f040 83d4 	bne.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053aa:	496b      	ldr	r1, [pc, #428]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80053ac:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80053b0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80053b2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80053b6:	4302      	orrs	r2, r0
 80053b8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053ba:	019f      	lsls	r7, r3, #6
 80053bc:	d50d      	bpl.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 80053be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80053c0:	2a10      	cmp	r2, #16
 80053c2:	f000 8318 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
 80053c6:	f240 849b 	bls.w	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80053ca:	2a20      	cmp	r2, #32
 80053cc:	f000 8355 	beq.w	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x7da>
 80053d0:	2a30      	cmp	r2, #48	; 0x30
 80053d2:	f000 8315 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      ret = HAL_ERROR;
 80053d6:	2601      	movs	r6, #1
 80053d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053da:	04d8      	lsls	r0, r3, #19
 80053dc:	d51d      	bpl.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 80053de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80053e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80053e4:	f000 83b7 	beq.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80053e8:	f200 847e 	bhi.w	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	f000 83d1 	beq.w	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80053f2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80053f6:	f040 847f 	bne.w	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053fa:	2100      	movs	r1, #0
 80053fc:	1d20      	adds	r0, r4, #4
 80053fe:	f7ff fe57 	bl	80050b0 <RCCEx_PLL2_Config>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005406:	2d00      	cmp	r5, #0
 8005408:	f040 83af 	bne.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800540c:	4952      	ldr	r1, [pc, #328]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800540e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005410:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005412:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005416:	4302      	orrs	r2, r0
 8005418:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800541a:	0499      	lsls	r1, r3, #18
 800541c:	d51b      	bpl.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 800541e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005420:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8005424:	f000 8315 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8005428:	f200 8414 	bhi.w	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800542c:	b14a      	cbz	r2, 8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800542e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005432:	f040 841b 	bne.w	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005436:	2101      	movs	r1, #1
 8005438:	1d20      	adds	r0, r4, #4
 800543a:	f7ff fe39 	bl	80050b0 <RCCEx_PLL2_Config>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005442:	2d00      	cmp	r5, #0
 8005444:	f040 827d 	bne.w	8005942 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005448:	4943      	ldr	r1, [pc, #268]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800544a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800544c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800544e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005452:	4302      	orrs	r2, r0
 8005454:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005456:	045a      	lsls	r2, r3, #17
 8005458:	d51d      	bpl.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800545a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800545e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005462:	f000 82be 	beq.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8005466:	f200 8405 	bhi.w	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800546a:	b14a      	cbz	r2, 8005480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800546c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005470:	f040 840c 	bne.w	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005474:	2101      	movs	r1, #1
 8005476:	1d20      	adds	r0, r4, #4
 8005478:	f7ff fe1a 	bl	80050b0 <RCCEx_PLL2_Config>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005480:	2d00      	cmp	r5, #0
 8005482:	f040 825c 	bne.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005486:	4934      	ldr	r1, [pc, #208]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005488:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800548c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800548e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005492:	4302      	orrs	r2, r0
 8005494:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005496:	041f      	lsls	r7, r3, #16
 8005498:	d50d      	bpl.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 800549a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800549c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80054a0:	f000 82e2 	beq.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80054a4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80054a8:	f000 81b8 	beq.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	f000 81bb 	beq.w	8005828 <HAL_RCCEx_PeriphCLKConfig+0x588>
      ret = HAL_ERROR;
 80054b2:	2601      	movs	r6, #1
 80054b4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054b6:	01d8      	lsls	r0, r3, #7
 80054b8:	d519      	bpl.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 80054ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80054bc:	2a03      	cmp	r2, #3
 80054be:	f200 844f 	bhi.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80054c2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80054c6:	000a      	.short	0x000a
 80054c8:	00040270 	.word	0x00040270
 80054cc:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054ce:	2102      	movs	r1, #2
 80054d0:	1d20      	adds	r0, r4, #4
 80054d2:	f7ff fded 	bl	80050b0 <RCCEx_PLL2_Config>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80054da:	2d00      	cmp	r5, #0
 80054dc:	f040 8227 	bne.w	800592e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054e0:	491d      	ldr	r1, [pc, #116]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80054e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80054e4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80054e6:	f022 0203 	bic.w	r2, r2, #3
 80054ea:	4302      	orrs	r2, r0
 80054ec:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ee:	0259      	lsls	r1, r3, #9
 80054f0:	f100 81d7 	bmi.w	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x602>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054f4:	07df      	lsls	r7, r3, #31
 80054f6:	d542      	bpl.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 80054f8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80054fa:	2a28      	cmp	r2, #40	; 0x28
 80054fc:	f200 8376 	bhi.w	8005bec <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005500:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005504:	03740033 	.word	0x03740033
 8005508:	03740374 	.word	0x03740374
 800550c:	03740374 	.word	0x03740374
 8005510:	03740374 	.word	0x03740374
 8005514:	03740262 	.word	0x03740262
 8005518:	03740374 	.word	0x03740374
 800551c:	03740374 	.word	0x03740374
 8005520:	03740374 	.word	0x03740374
 8005524:	0374002c 	.word	0x0374002c
 8005528:	03740374 	.word	0x03740374
 800552c:	03740374 	.word	0x03740374
 8005530:	03740374 	.word	0x03740374
 8005534:	03740033 	.word	0x03740033
 8005538:	03740374 	.word	0x03740374
 800553c:	03740374 	.word	0x03740374
 8005540:	03740374 	.word	0x03740374
 8005544:	03740033 	.word	0x03740033
 8005548:	03740374 	.word	0x03740374
 800554c:	03740374 	.word	0x03740374
 8005550:	03740374 	.word	0x03740374
 8005554:	0033      	.short	0x0033
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800555c:	2101      	movs	r1, #1
 800555e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005562:	f7ff fe21 	bl	80051a8 <RCCEx_PLL3_Config>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800556a:	2d00      	cmp	r5, #0
 800556c:	f040 81dd 	bne.w	800592a <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005570:	49b3      	ldr	r1, [pc, #716]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005572:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005574:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005576:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800557a:	4302      	orrs	r2, r0
 800557c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800557e:	0798      	lsls	r0, r3, #30
 8005580:	d51c      	bpl.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005582:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005584:	2a05      	cmp	r2, #5
 8005586:	f200 83e5 	bhi.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800558a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800558e:	000d      	.short	0x000d
 8005590:	00060203 	.word	0x00060203
 8005594:	000d000d 	.word	0x000d000d
 8005598:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800559a:	2101      	movs	r1, #1
 800559c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055a0:	f7ff fe02 	bl	80051a8 <RCCEx_PLL3_Config>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	f040 81c2 	bne.w	8005932 <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80055ae:	49a4      	ldr	r1, [pc, #656]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80055b0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80055b2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80055b4:	f022 0207 	bic.w	r2, r2, #7
 80055b8:	4302      	orrs	r2, r0
 80055ba:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055bc:	0759      	lsls	r1, r3, #29
 80055be:	d51e      	bpl.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80055c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80055c4:	2a05      	cmp	r2, #5
 80055c6:	f200 83c8 	bhi.w	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80055ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80055ce:	000d      	.short	0x000d
 80055d0:	000601f4 	.word	0x000601f4
 80055d4:	000d000d 	.word	0x000d000d
 80055d8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055da:	2101      	movs	r1, #1
 80055dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055e0:	f7ff fde2 	bl	80051a8 <RCCEx_PLL3_Config>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	f040 81a4 	bne.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ee:	4994      	ldr	r1, [pc, #592]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80055f0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80055f4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80055f6:	f022 0207 	bic.w	r2, r2, #7
 80055fa:	4302      	orrs	r2, r0
 80055fc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055fe:	069a      	lsls	r2, r3, #26
 8005600:	d51d      	bpl.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005602:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005606:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800560a:	f000 8203 	beq.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x774>
 800560e:	f200 82f4 	bhi.w	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005612:	b14a      	cbz	r2, 8005628 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005614:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005618:	f040 82fb 	bne.w	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x972>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561c:	2100      	movs	r1, #0
 800561e:	1d20      	adds	r0, r4, #4
 8005620:	f7ff fd46 	bl	80050b0 <RCCEx_PLL2_Config>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005628:	2d00      	cmp	r5, #0
 800562a:	f040 8186 	bne.w	800593a <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800562e:	4984      	ldr	r1, [pc, #528]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005630:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005634:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005636:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800563a:	4302      	orrs	r2, r0
 800563c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800563e:	065f      	lsls	r7, r3, #25
 8005640:	d51d      	bpl.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005642:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005646:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800564a:	f000 81ed 	beq.w	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x788>
 800564e:	f200 82e3 	bhi.w	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x978>
 8005652:	b14a      	cbz	r2, 8005668 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005654:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005658:	f040 82ea 	bne.w	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x990>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800565c:	2100      	movs	r1, #0
 800565e:	1d20      	adds	r0, r4, #4
 8005660:	f7ff fd26 	bl	80050b0 <RCCEx_PLL2_Config>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005668:	2d00      	cmp	r5, #0
 800566a:	f040 816e 	bne.w	800594a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566e:	4974      	ldr	r1, [pc, #464]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005670:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8005674:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005676:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800567a:	4302      	orrs	r2, r0
 800567c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800567e:	0618      	lsls	r0, r3, #24
 8005680:	d51d      	bpl.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005682:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8005686:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800568a:	f000 8200 	beq.w	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 800568e:	f200 82d2 	bhi.w	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8005692:	b14a      	cbz	r2, 80056a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005694:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005698:	f040 82d9 	bne.w	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800569c:	2100      	movs	r1, #0
 800569e:	1d20      	adds	r0, r4, #4
 80056a0:	f7ff fd06 	bl	80050b0 <RCCEx_PLL2_Config>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	f040 8150 	bne.w	800594e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056ae:	4964      	ldr	r1, [pc, #400]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80056b0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80056b4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80056b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80056ba:	4302      	orrs	r2, r0
 80056bc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80056be:	0719      	lsls	r1, r3, #28
 80056c0:	d50b      	bpl.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80056c2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80056c6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80056ca:	f000 8204 	beq.w	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056ce:	485c      	ldr	r0, [pc, #368]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80056d0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80056d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80056d6:	430a      	orrs	r2, r1
 80056d8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056da:	06da      	lsls	r2, r3, #27
 80056dc:	d50b      	bpl.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80056de:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80056e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80056e6:	f000 8201 	beq.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ea:	4855      	ldr	r0, [pc, #340]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80056ec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80056ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056f2:	430a      	orrs	r2, r1
 80056f4:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056f6:	031f      	lsls	r7, r3, #12
 80056f8:	d50e      	bpl.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 80056fa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80056fe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005702:	f000 809f 	beq.w	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
 8005706:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800570a:	f000 80a2 	beq.w	8005852 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800570e:	2900      	cmp	r1, #0
 8005710:	f000 825a 	beq.w	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x928>
      ret = HAL_ERROR;
 8005714:	2601      	movs	r6, #1
 8005716:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005718:	0358      	lsls	r0, r3, #13
 800571a:	d50f      	bpl.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 800571c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005720:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005724:	f000 80a0 	beq.w	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005728:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800572c:	f000 80a3 	beq.w	8005876 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8005730:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005734:	f000 8251 	beq.w	8005bda <HAL_RCCEx_PeriphCLKConfig+0x93a>
      ret = HAL_ERROR;
 8005738:	2601      	movs	r6, #1
 800573a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800573c:	03d9      	lsls	r1, r3, #15
 800573e:	d517      	bpl.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005740:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005742:	2a00      	cmp	r2, #0
 8005744:	f000 811c 	beq.w	8005980 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8005748:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800574c:	f040 8103 	bne.w	8005956 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005750:	2102      	movs	r1, #2
 8005752:	1d20      	adds	r0, r4, #4
 8005754:	f7ff fcac 	bl	80050b0 <RCCEx_PLL2_Config>
 8005758:	4605      	mov	r5, r0
 800575a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800575c:	2d00      	cmp	r5, #0
 800575e:	f040 8117 	bne.w	8005990 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005762:	4937      	ldr	r1, [pc, #220]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005764:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005766:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005768:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800576c:	4302      	orrs	r2, r0
 800576e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005770:	009a      	lsls	r2, r3, #2
 8005772:	f100 808b 	bmi.w	800588c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005776:	039f      	lsls	r7, r3, #14
 8005778:	d43f      	bmi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800577a:	1c30      	adds	r0, r6, #0
 800577c:	bf18      	it	ne
 800577e:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005780:	02de      	lsls	r6, r3, #11
 8005782:	d506      	bpl.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005784:	492e      	ldr	r1, [pc, #184]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005786:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005788:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800578a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800578e:	432a      	orrs	r2, r5
 8005790:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005792:	00dd      	lsls	r5, r3, #3
 8005794:	d507      	bpl.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005796:	492a      	ldr	r1, [pc, #168]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005798:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800579c:	690a      	ldr	r2, [r1, #16]
 800579e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057a2:	432a      	orrs	r2, r5
 80057a4:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057a6:	0299      	lsls	r1, r3, #10
 80057a8:	d506      	bpl.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057aa:	4925      	ldr	r1, [pc, #148]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80057ac:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80057ae:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80057b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80057b4:	432a      	orrs	r2, r5
 80057b6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057b8:	005a      	lsls	r2, r3, #1
 80057ba:	d509      	bpl.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057bc:	4a20      	ldr	r2, [pc, #128]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80057be:	6911      	ldr	r1, [r2, #16]
 80057c0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80057c4:	6111      	str	r1, [r2, #16]
 80057c6:	6911      	ldr	r1, [r2, #16]
 80057c8:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80057cc:	4329      	orrs	r1, r5
 80057ce:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da06      	bge.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x542>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057d4:	491a      	ldr	r1, [pc, #104]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80057d6:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80057d8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80057da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057de:	432a      	orrs	r2, r5
 80057e0:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	d507      	bpl.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x556>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80057e8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80057ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6553      	str	r3, [r2, #84]	; 0x54
}
 80057f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80057fa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80057fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005800:	f000 80ac 	beq.w	800595c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005804:	f240 80e9 	bls.w	80059da <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005808:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800580c:	f000 80ab 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8005810:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005814:	f000 80a7 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8005818:	2001      	movs	r0, #1
 800581a:	e7b1      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800581c:	2101      	movs	r1, #1
 800581e:	1d20      	adds	r0, r4, #4
 8005820:	f7ff fc46 	bl	80050b0 <RCCEx_PLL2_Config>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005828:	2d00      	cmp	r5, #0
 800582a:	f040 808c 	bne.w	8005946 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800582e:	4904      	ldr	r1, [pc, #16]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8005830:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005832:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005834:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005838:	4302      	orrs	r2, r0
 800583a:	650a      	str	r2, [r1, #80]	; 0x50
 800583c:	e63b      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005844:	2102      	movs	r1, #2
 8005846:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800584a:	f7ff fcad 	bl	80051a8 <RCCEx_PLL3_Config>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005852:	2d00      	cmp	r5, #0
 8005854:	d17d      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005856:	49b1      	ldr	r1, [pc, #708]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005858:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800585c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800585e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005862:	4302      	orrs	r2, r0
 8005864:	658a      	str	r2, [r1, #88]	; 0x58
 8005866:	e757      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005868:	2101      	movs	r1, #1
 800586a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800586e:	f7ff fc9b 	bl	80051a8 <RCCEx_PLL3_Config>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005876:	2d00      	cmp	r5, #0
 8005878:	d155      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587a:	49a8      	ldr	r1, [pc, #672]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800587c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005880:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005882:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005886:	4302      	orrs	r2, r0
 8005888:	654a      	str	r2, [r1, #84]	; 0x54
 800588a:	e757      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800588c:	2102      	movs	r1, #2
 800588e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005892:	f7ff fc89 	bl	80051a8 <RCCEx_PLL3_Config>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	2800      	cmp	r0, #0
 800589a:	f43f af6c 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
      status=HAL_ERROR;
 800589e:	2601      	movs	r6, #1
 80058a0:	e769      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058a2:	4b9f      	ldr	r3, [pc, #636]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80058a4:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a6:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80058ae:	f7fb fee1 	bl	8001674 <HAL_GetTick>
 80058b2:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b4:	e006      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7fb fedd 	bl	8001674 <HAL_GetTick>
 80058ba:	eba0 0008 	sub.w	r0, r0, r8
 80058be:	2864      	cmp	r0, #100	; 0x64
 80058c0:	f200 8197 	bhi.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x952>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	05da      	lsls	r2, r3, #23
 80058c8:	d5f5      	bpl.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x616>
    if(ret == HAL_OK)
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	f040 823e 	bne.w	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xaac>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058d0:	4a92      	ldr	r2, [pc, #584]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80058d2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80058d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80058d8:	4059      	eors	r1, r3
 80058da:	f411 7f40 	tst.w	r1, #768	; 0x300
 80058de:	d00b      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x658>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e0:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80058e2:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80058e8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80058ec:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ee:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80058f0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80058f4:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80058f6:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	f000 8208 	beq.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005900:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005904:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005908:	f000 8216 	beq.w	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 800590c:	4983      	ldr	r1, [pc, #524]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800590e:	690a      	ldr	r2, [r1, #16]
 8005910:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005914:	610a      	str	r2, [r1, #16]
 8005916:	4a81      	ldr	r2, [pc, #516]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800591e:	430b      	orrs	r3, r1
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	e5e6      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005926:	462e      	mov	r6, r5
 8005928:	e708      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800592a:	462e      	mov	r6, r5
 800592c:	e627      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800592e:	462e      	mov	r6, r5
 8005930:	e5dd      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005932:	462e      	mov	r6, r5
 8005934:	e642      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005936:	462e      	mov	r6, r5
 8005938:	e661      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800593a:	462e      	mov	r6, r5
 800593c:	e67f      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 800593e:	462e      	mov	r6, r5
 8005940:	e5a9      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005942:	462e      	mov	r6, r5
 8005944:	e587      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005946:	462e      	mov	r6, r5
 8005948:	e5b5      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800594a:	462e      	mov	r6, r5
 800594c:	e697      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800594e:	462e      	mov	r6, r5
 8005950:	e6b5      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8005952:	462e      	mov	r6, r5
 8005954:	e6e0      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8005956:	2601      	movs	r6, #1
 8005958:	4635      	mov	r5, r6
 800595a:	e709      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	486f      	ldr	r0, [pc, #444]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800595e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005960:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005964:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8005966:	2d00      	cmp	r5, #0
 8005968:	f47f af56 	bne.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800596c:	4d6b      	ldr	r5, [pc, #428]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800596e:	1c30      	adds	r0, r6, #0
 8005970:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8005972:	bf18      	it	ne
 8005974:	2001      	movne	r0, #1
 8005976:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800597a:	430a      	orrs	r2, r1
 800597c:	656a      	str	r2, [r5, #84]	; 0x54
 800597e:	e6ff      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005980:	4966      	ldr	r1, [pc, #408]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005982:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005984:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005988:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800598a:	2d00      	cmp	r5, #0
 800598c:	f43f aee9 	beq.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005990:	462e      	mov	r6, r5
 8005992:	e6ed      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005994:	2101      	movs	r1, #1
 8005996:	1d20      	adds	r0, r4, #4
 8005998:	f7ff fb8a 	bl	80050b0 <RCCEx_PLL2_Config>
 800599c:	4605      	mov	r5, r0
 800599e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	d1c6      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x692>
 80059a4:	e603      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a6:	495d      	ldr	r1, [pc, #372]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80059a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80059aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80059ae:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d1bc      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80059b4:	e594      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059b6:	2101      	movs	r1, #1
 80059b8:	1d20      	adds	r0, r4, #4
 80059ba:	f7ff fb79 	bl	80050b0 <RCCEx_PLL2_Config>
 80059be:	4605      	mov	r5, r0
 80059c0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	d1b7      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x696>
 80059c6:	e612      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059c8:	2101      	movs	r1, #1
 80059ca:	1d20      	adds	r0, r4, #4
 80059cc:	f7ff fb70 	bl	80050b0 <RCCEx_PLL2_Config>
 80059d0:	4605      	mov	r5, r0
 80059d2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	d1a8      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80059d8:	e5ca      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 80059da:	2a00      	cmp	r2, #0
 80059dc:	f47f af1c 	bne.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80059e0:	e7c1      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059e2:	2101      	movs	r1, #1
 80059e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059e8:	f7ff fbde 	bl	80051a8 <RCCEx_PLL3_Config>
 80059ec:	4605      	mov	r5, r0
 80059ee:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	d1a4      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80059f4:	e547      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f6:	4949      	ldr	r1, [pc, #292]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80059f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80059fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80059fe:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	d142      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a04:	4945      	ldr	r1, [pc, #276]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005a06:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005a08:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005a0a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005a0e:	4302      	orrs	r2, r0
 8005a10:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005a12:	e4e2      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a14:	2102      	movs	r1, #2
 8005a16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a1a:	f7ff fbc5 	bl	80051a8 <RCCEx_PLL3_Config>
 8005a1e:	4605      	mov	r5, r0
 8005a20:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	d189      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8005a26:	e602      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a28:	2102      	movs	r1, #2
 8005a2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a2e:	f7ff fbbb 	bl	80051a8 <RCCEx_PLL3_Config>
 8005a32:	4605      	mov	r5, r0
 8005a34:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	d187      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8005a3a:	e618      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a3c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	d139      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a42:	4936      	ldr	r1, [pc, #216]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a46:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005a48:	f022 0207 	bic.w	r2, r2, #7
 8005a4c:	4302      	orrs	r2, r0
 8005a4e:	650a      	str	r2, [r1, #80]	; 0x50
 8005a50:	e451      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a52:	2101      	movs	r1, #1
 8005a54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a58:	f7ff fba6 	bl	80051a8 <RCCEx_PLL3_Config>
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	f47f af6e 	bne.w	8005942 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 8005a66:	e4ef      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a68:	492c      	ldr	r1, [pc, #176]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005a6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005a6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a70:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	f47f af67 	bne.w	8005946 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8005a78:	e6d9      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	1d20      	adds	r0, r4, #4
 8005a7e:	f7ff fb17 	bl	80050b0 <RCCEx_PLL2_Config>
 8005a82:	4605      	mov	r5, r0
 8005a84:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005a86:	2d00      	cmp	r5, #0
 8005a88:	d0bc      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005a8a:	462e      	mov	r6, r5
 8005a8c:	e4a5      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a8e:	2102      	movs	r1, #2
 8005a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a94:	f7ff fb88 	bl	80051a8 <RCCEx_PLL3_Config>
 8005a98:	4605      	mov	r5, r0
 8005a9a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	f47f af56 	bne.w	800594e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8005aa2:	e604      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005aaa:	f7ff fb7d 	bl	80051a8 <RCCEx_PLL3_Config>
 8005aae:	4605      	mov	r5, r0
 8005ab0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	d0c5      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 8005ab6:	462e      	mov	r6, r5
 8005ab8:	e41d      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aba:	4918      	ldr	r1, [pc, #96]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
      break;
 8005abc:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005ac0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ac4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005ac6:	e7ba      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	1d20      	adds	r0, r4, #4
 8005acc:	f7ff faf0 	bl	80050b0 <RCCEx_PLL2_Config>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	4605      	mov	r5, r0
      break;
 8005ad4:	e7b3      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005adc:	f7ff fb64 	bl	80051a8 <RCCEx_PLL3_Config>
 8005ae0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005ae4:	b100      	cbz	r0, 8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x848>
          status = HAL_ERROR;
 8005ae6:	2601      	movs	r6, #1
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	e5f0      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005aec:	2102      	movs	r1, #2
 8005aee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005af2:	f7ff fb59 	bl	80051a8 <RCCEx_PLL3_Config>
 8005af6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005afa:	b100      	cbz	r0, 8005afe <HAL_RCCEx_PeriphCLKConfig+0x85e>
        status = HAL_ERROR;
 8005afc:	2601      	movs	r6, #1
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	e5f3      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b02:	2100      	movs	r1, #0
 8005b04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b08:	f7ff fb4e 	bl	80051a8 <RCCEx_PLL3_Config>
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	f43f ac28 	beq.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8005b16:	462e      	mov	r6, r5
 8005b18:	e42d      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8005b1a:	bf00      	nop
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b24:	2100      	movs	r1, #0
 8005b26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b2a:	f7ff fb3d 	bl	80051a8 <RCCEx_PLL3_Config>
 8005b2e:	4605      	mov	r5, r0
 8005b30:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005b32:	2d00      	cmp	r5, #0
 8005b34:	f43f abf6 	beq.w	8005324 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8005b38:	462e      	mov	r6, r5
 8005b3a:	f7ff bbfa 	b.w	8005332 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b3e:	2100      	movs	r1, #0
 8005b40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b44:	f7ff fb30 	bl	80051a8 <RCCEx_PLL3_Config>
 8005b48:	4605      	mov	r5, r0
 8005b4a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	f43f ac2c 	beq.w	80053aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8005b52:	462e      	mov	r6, r5
 8005b54:	e431      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b56:	2100      	movs	r1, #0
 8005b58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b5c:	f7ff fb24 	bl	80051a8 <RCCEx_PLL3_Config>
 8005b60:	4605      	mov	r5, r0
 8005b62:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	f43f ac51 	beq.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b6a:	462e      	mov	r6, r5
 8005b6c:	e455      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b6e:	2102      	movs	r1, #2
 8005b70:	3004      	adds	r0, #4
 8005b72:	f7ff fa9d 	bl	80050b0 <RCCEx_PLL2_Config>
 8005b76:	4606      	mov	r6, r0
 8005b78:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005b7a:	2e00      	cmp	r6, #0
 8005b7c:	f47f abad 	bne.w	80052da <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8005b80:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b82:	f7ff bba3 	b.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b86:	4978      	ldr	r1, [pc, #480]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005b88:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b8e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005b90:	f7ff bbe6 	b.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4974      	ldr	r1, [pc, #464]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005b96:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b9c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005b9e:	e432      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	3024      	adds	r0, #36	; 0x24
 8005ba4:	f7ff fb00 	bl	80051a8 <RCCEx_PLL3_Config>
 8005ba8:	4606      	mov	r6, r0
      break;
 8005baa:	e7e5      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	496e      	ldr	r1, [pc, #440]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005bae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005bb4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005bb6:	f7ff bbb2 	b.w	800531e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bba:	496b      	ldr	r1, [pc, #428]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005bbc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005bc2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8005bc4:	f7ff bbee 	b.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bc8:	1d20      	adds	r0, r4, #4
 8005bca:	f7ff fa71 	bl	80050b0 <RCCEx_PLL2_Config>
 8005bce:	4605      	mov	r5, r0
 8005bd0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005bd2:	2d00      	cmp	r5, #0
 8005bd4:	f47f aebd 	bne.w	8005952 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8005bd8:	e63d      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bda:	4963      	ldr	r1, [pc, #396]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005bdc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005be2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	f47f ae9e 	bne.w	8005926 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8005bea:	e646      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x5da>
      ret = HAL_ERROR;
 8005bec:	2601      	movs	r6, #1
 8005bee:	4635      	mov	r5, r6
 8005bf0:	e4c5      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 8005bf2:	2603      	movs	r6, #3
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	4635      	mov	r5, r6
 8005bf8:	e47c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005bfa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005bfe:	f43f ad13 	beq.w	8005628 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005c02:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005c06:	f43f ad0f 	beq.w	8005628 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005c0a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005c0e:	f43f ad0b 	beq.w	8005628 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 8005c12:	2601      	movs	r6, #1
 8005c14:	4635      	mov	r5, r6
 8005c16:	e512      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c18:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005c1c:	f43f ad24 	beq.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005c20:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8005c24:	f43f ad20 	beq.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005c28:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005c2c:	f43f ad1c 	beq.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8005c30:	2601      	movs	r6, #1
 8005c32:	4635      	mov	r5, r6
 8005c34:	e523      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005c3a:	f43f ad35 	beq.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c3e:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8005c42:	f43f ad31 	beq.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c46:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005c4a:	f43f ad2d 	beq.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8005c4e:	2601      	movs	r6, #1
 8005c50:	4635      	mov	r5, r6
 8005c52:	e534      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c54:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8005c58:	f43f abf3 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005c5c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8005c60:	f43f abef 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005c64:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8005c68:	f43f abeb 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8005c6c:	2601      	movs	r6, #1
 8005c6e:	4635      	mov	r5, r6
 8005c70:	f7ff bbf1 	b.w	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c74:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005c78:	f43f ac02 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8005c7c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005c80:	f43f abfe 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8005c84:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8005c88:	f43f abfa 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8005c8c:	2601      	movs	r6, #1
 8005c8e:	4635      	mov	r5, r6
 8005c90:	e401      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c92:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8005c96:	f43f ab63 	beq.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005c9a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005c9e:	f43f ab5f 	beq.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8005ca2:	2601      	movs	r6, #1
 8005ca4:	4635      	mov	r5, r6
 8005ca6:	f7ff bb66 	b.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005caa:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8005cae:	f43f ab79 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005cb2:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8005cb6:	f43f ab75 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8005cba:	2601      	movs	r6, #1
 8005cbc:	4635      	mov	r5, r6
 8005cbe:	f7ff bb7c 	b.w	80053ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005cc2:	2ac0      	cmp	r2, #192	; 0xc0
 8005cc4:	f43f ab2b 	beq.w	800531e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005cc8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005ccc:	f43f ab27 	beq.w	800531e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8005cd0:	2601      	movs	r6, #1
 8005cd2:	4635      	mov	r5, r6
 8005cd4:	f7ff bb2d 	b.w	8005332 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005cd8:	b9ba      	cbnz	r2, 8005d0a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cda:	4823      	ldr	r0, [pc, #140]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005cdc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005cde:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005ce2:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005ce4:	f7ff baf2 	b.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ce8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8005cec:	f43f ab8b 	beq.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005cf0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005cf4:	f43f ab87 	beq.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8005cf8:	2601      	movs	r6, #1
 8005cfa:	4635      	mov	r5, r6
 8005cfc:	f7ff bb8d 	b.w	800541a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	f43f ae7d 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005d06:	f7ff bb66 	b.w	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 8005d0a:	2601      	movs	r6, #1
 8005d0c:	f7ff bae5 	b.w	80052da <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8005d10:	f7fb fcb0 	bl	8001674 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d14:	4f14      	ldr	r7, [pc, #80]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
        tickstart = HAL_GetTick();
 8005d16:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fb fca9 	bl	8001674 <HAL_GetTick>
 8005d22:	eba0 0009 	sub.w	r0, r0, r9
 8005d26:	4540      	cmp	r0, r8
 8005d28:	f63f af63 	bhi.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x952>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d2e:	079b      	lsls	r3, r3, #30
 8005d30:	d5f5      	bpl.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d32:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005d36:	e5e3      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x660>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d38:	480b      	ldr	r0, [pc, #44]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0xacc>)
 8005d3c:	6901      	ldr	r1, [r0, #16]
 8005d3e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005d42:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8005d46:	430a      	orrs	r2, r1
 8005d48:	6102      	str	r2, [r0, #16]
 8005d4a:	e5e4      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d4c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005d4e:	462e      	mov	r6, r5
 8005d50:	f7ff bbd0 	b.w	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 8005d54:	2601      	movs	r6, #1
 8005d56:	4635      	mov	r5, r6
 8005d58:	e430      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8005d5a:	2601      	movs	r6, #1
 8005d5c:	4635      	mov	r5, r6
 8005d5e:	e44e      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8005d60:	2601      	movs	r6, #1
 8005d62:	4635      	mov	r5, r6
 8005d64:	f7ff bbc3 	b.w	80054ee <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	00ffffcf 	.word	0x00ffffcf

08005d70 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005d70:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d72:	f7ff f92b 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005d80:	5cd3      	ldrb	r3, [r2, r3]
 8005d82:	f003 031f 	and.w	r3, r3, #31
}
 8005d86:	40d8      	lsrs	r0, r3
 8005d88:	bd08      	pop	{r3, pc}
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	080147b4 	.word	0x080147b4

08005d94 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d94:	4a46      	ldr	r2, [pc, #280]	; (8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8005d96:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d98:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005d9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005d9e:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005da2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d059      	beq.n	8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005da8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dac:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005db0:	f004 0403 	and.w	r4, r4, #3
 8005db4:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005db8:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8005dbc:	2c01      	cmp	r4, #1
 8005dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dc2:	ee06 1a90 	vmov	s13, r1
 8005dc6:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005dca:	d002      	beq.n	8005dd2 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8005dcc:	d34e      	bcc.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8005dce:	2c02      	cmp	r4, #2
 8005dd0:	d049      	beq.n	8005e66 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dd2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8005dd6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005dda:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dec:	ee77 7a26 	vadd.f32	s15, s14, s13
 8005df0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005df4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005df8:	4a2d      	ldr	r2, [pc, #180]	; (8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8005dfa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005dfe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005e00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005e04:	ee06 3a90 	vmov	s13, r3
 8005e08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8005e0c:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e0e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e16:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005e1a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005e20:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005e24:	ee06 3a90 	vmov	s13, r3
 8005e28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005e2c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e34:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005e38:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e3c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005e3e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005e42:	ee07 3a10 	vmov	s14, r3
 8005e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e52:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005e56:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005e5a:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e5c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e60:	6083      	str	r3, [r0, #8]
}
 8005e62:	bc30      	pop	{r4, r5}
 8005e64:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e66:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005e6a:	e7b4      	b.n	8005dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6c:	6813      	ldr	r3, [r2, #0]
 8005e6e:	069b      	lsls	r3, r3, #26
 8005e70:	d51a      	bpl.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e72:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e74:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e78:	4910      	ldr	r1, [pc, #64]	; (8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8005e7a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e7e:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e80:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 1a10 	vmov	s14, r1
 8005e8a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005e8e:	ee07 3a10 	vmov	s14, r3
 8005e92:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8005e96:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8005e9a:	ee76 7a26 	vadd.f32	s15, s12, s13
 8005e9e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	e7a7      	b.n	8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ea8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005eac:	e793      	b.n	8005dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005eae:	bf00      	nop
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	4a742400 	.word	0x4a742400
 8005eb8:	4af42400 	.word	0x4af42400
 8005ebc:	03d09000 	.word	0x03d09000
 8005ec0:	4c742400 	.word	0x4c742400

08005ec4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec4:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8005ec6:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005eca:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ecc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005ece:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ed2:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d059      	beq.n	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ed8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005edc:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ee0:	f004 0403 	and.w	r4, r4, #3
 8005ee4:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ee8:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8005eec:	2c01      	cmp	r4, #1
 8005eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ef2:	ee06 1a90 	vmov	s13, r1
 8005ef6:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005efa:	d002      	beq.n	8005f02 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8005efc:	d34e      	bcc.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8005efe:	2c02      	cmp	r4, #2
 8005f00:	d049      	beq.n	8005f96 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f02:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8005f06:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005f0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8005f20:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005f24:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f28:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8005f2a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005f2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005f30:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005f34:	ee06 3a90 	vmov	s13, r3
 8005f38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8005f3c:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005f42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f46:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005f4a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005f50:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005f54:	ee06 3a90 	vmov	s13, r3
 8005f58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005f5c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005f60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005f68:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005f6e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005f72:	ee07 3a10 	vmov	s14, r3
 8005f76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f7a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005f7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f82:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005f86:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005f8a:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f8c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f90:	6083      	str	r3, [r0, #8]
}
 8005f92:	bc30      	pop	{r4, r5}
 8005f94:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f96:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005f9a:	e7b4      	b.n	8005f06 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	069b      	lsls	r3, r3, #26
 8005fa0:	d51a      	bpl.n	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa2:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fa4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa8:	4910      	ldr	r1, [pc, #64]	; (8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005faa:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fae:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fb0:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	ee07 1a10 	vmov	s14, r1
 8005fba:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005fbe:	ee07 3a10 	vmov	s14, r3
 8005fc2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8005fc6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8005fca:	ee76 7a26 	vadd.f32	s15, s12, s13
 8005fce:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	e7a7      	b.n	8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fd8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005fdc:	e793      	b.n	8005f06 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	4a742400 	.word	0x4a742400
 8005fe8:	4af42400 	.word	0x4af42400
 8005fec:	03d09000 	.word	0x03d09000
 8005ff0:	4c742400 	.word	0x4c742400

08005ff4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ff4:	b380      	cbz	r0, 8006058 <HAL_RNG_Init+0x64>
{
 8005ff6:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ff8:	7a43      	ldrb	r3, [r0, #9]
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006000:	b333      	cbz	r3, 8006050 <HAL_RNG_Init+0x5c>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006002:	2202      	movs	r2, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006004:	e9d4 3100 	ldrd	r3, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006008:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f022 0220 	bic.w	r2, r2, #32
 8006010:	430a      	orrs	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	f042 0204 	orr.w	r2, r2, #4
 800601a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	065b      	lsls	r3, r3, #25
 8006020:	d503      	bpl.n	800602a <HAL_RNG_Init+0x36>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006022:	2304      	movs	r3, #4
    return HAL_ERROR;
 8006024:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8006026:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8006028:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800602a:	f7fb fb23 	bl	8001674 <HAL_GetTick>
 800602e:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006030:	e004      	b.n	800603c <HAL_RNG_Init+0x48>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006032:	f7fb fb1f 	bl	8001674 <HAL_GetTick>
 8006036:	1b40      	subs	r0, r0, r5
 8006038:	2802      	cmp	r0, #2
 800603a:	d80f      	bhi.n	800605c <HAL_RNG_Init+0x68>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f013 0304 	ands.w	r3, r3, #4
 8006044:	d1f5      	bne.n	8006032 <HAL_RNG_Init+0x3e>
  hrng->State = HAL_RNG_STATE_READY;
 8006046:	2201      	movs	r2, #1
  return HAL_OK;
 8006048:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800604a:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800604c:	60e3      	str	r3, [r4, #12]
}
 800604e:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8006050:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8006052:	f7fa ff1f 	bl	8000e94 <HAL_RNG_MspInit>
 8006056:	e7d4      	b.n	8006002 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
}
 800605a:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 800605c:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800605e:	2302      	movs	r3, #2
      return HAL_ERROR;
 8006060:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 8006062:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006064:	60e3      	str	r3, [r4, #12]
}
 8006066:	bd38      	pop	{r3, r4, r5, pc}

08006068 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800606a:	7a03      	ldrb	r3, [r0, #8]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d00b      	beq.n	8006088 <HAL_RNG_GenerateRandomNumber+0x20>
 8006070:	4604      	mov	r4, r0
 8006072:	2001      	movs	r0, #1
 8006074:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006076:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8006078:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800607a:	4283      	cmp	r3, r0
 800607c:	d006      	beq.n	800608c <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800607e:	2304      	movs	r3, #4
 8006080:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006082:	2300      	movs	r3, #0
 8006084:	7223      	strb	r3, [r4, #8]

  return status;
}
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 8006088:	2002      	movs	r0, #2
}
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800608c:	2302      	movs	r3, #2
 800608e:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 8006090:	f7fb faf0 	bl	8001674 <HAL_GetTick>
 8006094:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006096:	e004      	b.n	80060a2 <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006098:	f7fb faec 	bl	8001674 <HAL_GetTick>
 800609c:	1bc0      	subs	r0, r0, r7
 800609e:	2802      	cmp	r0, #2
 80060a0:	d80b      	bhi.n	80060ba <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	6855      	ldr	r5, [r2, #4]
 80060a6:	f015 0501 	ands.w	r5, r5, #1
 80060aa:	d0f5      	beq.n	8006098 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 80060ac:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80060ae:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80060b2:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80060b4:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80060b6:	7262      	strb	r2, [r4, #9]
 80060b8:	e7e3      	b.n	8006082 <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 80060ba:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80060bc:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 80060be:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 80060c0:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80060c2:	60e3      	str	r3, [r4, #12]
}
 80060c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c6:	bf00      	nop

080060c8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80060c8:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80060ca:	492c      	ldr	r1, [pc, #176]	; (800617c <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80060cc:	695a      	ldr	r2, [r3, #20]
{
 80060ce:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80060d0:	699c      	ldr	r4, [r3, #24]
 80060d2:	f044 0408 	orr.w	r4, r4, #8
 80060d6:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80060d8:	699c      	ldr	r4, [r3, #24]
 80060da:	f044 0410 	orr.w	r4, r4, #16
 80060de:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80060e0:	681c      	ldr	r4, [r3, #0]
 80060e2:	f024 0401 	bic.w	r4, r4, #1
 80060e6:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80060e8:	691c      	ldr	r4, [r3, #16]
 80060ea:	4021      	ands	r1, r4
 80060ec:	6119      	str	r1, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80060ee:	6899      	ldr	r1, [r3, #8]
 80060f0:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80060f4:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060f6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80060fa:	2904      	cmp	r1, #4
 80060fc:	d001      	beq.n	8006102 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80060fe:	0691      	lsls	r1, r2, #26
 8006100:	d430      	bmi.n	8006164 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006102:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8006106:	2903      	cmp	r1, #3
 8006108:	d001      	beq.n	800610e <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800610a:	0654      	lsls	r4, r2, #25
 800610c:	d41f      	bmi.n	800614e <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800610e:	0591      	lsls	r1, r2, #22
 8006110:	d509      	bpl.n	8006126 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006112:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006116:	f041 0101 	orr.w	r1, r1, #1
 800611a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800611e:	6999      	ldr	r1, [r3, #24]
 8006120:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006124:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006126:	05d2      	lsls	r2, r2, #23
 8006128:	d509      	bpl.n	800613e <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800612a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800612e:	f042 0208 	orr.w	r2, r2, #8
 8006132:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800613c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800613e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006140:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8006144:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006148:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800614c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800614e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006152:	f041 0104 	orr.w	r1, r1, #4
 8006156:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615a:	6999      	ldr	r1, [r3, #24]
 800615c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006160:	6199      	str	r1, [r3, #24]
 8006162:	e7d4      	b.n	800610e <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006164:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006168:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800616c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006170:	6999      	ldr	r1, [r3, #24]
 8006172:	f041 0120 	orr.w	r1, r1, #32
 8006176:	6199      	str	r1, [r3, #24]
 8006178:	e7c3      	b.n	8006102 <SPI_CloseTransfer+0x3a>
 800617a:	bf00      	nop
 800617c:	fffffc90 	.word	0xfffffc90

08006180 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006180:	2800      	cmp	r0, #0
 8006182:	f000 809f 	beq.w	80062c4 <HAL_SPI_Init+0x144>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006186:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006188:	2100      	movs	r1, #0
{
 800618a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800618c:	4b56      	ldr	r3, [pc, #344]	; (80062e8 <HAL_SPI_Init+0x168>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800618e:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006190:	429a      	cmp	r2, r3
 8006192:	68c5      	ldr	r5, [r0, #12]
 8006194:	d014      	beq.n	80061c0 <HAL_SPI_Init+0x40>
 8006196:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 800619a:	429a      	cmp	r2, r3
 800619c:	d010      	beq.n	80061c0 <HAL_SPI_Init+0x40>
 800619e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d067      	beq.n	8006276 <HAL_SPI_Init+0xf6>
 80061a6:	2d0f      	cmp	r5, #15
 80061a8:	d808      	bhi.n	80061bc <HAL_SPI_Init+0x3c>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061aa:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80061ac:	f105 0308 	add.w	r3, r5, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061b0:	0979      	lsrs	r1, r7, #5
  data_size = (data_size + 7UL) / 8UL;
 80061b2:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80061b4:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d908      	bls.n	80061ce <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
}
 80061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80061c2:	f105 0308 	add.w	r3, r5, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80061c6:	0979      	lsrs	r1, r7, #5
  data_size = (data_size + 7UL) / 8UL;
 80061c8:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 80061ca:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061ce:	4c46      	ldr	r4, [pc, #280]	; (80062e8 <HAL_SPI_Init+0x168>)
 80061d0:	4946      	ldr	r1, [pc, #280]	; (80062ec <HAL_SPI_Init+0x16c>)
 80061d2:	428a      	cmp	r2, r1
 80061d4:	bf18      	it	ne
 80061d6:	42a2      	cmpne	r2, r4
 80061d8:	d054      	beq.n	8006284 <HAL_SPI_Init+0x104>
 80061da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061de:	428a      	cmp	r2, r1
 80061e0:	d050      	beq.n	8006284 <HAL_SPI_Init+0x104>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80061e2:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80061e6:	4604      	mov	r4, r0
 80061e8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d052      	beq.n	8006296 <HAL_SPI_Init+0x116>
 80061f0:	f04f 0c00 	mov.w	ip, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80061f4:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061f6:	69a3      	ldr	r3, [r4, #24]
 80061f8:	6860      	ldr	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80061fa:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8006202:	6811      	ldr	r1, [r2, #0]
 8006204:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006206:	f021 0101 	bic.w	r1, r1, #1
 800620a:	6011      	str	r1, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800620c:	d05c      	beq.n	80062c8 <HAL_SPI_Init+0x148>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800620e:	4303      	orrs	r3, r0
 8006210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006212:	4333      	orrs	r3, r6
 8006214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006216:	430b      	orrs	r3, r1
 8006218:	6921      	ldr	r1, [r4, #16]
 800621a:	4333      	orrs	r3, r6
 800621c:	6966      	ldr	r6, [r4, #20]
 800621e:	430b      	orrs	r3, r1
 8006220:	6a21      	ldr	r1, [r4, #32]
 8006222:	4333      	orrs	r3, r6
 8006224:	68a6      	ldr	r6, [r4, #8]
 8006226:	430b      	orrs	r3, r1
 8006228:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800622a:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800622c:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800622e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006230:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006232:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006234:	6da6      	ldr	r6, [r4, #88]	; 0x58
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006236:	ea41 0c0c 	orr.w	ip, r1, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800623a:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800623c:	ea4c 0505 	orr.w	r5, ip, r5
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006240:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006242:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006244:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006246:	bb80      	cbnz	r0, 80062aa <HAL_SPI_Init+0x12a>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006248:	6893      	ldr	r3, [r2, #8]
 800624a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800624e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006252:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006254:	6893      	ldr	r3, [r2, #8]
 8006256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800625a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800625e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006260:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006268:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800626a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800626c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006270:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006276:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8006278:	f105 0308 	add.w	r3, r5, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800627c:	0979      	lsrs	r1, r7, #5
  data_size = (data_size + 7UL) / 8UL;
 800627e:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8006280:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006284:	2b10      	cmp	r3, #16
 8006286:	d899      	bhi.n	80061bc <HAL_SPI_Init+0x3c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006288:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800628c:	4604      	mov	r4, r0
 800628e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1ac      	bne.n	80061f0 <HAL_SPI_Init+0x70>
    hspi->Lock = HAL_UNLOCKED;
 8006296:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800629a:	f7fa fe57 	bl	8000f4c <HAL_SPI_MspInit>
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80062a4:	68e5      	ldr	r5, [r4, #12]
 80062a6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80062a8:	e7a4      	b.n	80061f4 <HAL_SPI_Init+0x74>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80062b2:	0243      	lsls	r3, r0, #9
 80062b4:	d5d8      	bpl.n	8006268 <HAL_SPI_Init+0xe8>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80062b6:	68d3      	ldr	r3, [r2, #12]
 80062b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80062ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062be:	430b      	orrs	r3, r1
 80062c0:	60d3      	str	r3, [r2, #12]
 80062c2:	e7d1      	b.n	8006268 <HAL_SPI_Init+0xe8>
    return HAL_ERROR;
 80062c4:	2001      	movs	r0, #1
}
 80062c6:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80062c8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80062cc:	d009      	beq.n	80062e2 <HAL_SPI_Init+0x162>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d19d      	bne.n	800620e <HAL_SPI_Init+0x8e>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80062d2:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 80062d6:	d19a      	bne.n	800620e <HAL_SPI_Init+0x8e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80062d8:	6811      	ldr	r1, [r2, #0]
 80062da:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80062de:	6011      	str	r1, [r2, #0]
 80062e0:	e795      	b.n	800620e <HAL_SPI_Init+0x8e>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d0f8      	beq.n	80062d8 <HAL_SPI_Init+0x158>
 80062e6:	e792      	b.n	800620e <HAL_SPI_Init+0x8e>
 80062e8:	40013000 	.word	0x40013000
 80062ec:	40003800 	.word	0x40003800

080062f0 <HAL_SPI_TxCpltCallback>:
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop

080062f4 <HAL_SPI_RxCpltCallback>:
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop

080062f8 <HAL_SPI_TxRxCpltCallback>:
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop

080062fc <HAL_SPI_ErrorCallback>:
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop

08006300 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8006300:	6803      	ldr	r3, [r0, #0]
 8006302:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006304:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006306:	f8d3 c008 	ldr.w	ip, [r3, #8]
{
 800630a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trigger  = itsource & itflag;
 800630e:	ea01 0502 	and.w	r5, r1, r2
{
 8006312:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 8006314:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006318:	f005 0664 	and.w	r6, r5, #100	; 0x64
 800631c:	2e04      	cmp	r6, #4
 800631e:	d17e      	bne.n	800641e <HAL_SPI_IRQHandler+0x11e>
    hspi->TxISR(hspi);
 8006320:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006322:	f005 0626 	and.w	r6, r5, #38	; 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006326:	f005 0545 	and.w	r5, r5, #69	; 0x45
    hspi->TxISR(hspi);
 800632a:	4798      	blx	r3
    hspi->RxISR(hspi);
 800632c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800632e:	4620      	mov	r0, r4
 8006330:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006332:	2d01      	cmp	r5, #1
 8006334:	d102      	bne.n	800633c <HAL_SPI_IRQHandler+0x3c>
    hspi->RxISR(hspi);
 8006336:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006338:	4620      	mov	r0, r4
 800633a:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800633c:	2e02      	cmp	r6, #2
 800633e:	d16c      	bne.n	800641a <HAL_SPI_IRQHandler+0x11a>
    hspi->TxISR(hspi);
 8006340:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006342:	4620      	mov	r0, r4
}
 8006344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006348:	4718      	bx	r3
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800634a:	0512      	lsls	r2, r2, #20
 800634c:	f100 80d2 	bmi.w	80064f4 <HAL_SPI_IRQHandler+0x1f4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006350:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006354:	d061      	beq.n	800641a <HAL_SPI_IRQHandler+0x11a>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006356:	066e      	lsls	r6, r5, #25
 8006358:	d509      	bpl.n	800636e <HAL_SPI_IRQHandler+0x6e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800635a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800635e:	f042 0204 	orr.w	r2, r2, #4
 8006362:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636c:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800636e:	05a8      	lsls	r0, r5, #22
 8006370:	d509      	bpl.n	8006386 <HAL_SPI_IRQHandler+0x86>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006372:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006384:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006386:	05e9      	lsls	r1, r5, #23
 8006388:	d509      	bpl.n	800639e <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800638a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800639c:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800639e:	06aa      	lsls	r2, r5, #26
 80063a0:	d509      	bpl.n	80063b6 <HAL_SPI_IRQHandler+0xb6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80063a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063aa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	f042 0220 	orr.w	r2, r2, #32
 80063b4:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063b6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80063ba:	b372      	cbz	r2, 800641a <HAL_SPI_IRQHandler+0x11a>
      __HAL_SPI_DISABLE(hspi);
 80063bc:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80063be:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80063c2:	4a59      	ldr	r2, [pc, #356]	; (8006528 <HAL_SPI_IRQHandler+0x228>)
      __HAL_SPI_DISABLE(hspi);
 80063c4:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80063c8:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80063cc:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80063ce:	6919      	ldr	r1, [r3, #16]
 80063d0:	ea02 0201 	and.w	r2, r2, r1
 80063d4:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80063d6:	f040 80a0 	bne.w	800651a <HAL_SPI_IRQHandler+0x21a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063da:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80063dc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063e2:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80063e4:	b159      	cbz	r1, 80063fe <HAL_SPI_IRQHandler+0xfe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80063e6:	4b51      	ldr	r3, [pc, #324]	; (800652c <HAL_SPI_IRQHandler+0x22c>)
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063e8:	4608      	mov	r0, r1
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80063ea:	650b      	str	r3, [r1, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063ec:	f7fb fd86 	bl	8001efc <HAL_DMA_Abort_IT>
 80063f0:	b128      	cbz	r0, 80063fe <HAL_SPI_IRQHandler+0xfe>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80063f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80063fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006400:	b15b      	cbz	r3, 800641a <HAL_SPI_IRQHandler+0x11a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006402:	4a4a      	ldr	r2, [pc, #296]	; (800652c <HAL_SPI_IRQHandler+0x22c>)
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006404:	4618      	mov	r0, r3
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006406:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006408:	f7fb fd78 	bl	8001efc <HAL_DMA_Abort_IT>
 800640c:	b128      	cbz	r0, 800641a <HAL_SPI_IRQHandler+0x11a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800640e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006416:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800641e:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8006422:	f005 0626 	and.w	r6, r5, #38	; 0x26
 8006426:	2801      	cmp	r0, #1
 8006428:	d085      	beq.n	8006336 <HAL_SPI_IRQHandler+0x36>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800642a:	2e02      	cmp	r6, #2
 800642c:	d088      	beq.n	8006340 <HAL_SPI_IRQHandler+0x40>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800642e:	0728      	lsls	r0, r5, #28
 8006430:	d58b      	bpl.n	800634a <HAL_SPI_IRQHandler+0x4a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006432:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006434:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 8006438:	b2ff      	uxtb	r7, r7
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	f042 0210 	orr.w	r2, r2, #16
 8006446:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644e:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	f022 0208 	bic.w	r2, r2, #8
 8006456:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006458:	d00f      	beq.n	800647a <HAL_SPI_IRQHandler+0x17a>
 800645a:	2f04      	cmp	r7, #4
 800645c:	d055      	beq.n	800650a <HAL_SPI_IRQHandler+0x20a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800645e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006460:	69d2      	ldr	r2, [r2, #28]
 8006462:	b152      	cbz	r2, 800647a <HAL_SPI_IRQHandler+0x17a>
 8006464:	2f03      	cmp	r7, #3
 8006466:	d01c      	beq.n	80064a2 <HAL_SPI_IRQHandler+0x1a2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006468:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800646a:	69d2      	ldr	r2, [r2, #28]
 800646c:	b12a      	cbz	r2, 800647a <HAL_SPI_IRQHandler+0x17a>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800646e:	2f05      	cmp	r7, #5
 8006470:	d1d3      	bne.n	800641a <HAL_SPI_IRQHandler+0x11a>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff ff40 	bl	80062f8 <HAL_SPI_TxRxCpltCallback>
 8006478:	e7cf      	b.n	800641a <HAL_SPI_IRQHandler+0x11a>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006480:	d01e      	beq.n	80064c0 <HAL_SPI_IRQHandler+0x1c0>
      SPI_CloseTransfer(hspi);
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff fe20 	bl	80060c8 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006488:	2301      	movs	r3, #1
 800648a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006492:	2b00      	cmp	r3, #0
 8006494:	d136      	bne.n	8006504 <HAL_SPI_IRQHandler+0x204>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006496:	2f05      	cmp	r7, #5
 8006498:	d0eb      	beq.n	8006472 <HAL_SPI_IRQHandler+0x172>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800649a:	2f04      	cmp	r7, #4
 800649c:	d039      	beq.n	8006512 <HAL_SPI_IRQHandler+0x212>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800649e:	2f03      	cmp	r7, #3
 80064a0:	d1bb      	bne.n	800641a <HAL_SPI_IRQHandler+0x11a>
      HAL_SPI_TxCpltCallback(hspi);
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7ff ff24 	bl	80062f0 <HAL_SPI_TxCpltCallback>
 80064a8:	e7b7      	b.n	800641a <HAL_SPI_IRQHandler+0x11a>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064ae:	f840 2b04 	str.w	r2, [r0], #4
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80064b2:	6660      	str	r0, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80064b4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80064b8:	3a01      	subs	r2, #1
 80064ba:	b292      	uxth	r2, r2
 80064bc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80064c0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80064c4:	b292      	uxth	r2, r2
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	d0db      	beq.n	8006482 <HAL_SPI_IRQHandler+0x182>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064ca:	68e1      	ldr	r1, [r4, #12]
 80064cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064ce:	290f      	cmp	r1, #15
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064d0:	4610      	mov	r0, r2
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064d2:	d8ea      	bhi.n	80064aa <HAL_SPI_IRQHandler+0x1aa>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d4:	2907      	cmp	r1, #7
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064d6:	4611      	mov	r1, r2
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d8:	d904      	bls.n	80064e4 <HAL_SPI_IRQHandler+0x1e4>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064da:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80064dc:	f821 2b02 	strh.w	r2, [r1], #2
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80064e0:	6661      	str	r1, [r4, #100]	; 0x64
 80064e2:	e7e7      	b.n	80064b4 <HAL_SPI_IRQHandler+0x1b4>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80064e4:	6821      	ldr	r1, [r4, #0]
 80064e6:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 80064ea:	7011      	strb	r1, [r2, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80064ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064ee:	3201      	adds	r2, #1
 80064f0:	6662      	str	r2, [r4, #100]	; 0x64
 80064f2:	e7df      	b.n	80064b4 <HAL_SPI_IRQHandler+0x1b4>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80064f4:	070f      	lsls	r7, r1, #28
 80064f6:	f57f af2b 	bpl.w	8006350 <HAL_SPI_IRQHandler+0x50>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006500:	619a      	str	r2, [r3, #24]
    return;
 8006502:	e78a      	b.n	800641a <HAL_SPI_IRQHandler+0x11a>
        HAL_SPI_ErrorCallback(hspi);
 8006504:	f7ff fefa 	bl	80062fc <HAL_SPI_ErrorCallback>
        return;
 8006508:	e787      	b.n	800641a <HAL_SPI_IRQHandler+0x11a>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800650a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800650c:	69d2      	ldr	r2, [r2, #28]
 800650e:	2a00      	cmp	r2, #0
 8006510:	d0b3      	beq.n	800647a <HAL_SPI_IRQHandler+0x17a>
      HAL_SPI_RxCpltCallback(hspi);
 8006512:	4620      	mov	r0, r4
 8006514:	f7ff feee 	bl	80062f4 <HAL_SPI_RxCpltCallback>
 8006518:	e77f      	b.n	800641a <HAL_SPI_IRQHandler+0x11a>
        hspi->State = HAL_SPI_STATE_READY;
 800651a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800651c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800651e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006522:	f7ff feeb 	bl	80062fc <HAL_SPI_ErrorCallback>
 8006526:	e778      	b.n	800641a <HAL_SPI_IRQHandler+0x11a>
 8006528:	fffffc94 	.word	0xfffffc94
 800652c:	08006531 	.word	0x08006531

08006530 <SPI_DMAAbortOnError>:
{
 8006530:	b508      	push	{r3, lr}
  hspi->RxXferCount = (uint16_t) 0UL;
 8006532:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006534:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8006536:	2101      	movs	r1, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 800653c:	4618      	mov	r0, r3
  hspi->TxXferCount = (uint16_t) 0UL;
 800653e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006542:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006546:	f7ff fed9 	bl	80062fc <HAL_SPI_ErrorCallback>
}
 800654a:	bd08      	pop	{r3, pc}

0800654c <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800654c:	b370      	cbz	r0, 80065ac <HAL_SRAM_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800654e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8006552:	b570      	push	{r4, r5, r6, lr}
 8006554:	4615      	mov	r5, r2
 8006556:	4604      	mov	r4, r0
 8006558:	460e      	mov	r6, r1
  if (hsram->State == HAL_SRAM_STATE_RESET)
 800655a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800655e:	b303      	cbz	r3, 80065a2 <HAL_SRAM_Init+0x56>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006560:	f104 0108 	add.w	r1, r4, #8
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	f000 fe23 	bl	80071b0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800656a:	4631      	mov	r1, r6
 800656c:	68a2      	ldr	r2, [r4, #8]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800656e:	2601      	movs	r6, #1
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	f000 fe6d 	bl	8007250 <FMC_NORSRAM_Timing_Init>
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006576:	4629      	mov	r1, r5
 8006578:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800657a:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 800657e:	f000 fe93 	bl	80072a8 <FMC_NORSRAM_Extended_Timing_Init>
 8006582:	68a5      	ldr	r5, [r4, #8]
 8006584:	6821      	ldr	r1, [r4, #0]

  return HAL_OK;
 8006586:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <HAL_SRAM_Init+0x64>)
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800658a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 800658e:	4333      	orrs	r3, r6
 8006590:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
  __FMC_ENABLE();
 8006594:	6813      	ldr	r3, [r2, #0]
 8006596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659a:	6013      	str	r3, [r2, #0]
  hsram->State = HAL_SRAM_STATE_READY;
 800659c:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
}
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80065a2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    HAL_SRAM_MspInit(hsram);
 80065a6:	f7fa f8c5 	bl	8000734 <HAL_SRAM_MspInit>
 80065aa:	e7d9      	b.n	8006560 <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 80065ac:	2001      	movs	r0, #1
}
 80065ae:	4770      	bx	lr
 80065b0:	52004000 	.word	0x52004000

080065b4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop

080065b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d001      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0xc>
  {
    return HAL_ERROR;
 80065c0:	2001      	movs	r0, #1
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 80065c2:	4770      	bx	lr
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c4:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c6:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_TIM_Base_Start_IT+0x98>)
 80065c8:	4922      	ldr	r1, [pc, #136]	; (8006654 <HAL_TIM_Base_Start_IT+0x9c>)
 80065ca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80065ce:	bf18      	it	ne
 80065d0:	429a      	cmpne	r2, r3
{
 80065d2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	4c1f      	ldr	r4, [pc, #124]	; (8006658 <HAL_TIM_Base_Start_IT+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065de:	42a2      	cmp	r2, r4
 80065e0:	bf08      	it	eq
 80065e2:	f043 0301 	orreq.w	r3, r3, #1
 80065e6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  htim->State = HAL_TIM_STATE_BUSY;
 80065ea:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	428a      	cmp	r2, r1
 80065f0:	bf08      	it	eq
 80065f2:	f043 0301 	orreq.w	r3, r3, #1
 80065f6:	4819      	ldr	r0, [pc, #100]	; (800665c <HAL_TIM_Base_Start_IT+0xa4>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065f8:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fa:	42a2      	cmp	r2, r4
 80065fc:	bf08      	it	eq
 80065fe:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006602:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006606:	4282      	cmp	r2, r0
 8006608:	bf08      	it	eq
 800660a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800660e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006610:	b933      	cbnz	r3, 8006620 <HAL_TIM_Base_Start_IT+0x68>
 8006612:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8006616:	1a10      	subs	r0, r2, r0
 8006618:	fab0 f080 	clz	r0, r0
 800661c:	0940      	lsrs	r0, r0, #5
 800661e:	b188      	cbz	r0, 8006644 <HAL_TIM_Base_Start_IT+0x8c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006620:	6891      	ldr	r1, [r2, #8]
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <HAL_TIM_Base_Start_IT+0xa8>)
 8006624:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006626:	2b06      	cmp	r3, #6
 8006628:	d009      	beq.n	800663e <HAL_TIM_Base_Start_IT+0x86>
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662e:	d006      	beq.n	800663e <HAL_TIM_Base_Start_IT+0x86>
      __HAL_TIM_ENABLE(htim);
 8006630:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8006632:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6013      	str	r3, [r2, #0]
}
 800663a:	bc30      	pop	{r4, r5}
 800663c:	4770      	bx	lr
  return HAL_OK;
 800663e:	2000      	movs	r0, #0
}
 8006640:	bc30      	pop	{r4, r5}
 8006642:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e7f5      	b.n	800663a <HAL_TIM_Base_Start_IT+0x82>
 800664e:	bf00      	nop
 8006650:	40010000 	.word	0x40010000
 8006654:	40000800 	.word	0x40000800
 8006658:	40000400 	.word	0x40000400
 800665c:	40010400 	.word	0x40010400
 8006660:	00010007 	.word	0x00010007

08006664 <HAL_TIM_OC_DelayElapsedCallback>:
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <HAL_TIM_IC_CaptureCallback>:
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop

0800666c <HAL_TIM_PWM_PulseFinishedCallback>:
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop

08006670 <HAL_TIM_TriggerCallback>:
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop

08006674 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006674:	6803      	ldr	r3, [r0, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	0791      	lsls	r1, r2, #30
{
 800667a:	b510      	push	{r4, lr}
 800667c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800667e:	d502      	bpl.n	8006686 <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	0792      	lsls	r2, r2, #30
 8006684:	d468      	bmi.n	8006758 <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	0752      	lsls	r2, r2, #29
 800668a:	d502      	bpl.n	8006692 <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	0750      	lsls	r0, r2, #29
 8006690:	d44f      	bmi.n	8006732 <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	0711      	lsls	r1, r2, #28
 8006696:	d502      	bpl.n	800669e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	0712      	lsls	r2, r2, #28
 800669c:	d437      	bmi.n	800670e <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	06d0      	lsls	r0, r2, #27
 80066a2:	d502      	bpl.n	80066aa <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	06d1      	lsls	r1, r2, #27
 80066a8:	d41e      	bmi.n	80066e8 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	07d2      	lsls	r2, r2, #31
 80066ae:	d502      	bpl.n	80066b6 <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	07d0      	lsls	r0, r2, #31
 80066b4:	d469      	bmi.n	800678a <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	0611      	lsls	r1, r2, #24
 80066ba:	d502      	bpl.n	80066c2 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	0612      	lsls	r2, r2, #24
 80066c0:	d46b      	bmi.n	800679a <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	05d0      	lsls	r0, r2, #23
 80066c6:	d502      	bpl.n	80066ce <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	0611      	lsls	r1, r2, #24
 80066cc:	d46d      	bmi.n	80067aa <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	0652      	lsls	r2, r2, #25
 80066d2:	d502      	bpl.n	80066da <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	0650      	lsls	r0, r2, #25
 80066d8:	d46f      	bmi.n	80067ba <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	0691      	lsls	r1, r2, #26
 80066de:	d502      	bpl.n	80066e6 <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	0692      	lsls	r2, r2, #26
 80066e4:	d449      	bmi.n	800677a <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066e6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066e8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ec:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f0:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80066fa:	d16f      	bne.n	80067dc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fc:	f7ff ffb2 	bl	8006664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	4620      	mov	r0, r4
 8006702:	f7ff ffb3 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	2200      	movs	r2, #0
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	7722      	strb	r2, [r4, #28]
 800670c:	e7cd      	b.n	80066aa <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800670e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006712:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8006714:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006716:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006718:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800671a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800671c:	079b      	lsls	r3, r3, #30
 800671e:	d15a      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006720:	f7ff ffa0 	bl	8006664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	4620      	mov	r0, r4
 8006726:	f7ff ffa1 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	2200      	movs	r2, #0
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	7722      	strb	r2, [r4, #28]
 8006730:	e7b5      	b.n	800669e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006732:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006736:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8006738:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800673a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800673c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800673e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006740:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006744:	d144      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	f7ff ff8d 	bl	8006664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674a:	4620      	mov	r0, r4
 800674c:	f7ff ff8e 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006750:	2200      	movs	r2, #0
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	7722      	strb	r2, [r4, #28]
 8006756:	e79c      	b.n	8006692 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006758:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800675c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800675e:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006760:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006762:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006764:	0799      	lsls	r1, r3, #30
 8006766:	d130      	bne.n	80067ca <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006768:	f7ff ff7c 	bl	8006664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	4620      	mov	r0, r4
 800676e:	f7ff ff7d 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	2200      	movs	r2, #0
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	7722      	strb	r2, [r4, #28]
 8006778:	e785      	b.n	8006686 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800677e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006780:	611a      	str	r2, [r3, #16]
}
 8006782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006786:	f000 b8c5 	b.w	8006914 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800678a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800678e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006790:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006792:	f7fa fab5 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	e78d      	b.n	80066b6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800679a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800679e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80067a2:	f000 f8b9 	bl	8006918 <HAL_TIMEx_BreakCallback>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	e78b      	b.n	80066c2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80067ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80067b2:	f000 f8b3 	bl	800691c <HAL_TIMEx_Break2Callback>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	e789      	b.n	80066ce <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80067be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80067c2:	f7ff ff55 	bl	8006670 <HAL_TIM_TriggerCallback>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	e787      	b.n	80066da <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	f7ff ff4d 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80067ce:	e7d0      	b.n	8006772 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80067d0:	f7ff ff4a 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80067d4:	e7bc      	b.n	8006750 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	f7ff ff47 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80067da:	e7a6      	b.n	800672a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80067dc:	f7ff ff44 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80067e0:	e791      	b.n	8006706 <HAL_TIM_IRQHandler+0x92>
 80067e2:	bf00      	nop

080067e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e4:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e6:	4a2c      	ldr	r2, [pc, #176]	; (8006898 <TIM_Base_SetConfig+0xb4>)
 80067e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80067ec:	4e2b      	ldr	r6, [pc, #172]	; (800689c <TIM_Base_SetConfig+0xb8>)
 80067ee:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	eba0 0606 	sub.w	r6, r0, r6
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f8:	fab2 f282 	clz	r2, r2
 80067fc:	fab6 f686 	clz	r6, r6
 8006800:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8006804:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8006808:	d017      	beq.n	800683a <TIM_Base_SetConfig+0x56>
 800680a:	b9b2      	cbnz	r2, 800683a <TIM_Base_SetConfig+0x56>
 800680c:	4c24      	ldr	r4, [pc, #144]	; (80068a0 <TIM_Base_SetConfig+0xbc>)
 800680e:	42a0      	cmp	r0, r4
 8006810:	d013      	beq.n	800683a <TIM_Base_SetConfig+0x56>
 8006812:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006816:	42a0      	cmp	r0, r4
 8006818:	d00f      	beq.n	800683a <TIM_Base_SetConfig+0x56>
 800681a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800681e:	42a0      	cmp	r0, r4
 8006820:	d02e      	beq.n	8006880 <TIM_Base_SetConfig+0x9c>
 8006822:	bb6e      	cbnz	r6, 8006880 <TIM_Base_SetConfig+0x9c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006824:	4d1f      	ldr	r5, [pc, #124]	; (80068a4 <TIM_Base_SetConfig+0xc0>)
 8006826:	4c20      	ldr	r4, [pc, #128]	; (80068a8 <TIM_Base_SetConfig+0xc4>)
 8006828:	42a0      	cmp	r0, r4
 800682a:	bf18      	it	ne
 800682c:	42a8      	cmpne	r0, r5
 800682e:	d008      	beq.n	8006842 <TIM_Base_SetConfig+0x5e>
 8006830:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006834:	42a0      	cmp	r0, r4
 8006836:	d108      	bne.n	800684a <TIM_Base_SetConfig+0x66>
 8006838:	e003      	b.n	8006842 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800683e:	684c      	ldr	r4, [r1, #4]
 8006840:	4323      	orrs	r3, r4
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006846:	68cc      	ldr	r4, [r1, #12]
 8006848:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800684a:	694c      	ldr	r4, [r1, #20]
 800684c:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006852:	4323      	orrs	r3, r4

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006854:	680c      	ldr	r4, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8006856:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006858:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800685a:	6284      	str	r4, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800685c:	b952      	cbnz	r2, 8006874 <TIM_Base_SetConfig+0x90>
 800685e:	b94e      	cbnz	r6, 8006874 <TIM_Base_SetConfig+0x90>
 8006860:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <TIM_Base_SetConfig+0xc0>)
 8006862:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <TIM_Base_SetConfig+0xc4>)
 8006864:	4298      	cmp	r0, r3
 8006866:	bf18      	it	ne
 8006868:	4290      	cmpne	r0, r2
 800686a:	d003      	beq.n	8006874 <TIM_Base_SetConfig+0x90>
 800686c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006870:	4298      	cmp	r0, r3
 8006872:	d101      	bne.n	8006878 <TIM_Base_SetConfig+0x94>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006874:	690b      	ldr	r3, [r1, #16]
 8006876:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006878:	2301      	movs	r3, #1
}
 800687a:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800687c:	6143      	str	r3, [r0, #20]
}
 800687e:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006880:	4c0a      	ldr	r4, [pc, #40]	; (80068ac <TIM_Base_SetConfig+0xc8>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006886:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006888:	42a0      	cmp	r0, r4
    tmpcr1 |= Structure->CounterMode;
 800688a:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688e:	d0d8      	beq.n	8006842 <TIM_Base_SetConfig+0x5e>
 8006890:	2e00      	cmp	r6, #0
 8006892:	d1d6      	bne.n	8006842 <TIM_Base_SetConfig+0x5e>
 8006894:	e7c6      	b.n	8006824 <TIM_Base_SetConfig+0x40>
 8006896:	bf00      	nop
 8006898:	40010000 	.word	0x40010000
 800689c:	40010400 	.word	0x40010400
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40000c00 	.word	0x40000c00

080068b0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80068b0:	b368      	cbz	r0, 800690e <HAL_TIM_Base_Init+0x5e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80068b6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80068b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80068bc:	4604      	mov	r4, r0
 80068be:	b30b      	cbz	r3, 8006904 <HAL_TIM_Base_Init+0x54>
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80068c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ca:	f7ff ff8b 	bl	80067e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ce:	2301      	movs	r3, #1
  return HAL_OK;
 80068d0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80068da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80068de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80068e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80068e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80068f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068f6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80068fa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80068fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006902:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006904:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006908:	f7ff fe54 	bl	80065b4 <HAL_TIM_Base_MspInit>
 800690c:	e7d8      	b.n	80068c0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800690e:	2001      	movs	r0, #1
}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <HAL_TIMEx_CommutCallback>:
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <HAL_TIMEx_BreakCallback>:
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop

0800691c <HAL_TIMEx_Break2Callback>:
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006924:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006926:	4880      	ldr	r0, [pc, #512]	; (8006b28 <UART_SetConfig+0x208>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006928:	4e80      	ldr	r6, [pc, #512]	; (8006b2c <UART_SetConfig+0x20c>)
{
 800692a:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006930:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006934:	69a7      	ldr	r7, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006936:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 800693a:	431a      	orrs	r2, r3
  if (UART_INSTANCE_LOWPOWER(huart))
 800693c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800693e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	681d      	ldr	r5, [r3, #0]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006942:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006944:	ea00 0005 	and.w	r0, r0, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006948:	ea42 0201 	orr.w	r2, r2, r1
 800694c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694e:	ea42 0200 	orr.w	r2, r2, r0
 8006952:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800695a:	ea42 020c 	orr.w	r2, r2, ip
 800695e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006960:	f000 8089 	beq.w	8006a76 <UART_SetConfig+0x156>
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006964:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006966:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006968:	4871      	ldr	r0, [pc, #452]	; (8006b30 <UART_SetConfig+0x210>)
    tmpreg |= huart->Init.OneBitSampling;
 800696a:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800696c:	4030      	ands	r0, r6
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800696e:	4e71      	ldr	r6, [pc, #452]	; (8006b34 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006970:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006972:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006974:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	f022 020f 	bic.w	r2, r2, #15
 800697c:	ea42 0205 	orr.w	r2, r2, r5
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006982:	d025      	beq.n	80069d0 <UART_SetConfig+0xb0>
 8006984:	4a6c      	ldr	r2, [pc, #432]	; (8006b38 <UART_SetConfig+0x218>)
 8006986:	4293      	cmp	r3, r2
 8006988:	f000 80f2 	beq.w	8006b70 <UART_SetConfig+0x250>
 800698c:	4a6b      	ldr	r2, [pc, #428]	; (8006b3c <UART_SetConfig+0x21c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	f000 8182 	beq.w	8006c98 <UART_SetConfig+0x378>
 8006994:	4a6a      	ldr	r2, [pc, #424]	; (8006b40 <UART_SetConfig+0x220>)
 8006996:	4293      	cmp	r3, r2
 8006998:	f000 8203 	beq.w	8006da2 <UART_SetConfig+0x482>
 800699c:	4a69      	ldr	r2, [pc, #420]	; (8006b44 <UART_SetConfig+0x224>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	f000 8209 	beq.w	8006db6 <UART_SetConfig+0x496>
 80069a4:	4a68      	ldr	r2, [pc, #416]	; (8006b48 <UART_SetConfig+0x228>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	f000 820f 	beq.w	8006dca <UART_SetConfig+0x4aa>
 80069ac:	4a67      	ldr	r2, [pc, #412]	; (8006b4c <UART_SetConfig+0x22c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	f000 822a 	beq.w	8006e08 <UART_SetConfig+0x4e8>
 80069b4:	4a66      	ldr	r2, [pc, #408]	; (8006b50 <UART_SetConfig+0x230>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	f040 80ac 	bne.w	8006b14 <UART_SetConfig+0x1f4>
 80069bc:	4b65      	ldr	r3, [pc, #404]	; (8006b54 <UART_SetConfig+0x234>)
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	2b05      	cmp	r3, #5
 80069c6:	f200 80a5 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 80069ca:	4a63      	ldr	r2, [pc, #396]	; (8006b58 <UART_SetConfig+0x238>)
 80069cc:	5cd3      	ldrb	r3, [r2, r3]
 80069ce:	e008      	b.n	80069e2 <UART_SetConfig+0xc2>
 80069d0:	4b60      	ldr	r3, [pc, #384]	; (8006b54 <UART_SetConfig+0x234>)
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d8:	2b28      	cmp	r3, #40	; 0x28
 80069da:	f200 809b 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 80069de:	4a5f      	ldr	r2, [pc, #380]	; (8006b5c <UART_SetConfig+0x23c>)
 80069e0:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80069e6:	f000 80cf 	beq.w	8006b88 <UART_SetConfig+0x268>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	f200 8092 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 80069f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80069f4:	018d018a 	.word	0x018d018a
 80069f8:	00900090 	.word	0x00900090
 80069fc:	00900182 	.word	0x00900182
 8006a00:	00900090 	.word	0x00900090
 8006a04:	00900166 	.word	0x00900166
 8006a08:	00900090 	.word	0x00900090
 8006a0c:	00900090 	.word	0x00900090
 8006a10:	00900090 	.word	0x00900090
 8006a14:	0090015c 	.word	0x0090015c
 8006a18:	00900090 	.word	0x00900090
 8006a1c:	00900090 	.word	0x00900090
 8006a20:	00900090 	.word	0x00900090
 8006a24:	00900090 	.word	0x00900090
 8006a28:	00900090 	.word	0x00900090
 8006a2c:	00900090 	.word	0x00900090
 8006a30:	00900090 	.word	0x00900090
 8006a34:	00900193 	.word	0x00900193
 8006a38:	00900090 	.word	0x00900090
 8006a3c:	00900090 	.word	0x00900090
 8006a40:	00900090 	.word	0x00900090
 8006a44:	00900090 	.word	0x00900090
 8006a48:	00900090 	.word	0x00900090
 8006a4c:	00900090 	.word	0x00900090
 8006a50:	00900090 	.word	0x00900090
 8006a54:	00900090 	.word	0x00900090
 8006a58:	00900090 	.word	0x00900090
 8006a5c:	00900090 	.word	0x00900090
 8006a60:	00900090 	.word	0x00900090
 8006a64:	00900090 	.word	0x00900090
 8006a68:	00900090 	.word	0x00900090
 8006a6c:	00900090 	.word	0x00900090
 8006a70:	00900090 	.word	0x00900090
 8006a74:	0190      	.short	0x0190
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a76:	6898      	ldr	r0, [r3, #8]
 8006a78:	4a2d      	ldr	r2, [pc, #180]	; (8006b30 <UART_SetConfig+0x210>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a7a:	4936      	ldr	r1, [pc, #216]	; (8006b54 <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a7c:	4002      	ands	r2, r0
 8006a7e:	433a      	orrs	r2, r7
 8006a80:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	f022 020f 	bic.w	r2, r2, #15
 8006a88:	432a      	orrs	r2, r5
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a8c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d83e      	bhi.n	8006b14 <UART_SetConfig+0x1f4>
    switch (clocksource)
 8006a96:	4a32      	ldr	r2, [pc, #200]	; (8006b60 <UART_SetConfig+0x240>)
 8006a98:	5cd3      	ldrb	r3, [r2, r3]
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	f000 81af 	beq.w	8006dfe <UART_SetConfig+0x4de>
 8006aa0:	f240 819d 	bls.w	8006dde <UART_SetConfig+0x4be>
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	f000 813c 	beq.w	8006d22 <UART_SetConfig+0x402>
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	f000 81b6 	beq.w	8006e1c <UART_SetConfig+0x4fc>
 8006ab0:	2b10      	cmp	r3, #16
 8006ab2:	d12f      	bne.n	8006b14 <UART_SetConfig+0x1f4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab4:	680b      	ldr	r3, [r1, #0]
 8006ab6:	0698      	lsls	r0, r3, #26
 8006ab8:	f140 81b3 	bpl.w	8006e22 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	4829      	ldr	r0, [pc, #164]	; (8006b64 <UART_SetConfig+0x244>)
 8006ac0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006ac4:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ac6:	4b28      	ldr	r3, [pc, #160]	; (8006b68 <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ac8:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006aca:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ace:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ad2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	d81c      	bhi.n	8006b14 <UART_SetConfig+0x1f4>
 8006ada:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006ade:	d819      	bhi.n	8006b14 <UART_SetConfig+0x1f4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	f7f9 fc54 	bl	8000390 <__aeabi_uldivmod>
 8006ae8:	4632      	mov	r2, r6
 8006aea:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8006aee:	2300      	movs	r3, #0
 8006af0:	0875      	lsrs	r5, r6, #1
 8006af2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8006af6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8006afa:	eb18 0005 	adds.w	r0, r8, r5
 8006afe:	f149 0100 	adc.w	r1, r9, #0
 8006b02:	f7f9 fc45 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b06:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <UART_SetConfig+0x24c>)
 8006b08:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b0c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0e:	4291      	cmp	r1, r2
 8006b10:	f240 80ee 	bls.w	8006cf0 <UART_SetConfig+0x3d0>
        ret = HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8006b16:	f04f 1201 	mov.w	r2, #65537	; 0x10001

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b1a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006b1c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006b1e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8006b22:	b007      	add	sp, #28
 8006b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b28:	cfff69f3 	.word	0xcfff69f3
 8006b2c:	58000c00 	.word	0x58000c00
 8006b30:	11fff4ff 	.word	0x11fff4ff
 8006b34:	40011000 	.word	0x40011000
 8006b38:	40004400 	.word	0x40004400
 8006b3c:	40004800 	.word	0x40004800
 8006b40:	40004c00 	.word	0x40004c00
 8006b44:	40005000 	.word	0x40005000
 8006b48:	40011400 	.word	0x40011400
 8006b4c:	40007800 	.word	0x40007800
 8006b50:	40007c00 	.word	0x40007c00
 8006b54:	58024400 	.word	0x58024400
 8006b58:	080147f8 	.word	0x080147f8
 8006b5c:	080147cc 	.word	0x080147cc
 8006b60:	08014800 	.word	0x08014800
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	08014808 	.word	0x08014808
 8006b6c:	000ffcff 	.word	0x000ffcff
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b70:	4bae      	ldr	r3, [pc, #696]	; (8006e2c <UART_SetConfig+0x50c>)
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	d8cb      	bhi.n	8006b14 <UART_SetConfig+0x1f4>
 8006b7c:	4aac      	ldr	r2, [pc, #688]	; (8006e30 <UART_SetConfig+0x510>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006b82:	5cd3      	ldrb	r3, [r2, r3]
 8006b84:	f47f af31 	bne.w	80069ea <UART_SetConfig+0xca>
    switch (clocksource)
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d8c3      	bhi.n	8006b14 <UART_SetConfig+0x1f4>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x274>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006d6b 	.word	0x08006d6b
 8006b98:	08006d27 	.word	0x08006d27
 8006b9c:	08006b15 	.word	0x08006b15
 8006ba0:	08006b15 	.word	0x08006b15
 8006ba4:	08006d8f 	.word	0x08006d8f
 8006ba8:	08006b15 	.word	0x08006b15
 8006bac:	08006b15 	.word	0x08006b15
 8006bb0:	08006b15 	.word	0x08006b15
 8006bb4:	08006d85 	.word	0x08006d85
 8006bb8:	08006b15 	.word	0x08006b15
 8006bbc:	08006b15 	.word	0x08006b15
 8006bc0:	08006b15 	.word	0x08006b15
 8006bc4:	08006b15 	.word	0x08006b15
 8006bc8:	08006b15 	.word	0x08006b15
 8006bcc:	08006b15 	.word	0x08006b15
 8006bd0:	08006b15 	.word	0x08006b15
 8006bd4:	08006d71 	.word	0x08006d71
 8006bd8:	08006b15 	.word	0x08006b15
 8006bdc:	08006b15 	.word	0x08006b15
 8006be0:	08006b15 	.word	0x08006b15
 8006be4:	08006b15 	.word	0x08006b15
 8006be8:	08006b15 	.word	0x08006b15
 8006bec:	08006b15 	.word	0x08006b15
 8006bf0:	08006b15 	.word	0x08006b15
 8006bf4:	08006b15 	.word	0x08006b15
 8006bf8:	08006b15 	.word	0x08006b15
 8006bfc:	08006b15 	.word	0x08006b15
 8006c00:	08006b15 	.word	0x08006b15
 8006c04:	08006b15 	.word	0x08006b15
 8006c08:	08006b15 	.word	0x08006b15
 8006c0c:	08006b15 	.word	0x08006b15
 8006c10:	08006b15 	.word	0x08006b15
 8006c14:	08006d99 	.word	0x08006d99
 8006c18:	08006b15 	.word	0x08006b15
 8006c1c:	08006b15 	.word	0x08006b15
 8006c20:	08006b15 	.word	0x08006b15
 8006c24:	08006b15 	.word	0x08006b15
 8006c28:	08006b15 	.word	0x08006b15
 8006c2c:	08006b15 	.word	0x08006b15
 8006c30:	08006b15 	.word	0x08006b15
 8006c34:	08006b15 	.word	0x08006b15
 8006c38:	08006b15 	.word	0x08006b15
 8006c3c:	08006b15 	.word	0x08006b15
 8006c40:	08006b15 	.word	0x08006b15
 8006c44:	08006b15 	.word	0x08006b15
 8006c48:	08006b15 	.word	0x08006b15
 8006c4c:	08006b15 	.word	0x08006b15
 8006c50:	08006b15 	.word	0x08006b15
 8006c54:	08006b15 	.word	0x08006b15
 8006c58:	08006b15 	.word	0x08006b15
 8006c5c:	08006b15 	.word	0x08006b15
 8006c60:	08006b15 	.word	0x08006b15
 8006c64:	08006b15 	.word	0x08006b15
 8006c68:	08006b15 	.word	0x08006b15
 8006c6c:	08006b15 	.word	0x08006b15
 8006c70:	08006b15 	.word	0x08006b15
 8006c74:	08006b15 	.word	0x08006b15
 8006c78:	08006b15 	.word	0x08006b15
 8006c7c:	08006b15 	.word	0x08006b15
 8006c80:	08006b15 	.word	0x08006b15
 8006c84:	08006b15 	.word	0x08006b15
 8006c88:	08006b15 	.word	0x08006b15
 8006c8c:	08006b15 	.word	0x08006b15
 8006c90:	08006b15 	.word	0x08006b15
 8006c94:	08006d9d 	.word	0x08006d9d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c98:	4b64      	ldr	r3, [pc, #400]	; (8006e2c <UART_SetConfig+0x50c>)
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	2b05      	cmp	r3, #5
 8006ca2:	f63f af37 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 8006ca6:	4a63      	ldr	r2, [pc, #396]	; (8006e34 <UART_SetConfig+0x514>)
 8006ca8:	5cd3      	ldrb	r3, [r2, r3]
 8006caa:	e69a      	b.n	80069e2 <UART_SetConfig+0xc2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cac:	4b5f      	ldr	r3, [pc, #380]	; (8006e2c <UART_SetConfig+0x50c>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	0692      	lsls	r2, r2, #26
 8006cb2:	d534      	bpl.n	8006d1e <UART_SetConfig+0x3fe>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4860      	ldr	r0, [pc, #384]	; (8006e38 <UART_SetConfig+0x518>)
 8006cb8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006cbc:	40d8      	lsrs	r0, r3
 8006cbe:	e005      	b.n	8006ccc <UART_SetConfig+0x3ac>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cc0:	a803      	add	r0, sp, #12
 8006cc2:	f7ff f8ff 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cc6:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006cc8:	b1e0      	cbz	r0, 8006d04 <UART_SetConfig+0x3e4>
 8006cca:	6a65      	ldr	r5, [r4, #36]	; 0x24
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ccc:	4b5b      	ldr	r3, [pc, #364]	; (8006e3c <UART_SetConfig+0x51c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cce:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd2:	6862      	ldr	r2, [r4, #4]
 8006cd4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cdc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce6:	f1a3 0210 	sub.w	r2, r3, #16
 8006cea:	428a      	cmp	r2, r1
 8006cec:	f63f af12 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
        huart->Instance->BRR = usartdiv;
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	60d3      	str	r3, [r2, #12]
 8006cf6:	e70e      	b.n	8006b16 <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf8:	4668      	mov	r0, sp
 8006cfa:	f7ff f84b 	bl	8005d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cfe:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1e2      	bne.n	8006cca <UART_SetConfig+0x3aa>
 8006d04:	2000      	movs	r0, #0
 8006d06:	e706      	b.n	8006b16 <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d08:	f7fe f982 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
        break;
 8006d0c:	e7dc      	b.n	8006cc8 <UART_SetConfig+0x3a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d0e:	f7fe f991 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
        break;
 8006d12:	e7d9      	b.n	8006cc8 <UART_SetConfig+0x3a8>
        pclk = (uint32_t) LSE_VALUE;
 8006d14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d18:	e7d8      	b.n	8006ccc <UART_SetConfig+0x3ac>
        pclk = (uint32_t) CSI_VALUE;
 8006d1a:	4849      	ldr	r0, [pc, #292]	; (8006e40 <UART_SetConfig+0x520>)
 8006d1c:	e7d6      	b.n	8006ccc <UART_SetConfig+0x3ac>
          pclk = (uint32_t) HSI_VALUE;
 8006d1e:	4846      	ldr	r0, [pc, #280]	; (8006e38 <UART_SetConfig+0x518>)
 8006d20:	e7d4      	b.n	8006ccc <UART_SetConfig+0x3ac>
        pclk = (uint32_t) CSI_VALUE;
 8006d22:	4847      	ldr	r0, [pc, #284]	; (8006e40 <UART_SetConfig+0x520>)
 8006d24:	e6cf      	b.n	8006ac6 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d26:	f7fe f985 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d0ea      	beq.n	8006d04 <UART_SetConfig+0x3e4>
 8006d2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d30:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <UART_SetConfig+0x51c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d32:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d36:	6862      	ldr	r2, [r4, #4]
 8006d38:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8006d3c:	0853      	lsrs	r3, r2, #1
 8006d3e:	fbb0 f0f5 	udiv	r0, r0, r5
 8006d42:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d4a:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d4c:	f1a2 0010 	sub.w	r0, r2, #16
 8006d50:	4288      	cmp	r0, r1
 8006d52:	f63f aedf 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d56:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d5a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8006d5e:	6821      	ldr	r1, [r4, #0]
 8006d60:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d62:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60cb      	str	r3, [r1, #12]
 8006d68:	e6d5      	b.n	8006b16 <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6a:	f7fe f951 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
        break;
 8006d6e:	e7dc      	b.n	8006d2a <UART_SetConfig+0x40a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d70:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <UART_SetConfig+0x50c>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	0691      	lsls	r1, r2, #26
 8006d76:	d556      	bpl.n	8006e26 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	482f      	ldr	r0, [pc, #188]	; (8006e38 <UART_SetConfig+0x518>)
 8006d7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006d80:	40d8      	lsrs	r0, r3
 8006d82:	e7d5      	b.n	8006d30 <UART_SetConfig+0x410>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d84:	a803      	add	r0, sp, #12
 8006d86:	f7ff f89d 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d8a:	9804      	ldr	r0, [sp, #16]
        break;
 8006d8c:	e7cd      	b.n	8006d2a <UART_SetConfig+0x40a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8e:	4668      	mov	r0, sp
 8006d90:	f7ff f800 	bl	8005d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d94:	9801      	ldr	r0, [sp, #4]
        break;
 8006d96:	e7c8      	b.n	8006d2a <UART_SetConfig+0x40a>
        pclk = (uint32_t) CSI_VALUE;
 8006d98:	4829      	ldr	r0, [pc, #164]	; (8006e40 <UART_SetConfig+0x520>)
 8006d9a:	e7c9      	b.n	8006d30 <UART_SetConfig+0x410>
        pclk = (uint32_t) LSE_VALUE;
 8006d9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006da0:	e7c6      	b.n	8006d30 <UART_SetConfig+0x410>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <UART_SetConfig+0x50c>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	f63f aeb2 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 8006db0:	4a24      	ldr	r2, [pc, #144]	; (8006e44 <UART_SetConfig+0x524>)
 8006db2:	5cd3      	ldrb	r3, [r2, r3]
 8006db4:	e615      	b.n	80069e2 <UART_SetConfig+0xc2>
 8006db6:	4b1d      	ldr	r3, [pc, #116]	; (8006e2c <UART_SetConfig+0x50c>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	f63f aea8 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 8006dc4:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <UART_SetConfig+0x528>)
 8006dc6:	5cd3      	ldrb	r3, [r2, r3]
 8006dc8:	e60b      	b.n	80069e2 <UART_SetConfig+0xc2>
 8006dca:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <UART_SetConfig+0x50c>)
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd2:	2b28      	cmp	r3, #40	; 0x28
 8006dd4:	f63f ae9e 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 8006dd8:	4a1c      	ldr	r2, [pc, #112]	; (8006e4c <UART_SetConfig+0x52c>)
 8006dda:	5cd3      	ldrb	r3, [r2, r3]
 8006ddc:	e601      	b.n	80069e2 <UART_SetConfig+0xc2>
    switch (clocksource)
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d00a      	beq.n	8006df8 <UART_SetConfig+0x4d8>
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	f47f ae96 	bne.w	8006b14 <UART_SetConfig+0x1f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de8:	4668      	mov	r0, sp
 8006dea:	f7fe ffd3 	bl	8005d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dee:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d087      	beq.n	8006d04 <UART_SetConfig+0x3e4>
 8006df4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006df6:	e666      	b.n	8006ac6 <UART_SetConfig+0x1a6>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006df8:	f7fe ffba 	bl	8005d70 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006dfc:	e7f8      	b.n	8006df0 <UART_SetConfig+0x4d0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfe:	a803      	add	r0, sp, #12
 8006e00:	f7ff f860 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e04:	9804      	ldr	r0, [sp, #16]
        break;
 8006e06:	e7f3      	b.n	8006df0 <UART_SetConfig+0x4d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e08:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <UART_SetConfig+0x50c>)
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	f63f ae7f 	bhi.w	8006b14 <UART_SetConfig+0x1f4>
 8006e16:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <UART_SetConfig+0x530>)
 8006e18:	5cd3      	ldrb	r3, [r2, r3]
 8006e1a:	e5e2      	b.n	80069e2 <UART_SetConfig+0xc2>
        pclk = (uint32_t) LSE_VALUE;
 8006e1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e20:	e651      	b.n	8006ac6 <UART_SetConfig+0x1a6>
          pclk = (uint32_t) HSI_VALUE;
 8006e22:	4805      	ldr	r0, [pc, #20]	; (8006e38 <UART_SetConfig+0x518>)
 8006e24:	e64f      	b.n	8006ac6 <UART_SetConfig+0x1a6>
          pclk = (uint32_t) HSI_VALUE;
 8006e26:	4804      	ldr	r0, [pc, #16]	; (8006e38 <UART_SetConfig+0x518>)
 8006e28:	e782      	b.n	8006d30 <UART_SetConfig+0x410>
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	080147f8 	.word	0x080147f8
 8006e34:	080147f8 	.word	0x080147f8
 8006e38:	03d09000 	.word	0x03d09000
 8006e3c:	08014808 	.word	0x08014808
 8006e40:	003d0900 	.word	0x003d0900
 8006e44:	080147f8 	.word	0x080147f8
 8006e48:	080147f8 	.word	0x080147f8
 8006e4c:	080147cc 	.word	0x080147cc
 8006e50:	080147f8 	.word	0x080147f8

08006e54 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e56:	07da      	lsls	r2, r3, #31
{
 8006e58:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e5a:	d506      	bpl.n	8006e6a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e5c:	6801      	ldr	r1, [r0, #0]
 8006e5e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006e60:	684a      	ldr	r2, [r1, #4]
 8006e62:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006e66:	4322      	orrs	r2, r4
 8006e68:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e6a:	079c      	lsls	r4, r3, #30
 8006e6c:	d506      	bpl.n	8006e7c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e6e:	6801      	ldr	r1, [r0, #0]
 8006e70:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006e72:	684a      	ldr	r2, [r1, #4]
 8006e74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e78:	4322      	orrs	r2, r4
 8006e7a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e7c:	0759      	lsls	r1, r3, #29
 8006e7e:	d506      	bpl.n	8006e8e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e80:	6801      	ldr	r1, [r0, #0]
 8006e82:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006e84:	684a      	ldr	r2, [r1, #4]
 8006e86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e8a:	4322      	orrs	r2, r4
 8006e8c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e8e:	071a      	lsls	r2, r3, #28
 8006e90:	d506      	bpl.n	8006ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e92:	6801      	ldr	r1, [r0, #0]
 8006e94:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006e96:	684a      	ldr	r2, [r1, #4]
 8006e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e9c:	4322      	orrs	r2, r4
 8006e9e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ea0:	06dc      	lsls	r4, r3, #27
 8006ea2:	d506      	bpl.n	8006eb2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea4:	6801      	ldr	r1, [r0, #0]
 8006ea6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006ea8:	688a      	ldr	r2, [r1, #8]
 8006eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eae:	4322      	orrs	r2, r4
 8006eb0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb2:	0699      	lsls	r1, r3, #26
 8006eb4:	d506      	bpl.n	8006ec4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb6:	6801      	ldr	r1, [r0, #0]
 8006eb8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006eba:	688a      	ldr	r2, [r1, #8]
 8006ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec0:	4322      	orrs	r2, r4
 8006ec2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec4:	065a      	lsls	r2, r3, #25
 8006ec6:	d50a      	bpl.n	8006ede <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec8:	6801      	ldr	r1, [r0, #0]
 8006eca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006ecc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ece:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006ed6:	ea42 0204 	orr.w	r2, r2, r4
 8006eda:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006edc:	d00b      	beq.n	8006ef6 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ede:	061b      	lsls	r3, r3, #24
 8006ee0:	d506      	bpl.n	8006ef0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ee2:	6802      	ldr	r2, [r0, #0]
 8006ee4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006ee6:	6853      	ldr	r3, [r2, #4]
 8006ee8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6053      	str	r3, [r2, #4]
  }
}
 8006ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef6:	684a      	ldr	r2, [r1, #4]
 8006ef8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006efa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006efe:	4322      	orrs	r2, r4
 8006f00:	604a      	str	r2, [r1, #4]
 8006f02:	e7ec      	b.n	8006ede <UART_AdvFeatureConfig+0x8a>

08006f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	9d08      	ldr	r5, [sp, #32]
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	4616      	mov	r6, r2
 8006f10:	4699      	mov	r9, r3
 8006f12:	6804      	ldr	r4, [r0, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f14:	e001      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f16:	1c68      	adds	r0, r5, #1
 8006f18:	d10a      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	69e0      	ldr	r0, [r4, #28]
 8006f1c:	ea37 0300 	bics.w	r3, r7, r0
 8006f20:	bf0c      	ite	eq
 8006f22:	2001      	moveq	r0, #1
 8006f24:	2000      	movne	r0, #0
 8006f26:	42b0      	cmp	r0, r6
 8006f28:	d0f5      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x12>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8006f2a:	2000      	movs	r0, #0
}
 8006f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f30:	f7fa fba0 	bl	8001674 <HAL_GetTick>
 8006f34:	eba0 0009 	sub.w	r0, r0, r9
 8006f38:	fab5 f285 	clz	r2, r5
 8006f3c:	42a8      	cmp	r0, r5
 8006f3e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8006f42:	d81e      	bhi.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x7e>
 8006f44:	b9ea      	cbnz	r2, 8006f82 <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f46:	f8d8 4000 	ldr.w	r4, [r8]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	0759      	lsls	r1, r3, #29
 8006f4e:	d5e4      	bpl.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f50:	69e3      	ldr	r3, [r4, #28]
 8006f52:	051b      	lsls	r3, r3, #20
 8006f54:	d5e1      	bpl.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8006f5a:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8006f5c:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5e:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f60:	6821      	ldr	r1, [r4, #0]
 8006f62:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8006f66:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f68:	68a1      	ldr	r1, [r4, #8]
 8006f6a:	f021 0101 	bic.w	r1, r1, #1
 8006f6e:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006f70:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006f74:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006f78:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f7c:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          return HAL_TIMEOUT;
 8006f80:	e7d4      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x28>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f82:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 8006f86:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8006f88:	2400      	movs	r4, #0
 8006f8a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f92:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006f9c:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8006fa0:	f888 4080 	strb.w	r4, [r8, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
 8006fa8:	e7c0      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x28>
 8006faa:	bf00      	nop

08006fac <UART_CheckIdleState>:
{
 8006fac:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fae:	2500      	movs	r5, #0
{
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006fb8:	f7fa fb5c 	bl	8001674 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fbc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006fbe:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	0712      	lsls	r2, r2, #28
 8006fc4:	d40e      	bmi.n	8006fe4 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	075b      	lsls	r3, r3, #29
 8006fca:	d41a      	bmi.n	8007002 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006fce:	2220      	movs	r2, #32
  return HAL_OK;
 8006fd0:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006fd6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006fda:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006fe0:	b002      	add	sp, #8
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8006fe8:	462a      	mov	r2, r5
 8006fea:	4633      	mov	r3, r6
 8006fec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ff0:	9000      	str	r0, [sp, #0]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7ff ff86 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8006ff8:	b978      	cbnz	r0, 800701a <UART_CheckIdleState+0x6e>
 8006ffa:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	075b      	lsls	r3, r3, #29
 8007000:	d5e4      	bpl.n	8006fcc <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007002:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8007006:	4633      	mov	r3, r6
 8007008:	2200      	movs	r2, #0
 800700a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800700e:	9000      	str	r0, [sp, #0]
 8007010:	4620      	mov	r0, r4
 8007012:	f7ff ff77 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8007016:	2800      	cmp	r0, #0
 8007018:	d0d8      	beq.n	8006fcc <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800701a:	2003      	movs	r0, #3
}
 800701c:	b002      	add	sp, #8
 800701e:	bd70      	pop	{r4, r5, r6, pc}

08007020 <HAL_UART_Init>:
  if (huart == NULL)
 8007020:	b380      	cbz	r0, 8007084 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007022:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007026:	b510      	push	{r4, lr}
 8007028:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800702a:	b303      	cbz	r3, 800706e <HAL_UART_Init+0x4e>
  __HAL_UART_DISABLE(huart);
 800702c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800702e:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007030:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8007032:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800703e:	f7ff fc6f 	bl	8006920 <UART_SetConfig>
 8007042:	2801      	cmp	r0, #1
 8007044:	d018      	beq.n	8007078 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007048:	b9c3      	cbnz	r3, 800707c <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800704a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800704c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800705c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
}
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007068:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800706a:	f7ff bf9f 	b.w	8006fac <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800706e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007072:	f7fa f97b 	bl	800136c <HAL_UART_MspInit>
 8007076:	e7d9      	b.n	800702c <HAL_UART_Init+0xc>
}
 8007078:	2001      	movs	r0, #1
 800707a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff fee9 	bl	8006e54 <UART_AdvFeatureConfig>
 8007082:	e7e2      	b.n	800704a <HAL_UART_Init+0x2a>
}
 8007084:	2001      	movs	r0, #1
 8007086:	4770      	bx	lr

08007088 <UARTEx_SetNbDataToProcess.part.1>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007088:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <UARTEx_SetNbDataToProcess.part.1+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800708c:	6899      	ldr	r1, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800708e:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007090:	689c      	ldr	r4, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007092:	f3c1 6142 	ubfx	r1, r1, #25, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007096:	4d0a      	ldr	r5, [pc, #40]	; (80070c0 <UARTEx_SetNbDataToProcess.part.1+0x38>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007098:	0f64      	lsrs	r4, r4, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800709a:	5c53      	ldrb	r3, [r2, r1]
                               (uint16_t)denominator[rx_fifo_threshold];
 800709c:	5c69      	ldrb	r1, [r5, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800709e:	5d12      	ldrb	r2, [r2, r4]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070a0:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 80070a2:	5d2c      	ldrb	r4, [r5, r4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070a4:	0112      	lsls	r2, r2, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070a6:	fb93 f3f1 	sdiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070aa:	fb92 f2f4 	sdiv	r2, r2, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ae:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b2:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  }
}
 80070b6:	bc30      	pop	{r4, r5}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	08014828 	.word	0x08014828
 80070c0:	08014820 	.word	0x08014820

080070c4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80070c4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80070c8:	2a01      	cmp	r2, #1
 80070ca:	d017      	beq.n	80070fc <HAL_UARTEx_DisableFifoMode+0x38>
 80070cc:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80070ce:	2024      	movs	r0, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070d0:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070d2:	681a      	ldr	r2, [r3, #0]
{
 80070d4:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 80070d6:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 80070da:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070dc:	6814      	ldr	r4, [r2, #0]
  return HAL_OK;
 80070de:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 80070e0:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070e2:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80070e6:	f025 0501 	bic.w	r5, r5, #1
 80070ea:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070ec:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ee:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80070f0:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80070f4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 80070f8:	bc70      	pop	{r4, r5, r6}
 80070fa:	4770      	bx	lr
  __HAL_LOCK(huart);
 80070fc:	2002      	movs	r0, #2
}
 80070fe:	4770      	bx	lr

08007100 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8007102:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007106:	2b01      	cmp	r3, #1
 8007108:	d023      	beq.n	8007152 <HAL_UARTEx_SetTxFifoThreshold+0x52>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800710a:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800710c:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800710e:	2701      	movs	r7, #1
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007110:	6e46      	ldr	r6, [r0, #100]	; 0x64
  huart->gState = HAL_UART_STATE_BUSY;
 8007112:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8007116:	4604      	mov	r4, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007118:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800711a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(huart);
 800711c:	f880 7080 	strb.w	r7, [r0, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800712c:	4311      	orrs	r1, r2
 800712e:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007130:	b95e      	cbnz	r6, 800714a <HAL_UARTEx_SetTxFifoThreshold+0x4a>
    huart->NbRxDataToProcess = 1U;
 8007132:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007136:	6682      	str	r2, [r0, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007138:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800713a:	2120      	movs	r1, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800713e:	4610      	mov	r0, r2
  huart->gState = HAL_UART_STATE_READY;
 8007140:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007144:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8007148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714a:	f7ff ff9d 	bl	8007088 <UARTEx_SetNbDataToProcess.part.1>
 800714e:	6803      	ldr	r3, [r0, #0]
 8007150:	e7f2      	b.n	8007138 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8007152:	2002      	movs	r0, #2
}
 8007154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007156:	bf00      	nop

08007158 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800715a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800715e:	2b01      	cmp	r3, #1
 8007160:	d023      	beq.n	80071aa <HAL_UARTEx_SetRxFifoThreshold+0x52>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007162:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007164:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 8007166:	2701      	movs	r7, #1
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007168:	6e46      	ldr	r6, [r0, #100]	; 0x64
  huart->gState = HAL_UART_STATE_BUSY;
 800716a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800716e:	4604      	mov	r4, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007170:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007172:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(huart);
 8007174:	f880 7080 	strb.w	r7, [r0, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007184:	4311      	orrs	r1, r2
 8007186:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007188:	b95e      	cbnz	r6, 80071a2 <HAL_UARTEx_SetRxFifoThreshold+0x4a>
    huart->NbRxDataToProcess = 1U;
 800718a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800718e:	6682      	str	r2, [r0, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007190:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8007192:	2120      	movs	r1, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007194:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8007196:	4610      	mov	r0, r2
  huart->gState = HAL_UART_STATE_READY;
 8007198:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800719c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80071a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a2:	f7ff ff71 	bl	8007088 <UARTEx_SetNbDataToProcess.part.1>
 80071a6:	6803      	ldr	r3, [r0, #0]
 80071a8:	e7f2      	b.n	8007190 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 80071aa:	2002      	movs	r0, #2
}
 80071ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ae:	bf00      	nop

080071b0 <FMC_NORSRAM_Init>:

  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071b0:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
{
 80071b4:	b4f0      	push	{r4, r5, r6, r7}
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80071b6:	2b08      	cmp	r3, #8
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071b8:	68cd      	ldr	r5, [r1, #12]
 80071ba:	ea43 0302 	orr.w	r3, r3, r2
 80071be:	690f      	ldr	r7, [r1, #16]
 80071c0:	694e      	ldr	r6, [r1, #20]
 80071c2:	ea43 0305 	orr.w	r3, r3, r5
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80071c6:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071c8:	4c20      	ldr	r4, [pc, #128]	; (800724c <FMC_NORSRAM_Init+0x9c>)
 80071ca:	ea43 0307 	orr.w	r3, r3, r7
 80071ce:	698f      	ldr	r7, [r1, #24]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80071d0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071d4:	ea43 0306 	orr.w	r3, r3, r6
 80071d8:	69ce      	ldr	r6, [r1, #28]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80071da:	f025 0501 	bic.w	r5, r5, #1
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071de:	ea43 0307 	orr.w	r3, r3, r7
 80071e2:	6a0f      	ldr	r7, [r1, #32]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80071e4:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80071e8:	bf08      	it	eq
 80071ea:	2540      	moveq	r5, #64	; 0x40
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071ec:	ea43 0306 	orr.w	r3, r3, r6
 80071f0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80071f2:	f850 c022 	ldr.w	ip, [r0, r2, lsl #2]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80071f6:	bf18      	it	ne
 80071f8:	2500      	movne	r5, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071fa:	433b      	orrs	r3, r7
 80071fc:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80071fe:	ea0c 0404 	and.w	r4, ip, r4
 8007202:	4333      	orrs	r3, r6
 8007204:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8007206:	433b      	orrs	r3, r7
  btcr_reg |= Init->ContinuousClock;
 8007208:	6b0f      	ldr	r7, [r1, #48]	; 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800720a:	4333      	orrs	r3, r6

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800720c:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007210:	e9d1 610d 	ldrd	r6, r1, [r1, #52]	; 0x34
 8007214:	ea43 0307 	orr.w	r3, r3, r7
 8007218:	ea43 0306 	orr.w	r3, r3, r6
 800721c:	ea43 0301 	orr.w	r3, r3, r1
 8007220:	ea43 0304 	orr.w	r3, r3, r4
 8007224:	ea43 0305 	orr.w	r3, r3, r5
 8007228:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800722c:	d006      	beq.n	800723c <FMC_NORSRAM_Init+0x8c>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800722e:	b112      	cbz	r2, 8007236 <FMC_NORSRAM_Init+0x86>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	431e      	orrs	r6, r3
 8007234:	6006      	str	r6, [r0, #0]
  }

  return HAL_OK;
}
 8007236:	2000      	movs	r0, #0
 8007238:	bcf0      	pop	{r4, r5, r6, r7}
 800723a:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800723c:	2a00      	cmp	r2, #0
 800723e:	d0fa      	beq.n	8007236 <FMC_NORSRAM_Init+0x86>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007240:	6803      	ldr	r3, [r0, #0]
 8007242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007246:	6003      	str	r3, [r0, #0]
 8007248:	e7f2      	b.n	8007230 <FMC_NORSRAM_Init+0x80>
 800724a:	bf00      	nop
 800724c:	ffc00480 	.word	0xffc00480

08007250 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007250:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007252:	680b      	ldr	r3, [r1, #0]
 8007254:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007258:	698d      	ldr	r5, [r1, #24]
 800725a:	684c      	ldr	r4, [r1, #4]
 800725c:	432b      	orrs	r3, r5
 800725e:	688d      	ldr	r5, [r1, #8]
 8007260:	68cf      	ldr	r7, [r1, #12]
 8007262:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007266:	690c      	ldr	r4, [r1, #16]
 8007268:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800726c:	1e66      	subs	r6, r4, #1
 800726e:	694d      	ldr	r5, [r1, #20]
 8007270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007274:	6854      	ldr	r4, [r2, #4]
 8007276:	0531      	lsls	r1, r6, #20
 8007278:	3d02      	subs	r5, #2
 800727a:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 800727e:	430b      	orrs	r3, r1
 8007280:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007284:	4323      	orrs	r3, r4
 8007286:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007288:	6803      	ldr	r3, [r0, #0]
 800728a:	02db      	lsls	r3, r3, #11
 800728c:	d508      	bpl.n	80072a0 <FMC_NORSRAM_Timing_Init+0x50>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800728e:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007290:	6843      	ldr	r3, [r0, #4]
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007292:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007296:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800729a:	4311      	orrs	r1, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800729c:	4319      	orrs	r1, r3
 800729e:	6041      	str	r1, [r0, #4]
  }

  return HAL_OK;
}
 80072a0:	2000      	movs	r0, #0
 80072a2:	bcf0      	pop	{r4, r5, r6, r7}
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop

080072a8 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80072a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ac:	d005      	beq.n	80072ba <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80072ae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80072b2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80072b6:	2000      	movs	r0, #0
 80072b8:	4770      	bx	lr
{
 80072ba:	b470      	push	{r4, r5, r6}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80072bc:	680b      	ldr	r3, [r1, #0]
 80072be:	698d      	ldr	r5, [r1, #24]
 80072c0:	684c      	ldr	r4, [r1, #4]
 80072c2:	432b      	orrs	r3, r5
 80072c4:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
 80072c8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80072cc:	4906      	ldr	r1, [pc, #24]	; (80072e8 <FMC_NORSRAM_Extended_Timing_Init+0x40>)
 80072ce:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80072d2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80072d6:	4021      	ands	r1, r4
 80072d8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80072dc:	430b      	orrs	r3, r1
}
 80072de:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80072e0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80072e4:	2000      	movs	r0, #0
 80072e6:	4770      	bx	lr
 80072e8:	cff00000 	.word	0xcff00000

080072ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072ec:	4b0b      	ldr	r3, [pc, #44]	; (800731c <USB_CoreReset+0x30>)
 80072ee:	e001      	b.n	80072f4 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072f0:	3b01      	subs	r3, #1
 80072f2:	d010      	beq.n	8007316 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f4:	6902      	ldr	r2, [r0, #16]
 80072f6:	2a00      	cmp	r2, #0
 80072f8:	dafa      	bge.n	80072f0 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072fa:	6903      	ldr	r3, [r0, #16]
 80072fc:	4a07      	ldr	r2, [pc, #28]	; (800731c <USB_CoreReset+0x30>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	6103      	str	r3, [r0, #16]
 8007304:	e001      	b.n	800730a <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8007306:	3a01      	subs	r2, #1
 8007308:	d005      	beq.n	8007316 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800730a:	6903      	ldr	r3, [r0, #16]
 800730c:	f013 0301 	ands.w	r3, r3, #1
 8007310:	d1f9      	bne.n	8007306 <USB_CoreReset+0x1a>

  return HAL_OK;
 8007312:	4618      	mov	r0, r3
}
 8007314:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007316:	2003      	movs	r0, #3
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	00030d40 	.word	0x00030d40

08007320 <USB_CoreInit>:
{
 8007320:	b084      	sub	sp, #16
 8007322:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007324:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8007326:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007328:	2d01      	cmp	r5, #1
{
 800732a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800732e:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007330:	d128      	bne.n	8007384 <USB_CoreInit+0x64>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007332:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007334:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <USB_CoreInit+0x94>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800733a:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800733c:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800733e:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007340:	68ca      	ldr	r2, [r1, #12]
 8007342:	ea03 0302 	and.w	r3, r3, r2
 8007346:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007348:	68cb      	ldr	r3, [r1, #12]
 800734a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800734e:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 8007350:	d02a      	beq.n	80073a8 <USB_CoreInit+0x88>
    ret = USB_CoreReset(USBx);
 8007352:	4608      	mov	r0, r1
 8007354:	f7ff ffca 	bl	80072ec <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10e      	bne.n	800737c <USB_CoreInit+0x5c>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800735e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007360:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <USB_CoreInit+0x98>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007362:	b292      	uxth	r2, r2
 8007364:	65ca      	str	r2, [r1, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007366:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8007368:	4313      	orrs	r3, r2
 800736a:	65cb      	str	r3, [r1, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800736c:	688b      	ldr	r3, [r1, #8]
 800736e:	f043 0306 	orr.w	r3, r3, #6
 8007372:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007374:	688b      	ldr	r3, [r1, #8]
 8007376:	f043 0320 	orr.w	r3, r3, #32
 800737a:	608b      	str	r3, [r1, #8]
}
 800737c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007380:	b004      	add	sp, #16
 8007382:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007384:	68c3      	ldr	r3, [r0, #12]
 8007386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800738c:	f7ff ffae 	bl	80072ec <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8007390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007392:	b923      	cbnz	r3, 800739e <USB_CoreInit+0x7e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007394:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739a:	638b      	str	r3, [r1, #56]	; 0x38
 800739c:	e7dc      	b.n	8007358 <USB_CoreInit+0x38>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800739e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80073a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a4:	638b      	str	r3, [r1, #56]	; 0x38
 80073a6:	e7d7      	b.n	8007358 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073a8:	68cb      	ldr	r3, [r1, #12]
 80073aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ae:	60cb      	str	r3, [r1, #12]
 80073b0:	e7cf      	b.n	8007352 <USB_CoreInit+0x32>
 80073b2:	bf00      	nop
 80073b4:	ffbdffbf 	.word	0xffbdffbf
 80073b8:	03ee0000 	.word	0x03ee0000

080073bc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80073bc:	2a02      	cmp	r2, #2
{
 80073be:	4603      	mov	r3, r0
 80073c0:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 80073c2:	d00c      	beq.n	80073de <USB_SetTurnaroundTime+0x22>
 80073c4:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073c8:	68d9      	ldr	r1, [r3, #12]
}
 80073ca:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073cc:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80073d0:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	4322      	orrs	r2, r4
}
 80073d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073da:	60da      	str	r2, [r3, #12]
}
 80073dc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80073de:	4a29      	ldr	r2, [pc, #164]	; (8007484 <USB_SetTurnaroundTime+0xc8>)
 80073e0:	4829      	ldr	r0, [pc, #164]	; (8007488 <USB_SetTurnaroundTime+0xcc>)
 80073e2:	440a      	add	r2, r1
 80073e4:	4282      	cmp	r2, r0
 80073e6:	d93a      	bls.n	800745e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80073e8:	4a28      	ldr	r2, [pc, #160]	; (800748c <USB_SetTurnaroundTime+0xd0>)
 80073ea:	4829      	ldr	r0, [pc, #164]	; (8007490 <USB_SetTurnaroundTime+0xd4>)
 80073ec:	440a      	add	r2, r1
 80073ee:	4282      	cmp	r2, r0
 80073f0:	d932      	bls.n	8007458 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073f2:	4a28      	ldr	r2, [pc, #160]	; (8007494 <USB_SetTurnaroundTime+0xd8>)
 80073f4:	4828      	ldr	r0, [pc, #160]	; (8007498 <USB_SetTurnaroundTime+0xdc>)
 80073f6:	440a      	add	r2, r1
 80073f8:	4282      	cmp	r2, r0
 80073fa:	d933      	bls.n	8007464 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80073fc:	4a27      	ldr	r2, [pc, #156]	; (800749c <USB_SetTurnaroundTime+0xe0>)
 80073fe:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 8007402:	440a      	add	r2, r1
 8007404:	30a0      	adds	r0, #160	; 0xa0
 8007406:	4282      	cmp	r2, r0
 8007408:	d92f      	bls.n	800746a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800740a:	4a25      	ldr	r2, [pc, #148]	; (80074a0 <USB_SetTurnaroundTime+0xe4>)
 800740c:	4825      	ldr	r0, [pc, #148]	; (80074a4 <USB_SetTurnaroundTime+0xe8>)
 800740e:	440a      	add	r2, r1
 8007410:	4282      	cmp	r2, r0
 8007412:	d92d      	bls.n	8007470 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007414:	4a24      	ldr	r2, [pc, #144]	; (80074a8 <USB_SetTurnaroundTime+0xec>)
 8007416:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800741a:	440a      	add	r2, r1
 800741c:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 8007420:	4282      	cmp	r2, r0
 8007422:	d928      	bls.n	8007476 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007424:	4a21      	ldr	r2, [pc, #132]	; (80074ac <USB_SetTurnaroundTime+0xf0>)
 8007426:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800742a:	440a      	add	r2, r1
 800742c:	f500 7020 	add.w	r0, r0, #640	; 0x280
 8007430:	4282      	cmp	r2, r0
 8007432:	d9c7      	bls.n	80073c4 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007434:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <USB_SetTurnaroundTime+0xf4>)
 8007436:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 800743a:	440a      	add	r2, r1
 800743c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8007440:	4282      	cmp	r2, r0
 8007442:	d91b      	bls.n	800747c <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007444:	4a1b      	ldr	r2, [pc, #108]	; (80074b4 <USB_SetTurnaroundTime+0xf8>)
 8007446:	4c1c      	ldr	r4, [pc, #112]	; (80074b8 <USB_SetTurnaroundTime+0xfc>)
 8007448:	440a      	add	r2, r1
 800744a:	42a2      	cmp	r2, r4
 800744c:	bf8c      	ite	hi
 800744e:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 8007452:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 8007456:	e7b7      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 8007458:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800745c:	e7b4      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 800745e:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 8007462:	e7b1      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 8007464:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 8007468:	e7ae      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 800746a:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800746e:	e7ab      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 8007470:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8007474:	e7a8      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 8007476:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800747a:	e7a5      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 800747c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8007480:	e7a2      	b.n	80073c8 <USB_SetTurnaroundTime+0xc>
 8007482:	bf00      	nop
 8007484:	ff275340 	.word	0xff275340
 8007488:	000c34ff 	.word	0x000c34ff
 800748c:	ff1b1e40 	.word	0xff1b1e40
 8007490:	000f423f 	.word	0x000f423f
 8007494:	ff0bdc00 	.word	0xff0bdc00
 8007498:	00124f7f 	.word	0x00124f7f
 800749c:	fef98c80 	.word	0xfef98c80
 80074a0:	fee5b660 	.word	0xfee5b660
 80074a4:	0016e35f 	.word	0x0016e35f
 80074a8:	feced300 	.word	0xfeced300
 80074ac:	feb35bc0 	.word	0xfeb35bc0
 80074b0:	fe91ca00 	.word	0xfe91ca00
 80074b4:	fe5954e0 	.word	0xfe5954e0
 80074b8:	00419cdf 	.word	0x00419cdf

080074bc <USB_EnableGlobalInt>:
{
 80074bc:	4602      	mov	r2, r0
}
 80074be:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074c0:	6893      	ldr	r3, [r2, #8]
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	6093      	str	r3, [r2, #8]
}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop

080074cc <USB_DisableGlobalInt>:
{
 80074cc:	4602      	mov	r2, r0
}
 80074ce:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074d0:	6893      	ldr	r3, [r2, #8]
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	6093      	str	r3, [r2, #8]
}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop

080074dc <USB_SetCurrentMode>:
{
 80074dc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074de:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80074e0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074e2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074e6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80074e8:	d00b      	beq.n	8007502 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80074ea:	b941      	cbnz	r1, 80074fe <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074ec:	68c3      	ldr	r3, [r0, #12]
 80074ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074f2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80074f4:	2032      	movs	r0, #50	; 0x32
 80074f6:	f7fa f8c3 	bl	8001680 <HAL_Delay>
  return HAL_OK;
 80074fa:	2000      	movs	r0, #0
}
 80074fc:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80074fe:	2001      	movs	r0, #1
}
 8007500:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007502:	68c3      	ldr	r3, [r0, #12]
 8007504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007508:	60c3      	str	r3, [r0, #12]
 800750a:	e7f3      	b.n	80074f4 <USB_SetCurrentMode+0x18>

0800750c <USB_DevInit>:
{
 800750c:	b084      	sub	sp, #16
 800750e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 8007512:	2400      	movs	r4, #0
{
 8007514:	ae08      	add	r6, sp, #32
 8007516:	4605      	mov	r5, r0
 8007518:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800751c:	460e      	mov	r6, r1
    USBx->DIEPTXF[i] = 0U;
 800751e:	4622      	mov	r2, r4
 8007520:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007522:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8007526:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 8007528:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 800752c:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 800752e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007530:	d1f7      	bne.n	8007522 <USB_DevInit+0x16>
 8007532:	f505 6700 	add.w	r7, r5, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8007536:	2900      	cmp	r1, #0
 8007538:	f040 8094 	bne.w	8007664 <USB_DevInit+0x158>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f043 0302 	orr.w	r3, r3, #2
 8007542:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007544:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800754a:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007552:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755a:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 800755c:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800755e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 8007560:	f8c5 2e00 	str.w	r2, [r5, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007564:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007566:	f8d5 2800 	ldr.w	r2, [r5, #2048]	; 0x800
 800756a:	f8c5 2800 	str.w	r2, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800756e:	d07e      	beq.n	800766e <USB_DevInit+0x162>
  USBx_DEVICE->DCFG |= speed;
 8007570:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8007574:	f043 0303 	orr.w	r3, r3, #3
 8007578:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800757c:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8007580:	4b47      	ldr	r3, [pc, #284]	; (80076a0 <USB_DevInit+0x194>)
 8007582:	612a      	str	r2, [r5, #16]
 8007584:	e001      	b.n	800758a <USB_DevInit+0x7e>
    if (++count > 200000U)
 8007586:	3b01      	subs	r3, #1
 8007588:	d07f      	beq.n	800768a <USB_DevInit+0x17e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800758a:	6928      	ldr	r0, [r5, #16]
 800758c:	f010 0020 	ands.w	r0, r0, #32
 8007590:	d1f9      	bne.n	8007586 <USB_DevInit+0x7a>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007592:	2210      	movs	r2, #16
 8007594:	4b42      	ldr	r3, [pc, #264]	; (80076a0 <USB_DevInit+0x194>)
 8007596:	612a      	str	r2, [r5, #16]
 8007598:	e001      	b.n	800759e <USB_DevInit+0x92>
    if (++count > 200000U)
 800759a:	3b01      	subs	r3, #1
 800759c:	d077      	beq.n	800768e <USB_DevInit+0x182>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800759e:	692a      	ldr	r2, [r5, #16]
 80075a0:	06d2      	lsls	r2, r2, #27
 80075a2:	d4fa      	bmi.n	800759a <USB_DevInit+0x8e>
  USBx_DEVICE->DIEPMSK = 0U;
 80075a4:	2200      	movs	r2, #0
 80075a6:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075a8:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075aa:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ac:	b1de      	cbz	r6, 80075e6 <USB_DevInit+0xda>
 80075ae:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075b2:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075b6:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80075ba:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075bc:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80075c0:	e009      	b.n	80075d6 <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 80075c2:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c6:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075c8:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075cc:	f8c3 e008 	str.w	lr, [r3, #8]
 80075d0:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d2:	42b2      	cmp	r2, r6
 80075d4:	d02a      	beq.n	800762c <USB_DevInit+0x120>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075d6:	681c      	ldr	r4, [r3, #0]
 80075d8:	2c00      	cmp	r4, #0
 80075da:	daf2      	bge.n	80075c2 <USB_DevInit+0xb6>
      if (i == 0U)
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d05b      	beq.n	8007698 <USB_DevInit+0x18c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075e0:	f8c3 8000 	str.w	r8, [r3]
 80075e4:	e7ef      	b.n	80075c6 <USB_DevInit+0xba>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075e6:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80075e8:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075ea:	f06f 4480 	mvn.w	r4, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 80075ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f4:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80075f6:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075f8:	616c      	str	r4, [r5, #20]
  if (cfg.dma_enable == 0U)
 80075fa:	b91a      	cbnz	r2, 8007604 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075fc:	69ab      	ldr	r3, [r5, #24]
 80075fe:	f043 0310 	orr.w	r3, r3, #16
 8007602:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007604:	69ac      	ldr	r4, [r5, #24]
 8007606:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <USB_DevInit+0x198>)
  if (cfg.Sof_enable != 0U)
 8007608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800760a:	4323      	orrs	r3, r4
 800760c:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 800760e:	b11a      	cbz	r2, 8007618 <USB_DevInit+0x10c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007610:	69ab      	ldr	r3, [r5, #24]
 8007612:	f043 0308 	orr.w	r3, r3, #8
 8007616:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007618:	2901      	cmp	r1, #1
 800761a:	d103      	bne.n	8007624 <USB_DevInit+0x118>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800761c:	69aa      	ldr	r2, [r5, #24]
 800761e:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <USB_DevInit+0x19c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	61ab      	str	r3, [r5, #24]
}
 8007624:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007628:	b004      	add	sp, #16
 800762a:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800762c:	2400      	movs	r4, #0
 800762e:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007632:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007636:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800763a:	46a4      	mov	ip, r4
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800763c:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8007640:	e009      	b.n	8007656 <USB_DevInit+0x14a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007642:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007646:	3401      	adds	r4, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007648:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800764c:	f8c3 e008 	str.w	lr, [r3, #8]
 8007650:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007652:	4294      	cmp	r4, r2
 8007654:	d0c7      	beq.n	80075e6 <USB_DevInit+0xda>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007656:	681e      	ldr	r6, [r3, #0]
 8007658:	2e00      	cmp	r6, #0
 800765a:	daf2      	bge.n	8007642 <USB_DevInit+0x136>
      if (i == 0U)
 800765c:	b1cc      	cbz	r4, 8007692 <USB_DevInit+0x186>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800765e:	f8c3 8000 	str.w	r8, [r3]
 8007662:	e7f0      	b.n	8007646 <USB_DevInit+0x13a>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007664:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800766a:	63ab      	str	r3, [r5, #56]	; 0x38
 800766c:	e776      	b.n	800755c <USB_DevInit+0x50>
    if (cfg.speed == USBD_HS_SPEED)
 800766e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007670:	b923      	cbnz	r3, 800767c <USB_DevInit+0x170>
  USBx_DEVICE->DCFG |= speed;
 8007672:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8007676:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 800767a:	e77f      	b.n	800757c <USB_DevInit+0x70>
 800767c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8007680:	f043 0301 	orr.w	r3, r3, #1
 8007684:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 8007688:	e778      	b.n	800757c <USB_DevInit+0x70>
    ret = HAL_ERROR;
 800768a:	2001      	movs	r0, #1
 800768c:	e781      	b.n	8007592 <USB_DevInit+0x86>
    ret = HAL_ERROR;
 800768e:	2001      	movs	r0, #1
 8007690:	e788      	b.n	80075a4 <USB_DevInit+0x98>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007692:	f8c3 9000 	str.w	r9, [r3]
 8007696:	e7d6      	b.n	8007646 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007698:	f8c3 9000 	str.w	r9, [r3]
 800769c:	e793      	b.n	80075c6 <USB_DevInit+0xba>
 800769e:	bf00      	nop
 80076a0:	00030d40 	.word	0x00030d40
 80076a4:	803c3800 	.word	0x803c3800
 80076a8:	40000004 	.word	0x40000004

080076ac <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076ac:	0189      	lsls	r1, r1, #6
 80076ae:	4a07      	ldr	r2, [pc, #28]	; (80076cc <USB_FlushTxFifo+0x20>)
 80076b0:	f041 0120 	orr.w	r1, r1, #32
 80076b4:	6101      	str	r1, [r0, #16]
 80076b6:	e001      	b.n	80076bc <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 80076b8:	3a01      	subs	r2, #1
 80076ba:	d005      	beq.n	80076c8 <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076bc:	6903      	ldr	r3, [r0, #16]
 80076be:	f013 0320 	ands.w	r3, r3, #32
 80076c2:	d1f9      	bne.n	80076b8 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 80076c4:	4618      	mov	r0, r3
 80076c6:	4770      	bx	lr
      return HAL_TIMEOUT;
 80076c8:	2003      	movs	r0, #3
}
 80076ca:	4770      	bx	lr
 80076cc:	00030d40 	.word	0x00030d40

080076d0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076d0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076d4:	f013 0006 	ands.w	r0, r3, #6
 80076d8:	d004      	beq.n	80076e4 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076da:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 80076de:	bf14      	ite	ne
 80076e0:	2002      	movne	r0, #2
 80076e2:	200f      	moveq	r0, #15
}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop

080076e8 <USB_ActivateEndpoint>:
{
 80076e8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80076ea:	780a      	ldrb	r2, [r1, #0]
 80076ec:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 80076ee:	784d      	ldrb	r5, [r1, #1]
 80076f0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80076f4:	f002 060f 	and.w	r6, r2, #15
 80076f8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80076fc:	2d01      	cmp	r5, #1
 80076fe:	fa03 f306 	lsl.w	r3, r3, r6
 8007702:	d017      	beq.n	8007734 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007704:	69e2      	ldr	r2, [r4, #28]
 8007706:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800770a:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800770c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	d40c      	bmi.n	800772e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007714:	688a      	ldr	r2, [r1, #8]
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <USB_ActivateEndpoint+0x80>)
 8007718:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800771c:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800771e:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8007722:	4313      	orrs	r3, r2
 8007724:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8007728:	430b      	orrs	r3, r1
 800772a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800772e:	2000      	movs	r0, #0
 8007730:	bc70      	pop	{r4, r5, r6}
 8007732:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007734:	69e5      	ldr	r5, [r4, #28]
 8007736:	432b      	orrs	r3, r5
 8007738:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800773a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800773e:	041c      	lsls	r4, r3, #16
 8007740:	d4f5      	bmi.n	800772e <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007742:	688c      	ldr	r4, [r1, #8]
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <USB_ActivateEndpoint+0x80>)
 8007746:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800774a:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800774c:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007750:	4323      	orrs	r3, r4
 8007752:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8007756:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800775a:	430a      	orrs	r2, r1
}
 800775c:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800775e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8007762:	2000      	movs	r0, #0
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	10008000 	.word	0x10008000

0800776c <USB_DeactivateEndpoint>:
{
 800776c:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800776e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007770:	7849      	ldrb	r1, [r1, #1]
 8007772:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8007776:	2901      	cmp	r1, #1
 8007778:	d02a      	beq.n	80077d0 <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800777a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800777e:	2900      	cmp	r1, #0
 8007780:	db19      	blt.n	80077b6 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007782:	f003 010f 	and.w	r1, r3, #15
 8007786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800778a:	4c26      	ldr	r4, [pc, #152]	; (8007824 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800778c:	408b      	lsls	r3, r1
 800778e:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8007792:	43db      	mvns	r3, r3
 8007794:	4019      	ands	r1, r3
 8007796:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800779a:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800779e:	400b      	ands	r3, r1
 80077a0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80077a4:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077a6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80077aa:	401c      	ands	r4, r3
 80077ac:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 80077b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b4:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077b6:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80077ba:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80077be:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077c2:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 80077c6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80077ca:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 80077ce:	e7d8      	b.n	8007782 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077d0:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 80077d4:	2900      	cmp	r1, #0
 80077d6:	da0b      	bge.n	80077f0 <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077d8:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 80077dc:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80077e0:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077e4:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 80077e8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80077ec:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077f0:	f003 040f 	and.w	r4, r3, #15
 80077f4:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077f6:	490c      	ldr	r1, [pc, #48]	; (8007828 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077f8:	40a3      	lsls	r3, r4
 80077fa:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 80077fe:	43db      	mvns	r3, r3
 8007800:	401c      	ands	r4, r3
 8007802:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007806:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800780a:	4023      	ands	r3, r4
}
 800780c:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007810:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8007814:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007816:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800781a:	4019      	ands	r1, r3
 800781c:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	eff37800 	.word	0xeff37800
 8007828:	ec337800 	.word	0xec337800

0800782c <USB_EPStartXfer>:
{
 800782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8007830:	784f      	ldrb	r7, [r1, #1]
 8007832:	780b      	ldrb	r3, [r1, #0]
 8007834:	2f01      	cmp	r7, #1
 8007836:	694c      	ldr	r4, [r1, #20]
 8007838:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800783c:	78ce      	ldrb	r6, [r1, #3]
 800783e:	d055      	beq.n	80078ec <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007840:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 8007844:	f8df e208 	ldr.w	lr, [pc, #520]	; 8007a50 <USB_EPStartXfer+0x224>
 8007848:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800784c:	4d7e      	ldr	r5, [pc, #504]	; (8007a48 <USB_EPStartXfer+0x21c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800784e:	ea0c 0e0e 	and.w	lr, ip, lr
 8007852:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007856:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800785a:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800785e:	ea0e 0505 	and.w	r5, lr, r5
 8007862:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 8007864:	b38c      	cbz	r4, 80078ca <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007866:	eb04 050c 	add.w	r5, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800786a:	4c78      	ldr	r4, [pc, #480]	; (8007a4c <USB_EPStartXfer+0x220>)
 800786c:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 8007870:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007872:	f105 35ff 	add.w	r5, r5, #4294967295
 8007876:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800787a:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800787e:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007880:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007884:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007888:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800788c:	693d      	ldr	r5, [r7, #16]
 800788e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007892:	ea44 0405 	orr.w	r4, r4, r5
 8007896:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 8007898:	d023      	beq.n	80078e2 <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 800789a:	2e01      	cmp	r6, #1
 800789c:	d10c      	bne.n	80078b8 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800789e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80078a2:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078a6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80078aa:	bf0c      	ite	eq
 80078ac:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80078b0:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80078b4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078b8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80078bc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80078c0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80078c4:	2000      	movs	r0, #0
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078ca:	693d      	ldr	r5, [r7, #16]
 80078cc:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 80078d0:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078d2:	ea44 0405 	orr.w	r4, r4, r5
 80078d6:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078d8:	693c      	ldr	r4, [r7, #16]
 80078da:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80078de:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 80078e0:	d1db      	bne.n	800789a <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 80078e2:	68ca      	ldr	r2, [r1, #12]
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	d0d8      	beq.n	800789a <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078e8:	617a      	str	r2, [r7, #20]
 80078ea:	e7d6      	b.n	800789a <USB_EPStartXfer+0x6e>
 80078ec:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80078f0:	b3ec      	cbz	r4, 800796e <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078f2:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078f6:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 80078fe:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007900:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007904:	f8df a148 	ldr.w	sl, [pc, #328]	; 8007a50 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007908:	f10e 3eff 	add.w	lr, lr, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800790c:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007910:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8007a48 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007914:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007918:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800791c:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007920:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007924:	f8df e124 	ldr.w	lr, [pc, #292]	; 8007a4c <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007928:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800792c:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 8007930:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8007934:	ea4e 0e08 	orr.w	lr, lr, r8
 8007938:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800793c:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8007940:	ea4c 0c0e 	orr.w	ip, ip, lr
 8007944:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8007948:	d052      	beq.n	80079f0 <USB_EPStartXfer+0x1c4>
    if (dma == 1U)
 800794a:	2a01      	cmp	r2, #1
 800794c:	d05a      	beq.n	8007a04 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800794e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007952:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007956:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800795a:	780b      	ldrb	r3, [r1, #0]
 800795c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	409f      	lsls	r7, r3
 8007966:	4317      	orrs	r7, r2
 8007968:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 800796c:	e7aa      	b.n	80078c4 <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800796e:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 8007972:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007974:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8007a48 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007978:	4f35      	ldr	r7, [pc, #212]	; (8007a50 <USB_EPStartXfer+0x224>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800797a:	ea0e 0c0c 	and.w	ip, lr, ip
 800797e:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007982:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007986:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800798a:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800798e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007992:	ea0c 0707 	and.w	r7, ip, r7
 8007996:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8007998:	d034      	beq.n	8007a04 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800799a:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800799e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079a0:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80079a4:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80079a8:	d18c      	bne.n	80078c4 <USB_EPStartXfer+0x98>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079aa:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 80079ae:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079b2:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 80079b6:	bf0c      	ite	eq
 80079b8:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079bc:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80079c0:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	f47f af7d 	bne.w	80078c4 <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 80079ca:	b2a2      	uxth	r2, r4
 80079cc:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 80079ce:	0892      	lsrs	r2, r2, #2
 80079d0:	f43f af78 	beq.w	80078c4 <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079d4:	780c      	ldrb	r4, [r1, #0]
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80079d6:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079d8:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 80079dc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80079e0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80079e4:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 80079e8:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079ea:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80079ec:	d1fa      	bne.n	80079e4 <USB_EPStartXfer+0x1b8>
 80079ee:	e769      	b.n	80078c4 <USB_EPStartXfer+0x98>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079f0:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 80079f2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079f4:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 80079f8:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80079fa:	692f      	ldr	r7, [r5, #16]
 80079fc:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007a00:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8007a02:	d11a      	bne.n	8007a3a <USB_EPStartXfer+0x20e>
      if ((uint32_t)ep->dma_addr != 0U)
 8007a04:	690a      	ldr	r2, [r1, #16]
 8007a06:	b102      	cbz	r2, 8007a0a <USB_EPStartXfer+0x1de>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a08:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 8007a0a:	2e01      	cmp	r6, #1
 8007a0c:	d10c      	bne.n	8007a28 <USB_EPStartXfer+0x1fc>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a0e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007a12:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a16:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007a1a:	bf0c      	ite	eq
 8007a1c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a20:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8007a24:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a28:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 8007a2c:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a2e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007a32:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8007a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a3a:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 8007a3e:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8007a42:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 8007a46:	e7b0      	b.n	80079aa <USB_EPStartXfer+0x17e>
 8007a48:	e007ffff 	.word	0xe007ffff
 8007a4c:	1ff80000 	.word	0x1ff80000
 8007a50:	fff80000 	.word	0xfff80000

08007a54 <USB_EP0StartXfer>:
{
 8007a54:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8007a56:	784b      	ldrb	r3, [r1, #1]
 8007a58:	780c      	ldrb	r4, [r1, #0]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	694d      	ldr	r5, [r1, #20]
 8007a5e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007a62:	d026      	beq.n	8007ab2 <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a64:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8007a68:	4f3c      	ldr	r7, [pc, #240]	; (8007b5c <USB_EP0StartXfer+0x108>)
 8007a6a:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a6c:	4e3c      	ldr	r6, [pc, #240]	; (8007b60 <USB_EP0StartXfer+0x10c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a6e:	4007      	ands	r7, r0
 8007a70:	6888      	ldr	r0, [r1, #8]
 8007a72:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a74:	691f      	ldr	r7, [r3, #16]
 8007a76:	403e      	ands	r6, r7
 8007a78:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len > 0U)
 8007a7a:	b105      	cbz	r5, 8007a7e <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8007a7c:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a7e:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a80:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8007a84:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a86:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8007a8a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a8c:	691d      	ldr	r5, [r3, #16]
 8007a8e:	ea40 0005 	orr.w	r0, r0, r5
 8007a92:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8007a94:	d008      	beq.n	8007aa8 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a96:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8007a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a9e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	bcf0      	pop	{r4, r5, r6, r7}
 8007aa6:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8007aa8:	68ca      	ldr	r2, [r1, #12]
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d0f3      	beq.n	8007a96 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007aae:	615a      	str	r2, [r3, #20]
 8007ab0:	e7f1      	b.n	8007a96 <USB_EP0StartXfer+0x42>
 8007ab2:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	d033      	beq.n	8007b22 <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aba:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8007abe:	4f27      	ldr	r7, [pc, #156]	; (8007b5c <USB_EP0StartXfer+0x108>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ac0:	4e27      	ldr	r6, [pc, #156]	; (8007b60 <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ac2:	ea0c 0707 	and.w	r7, ip, r7
      if (ep->xfer_len > ep->maxpacket)
 8007ac6:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aca:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007acc:	45ac      	cmp	ip, r5
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ace:	691f      	ldr	r7, [r3, #16]
 8007ad0:	ea06 0607 	and.w	r6, r6, r7
 8007ad4:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007ad6:	d202      	bcs.n	8007ade <USB_EP0StartXfer+0x8a>
        ep->xfer_len = ep->maxpacket;
 8007ad8:	4665      	mov	r5, ip
 8007ada:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ade:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ae0:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8007ae4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ae6:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8007aea:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007aec:	691e      	ldr	r6, [r3, #16]
 8007aee:	ea45 0506 	orr.w	r5, r5, r6
 8007af2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8007af4:	d026      	beq.n	8007b44 <USB_EP0StartXfer+0xf0>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007af6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8007afa:	694a      	ldr	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b00:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	d0cc      	beq.n	8007aa2 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b08:	780a      	ldrb	r2, [r1, #0]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8007b10:	f002 020f 	and.w	r2, r2, #15
 8007b14:	4093      	lsls	r3, r2
 8007b16:	430b      	orrs	r3, r1
}
 8007b18:	bcf0      	pop	{r4, r5, r6, r7}
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b1a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8007b1e:	2000      	movs	r0, #0
 8007b20:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b22:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b24:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b28:	4e0d      	ldr	r6, [pc, #52]	; (8007b60 <USB_EP0StartXfer+0x10c>)
    if (dma == 1U)
 8007b2a:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b2c:	ea06 0607 	and.w	r6, r6, r7
 8007b30:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b32:	691e      	ldr	r6, [r3, #16]
 8007b34:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8007b38:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b3a:	691e      	ldr	r6, [r3, #16]
 8007b3c:	ea05 0506 	and.w	r5, r5, r6
 8007b40:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8007b42:	d1d8      	bne.n	8007af6 <USB_EP0StartXfer+0xa2>
      if ((uint32_t)ep->dma_addr != 0U)
 8007b44:	690a      	ldr	r2, [r1, #16]
 8007b46:	b102      	cbz	r2, 8007b4a <USB_EP0StartXfer+0xf6>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b48:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b4a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 8007b4e:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b54:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8007b58:	bcf0      	pop	{r4, r5, r6, r7}
 8007b5a:	4770      	bx	lr
 8007b5c:	fff80000 	.word	0xfff80000
 8007b60:	e007ffff 	.word	0xe007ffff

08007b64 <USB_WritePacket>:
{
 8007b64:	b410      	push	{r4}
 8007b66:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8007b6a:	b96c      	cbnz	r4, 8007b88 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b6c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8007b6e:	089b      	lsrs	r3, r3, #2
 8007b70:	d00a      	beq.n	8007b88 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b72:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8007b76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007b7a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8007b7e:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8007b82:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b84:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8007b86:	d1fa      	bne.n	8007b7e <USB_WritePacket+0x1a>
}
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USB_ReadPacket>:
{
 8007b90:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t remaining_bytes = len % 4U;
 8007b92:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8007b96:	0892      	lsrs	r2, r2, #2
 8007b98:	d01e      	beq.n	8007bd8 <USB_ReadPacket+0x48>
 8007b9a:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8007b9e:	460c      	mov	r4, r1
  for (i = 0U; i < count32b; i++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ba4:	683d      	ldr	r5, [r7, #0]
  for (i = 0U; i < count32b; i++)
 8007ba6:	429a      	cmp	r2, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ba8:	f844 5b04 	str.w	r5, [r4], #4
  for (i = 0U; i < count32b; i++)
 8007bac:	d1f9      	bne.n	8007ba2 <USB_ReadPacket+0x12>
 8007bae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  if (remaining_bytes != 0U)
 8007bb2:	b176      	cbz	r6, 8007bd2 <USB_ReadPacket+0x42>
 8007bb4:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bb6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8007bba:	2400      	movs	r4, #0
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	6800      	ldr	r0, [r0, #0]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	4413      	add	r3, r2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bc4:	fa20 f104 	lsr.w	r1, r0, r4
 8007bc8:	3408      	adds	r4, #8
 8007bca:	f802 1b01 	strb.w	r1, [r2], #1
    } while (remaining_bytes != 0U);
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d1f8      	bne.n	8007bc4 <USB_ReadPacket+0x34>
}
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	bcf0      	pop	{r4, r5, r6, r7}
 8007bd6:	4770      	bx	lr
  uint8_t *pDest = dest;
 8007bd8:	460a      	mov	r2, r1
 8007bda:	e7ea      	b.n	8007bb2 <USB_ReadPacket+0x22>

08007bdc <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007bdc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007bde:	784a      	ldrb	r2, [r1, #1]
 8007be0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007be4:	3300      	adds	r3, #0
 8007be6:	bf18      	it	ne
 8007be8:	2301      	movne	r3, #1
 8007bea:	2a01      	cmp	r2, #1
 8007bec:	d012      	beq.n	8007c14 <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bee:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	db06      	blt.n	8007c04 <USB_EPSetStall+0x28>
 8007bf6:	b12b      	cbz	r3, 8007c04 <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bf8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c04:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c0c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8007c10:	2000      	movs	r0, #0
 8007c12:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c14:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	db06      	blt.n	8007c2a <USB_EPSetStall+0x4e>
 8007c1c:	b12b      	cbz	r3, 8007c2a <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c26:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c2a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c32:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007c36:	2000      	movs	r0, #0
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <USB_EPClearStall>:
{
 8007c3c:	78cb      	ldrb	r3, [r1, #3]
 8007c3e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007c40:	7849      	ldrb	r1, [r1, #1]
 8007c42:	3b02      	subs	r3, #2
 8007c44:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007c48:	2901      	cmp	r1, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	d011      	beq.n	8007c72 <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c4e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c52:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c54:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007c58:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c5c:	d901      	bls.n	8007c62 <USB_EPClearStall+0x26>
}
 8007c5e:	2000      	movs	r0, #0
 8007c60:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c62:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8007c6e:	2000      	movs	r0, #0
 8007c70:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c72:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c76:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c78:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007c7c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c80:	d8ed      	bhi.n	8007c5e <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007c8e:	2000      	movs	r0, #0
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop

08007c94 <USB_SetDevAddress>:
{
 8007c94:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c96:	0109      	lsls	r1, r1, #4
}
 8007c98:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c9a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c9e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ca2:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8007ca6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007caa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8007cae:	4311      	orrs	r1, r2
 8007cb0:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop

08007cb8 <USB_DevConnect>:
{
 8007cb8:	4603      	mov	r3, r0
}
 8007cba:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cbc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cc0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cc4:	f022 0203 	bic.w	r2, r2, #3
 8007cc8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ccc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007cd0:	f023 0302 	bic.w	r3, r3, #2
 8007cd4:	604b      	str	r3, [r1, #4]
}
 8007cd6:	4770      	bx	lr

08007cd8 <USB_DevDisconnect>:
{
 8007cd8:	4603      	mov	r3, r0
}
 8007cda:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cdc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ce0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ce4:	f022 0203 	bic.w	r2, r2, #3
 8007ce8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007cf0:	f043 0302 	orr.w	r3, r3, #2
 8007cf4:	604b      	str	r3, [r1, #4]
}
 8007cf6:	4770      	bx	lr

08007cf8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007cf8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007cfa:	6980      	ldr	r0, [r0, #24]
}
 8007cfc:	4010      	ands	r0, r2
 8007cfe:	4770      	bx	lr

08007d00 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007d00:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007d04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d08:	69c0      	ldr	r0, [r0, #28]
 8007d0a:	4018      	ands	r0, r3
}
 8007d0c:	0c00      	lsrs	r0, r0, #16
 8007d0e:	4770      	bx	lr

08007d10 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007d10:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007d14:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d18:	69c0      	ldr	r0, [r0, #28]
 8007d1a:	4018      	ands	r0, r3
}
 8007d1c:	b280      	uxth	r0, r0
 8007d1e:	4770      	bx	lr

08007d20 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d20:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d24:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d28:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d2c:	6940      	ldr	r0, [r0, #20]
}
 8007d2e:	4010      	ands	r0, r2
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8007d34:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d38:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 8007d3c:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d3e:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 8007d42:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d44:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d46:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d4a:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d4c:	6880      	ldr	r0, [r0, #8]
}
 8007d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d52:	01db      	lsls	r3, r3, #7
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	430b      	orrs	r3, r1
}
 8007d58:	4018      	ands	r0, r3
 8007d5a:	4770      	bx	lr

08007d5c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007d5c:	6940      	ldr	r0, [r0, #20]
}
 8007d5e:	f000 0001 	and.w	r0, r0, #1
 8007d62:	4770      	bx	lr

08007d64 <USB_ActivateSetup>:
{
 8007d64:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <USB_ActivateSetup+0x28>)
}
 8007d68:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d6a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8007d6e:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d70:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8007d74:	4022      	ands	r2, r4
}
 8007d76:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d7a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d7e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d86:	604b      	str	r3, [r1, #4]
}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	fffff800 	.word	0xfffff800

08007d90 <USB_EP0_OutStart>:
{
 8007d90:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d92:	4c12      	ldr	r4, [pc, #72]	; (8007ddc <USB_EP0_OutStart+0x4c>)
 8007d94:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d98:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d9a:	42a5      	cmp	r5, r4
 8007d9c:	d903      	bls.n	8007da6 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d9e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8007da2:	2c00      	cmp	r4, #0
 8007da4:	db16      	blt.n	8007dd4 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007da6:	2400      	movs	r4, #0
  if (dma == 1U)
 8007da8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007daa:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dac:	691c      	ldr	r4, [r3, #16]
 8007dae:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007db2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007db4:	691c      	ldr	r4, [r3, #16]
 8007db6:	f044 0418 	orr.w	r4, r4, #24
 8007dba:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dbc:	691c      	ldr	r4, [r3, #16]
 8007dbe:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8007dc2:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8007dc4:	d106      	bne.n	8007dd4 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007dc6:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007dc8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007dcc:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007dd0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	bc30      	pop	{r4, r5}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	4f54300a 	.word	0x4f54300a

08007de0 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop

08007de4 <MX_LWIP_Init>:
{
 8007de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NETMASK_ADDRESS[3] = 0;
 8007de8:	f04f 0800 	mov.w	r8, #0
  NETMASK_ADDRESS[0] = 255;
 8007dec:	4d2e      	ldr	r5, [pc, #184]	; (8007ea8 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 10;
 8007dee:	4e2f      	ldr	r6, [pc, #188]	; (8007eac <MX_LWIP_Init+0xc8>)
  IP_ADDRESS[2] = 1;
 8007df0:	2301      	movs	r3, #1
  GATEWAY_ADDRESS[0] = 10;
 8007df2:	4c2f      	ldr	r4, [pc, #188]	; (8007eb0 <MX_LWIP_Init+0xcc>)
  NETMASK_ADDRESS[0] = 255;
 8007df4:	22ff      	movs	r2, #255	; 0xff
  IP_ADDRESS[0] = 10;
 8007df6:	f04f 0c0a 	mov.w	ip, #10
  IP_ADDRESS[1] = 55;
 8007dfa:	2737      	movs	r7, #55	; 0x37
{
 8007dfc:	b084      	sub	sp, #16
  tcpip_init( NULL, NULL );
 8007dfe:	4641      	mov	r1, r8
 8007e00:	4640      	mov	r0, r8
  NETMASK_ADDRESS[0] = 255;
 8007e02:	702a      	strb	r2, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8007e04:	706a      	strb	r2, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 8007e06:	70aa      	strb	r2, [r5, #2]
  IP_ADDRESS[0] = 10;
 8007e08:	f886 c000 	strb.w	ip, [r6]
  GATEWAY_ADDRESS[0] = 10;
 8007e0c:	f884 c000 	strb.w	ip, [r4]
  IP_ADDRESS[1] = 55;
 8007e10:	7077      	strb	r7, [r6, #1]
  GATEWAY_ADDRESS[1] = 55;
 8007e12:	7067      	strb	r7, [r4, #1]
  IP_ADDRESS[2] = 1;
 8007e14:	70b3      	strb	r3, [r6, #2]
  IP_ADDRESS[3] = 1;
 8007e16:	70f3      	strb	r3, [r6, #3]
  GATEWAY_ADDRESS[2] = 1;
 8007e18:	70a3      	strb	r3, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007e1a:	70e3      	strb	r3, [r4, #3]
  NETMASK_ADDRESS[3] = 0;
 8007e1c:	f885 8003 	strb.w	r8, [r5, #3]
  tcpip_init( NULL, NULL );
 8007e20:	f003 fd74 	bl	800b90c <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007e24:	f8d6 e000 	ldr.w	lr, [r6]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007e28:	f8d5 c000 	ldr.w	ip, [r5]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007e2c:	4a21      	ldr	r2, [pc, #132]	; (8007eb4 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007e2e:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <MX_LWIP_Init+0xd4>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e30:	4d22      	ldr	r5, [pc, #136]	; (8007ebc <MX_LWIP_Init+0xd8>)
 8007e32:	4611      	mov	r1, r2
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007e34:	6826      	ldr	r6, [r4, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e36:	4f22      	ldr	r7, [pc, #136]	; (8007ec0 <MX_LWIP_Init+0xdc>)
 8007e38:	f8cd 8000 	str.w	r8, [sp]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007e3c:	4c21      	ldr	r4, [pc, #132]	; (8007ec4 <MX_LWIP_Init+0xe0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e3e:	4638      	mov	r0, r7
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007e40:	f8c2 e000 	str.w	lr, [r2]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e44:	461a      	mov	r2, r3
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007e46:	f8c3 c000 	str.w	ip, [r3]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e4a:	4623      	mov	r3, r4
 8007e4c:	9502      	str	r5, [sp, #8]
 8007e4e:	4d1e      	ldr	r5, [pc, #120]	; (8007ec8 <MX_LWIP_Init+0xe4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007e50:	6026      	str	r6, [r4, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007e52:	9501      	str	r5, [sp, #4]
 8007e54:	f004 fc02 	bl	800c65c <netif_add>
  netif_set_default(&gnetif);
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f004 fca9 	bl	800c7b0 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8007e5e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    netif_set_up(&gnetif);
 8007e62:	4638      	mov	r0, r7
  if (netif_is_link_up(&gnetif))
 8007e64:	075b      	lsls	r3, r3, #29
 8007e66:	d41c      	bmi.n	8007ea2 <MX_LWIP_Init+0xbe>
    netif_set_down(&gnetif);
 8007e68:	f004 fcd4 	bl	800c814 <netif_set_down>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007e6c:	4c17      	ldr	r4, [pc, #92]	; (8007ecc <MX_LWIP_Init+0xe8>)
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007e6e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007e72:	4917      	ldr	r1, [pc, #92]	; (8007ed0 <MX_LWIP_Init+0xec>)
  attributes.priority = osPriorityBelowNormal;
 8007e74:	2510      	movs	r5, #16
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007e76:	4812      	ldr	r0, [pc, #72]	; (8007ec0 <MX_LWIP_Init+0xdc>)
 8007e78:	f004 fd3c 	bl	800c8f4 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	2220      	movs	r2, #32
 8007e80:	2100      	movs	r1, #0
 8007e82:	f00b fd23 	bl	80138cc <memset>
  attributes.name = "EthLink";
 8007e86:	1f23      	subs	r3, r4, #4
 8007e88:	4912      	ldr	r1, [pc, #72]	; (8007ed4 <MX_LWIP_Init+0xf0>)
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4812      	ldr	r0, [pc, #72]	; (8007ed8 <MX_LWIP_Init+0xf4>)
  attributes.name = "EthLink";
 8007e8e:	f844 1c04 	str.w	r1, [r4, #-4]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007e92:	490b      	ldr	r1, [pc, #44]	; (8007ec0 <MX_LWIP_Init+0xdc>)
  attributes.priority = osPriorityBelowNormal;
 8007e94:	e9c4 6504 	strd	r6, r5, [r4, #16]
}
 8007e98:	b004      	add	sp, #16
 8007e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007e9e:	f001 b9c3 	b.w	8009228 <osThreadNew>
    netif_set_up(&gnetif);
 8007ea2:	f004 fc8b 	bl	800c7bc <netif_set_up>
 8007ea6:	e7e1      	b.n	8007e6c <MX_LWIP_Init+0x88>
 8007ea8:	24014718 	.word	0x24014718
 8007eac:	2401471c 	.word	0x2401471c
 8007eb0:	24014680 	.word	0x24014680
 8007eb4:	24014714 	.word	0x24014714
 8007eb8:	24014720 	.word	0x24014720
 8007ebc:	0800b88d 	.word	0x0800b88d
 8007ec0:	240146a8 	.word	0x240146a8
 8007ec4:	24014724 	.word	0x24014724
 8007ec8:	080081c1 	.word	0x080081c1
 8007ecc:	24014688 	.word	0x24014688
 8007ed0:	08007de1 	.word	0x08007de1
 8007ed4:	08014830 	.word	0x08014830
 8007ed8:	080083a1 	.word	0x080083a1

08007edc <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8007edc:	2000      	movs	r0, #0
 8007ede:	4770      	bx	lr

08007ee0 <low_level_output>:
{
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	b08c      	sub	sp, #48	; 0x30
 8007ee4:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007ee6:	2230      	movs	r2, #48	; 0x30
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4668      	mov	r0, sp
 8007eec:	f00b fcee 	bl	80138cc <memset>
  for(q = p; q != NULL; q = q->next)
 8007ef0:	b1fc      	cbz	r4, 8007f32 <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 8007ef2:	4623      	mov	r3, r4
    Txbuffer[i].buffer = q->payload;
 8007ef4:	6862      	ldr	r2, [r4, #4]
    Txbuffer[i].len = q->len;
 8007ef6:	8960      	ldrh	r0, [r4, #10]
 8007ef8:	4669      	mov	r1, sp
    if(q->next == NULL)
 8007efa:	681b      	ldr	r3, [r3, #0]
    Txbuffer[i].buffer = q->payload;
 8007efc:	9200      	str	r2, [sp, #0]
  uint32_t i=0;
 8007efe:	2200      	movs	r2, #0
    Txbuffer[i].len = q->len;
 8007f00:	9001      	str	r0, [sp, #4]
      Txbuffer[i-1].next = &Txbuffer[i];
 8007f02:	f101 000c 	add.w	r0, r1, #12
    if(q->next == NULL)
 8007f06:	b16b      	cbz	r3, 8007f24 <low_level_output+0x44>
    i++;
 8007f08:	3201      	adds	r2, #1
    if(i >= ETH_TX_DESC_CNT)
 8007f0a:	2a04      	cmp	r2, #4
 8007f0c:	d01e      	beq.n	8007f4c <low_level_output+0x6c>
    Txbuffer[i].buffer = q->payload;
 8007f0e:	685e      	ldr	r6, [r3, #4]
    Txbuffer[i].len = q->len;
 8007f10:	895d      	ldrh	r5, [r3, #10]
      Txbuffer[i-1].next = &Txbuffer[i];
 8007f12:	6088      	str	r0, [r1, #8]
    if(q->next == NULL)
 8007f14:	681b      	ldr	r3, [r3, #0]
    Txbuffer[i].len = q->len;
 8007f16:	e9c1 6503 	strd	r6, r5, [r1, #12]
 8007f1a:	4601      	mov	r1, r0
      Txbuffer[i-1].next = &Txbuffer[i];
 8007f1c:	f101 000c 	add.w	r0, r1, #12
    if(q->next == NULL)
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f1      	bne.n	8007f08 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 8007f24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007f28:	a90c      	add	r1, sp, #48	; 0x30
 8007f2a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f2e:	f842 3c28 	str.w	r3, [r2, #-40]
  TxConfig.Length =  p->tot_len;
 8007f32:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <low_level_output+0x74>)
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007f34:	2214      	movs	r2, #20
  TxConfig.Length =  p->tot_len;
 8007f36:	8924      	ldrh	r4, [r4, #8]
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4807      	ldr	r0, [pc, #28]	; (8007f58 <low_level_output+0x78>)
  TxConfig.Length =  p->tot_len;
 8007f3c:	605c      	str	r4, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007f3e:	f8c3 d008 	str.w	sp, [r3, #8]
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007f42:	f7fa ff53 	bl	8002dec <HAL_ETH_Transmit>
  return errval;
 8007f46:	2000      	movs	r0, #0
}
 8007f48:	b00c      	add	sp, #48	; 0x30
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8007f4c:	f06f 000b 	mvn.w	r0, #11
}
 8007f50:	b00c      	add	sp, #48	; 0x30
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	2401489c 	.word	0x2401489c
 8007f58:	24014814 	.word	0x24014814

08007f5c <pbuf_free_custom>:
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007f5c:	4601      	mov	r1, r0
 8007f5e:	4801      	ldr	r0, [pc, #4]	; (8007f64 <pbuf_free_custom+0x8>)
 8007f60:	f004 babe 	b.w	800c4e0 <memp_free_pool>
 8007f64:	080148ac 	.word	0x080148ac

08007f68 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8007f68:	f7f9 bb84 	b.w	8001674 <HAL_GetTick>

08007f6c <ETH_PHY_IO_Init>:
{
 8007f6c:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8007f6e:	4802      	ldr	r0, [pc, #8]	; (8007f78 <ETH_PHY_IO_Init+0xc>)
 8007f70:	f7fb fa0a 	bl	8003388 <HAL_ETH_SetMDIOClockRange>
}
 8007f74:	2000      	movs	r0, #0
 8007f76:	bd08      	pop	{r3, pc}
 8007f78:	24014814 	.word	0x24014814

08007f7c <ETH_PHY_IO_ReadReg>:
{
 8007f7c:	b508      	push	{r3, lr}
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007f7e:	4613      	mov	r3, r2
 8007f80:	460a      	mov	r2, r1
 8007f82:	4601      	mov	r1, r0
 8007f84:	4803      	ldr	r0, [pc, #12]	; (8007f94 <ETH_PHY_IO_ReadReg+0x18>)
 8007f86:	f7fb f8c1 	bl	800310c <HAL_ETH_ReadPHYRegister>
 8007f8a:	3000      	adds	r0, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	2001      	movne	r0, #1
}
 8007f90:	4240      	negs	r0, r0
 8007f92:	bd08      	pop	{r3, pc}
 8007f94:	24014814 	.word	0x24014814

08007f98 <ETH_PHY_IO_WriteReg>:
{
 8007f98:	b508      	push	{r3, lr}
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	460a      	mov	r2, r1
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4803      	ldr	r0, [pc, #12]	; (8007fb0 <ETH_PHY_IO_WriteReg+0x18>)
 8007fa2:	f7fb f8e1 	bl	8003168 <HAL_ETH_WritePHYRegister>
 8007fa6:	3000      	adds	r0, #0
 8007fa8:	bf18      	it	ne
 8007faa:	2001      	movne	r0, #1
}
 8007fac:	4240      	negs	r0, r0
 8007fae:	bd08      	pop	{r3, pc}
 8007fb0:	24014814 	.word	0x24014814

08007fb4 <ethernetif_input>:
{
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	b091      	sub	sp, #68	; 0x44
 8007fba:	4606      	mov	r6, r0
 8007fbc:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8008084 <ethernetif_input+0xd0>
 8007fc0:	f10d 0a1c 	add.w	sl, sp, #28
 8007fc4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8007fc8:	4d2b      	ldr	r5, [pc, #172]	; (8008078 <ethernetif_input+0xc4>)
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007fca:	4c2c      	ldr	r4, [pc, #176]	; (800807c <ethernetif_input+0xc8>)
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fd0:	f8db 0000 	ldr.w	r0, [fp]
 8007fd4:	f001 fa4e 	bl	8009474 <osSemaphoreAcquire>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d1f7      	bne.n	8007fcc <ethernetif_input+0x18>
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007fdc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008088 <ethernetif_input+0xd4>
  uint32_t framelength = 0, i = 0;
 8007fe0:	2300      	movs	r3, #0
  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007fe2:	2230      	movs	r2, #48	; 0x30
 8007fe4:	a804      	add	r0, sp, #16
 8007fe6:	4619      	mov	r1, r3
  uint32_t framelength = 0, i = 0;
 8007fe8:	9303      	str	r3, [sp, #12]
  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007fea:	f00b fc6f 	bl	80138cc <memset>
    RxBuff[i].next=&RxBuff[i+1];
 8007fee:	ab0d      	add	r3, sp, #52	; 0x34
  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8007ff0:	a904      	add	r1, sp, #16
 8007ff2:	4628      	mov	r0, r5
    RxBuff[i].next=&RxBuff[i+1];
 8007ff4:	f8cd a018 	str.w	sl, [sp, #24]
 8007ff8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ffc:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8007ffe:	f7fa ffd3 	bl	8002fa8 <HAL_ETH_GetRxDataBuffer>
 8008002:	2800      	cmp	r0, #0
 8008004:	d1e2      	bne.n	8007fcc <ethernetif_input+0x18>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008006:	a903      	add	r1, sp, #12
 8008008:	4628      	mov	r0, r5
 800800a:	f7fb f81d 	bl	8003048 <HAL_ETH_GetRxDataLength>
    HAL_ETH_BuildRxDescriptors(&heth);
 800800e:	4628      	mov	r0, r5
 8008010:	f7fb f836 	bl	8003080 <HAL_ETH_BuildRxDescriptors>
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8008014:	9903      	ldr	r1, [sp, #12]
    if ( dsize > 0 ) { 
 8008016:	2900      	cmp	r1, #0
 8008018:	dd0f      	ble.n	800803a <ethernetif_input+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800801a:	9a04      	ldr	r2, [sp, #16]
 800801c:	f002 031f 	and.w	r3, r2, #31
 8008020:	440b      	add	r3, r1
  __ASM volatile ("dsb 0xF":::"memory");
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	3b20      	subs	r3, #32
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008028:	f8c4 225c 	str.w	r2, [r4, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800802c:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800802e:	2b00      	cmp	r3, #0
 8008030:	dcf9      	bgt.n	8008026 <ethernetif_input+0x72>
 8008032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008036:	f3bf 8f6f 	isb	sy
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800803a:	4640      	mov	r0, r8
 800803c:	f004 fa1a 	bl	800c474 <memp_malloc_pool>
    if(custom_pbuf != NULL)
 8008040:	2800      	cmp	r0, #0
 8008042:	d0c3      	beq.n	8007fcc <ethernetif_input+0x18>
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8008044:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8008048:	4603      	mov	r3, r0
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800804a:	490d      	ldr	r1, [pc, #52]	; (8008080 <ethernetif_input+0xcc>)
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800804c:	2241      	movs	r2, #65	; 0x41
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800804e:	6101      	str	r1, [r0, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8008050:	4639      	mov	r1, r7
 8008052:	9701      	str	r7, [sp, #4]
 8008054:	2000      	movs	r0, #0
 8008056:	9f04      	ldr	r7, [sp, #16]
 8008058:	9700      	str	r7, [sp, #0]
 800805a:	f004 fcdd 	bl	800ca18 <pbuf_alloced_custom>
        if (p != NULL)
 800805e:	4607      	mov	r7, r0
 8008060:	2800      	cmp	r0, #0
 8008062:	d0b3      	beq.n	8007fcc <ethernetif_input+0x18>
          if (netif->input( p, netif) != ERR_OK )
 8008064:	6933      	ldr	r3, [r6, #16]
 8008066:	4631      	mov	r1, r6
 8008068:	4798      	blx	r3
 800806a:	2800      	cmp	r0, #0
 800806c:	d0b8      	beq.n	8007fe0 <ethernetif_input+0x2c>
            pbuf_free(p);
 800806e:	4638      	mov	r0, r7
 8008070:	f004 fd2e 	bl	800cad0 <pbuf_free>
 8008074:	e7b2      	b.n	8007fdc <ethernetif_input+0x28>
 8008076:	bf00      	nop
 8008078:	24014814 	.word	0x24014814
 800807c:	e000ed00 	.word	0xe000ed00
 8008080:	08007f5d 	.word	0x08007f5d
 8008084:	2400022c 	.word	0x2400022c
 8008088:	080148ac 	.word	0x080148ac

0800808c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800808c:	6802      	ldr	r2, [r0, #0]
 800808e:	4b46      	ldr	r3, [pc, #280]	; (80081a8 <HAL_ETH_MspInit+0x11c>)
{
 8008090:	b570      	push	{r4, r5, r6, lr}
  if(ethHandle->Instance==ETH)
 8008092:	429a      	cmp	r2, r3
{
 8008094:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008096:	f04f 0400 	mov.w	r4, #0
 800809a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800809e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80080a2:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80080a4:	d001      	beq.n	80080aa <HAL_ETH_MspInit+0x1e>
}
 80080a6:	b00c      	add	sp, #48	; 0x30
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80080aa:	4b40      	ldr	r3, [pc, #256]	; (80081ac <HAL_ETH_MspInit+0x120>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ac:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80080ae:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080b0:	250b      	movs	r5, #11
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80080b2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080b6:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80080b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80080c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80080c4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80080c8:	9200      	str	r2, [sp, #0]
 80080ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80080cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80080d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80080d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80080d8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80080dc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80080e0:	9201      	str	r2, [sp, #4]
 80080e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80080e4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80080e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80080ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80080f0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80080f4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80080f8:	9202      	str	r2, [sp, #8]
 80080fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008100:	f042 0204 	orr.w	r2, r2, #4
 8008104:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008108:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800810c:	f002 0204 	and.w	r2, r2, #4
 8008110:	9203      	str	r2, [sp, #12]
 8008112:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008114:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008118:	f042 0201 	orr.w	r2, r2, #1
 800811c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008120:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008124:	f002 0201 	and.w	r2, r2, #1
 8008128:	9204      	str	r2, [sp, #16]
 800812a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800812c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008130:	4332      	orrs	r2, r6
 8008132:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008136:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800813a:	4032      	ands	r2, r6
 800813c:	9205      	str	r2, [sp, #20]
 800813e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008140:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008148:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800814c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008150:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008152:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008156:	4816      	ldr	r0, [pc, #88]	; (80081b0 <HAL_ETH_MspInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008158:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800815a:	9306      	str	r3, [sp, #24]
 800815c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800815e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008160:	f7fb fa82 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008164:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008166:	a907      	add	r1, sp, #28
 8008168:	4812      	ldr	r0, [pc, #72]	; (80081b4 <HAL_ETH_MspInit+0x128>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800816a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800816e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008170:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008174:	f7fb fa78 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800817c:	a907      	add	r1, sp, #28
 800817e:	480e      	ldr	r0, [pc, #56]	; (80081b8 <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008180:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008182:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008184:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008186:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800818a:	f7fb fa6d 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800818e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008192:	a907      	add	r1, sp, #28
 8008194:	4809      	ldr	r0, [pc, #36]	; (80081bc <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008196:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008198:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800819a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80081a0:	f7fb fa62 	bl	8003668 <HAL_GPIO_Init>
}
 80081a4:	b00c      	add	sp, #48	; 0x30
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	40028000 	.word	0x40028000
 80081ac:	58024400 	.word	0x58024400
 80081b0:	58020800 	.word	0x58020800
 80081b4:	58020000 	.word	0x58020000
 80081b8:	58020400 	.word	0x58020400
 80081bc:	58021800 	.word	0x58021800

080081c0 <ethernetif_init>:
{
 80081c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80081c4:	4605      	mov	r5, r0
{
 80081c6:	b0a4      	sub	sp, #144	; 0x90
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f000 80b6 	beq.w	800833a <ethernetif_init+0x17a>
  heth.Instance = ETH;
 80081ce:	4e5f      	ldr	r6, [pc, #380]	; (800834c <ethernetif_init+0x18c>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80081d0:	2101      	movs	r1, #1
  heth.Instance = ETH;
 80081d2:	4b5f      	ldr	r3, [pc, #380]	; (8008350 <ethernetif_init+0x190>)
  netif->name[0] = IFNAME0;
 80081d4:	f247 4073 	movw	r0, #29811	; 0x7473
  netif->output = etharp_output;
 80081d8:	4f5e      	ldr	r7, [pc, #376]	; (8008354 <ethernetif_init+0x194>)
  heth.Init.RxBuffLen = 1524;
 80081da:	f240 52f4 	movw	r2, #1524	; 0x5f4
  heth.Instance = ETH;
 80081de:	6033      	str	r3, [r6, #0]
  MACAddr[3] = 0x00;
 80081e0:	f04f 0a00 	mov.w	sl, #0
  heth.Init.TxDesc = DMATxDscrTab;
 80081e4:	4b5c      	ldr	r3, [pc, #368]	; (8008358 <ethernetif_init+0x198>)
  netif->linkoutput = low_level_output;
 80081e6:	4c5d      	ldr	r4, [pc, #372]	; (800835c <ethernetif_init+0x19c>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80081e8:	7231      	strb	r1, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80081ea:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80081ec:	495c      	ldr	r1, [pc, #368]	; (8008360 <ethernetif_init+0x1a0>)
  MACAddr[0] = 0x00;
 80081ee:	4b5d      	ldr	r3, [pc, #372]	; (8008364 <ethernetif_init+0x1a4>)
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80081f0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8008398 <ethernetif_init+0x1d8>
  netif->output = etharp_output;
 80081f4:	616f      	str	r7, [r5, #20]
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80081f6:	4637      	mov	r7, r6
  netif->name[0] = IFNAME0;
 80081f8:	8668      	strh	r0, [r5, #50]	; 0x32
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80081fa:	4630      	mov	r0, r6
  netif->linkoutput = low_level_output;
 80081fc:	61ac      	str	r4, [r5, #24]
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80081fe:	4654      	mov	r4, sl
  heth.Init.RxDesc = DMARxDscrTab;
 8008200:	6131      	str	r1, [r6, #16]
  heth.Init.RxBuffLen = 1524;
 8008202:	6172      	str	r2, [r6, #20]
  MACAddr[0] = 0x00;
 8008204:	9300      	str	r3, [sp, #0]
  heth.Init.MACAddr = &MACAddr[0];
 8008206:	f8c6 d004 	str.w	sp, [r6, #4]
  MACAddr[3] = 0x00;
 800820a:	f8ad a004 	strh.w	sl, [sp, #4]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800820e:	f7fb f8fd 	bl	800340c <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008212:	4651      	mov	r1, sl
 8008214:	2230      	movs	r2, #48	; 0x30
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008216:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008218:	4648      	mov	r0, r9
 800821a:	f00b fb57 	bl	80138cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800821e:	2221      	movs	r2, #33	; 0x21
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008220:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008224:	4850      	ldr	r0, [pc, #320]	; (8008368 <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008226:	f849 2c04 	str.w	r2, [r9, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800822a:	f8c9 3010 	str.w	r3, [r9, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800822e:	f004 f8cf 	bl	800c3d0 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008232:	6873      	ldr	r3, [r6, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008234:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008236:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  netif->mtu = ETH_MAX_PAYLOAD;
 800823a:	f240 51dc 	movw	r1, #1500	; 0x5dc
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800823e:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008242:	7818      	ldrb	r0, [r3, #0]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008244:	f042 020a 	orr.w	r2, r2, #10
 8008248:	4e48      	ldr	r6, [pc, #288]	; (800836c <ethernetif_init+0x1ac>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800824a:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800824e:	7858      	ldrb	r0, [r3, #1]
 8008250:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008254:	7898      	ldrb	r0, [r3, #2]
 8008256:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800825a:	78d8      	ldrb	r0, [r3, #3]
 800825c:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008260:	7918      	ldrb	r0, [r3, #4]
 8008262:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008266:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008268:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800826c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
  netif->mtu = ETH_MAX_PAYLOAD;
 8008270:	8529      	strh	r1, [r5, #40]	; 0x28
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8008272:	4621      	mov	r1, r4
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008274:	3401      	adds	r4, #1
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8008276:	4632      	mov	r2, r6
 8008278:	2300      	movs	r3, #0
 800827a:	4638      	mov	r0, r7
 800827c:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
 8008280:	f7fa fd10 	bl	8002ca4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8008284:	2c04      	cmp	r4, #4
 8008286:	d1f4      	bne.n	8008272 <ethernetif_init+0xb2>
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008288:	2101      	movs	r1, #1
 800828a:	2200      	movs	r2, #0
 800828c:	4608      	mov	r0, r1
 800828e:	f001 f89f 	bl	80093d0 <osSemaphoreNew>
 8008292:	4b37      	ldr	r3, [pc, #220]	; (8008370 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008294:	2220      	movs	r2, #32
 8008296:	2100      	movs	r1, #0
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008298:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800829a:	a803      	add	r0, sp, #12
 800829c:	f00b fb16 	bl	80138cc <memset>
  attributes.name = "EthIf";
 80082a0:	4934      	ldr	r1, [pc, #208]	; (8008374 <ethernetif_init+0x1b4>)
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80082a2:	f44f 70af 	mov.w	r0, #350	; 0x15e
  attributes.priority = osPriorityRealtime;
 80082a6:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 80082a8:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 80082aa:	9102      	str	r1, [sp, #8]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80082ac:	9007      	str	r0, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 80082ae:	4629      	mov	r1, r5
 80082b0:	4831      	ldr	r0, [pc, #196]	; (8008378 <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 80082b2:	9308      	str	r3, [sp, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 80082b4:	f000 ffb8 	bl	8009228 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80082b8:	4930      	ldr	r1, [pc, #192]	; (800837c <ethernetif_init+0x1bc>)
 80082ba:	4831      	ldr	r0, [pc, #196]	; (8008380 <ethernetif_init+0x1c0>)
 80082bc:	f7f9 f8cc 	bl	8001458 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 80082c0:	482f      	ldr	r0, [pc, #188]	; (8008380 <ethernetif_init+0x1c0>)
 80082c2:	f7f9 f8e3 	bl	800148c <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 80082c6:	f1b8 0f00 	cmp.w	r8, #0
 80082ca:	d124      	bne.n	8008316 <ethernetif_init+0x156>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80082cc:	482c      	ldr	r0, [pc, #176]	; (8008380 <ethernetif_init+0x1c0>)
 80082ce:	f7f9 f941 	bl	8001554 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80082d2:	2801      	cmp	r0, #1
 80082d4:	dd2a      	ble.n	800832c <ethernetif_init+0x16c>
 80082d6:	3803      	subs	r0, #3
 80082d8:	2802      	cmp	r0, #2
 80082da:	d822      	bhi.n	8008322 <ethernetif_init+0x162>
 80082dc:	4a29      	ldr	r2, [pc, #164]	; (8008384 <ethernetif_init+0x1c4>)
 80082de:	4b2a      	ldr	r3, [pc, #168]	; (8008388 <ethernetif_init+0x1c8>)
 80082e0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80082e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80082e8:	a90b      	add	r1, sp, #44	; 0x2c
 80082ea:	4818      	ldr	r0, [pc, #96]	; (800834c <ethernetif_init+0x18c>)
 80082ec:	f7fa ff6e 	bl	80031cc <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80082f0:	a90b      	add	r1, sp, #44	; 0x2c
 80082f2:	4816      	ldr	r0, [pc, #88]	; (800834c <ethernetif_init+0x18c>)
    MACConf.Speed = speed;
 80082f4:	e9cd 4610 	strd	r4, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80082f8:	f7fb f838 	bl	800336c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80082fc:	4813      	ldr	r0, [pc, #76]	; (800834c <ethernetif_init+0x18c>)
 80082fe:	f7fa fcef 	bl	8002ce0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008302:	4628      	mov	r0, r5
 8008304:	f004 fa5a 	bl	800c7bc <netif_set_up>
    netif_set_link_up(netif);
 8008308:	4628      	mov	r0, r5
 800830a:	f004 fab5 	bl	800c878 <netif_set_link_up>
}
 800830e:	2000      	movs	r0, #0
 8008310:	b024      	add	sp, #144	; 0x90
 8008312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Error_Handler();
 8008316:	f7f8 fcfd 	bl	8000d14 <Error_Handler>
}
 800831a:	2000      	movs	r0, #0
 800831c:	b024      	add	sp, #144	; 0x90
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      switch (PHYLinkState)
 8008322:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 8008326:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 800832a:	e7dd      	b.n	80082e8 <ethernetif_init+0x128>
      netif_set_link_down(netif);
 800832c:	4628      	mov	r0, r5
 800832e:	f004 fac7 	bl	800c8c0 <netif_set_link_down>
      netif_set_down(netif);
 8008332:	4628      	mov	r0, r5
 8008334:	f004 fa6e 	bl	800c814 <netif_set_down>
 8008338:	e7ef      	b.n	800831a <ethernetif_init+0x15a>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800833a:	4b14      	ldr	r3, [pc, #80]	; (800838c <ethernetif_init+0x1cc>)
 800833c:	f240 2247 	movw	r2, #583	; 0x247
 8008340:	4913      	ldr	r1, [pc, #76]	; (8008390 <ethernetif_init+0x1d0>)
 8008342:	4814      	ldr	r0, [pc, #80]	; (8008394 <ethernetif_init+0x1d4>)
 8008344:	f00b fb72 	bl	8013a2c <iprintf>
 8008348:	e741      	b.n	80081ce <ethernetif_init+0xe>
 800834a:	bf00      	nop
 800834c:	24014814 	.word	0x24014814
 8008350:	40028000 	.word	0x40028000
 8008354:	08011c75 	.word	0x08011c75
 8008358:	30040060 	.word	0x30040060
 800835c:	08007ee1 	.word	0x08007ee1
 8008360:	30040000 	.word	0x30040000
 8008364:	00e18000 	.word	0x00e18000
 8008368:	080148ac 	.word	0x080148ac
 800836c:	30040200 	.word	0x30040200
 8008370:	2400022c 	.word	0x2400022c
 8008374:	080148a4 	.word	0x080148a4
 8008378:	08007fb5 	.word	0x08007fb5
 800837c:	24000010 	.word	0x24000010
 8008380:	240147f4 	.word	0x240147f4
 8008384:	08014838 	.word	0x08014838
 8008388:	08014844 	.word	0x08014844
 800838c:	08014850 	.word	0x08014850
 8008390:	0801486c 	.word	0x0801486c
 8008394:	0801487c 	.word	0x0801487c
 8008398:	240148a0 	.word	0x240148a0

0800839c <sys_now>:
 800839c:	f7f9 b96a 	b.w	8001674 <HAL_GetTick>

080083a0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80083a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80083a4:	2600      	movs	r6, #0
{
 80083a6:	b09b      	sub	sp, #108	; 0x6c
 80083a8:	4604      	mov	r4, r0

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80083aa:	4d29      	ldr	r5, [pc, #164]	; (8008450 <ethernet_link_thread+0xb0>)
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80083ac:	46b0      	mov	r8, r6
 80083ae:	46b1      	mov	r9, r6
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80083b0:	4f28      	ldr	r7, [pc, #160]	; (8008454 <ethernet_link_thread+0xb4>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80083b2:	4628      	mov	r0, r5
 80083b4:	f7f9 f8ce 	bl	8001554 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80083b8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80083bc:	0893      	lsrs	r3, r2, #2
 80083be:	07d9      	lsls	r1, r3, #31
 80083c0:	d533      	bpl.n	800842a <ethernet_link_thread+0x8a>
 80083c2:	2801      	cmp	r0, #1
 80083c4:	dd36      	ble.n	8008434 <ethernet_link_thread+0x94>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80083c6:	0753      	lsls	r3, r2, #29
 80083c8:	d41f      	bmi.n	800840a <ethernet_link_thread+0x6a>
    switch (PHYLinkState)
 80083ca:	3802      	subs	r0, #2
 80083cc:	2803      	cmp	r0, #3
 80083ce:	d83b      	bhi.n	8008448 <ethernet_link_thread+0xa8>
 80083d0:	e8df f000 	tbb	[pc, r0]
 80083d4:	1f222702 	.word	0x1f222702
      duplex = ETH_FULLDUPLEX_MODE;
 80083d8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
      speed = ETH_SPEED_100M;
 80083dc:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80083e0:	a901      	add	r1, sp, #4
 80083e2:	4638      	mov	r0, r7
 80083e4:	f7fa fef2 	bl	80031cc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
      MACConf.Speed = speed;
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80083e8:	a901      	add	r1, sp, #4
 80083ea:	4638      	mov	r0, r7

      HAL_ETH_Start_IT(&heth);
      netif_set_up(netif);
      netif_set_link_up(netif);
 80083ec:	f04f 0901 	mov.w	r9, #1
      MACConf.Speed = speed;
 80083f0:	e9cd 8606 	strd	r8, r6, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80083f4:	f7fa ffba 	bl	800336c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7fa fc71 	bl	8002ce0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80083fe:	4620      	mov	r0, r4
 8008400:	f004 f9dc 	bl	800c7bc <netif_set_up>
      netif_set_link_up(netif);
 8008404:	4620      	mov	r0, r4
 8008406:	f004 fa37 	bl	800c878 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800840a:	2064      	movs	r0, #100	; 0x64
 800840c:	f000 ff50 	bl	80092b0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008410:	e7cf      	b.n	80083b2 <ethernet_link_thread+0x12>
      duplex = ETH_HALFDUPLEX_MODE;
 8008412:	2600      	movs	r6, #0
      speed = ETH_SPEED_10M;
 8008414:	46b0      	mov	r8, r6
 8008416:	e7e3      	b.n	80083e0 <ethernet_link_thread+0x40>
      duplex = ETH_FULLDUPLEX_MODE;
 8008418:	f44f 5600 	mov.w	r6, #8192	; 0x2000
      speed = ETH_SPEED_10M;
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	e7de      	b.n	80083e0 <ethernet_link_thread+0x40>
      duplex = ETH_HALFDUPLEX_MODE;
 8008422:	2600      	movs	r6, #0
      speed = ETH_SPEED_100M;
 8008424:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 8008428:	e7da      	b.n	80083e0 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800842a:	07da      	lsls	r2, r3, #31
 800842c:	d4ed      	bmi.n	800840a <ethernet_link_thread+0x6a>
 800842e:	2801      	cmp	r0, #1
 8008430:	ddeb      	ble.n	800840a <ethernet_link_thread+0x6a>
 8008432:	e7ca      	b.n	80083ca <ethernet_link_thread+0x2a>
    HAL_ETH_Stop_IT(&heth);
 8008434:	4638      	mov	r0, r7
 8008436:	f7fa fc99 	bl	8002d6c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800843a:	4620      	mov	r0, r4
 800843c:	f004 f9ea 	bl	800c814 <netif_set_down>
    netif_set_link_down(netif);
 8008440:	4620      	mov	r0, r4
 8008442:	f004 fa3d 	bl	800c8c0 <netif_set_link_down>
 8008446:	e7e0      	b.n	800840a <ethernet_link_thread+0x6a>
    if(linkchanged)
 8008448:	f1b9 0f00 	cmp.w	r9, #0
 800844c:	d0dd      	beq.n	800840a <ethernet_link_thread+0x6a>
 800844e:	e7c7      	b.n	80083e0 <ethernet_link_thread+0x40>
 8008450:	240147f4 	.word	0x240147f4
 8008454:	24014814 	.word	0x24014814

08008458 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8008458:	b508      	push	{r3, lr}
   /**
  */
  mbedtls_ssl_init(&ssl);
 800845a:	4808      	ldr	r0, [pc, #32]	; (800847c <MX_MBEDTLS_Init+0x24>)
 800845c:	f00a ff74 	bl	8013348 <mbedtls_ssl_init>
  mbedtls_ssl_config_init(&conf);
 8008460:	4807      	ldr	r0, [pc, #28]	; (8008480 <MX_MBEDTLS_Init+0x28>)
 8008462:	f00a ff77 	bl	8013354 <mbedtls_ssl_config_init>
  mbedtls_x509_crt_init(&cert);
 8008466:	4807      	ldr	r0, [pc, #28]	; (8008484 <MX_MBEDTLS_Init+0x2c>)
 8008468:	f00a ff78 	bl	801335c <mbedtls_x509_crt_init>
  mbedtls_ctr_drbg_init(&ctr_drbg);
 800846c:	4806      	ldr	r0, [pc, #24]	; (8008488 <MX_MBEDTLS_Init+0x30>)
 800846e:	f00a ff3b 	bl	80132e8 <mbedtls_ctr_drbg_init>
  mbedtls_entropy_init( &entropy );
 8008472:	4806      	ldr	r0, [pc, #24]	; (800848c <MX_MBEDTLS_Init+0x34>)
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8008474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mbedtls_entropy_init( &entropy );
 8008478:	f00a bf3c 	b.w	80132f4 <mbedtls_entropy_init>
 800847c:	24014d50 	.word	0x24014d50
 8008480:	24014a04 	.word	0x24014a04
 8008484:	240148d0 	.word	0x240148d0
 8008488:	24014e68 	.word	0x24014e68
 800848c:	24014ad8 	.word	0x24014ad8

08008490 <mbedtls_hardware_poll>:
int mbedtls_hardware_poll( void *Data, unsigned char *Output, size_t Len, size_t *oLen )
{
  uint32_t index;
  uint32_t randomValue;

  for (index = 0; index < Len/4; index++)
 8008490:	0892      	lsrs	r2, r2, #2
 8008492:	d023      	beq.n	80084dc <mbedtls_hardware_poll+0x4c>
{
 8008494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008498:	461f      	mov	r7, r3
 800849a:	b082      	sub	sp, #8
 800849c:	460c      	mov	r4, r1
  {
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 800849e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80084e0 <mbedtls_hardware_poll+0x50>
 80084a2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80084a6:	e009      	b.n	80084bc <mbedtls_hardware_poll+0x2c>
    {
      *oLen += 4;
 80084a8:	683d      	ldr	r5, [r7, #0]
      memset(&(Output[index * 4]), (int)randomValue, 4);
 80084aa:	4620      	mov	r0, r4
 80084ac:	3404      	adds	r4, #4
 80084ae:	9901      	ldr	r1, [sp, #4]
      *oLen += 4;
 80084b0:	4415      	add	r5, r2
 80084b2:	603d      	str	r5, [r7, #0]
      memset(&(Output[index * 4]), (int)randomValue, 4);
 80084b4:	f00b fa0a 	bl	80138cc <memset>
  for (index = 0; index < Len/4; index++)
 80084b8:	42b4      	cmp	r4, r6
 80084ba:	d00b      	beq.n	80084d4 <mbedtls_hardware_poll+0x44>
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 80084bc:	a901      	add	r1, sp, #4
 80084be:	4640      	mov	r0, r8
 80084c0:	f7fd fdd2 	bl	8006068 <HAL_RNG_GenerateRandomNumber>
      memset(&(Output[index * 4]), (int)randomValue, 4);
 80084c4:	2204      	movs	r2, #4
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d0ee      	beq.n	80084a8 <mbedtls_hardware_poll+0x18>
 80084ca:	3404      	adds	r4, #4
    }
    else
    {
      Error_Handler();
 80084cc:	f7f8 fc22 	bl	8000d14 <Error_Handler>
  for (index = 0; index < Len/4; index++)
 80084d0:	42b4      	cmp	r4, r6
 80084d2:	d1f3      	bne.n	80084bc <mbedtls_hardware_poll+0x2c>
    }
  }

  return 0;
}
 80084d4:	2000      	movs	r0, #0
 80084d6:	b002      	add	sp, #8
 80084d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084dc:	2000      	movs	r0, #0
 80084de:	4770      	bx	lr
 80084e0:	2401448c 	.word	0x2401448c

080084e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084e4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084e6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80084ea:	b194      	cbz	r4, 8008512 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084ec:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80084f0:	b16b      	cbz	r3, 800850e <USBD_CDC_EP0_RxReady+0x2a>
 80084f2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80084f6:	28ff      	cmp	r0, #255	; 0xff
 80084f8:	d009      	beq.n	800850e <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	4621      	mov	r1, r4
 80084fe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008502:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008504:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 8008506:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 8008508:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800850c:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800850e:	2000      	movs	r0, #0
}
 8008510:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8008512:	2003      	movs	r0, #3
}
 8008514:	bd10      	pop	{r4, pc}
 8008516:	bf00      	nop

08008518 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008518:	2343      	movs	r3, #67	; 0x43
 800851a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800851c:	4800      	ldr	r0, [pc, #0]	; (8008520 <USBD_CDC_GetFSCfgDesc+0x8>)
 800851e:	4770      	bx	lr
 8008520:	2400005c 	.word	0x2400005c

08008524 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008524:	2343      	movs	r3, #67	; 0x43
 8008526:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8008528:	4800      	ldr	r0, [pc, #0]	; (800852c <USBD_CDC_GetHSCfgDesc+0x8>)
 800852a:	4770      	bx	lr
 800852c:	240000a0 	.word	0x240000a0

08008530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008530:	2343      	movs	r3, #67	; 0x43
 8008532:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008534:	4800      	ldr	r0, [pc, #0]	; (8008538 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008536:	4770      	bx	lr
 8008538:	240000f0 	.word	0x240000f0

0800853c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800853c:	230a      	movs	r3, #10
 800853e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8008540:	4800      	ldr	r0, [pc, #0]	; (8008544 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008542:	4770      	bx	lr
 8008544:	240000e4 	.word	0x240000e4

08008548 <USBD_CDC_DataOut>:
{
 8008548:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800854a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800854e:	b174      	cbz	r4, 800856e <USBD_CDC_DataOut+0x26>
 8008550:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008552:	f00b f96b 	bl	801382c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008556:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800855a:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800855e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8008568:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800856a:	2000      	movs	r0, #0
}
 800856c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800856e:	2003      	movs	r0, #3
}
 8008570:	bd38      	pop	{r3, r4, r5, pc}
 8008572:	bf00      	nop

08008574 <USBD_CDC_DataIn>:
{
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8008576:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800857a:	b355      	cbz	r5, 80085d2 <USBD_CDC_DataIn+0x5e>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800857c:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8008580:	4603      	mov	r3, r0
 8008582:	460a      	mov	r2, r1
 8008584:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008588:	69b7      	ldr	r7, [r6, #24]
 800858a:	b96f      	cbnz	r7, 80085a8 <USBD_CDC_DataIn+0x34>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800858c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8008590:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008592:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8008594:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008598:	b1eb      	cbz	r3, 80085d6 <USBD_CDC_DataIn+0x62>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800859a:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800859e:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80085a2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80085a4:	4620      	mov	r0, r4
}
 80085a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085a8:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80085ac:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80085b0:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80085b4:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80085b8:	fbb7 f4fc 	udiv	r4, r7, ip
 80085bc:	fb0c 7414 	mls	r4, ip, r4, r7
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80085c0:	2c00      	cmp	r4, #0
 80085c2:	d1e3      	bne.n	800858c <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 80085c4:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085c6:	4623      	mov	r3, r4
 80085c8:	4622      	mov	r2, r4
 80085ca:	f00b f913 	bl	80137f4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80085ce:	4620      	mov	r0, r4
}
 80085d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80085d2:	2003      	movs	r0, #3
}
 80085d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 80085d6:	4618      	mov	r0, r3
}
 80085d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085da:	bf00      	nop

080085dc <USBD_CDC_Setup>:
{
 80085dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 80085de:	2600      	movs	r6, #0
{
 80085e0:	b085      	sub	sp, #20
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085e2:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80085e6:	f88d 600d 	strb.w	r6, [sp, #13]
  uint16_t status_info = 0U;
 80085ea:	f8ad 600e 	strh.w	r6, [sp, #14]
  if (hcdc == NULL)
 80085ee:	2f00      	cmp	r7, #0
 80085f0:	d050      	beq.n	8008694 <USBD_CDC_Setup+0xb8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f2:	780a      	ldrb	r2, [r1, #0]
 80085f4:	4603      	mov	r3, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	f012 0560 	ands.w	r5, r2, #96	; 0x60
 80085fc:	d01a      	beq.n	8008634 <USBD_CDC_Setup+0x58>
 80085fe:	2d20      	cmp	r5, #32
 8008600:	d111      	bne.n	8008626 <USBD_CDC_Setup+0x4a>
      if (req->wLength != 0U)
 8008602:	88cd      	ldrh	r5, [r1, #6]
 8008604:	f891 c001 	ldrb.w	ip, [r1, #1]
 8008608:	2d00      	cmp	r5, #0
 800860a:	d14d      	bne.n	80086a8 <USBD_CDC_Setup+0xcc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800860c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8008610:	462a      	mov	r2, r5
 8008612:	4660      	mov	r0, ip
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8008618:	4628      	mov	r0, r5
}
 800861a:	b005      	add	sp, #20
 800861c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008622:	2a03      	cmp	r2, #3
 8008624:	d039      	beq.n	800869a <USBD_CDC_Setup+0xbe>
          USBD_CtlError(pdev, req);
 8008626:	4618      	mov	r0, r3
 8008628:	4621      	mov	r1, r4
 800862a:	f000 fd43 	bl	80090b4 <USBD_CtlError>
          ret = USBD_FAIL;
 800862e:	2003      	movs	r0, #3
}
 8008630:	b005      	add	sp, #20
 8008632:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8008634:	784a      	ldrb	r2, [r1, #1]
 8008636:	2a0b      	cmp	r2, #11
 8008638:	d8f5      	bhi.n	8008626 <USBD_CDC_Setup+0x4a>
 800863a:	a101      	add	r1, pc, #4	; (adr r1, 8008640 <USBD_CDC_Setup+0x64>)
 800863c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008640:	0800861f 	.word	0x0800861f
 8008644:	08008679 	.word	0x08008679
 8008648:	08008627 	.word	0x08008627
 800864c:	08008627 	.word	0x08008627
 8008650:	08008627 	.word	0x08008627
 8008654:	08008627 	.word	0x08008627
 8008658:	08008627 	.word	0x08008627
 800865c:	08008627 	.word	0x08008627
 8008660:	08008627 	.word	0x08008627
 8008664:	08008627 	.word	0x08008627
 8008668:	0800867f 	.word	0x0800867f
 800866c:	08008671 	.word	0x08008671
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008670:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008674:	2a03      	cmp	r2, #3
 8008676:	d1d6      	bne.n	8008626 <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 8008678:	2000      	movs	r0, #0
}
 800867a:	b005      	add	sp, #20
 800867c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008682:	2a03      	cmp	r2, #3
 8008684:	d1cf      	bne.n	8008626 <USBD_CDC_Setup+0x4a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008686:	2201      	movs	r2, #1
 8008688:	f10d 010d 	add.w	r1, sp, #13
 800868c:	f000 fd44 	bl	8009118 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008690:	2000      	movs	r0, #0
 8008692:	e7cd      	b.n	8008630 <USBD_CDC_Setup+0x54>
    return (uint8_t)USBD_FAIL;
 8008694:	2003      	movs	r0, #3
}
 8008696:	b005      	add	sp, #20
 8008698:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800869a:	2202      	movs	r2, #2
 800869c:	f10d 010e 	add.w	r1, sp, #14
 80086a0:	f000 fd3a 	bl	8009118 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7c3      	b.n	8008630 <USBD_CDC_Setup+0x54>
        if ((req->bmRequest & 0x80U) != 0U)
 80086a8:	0612      	lsls	r2, r2, #24
 80086aa:	d512      	bpl.n	80086d2 <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086ac:	462a      	mov	r2, r5
 80086ae:	f8d3 52c0 	ldr.w	r5, [r3, #704]	; 0x2c0
 80086b2:	4660      	mov	r0, ip
 80086b4:	4639      	mov	r1, r7
 80086b6:	68ad      	ldr	r5, [r5, #8]
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	47a8      	blx	r5
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086bc:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086be:	4639      	mov	r1, r7
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	2a07      	cmp	r2, #7
 80086c4:	4618      	mov	r0, r3
 80086c6:	bf28      	it	cs
 80086c8:	2207      	movcs	r2, #7
 80086ca:	f000 fd25 	bl	8009118 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80086ce:	4630      	mov	r0, r6
 80086d0:	e7ae      	b.n	8008630 <USBD_CDC_Setup+0x54>
          hcdc->CmdOpCode = req->bRequest;
 80086d2:	f887 c200 	strb.w	ip, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086d6:	462a      	mov	r2, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 80086d8:	f887 5201 	strb.w	r5, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086dc:	4639      	mov	r1, r7
 80086de:	f000 fd31 	bl	8009144 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80086e2:	4630      	mov	r0, r6
 80086e4:	e7a4      	b.n	8008630 <USBD_CDC_Setup+0x54>
 80086e6:	bf00      	nop

080086e8 <USBD_CDC_DeInit>:
{
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80086ec:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80086ee:	2181      	movs	r1, #129	; 0x81
 80086f0:	f00b f834 	bl	801375c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80086f4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80086f6:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80086f8:	4620      	mov	r0, r4
 80086fa:	f00b f82f 	bl	801375c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80086fe:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008702:	4620      	mov	r0, r4
 8008704:	2182      	movs	r1, #130	; 0x82
 8008706:	f00b f829 	bl	801375c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800870a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800870e:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8008710:	b14b      	cbz	r3, 8008726 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008712:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800871a:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800871e:	f00b f88d 	bl	801383c <USBD_static_free>
    pdev->pClassData = NULL;
 8008722:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8008726:	2000      	movs	r0, #0
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop

0800872c <USBD_CDC_Init>:
{
 800872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008732:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008736:	f00b f87d 	bl	8013834 <USBD_static_malloc>
  if (hcdc == NULL)
 800873a:	4605      	mov	r5, r0
 800873c:	2800      	cmp	r0, #0
 800873e:	d04a      	beq.n	80087d6 <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008740:	7c23      	ldrb	r3, [r4, #16]
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008742:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 8008744:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008748:	b393      	cbz	r3, 80087b0 <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800874a:	2340      	movs	r3, #64	; 0x40
 800874c:	2181      	movs	r1, #129	; 0x81
 800874e:	2202      	movs	r2, #2
 8008750:	4620      	mov	r0, r4
 8008752:	f00a fff1 	bl	8013738 <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008756:	4631      	mov	r1, r6
 8008758:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800875a:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800875c:	2202      	movs	r2, #2
 800875e:	4620      	mov	r0, r4
 8008760:	f00a ffea 	bl	8013738 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008764:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008766:	2203      	movs	r2, #3
 8008768:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800876a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800876e:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008770:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008774:	2308      	movs	r3, #8
 8008776:	f00a ffdf 	bl	8013738 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800877a:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800877c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8008780:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008782:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800878a:	f894 8010 	ldrb.w	r8, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800878e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8008792:	4639      	mov	r1, r7
  hcdc->TxState = 0U;
 8008794:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008798:	4620      	mov	r0, r4
  hcdc->RxState = 0U;
 800879a:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	d011      	beq.n	80087c8 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	f00b f833 	bl	8013810 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80087aa:	4630      	mov	r0, r6
}
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b4:	2181      	movs	r1, #129	; 0x81
 80087b6:	2202      	movs	r2, #2
 80087b8:	4620      	mov	r0, r4
 80087ba:	f00a ffbd 	bl	8013738 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087be:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087c0:	4631      	mov	r1, r6
 80087c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c6:	e7c9      	b.n	800875c <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087cc:	f00b f820 	bl	8013810 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80087d0:	4640      	mov	r0, r8
}
 80087d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 80087d6:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80087da:	2002      	movs	r0, #2
}
 80087dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080087e0 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80087e0:	b119      	cbz	r1, 80087ea <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80087e2:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087e6:	2000      	movs	r0, #0
 80087e8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80087ea:	2003      	movs	r0, #3
}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop

080087f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087f0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80087f4:	b12b      	cbz	r3, 8008802 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80087f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 80087fa:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 80087fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 8008800:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008802:	2003      	movs	r0, #3
}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop

08008808 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008808:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800880c:	b11b      	cbz	r3, 8008816 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800880e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008812:	2000      	movs	r0, #0
 8008814:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008816:	2003      	movs	r0, #3
}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800881c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8008820:	b18a      	cbz	r2, 8008846 <USBD_CDC_ReceivePacket+0x2a>
 8008822:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 8008826:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008828:	7c04      	ldrb	r4, [r0, #16]
 800882a:	b12c      	cbz	r4, 8008838 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800882c:	2340      	movs	r3, #64	; 0x40
 800882e:	2101      	movs	r1, #1
 8008830:	f00a ffee 	bl	8013810 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008834:	2000      	movs	r0, #0
}
 8008836:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800883c:	2101      	movs	r1, #1
 800883e:	f00a ffe7 	bl	8013810 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8008842:	4620      	mov	r0, r4
}
 8008844:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8008846:	2003      	movs	r0, #3
}
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop

0800884c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800884c:	4603      	mov	r3, r0
 800884e:	b180      	cbz	r0, 8008872 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008850:	2000      	movs	r0, #0
 8008852:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008856:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800885a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800885e:	b109      	cbz	r1, 8008864 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8008860:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008864:	2101      	movs	r1, #1
  pdev->id = id;
 8008866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008868:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 800886a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 800886e:	f00a bf21 	b.w	80136b4 <USBD_LL_Init>

  return ret;
}
 8008872:	2003      	movs	r0, #3
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop

08008878 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008878:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800887a:	2400      	movs	r4, #0
{
 800887c:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800887e:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8008882:	b161      	cbz	r1, 800889e <USBD_RegisterClass+0x26>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008884:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8008886:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800888a:	b163      	cbz	r3, 80088a6 <USBD_RegisterClass+0x2e>
 800888c:	4605      	mov	r5, r0
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800888e:	f10d 0006 	add.w	r0, sp, #6
 8008892:	4798      	blx	r3
 8008894:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
}
 8008898:	4620      	mov	r0, r4
 800889a:	b003      	add	sp, #12
 800889c:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800889e:	2403      	movs	r4, #3
}
 80088a0:	4620      	mov	r0, r4
 80088a2:	b003      	add	sp, #12
 80088a4:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 80088a6:	461c      	mov	r4, r3
 80088a8:	e7f6      	b.n	8008898 <USBD_RegisterClass+0x20>
 80088aa:	bf00      	nop

080088ac <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088ac:	f00a bf36 	b.w	801371c <USBD_LL_Start>

080088b0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80088b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80088b4:	b10b      	cbz	r3, 80088ba <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4718      	bx	r3
  }

  return ret;
}
 80088ba:	2003      	movs	r0, #3
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088c0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80088c6:	b10b      	cbz	r3, 80088cc <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	4798      	blx	r3
  }

  return USBD_OK;
}
 80088cc:	2000      	movs	r0, #0
 80088ce:	bd08      	pop	{r3, pc}

080088d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088d0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088d2:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80088d6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 fbd7 	bl	800908c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80088de:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80088e2:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 80088e4:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
  switch (pdev->request.bmRequest & 0x1FU)
 80088e8:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 80088ec:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80088f0:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80088f2:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80088f6:	d015      	beq.n	8008924 <USBD_LL_SetupStage+0x54>
 80088f8:	d30e      	bcc.n	8008918 <USBD_LL_SetupStage+0x48>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d105      	bne.n	800890a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80088fe:	4629      	mov	r1, r5
 8008900:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8008902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008906:	f000 bb1f 	b.w	8008f48 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800890a:	4620      	mov	r0, r4
 800890c:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8008910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008914:	f00a bf30 	b.w	8013778 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008918:	4629      	mov	r1, r5
 800891a:	4620      	mov	r0, r4
}
 800891c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008920:	f000 b930 	b.w	8008b84 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008924:	4629      	mov	r1, r5
 8008926:	4620      	mov	r0, r4
}
 8008928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800892c:	f000 bad4 	b.w	8008ed8 <USBD_StdItfReq>

08008930 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008930:	b510      	push	{r4, lr}
 8008932:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008934:	b929      	cbnz	r1, 8008942 <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008936:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800893a:	2903      	cmp	r1, #3
 800893c:	d00d      	beq.n	800895a <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800893e:	2000      	movs	r0, #0
 8008940:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008942:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008946:	2a03      	cmp	r2, #3
 8008948:	d1f9      	bne.n	800893e <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800894a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0f4      	beq.n	800893e <USBD_LL_DataOutStage+0xe>
}
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008958:	4718      	bx	r3
 800895a:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 800895c:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 8008960:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8008964:	4293      	cmp	r3, r2
 8008966:	d808      	bhi.n	800897a <USBD_LL_DataOutStage+0x4a>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800896c:	2b03      	cmp	r3, #3
 800896e:	d00d      	beq.n	800898c <USBD_LL_DataOutStage+0x5c>
        (void)USBD_CtlSendStatus(pdev);
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fbff 	bl	8009174 <USBD_CtlSendStatus>
}
 8008976:	2000      	movs	r0, #0
 8008978:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800897a:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800897c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800897e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008982:	bf28      	it	cs
 8008984:	461a      	movcs	r2, r3
 8008986:	f000 fbed 	bl	8009164 <USBD_CtlContinueRx>
 800898a:	e7d8      	b.n	800893e <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800898c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ec      	beq.n	8008970 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 8008996:	4798      	blx	r3
 8008998:	e7ea      	b.n	8008970 <USBD_LL_DataOutStage+0x40>
 800899a:	bf00      	nop

0800899c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4604      	mov	r4, r0
 80089a0:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089a2:	b951      	cbnz	r1, 80089ba <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089a4:	f8d0 5294 	ldr.w	r5, [r0, #660]	; 0x294
 80089a8:	2d02      	cmp	r5, #2
 80089aa:	d013      	beq.n	80089d4 <USBD_LL_DataInStage+0x38>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80089ac:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d023      	beq.n	80089fc <USBD_LL_DataInStage+0x60>
      }
    }
  }

  return USBD_OK;
}
 80089b4:	2000      	movs	r0, #0
 80089b6:	b002      	add	sp, #8
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80089be:	2b03      	cmp	r3, #3
 80089c0:	d1f8      	bne.n	80089b4 <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 80089c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0f3      	beq.n	80089b4 <USBD_LL_DataInStage+0x18>
}
 80089cc:	b002      	add	sp, #8
 80089ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80089d2:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80089d4:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 80089d8:	42b5      	cmp	r5, r6
 80089da:	d815      	bhi.n	8008a08 <USBD_LL_DataInStage+0x6c>
        if ((pep->maxpacket == pep->rem_length) &&
 80089dc:	d022      	beq.n	8008a24 <USBD_LL_DataInStage+0x88>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089de:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d032      	beq.n	8008a4c <USBD_LL_DataInStage+0xb0>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089e6:	2180      	movs	r1, #128	; 0x80
 80089e8:	4620      	mov	r0, r4
 80089ea:	f00a fec5 	bl	8013778 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fbcc 	bl	800918c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 80089f4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d1db      	bne.n	80089b4 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 8008a00:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8008a04:	b002      	add	sp, #8
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8008a08:	1bad      	subs	r5, r5, r6
 8008a0a:	9101      	str	r1, [sp, #4]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a0c:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8008a0e:	61c5      	str	r5, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a10:	462a      	mov	r2, r5
 8008a12:	f000 fb8f 	bl	8009134 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f00a fef7 	bl	8013810 <USBD_LL_PrepareReceive>
 8008a22:	e7c3      	b.n	80089ac <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8008a24:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a26:	4295      	cmp	r5, r2
 8008a28:	d8d9      	bhi.n	80089de <USBD_LL_DataInStage+0x42>
            (pep->total_length >= pep->maxpacket) &&
 8008a2a:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8008a2e:	42aa      	cmp	r2, r5
 8008a30:	d2d5      	bcs.n	80089de <USBD_LL_DataInStage+0x42>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a32:	460a      	mov	r2, r1
 8008a34:	9101      	str	r1, [sp, #4]
 8008a36:	f000 fb7d 	bl	8009134 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a3a:	9b01      	ldr	r3, [sp, #4]
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a3c:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8008a3e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a42:	461a      	mov	r2, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	f00a fee3 	bl	8013810 <USBD_LL_PrepareReceive>
 8008a4a:	e7af      	b.n	80089ac <USBD_LL_DataInStage+0x10>
            if (pdev->pClass->EP0_TxSent != NULL)
 8008a4c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c7      	beq.n	80089e6 <USBD_LL_DataInStage+0x4a>
              pdev->pClass->EP0_TxSent(pdev);
 8008a56:	4620      	mov	r0, r4
 8008a58:	4798      	blx	r3
 8008a5a:	e7c4      	b.n	80089e6 <USBD_LL_DataInStage+0x4a>

08008a5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b570      	push	{r4, r5, r6, lr}
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a5e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a60:	2401      	movs	r4, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8008a62:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a66:	f880 429c 	strb.w	r4, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 8008a6a:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a6c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8008a70:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8008a74:	b1e2      	cbz	r2, 8008ab0 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8008a76:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	b113      	cbz	r3, 8008a84 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 8008a7e:	6853      	ldr	r3, [r2, #4]
 8008a80:	b103      	cbz	r3, 8008a84 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a82:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a84:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a86:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a88:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	4611      	mov	r1, r2
 8008a90:	f00a fe52 	bl	8013738 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a94:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a98:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	2180      	movs	r1, #128	; 0x80
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f00a fe48 	bl	8013738 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008aa8:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aaa:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8008aac:	2000      	movs	r0, #0
}
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8008ab0:	2003      	movs	r0, #3
}
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008ab4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop

08008abc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008abc:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008abe:	2104      	movs	r1, #4

  return USBD_OK;
}
 8008ac0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8008ac2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008acc:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop

08008ad4 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ad4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d104      	bne.n	8008ae6 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008adc:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8008aec:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8008af0:	b15a      	cbz	r2, 8008b0a <USBD_LL_SOF+0x1e>
{
 8008af2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d001      	beq.n	8008b00 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8008afc:	2000      	movs	r0, #0
}
 8008afe:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8008b00:	69d3      	ldr	r3, [r2, #28]
 8008b02:	b123      	cbz	r3, 8008b0e <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 8008b04:	4798      	blx	r3
  return USBD_OK;
 8008b06:	2000      	movs	r0, #0
}
 8008b08:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008b0a:	2003      	movs	r0, #3
}
 8008b0c:	4770      	bx	lr
  return USBD_OK;
 8008b0e:	4618      	mov	r0, r3
}
 8008b10:	bd08      	pop	{r3, pc}
 8008b12:	bf00      	nop

08008b14 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8008b14:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8008b18:	b15a      	cbz	r2, 8008b32 <USBD_LL_IsoINIncomplete+0x1e>
{
 8008b1a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d001      	beq.n	8008b28 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8008b24:	2000      	movs	r0, #0
}
 8008b26:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008b28:	6a13      	ldr	r3, [r2, #32]
 8008b2a:	b123      	cbz	r3, 8008b36 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008b2c:	4798      	blx	r3
  return USBD_OK;
 8008b2e:	2000      	movs	r0, #0
}
 8008b30:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008b32:	2003      	movs	r0, #3
}
 8008b34:	4770      	bx	lr
  return USBD_OK;
 8008b36:	4618      	mov	r0, r3
}
 8008b38:	bd08      	pop	{r3, pc}
 8008b3a:	bf00      	nop

08008b3c <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8008b3c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8008b40:	b15a      	cbz	r2, 8008b5a <USBD_LL_IsoOUTIncomplete+0x1e>
{
 8008b42:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d001      	beq.n	8008b50 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8008b4c:	2000      	movs	r0, #0
}
 8008b4e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008b50:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008b52:	b123      	cbz	r3, 8008b5e <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008b54:	4798      	blx	r3
  return USBD_OK;
 8008b56:	2000      	movs	r0, #0
}
 8008b58:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008b5a:	2003      	movs	r0, #3
}
 8008b5c:	4770      	bx	lr
  return USBD_OK;
 8008b5e:	4618      	mov	r0, r3
}
 8008b60:	bd08      	pop	{r3, pc}
 8008b62:	bf00      	nop

08008b64 <USBD_LL_DevConnected>:
 8008b64:	2000      	movs	r0, #0
 8008b66:	4770      	bx	lr

08008b68 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b68:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8008b6a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b6e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8008b72:	b12a      	cbz	r2, 8008b80 <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b74:	6852      	ldr	r2, [r2, #4]
 8008b76:	7901      	ldrb	r1, [r0, #4]
{
 8008b78:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b7a:	4790      	blx	r2
  }

  return USBD_OK;
}
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	bd08      	pop	{r3, pc}
 8008b80:	2000      	movs	r0, #0
 8008b82:	4770      	bx	lr

08008b84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b86:	780b      	ldrb	r3, [r1, #0]
{
 8008b88:	b082      	sub	sp, #8
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d028      	beq.n	8008be8 <USBD_StdDevReq+0x64>
 8008b96:	2b40      	cmp	r3, #64	; 0x40
 8008b98:	d026      	beq.n	8008be8 <USBD_StdDevReq+0x64>
 8008b9a:	b15b      	cbz	r3, 8008bb4 <USBD_StdDevReq+0x30>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b9c:	2180      	movs	r1, #128	; 0x80
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f00a fdea 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8008baa:	f00a fde5 	bl	8013778 <USBD_LL_StallEP>
}
 8008bae:	4628      	mov	r0, r5
 8008bb0:	b002      	add	sp, #8
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8008bb4:	784b      	ldrb	r3, [r1, #1]
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d8f0      	bhi.n	8008b9c <USBD_StdDevReq+0x18>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <USBD_StdDevReq+0x3c>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008c61 	.word	0x08008c61
 8008bc4:	08008c8f 	.word	0x08008c8f
 8008bc8:	08008b9d 	.word	0x08008b9d
 8008bcc:	08008cab 	.word	0x08008cab
 8008bd0:	08008b9d 	.word	0x08008b9d
 8008bd4:	08008cb7 	.word	0x08008cb7
 8008bd8:	08008cf9 	.word	0x08008cf9
 8008bdc:	08008b9d 	.word	0x08008b9d
 8008be0:	08008d15 	.word	0x08008d15
 8008be4:	08008bfd 	.word	0x08008bfd
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008be8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	4798      	blx	r3
 8008bf4:	4605      	mov	r5, r0
}
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	b002      	add	sp, #8
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 8008bfc:	7889      	ldrb	r1, [r1, #2]
 8008bfe:	4eb5      	ldr	r6, [pc, #724]	; (8008ed4 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c00:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008c02:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c04:	f200 810d 	bhi.w	8008e22 <USBD_StdDevReq+0x29e>
  switch (pdev->dev_state)
 8008c08:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	f000 8114 	beq.w	8008e3c <USBD_StdDevReq+0x2b8>
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	f040 8121 	bne.w	8008e5c <USBD_StdDevReq+0x2d8>
      if (cfgidx == 0U)
 8008c1a:	2900      	cmp	r1, #0
 8008c1c:	f000 8144 	beq.w	8008ea8 <USBD_StdDevReq+0x324>
      else if (cfgidx != pdev->dev_config)
 8008c20:	6841      	ldr	r1, [r0, #4]
 8008c22:	2901      	cmp	r1, #1
 8008c24:	f000 8127 	beq.w	8008e76 <USBD_StdDevReq+0x2f2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c28:	b2c9      	uxtb	r1, r1
 8008c2a:	f7ff fe49 	bl	80088c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c2e:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c30:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 8008c32:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c34:	f7ff fe3c 	bl	80088b0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008c38:	4605      	mov	r5, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f000 811b 	beq.w	8008e76 <USBD_StdDevReq+0x2f2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c40:	2180      	movs	r1, #128	; 0x80
 8008c42:	4620      	mov	r0, r4
 8008c44:	f00a fd98 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f00a fd94 	bl	8013778 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c50:	7921      	ldrb	r1, [r4, #4]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f7ff fe34 	bl	80088c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008c5e:	e7a6      	b.n	8008bae <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8008c60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008c64:	2203      	movs	r2, #3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d897      	bhi.n	8008b9c <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8008c6c:	88cb      	ldrh	r3, [r1, #6]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d194      	bne.n	8008b9c <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c72:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 8008c74:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c78:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8008c7a:	b103      	cbz	r3, 8008c7e <USBD_StdDevReq+0xfa>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c7c:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f104 010c 	add.w	r1, r4, #12
 8008c84:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8008c86:	2500      	movs	r5, #0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c88:	f000 fa46 	bl	8009118 <USBD_CtlSendData>
 8008c8c:	e78f      	b.n	8008bae <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8008c8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d881      	bhi.n	8008b9c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c98:	884b      	ldrh	r3, [r1, #2]
        pdev->dev_remote_wakeup = 0U;
 8008c9a:	2500      	movs	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d186      	bne.n	8008bae <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8008ca0:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ca4:	f000 fa66 	bl	8009174 <USBD_CtlSendStatus>
 8008ca8:	e781      	b.n	8008bae <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008caa:	884b      	ldrh	r3, [r1, #2]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f000 80e7 	beq.w	8008e80 <USBD_StdDevReq+0x2fc>
  USBD_StatusTypeDef ret = USBD_OK;
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	e77b      	b.n	8008bae <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cb6:	888b      	ldrh	r3, [r1, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f af6f 	bne.w	8008b9c <USBD_StdDevReq+0x18>
 8008cbe:	88ce      	ldrh	r6, [r1, #6]
 8008cc0:	2e00      	cmp	r6, #0
 8008cc2:	f47f af6b 	bne.w	8008b9c <USBD_StdDevReq+0x18>
 8008cc6:	884d      	ldrh	r5, [r1, #2]
 8008cc8:	2d7f      	cmp	r5, #127	; 0x7f
 8008cca:	f63f af67 	bhi.w	8008b9c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	f43f af62 	beq.w	8008b9c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cd8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008cda:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cde:	f00a fd7b 	bl	80137d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fa46 	bl	8009174 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	f000 80ef 	beq.w	8008ecc <USBD_StdDevReq+0x348>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cee:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf0:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008cf6:	e75a      	b.n	8008bae <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 8008cf8:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8008cfa:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8008cfc:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 8008cfe:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b06      	cmp	r3, #6
 8008d06:	d861      	bhi.n	8008dcc <USBD_StdDevReq+0x248>
 8008d08:	e8df f003 	tbb	[pc, r3]
 8008d0c:	60375048 	.word	0x60375048
 8008d10:	3f60      	.short	0x3f60
 8008d12:	1a          	.byte	0x1a
 8008d13:	00          	.byte	0x00
  if (req->wLength != 1U)
 8008d14:	88ca      	ldrh	r2, [r1, #6]
 8008d16:	2a01      	cmp	r2, #1
 8008d18:	f47f af40 	bne.w	8008b9c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008d1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008d20:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f43f af39 	beq.w	8008b9c <USBD_StdDevReq+0x18>
 8008d2a:	2902      	cmp	r1, #2
 8008d2c:	f240 80ae 	bls.w	8008e8c <USBD_StdDevReq+0x308>
 8008d30:	2903      	cmp	r1, #3
 8008d32:	f47f af33 	bne.w	8008b9c <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d36:	1d01      	adds	r1, r0, #4
  USBD_StatusTypeDef ret = USBD_OK;
 8008d38:	2500      	movs	r5, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d3a:	f000 f9ed 	bl	8009118 <USBD_CtlSendData>
 8008d3e:	e736      	b.n	8008bae <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d40:	7c03      	ldrb	r3, [r0, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d142      	bne.n	8008dcc <USBD_StdDevReq+0x248>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d46:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008d4a:	f10d 0006 	add.w	r0, sp, #6
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d52:	2307      	movs	r3, #7
 8008d54:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8008d56:	88eb      	ldrh	r3, [r5, #6]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d06b      	beq.n	8008e34 <USBD_StdDevReq+0x2b0>
    if (len != 0U)
 8008d5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	d033      	beq.n	8008dcc <USBD_StdDevReq+0x248>
      len = MIN(len, req->wLength);
 8008d64:	4293      	cmp	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d66:	4601      	mov	r1, r0
 8008d68:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8008d6a:	bf28      	it	cs
 8008d6c:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d6e:	461a      	mov	r2, r3
      len = MIN(len, req->wLength);
 8008d70:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d74:	f000 f9d0 	bl	8009118 <USBD_CtlSendData>
 8008d78:	e79b      	b.n	8008cb2 <USBD_StdDevReq+0x12e>
      switch ((uint8_t)(req->wValue))
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	2a05      	cmp	r2, #5
 8008d7e:	d825      	bhi.n	8008dcc <USBD_StdDevReq+0x248>
 8008d80:	e8df f002 	tbb	[pc, r2]
 8008d84:	3d434920 	.word	0x3d434920
 8008d88:	2d37      	.short	0x2d37
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8a:	7c03      	ldrb	r3, [r0, #16]
 8008d8c:	b9f3      	cbnz	r3, 8008dcc <USBD_StdDevReq+0x248>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d8e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008d92:	f10d 0006 	add.w	r0, sp, #6
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	4798      	blx	r3
 8008d9a:	e7dc      	b.n	8008d56 <USBD_StdDevReq+0x1d2>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008da0:	f10d 0106 	add.w	r1, sp, #6
 8008da4:	7c00      	ldrb	r0, [r0, #16]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4798      	blx	r3
 8008daa:	e7d4      	b.n	8008d56 <USBD_StdDevReq+0x1d2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dac:	7c02      	ldrb	r2, [r0, #16]
 8008dae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	d171      	bne.n	8008e9a <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f10d 0006 	add.w	r0, sp, #6
 8008dbc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	7043      	strb	r3, [r0, #1]
 8008dc2:	e7c8      	b.n	8008d56 <USBD_StdDevReq+0x1d2>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	b96b      	cbnz	r3, 8008de8 <USBD_StdDevReq+0x264>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dcc:	2180      	movs	r1, #128	; 0x80
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f00a fcd2 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f00a fcce 	bl	8013778 <USBD_LL_StallEP>
 8008ddc:	e769      	b.n	8008cb2 <USBD_StdDevReq+0x12e>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008dde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f1      	beq.n	8008dcc <USBD_StdDevReq+0x248>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008de8:	f10d 0106 	add.w	r1, sp, #6
 8008dec:	7c20      	ldrb	r0, [r4, #16]
 8008dee:	4798      	blx	r3
 8008df0:	e7b1      	b.n	8008d56 <USBD_StdDevReq+0x1d2>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008df2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1f5      	bne.n	8008de8 <USBD_StdDevReq+0x264>
 8008dfc:	e7e6      	b.n	8008dcc <USBD_StdDevReq+0x248>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dfe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1ef      	bne.n	8008de8 <USBD_StdDevReq+0x264>
 8008e08:	e7e0      	b.n	8008dcc <USBD_StdDevReq+0x248>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e9      	bne.n	8008de8 <USBD_StdDevReq+0x264>
 8008e14:	e7da      	b.n	8008dcc <USBD_StdDevReq+0x248>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e16:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e3      	bne.n	8008de8 <USBD_StdDevReq+0x264>
 8008e20:	e7d4      	b.n	8008dcc <USBD_StdDevReq+0x248>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e22:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8008e24:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e26:	f00a fca7 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f00a fca3 	bl	8013778 <USBD_LL_StallEP>
 8008e32:	e6bc      	b.n	8008bae <USBD_StdDevReq+0x2a>
    (void)USBD_CtlSendStatus(pdev);
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 f99d 	bl	8009174 <USBD_CtlSendStatus>
 8008e3a:	e73a      	b.n	8008cb2 <USBD_StdDevReq+0x12e>
      if (cfgidx != 0U)
 8008e3c:	b1d9      	cbz	r1, 8008e76 <USBD_StdDevReq+0x2f2>
        pdev->dev_config = cfgidx;
 8008e3e:	2101      	movs	r1, #1
 8008e40:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e42:	f7ff fd35 	bl	80088b0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8008e46:	4605      	mov	r5, r0
 8008e48:	b3c8      	cbz	r0, 8008ebe <USBD_StdDevReq+0x33a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4a:	2180      	movs	r1, #128	; 0x80
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f00a fc93 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e52:	4620      	mov	r0, r4
 8008e54:	2100      	movs	r1, #0
 8008e56:	f00a fc8f 	bl	8013778 <USBD_LL_StallEP>
 8008e5a:	e6a8      	b.n	8008bae <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e5c:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 8008e5e:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e60:	f00a fc8a 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e64:	2100      	movs	r1, #0
 8008e66:	4620      	mov	r0, r4
 8008e68:	f00a fc86 	bl	8013778 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e6c:	7831      	ldrb	r1, [r6, #0]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f7ff fd26 	bl	80088c0 <USBD_ClrClassConfig>
 8008e74:	e69b      	b.n	8008bae <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 8008e76:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8008e78:	2500      	movs	r5, #0
        (void)USBD_CtlSendStatus(pdev);
 8008e7a:	f000 f97b 	bl	8009174 <USBD_CtlSendStatus>
 8008e7e:	e696      	b.n	8008bae <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8008e80:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  USBD_StatusTypeDef ret = USBD_OK;
 8008e84:	2500      	movs	r5, #0
    (void)USBD_CtlSendStatus(pdev);
 8008e86:	f000 f975 	bl	8009174 <USBD_CtlSendStatus>
 8008e8a:	e690      	b.n	8008bae <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8008e8c:	2500      	movs	r5, #0
 8008e8e:	4601      	mov	r1, r0
 8008e90:	f841 5f08 	str.w	r5, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e94:	f000 f940 	bl	8009118 <USBD_CtlSendData>
 8008e98:	e689      	b.n	8008bae <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	f10d 0006 	add.w	r0, sp, #6
 8008ea0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	7043      	strb	r3, [r0, #1]
 8008ea6:	e756      	b.n	8008d56 <USBD_StdDevReq+0x1d2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ea8:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8008eaa:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eac:	460d      	mov	r5, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008eb2:	f7ff fd05 	bl	80088c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 f95c 	bl	8009174 <USBD_CtlSendStatus>
 8008ebc:	e677      	b.n	8008bae <USBD_StdDevReq+0x2a>
          (void)USBD_CtlSendStatus(pdev);
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 f958 	bl	8009174 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008eca:	e670      	b.n	8008bae <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008ed2:	e66c      	b.n	8008bae <USBD_StdDevReq+0x2a>
 8008ed4:	24000240 	.word	0x24000240

08008ed8 <USBD_StdItfReq>:
{
 8008ed8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eda:	780b      	ldrb	r3, [r1, #0]
{
 8008edc:	460d      	mov	r5, r1
 8008ede:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d00d      	beq.n	8008f04 <USBD_StdItfReq+0x2c>
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	d00b      	beq.n	8008f04 <USBD_StdItfReq+0x2c>
 8008eec:	b153      	cbz	r3, 8008f04 <USBD_StdItfReq+0x2c>
  USBD_StatusTypeDef ret = USBD_OK;
 8008eee:	2600      	movs	r6, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef0:	2180      	movs	r1, #128	; 0x80
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f00a fc40 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4631      	mov	r1, r6
 8008efc:	f00a fc3c 	bl	8013778 <USBD_LL_StallEP>
}
 8008f00:	4630      	mov	r0, r6
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8008f04:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d8ef      	bhi.n	8008eee <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f0e:	792b      	ldrb	r3, [r5, #4]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d80f      	bhi.n	8008f34 <USBD_StdItfReq+0x5c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f14:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f20:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f22:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1eb      	bne.n	8008f00 <USBD_StdItfReq+0x28>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1e9      	bne.n	8008f00 <USBD_StdItfReq+0x28>
              (void)USBD_CtlSendStatus(pdev);
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 f921 	bl	8009174 <USBD_CtlSendStatus>
 8008f32:	e7e5      	b.n	8008f00 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f34:	2180      	movs	r1, #128	; 0x80
 8008f36:	4620      	mov	r0, r4
 8008f38:	f00a fc1e 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8008f40:	460e      	mov	r6, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f42:	f00a fc19 	bl	8013778 <USBD_LL_StallEP>
 8008f46:	e7db      	b.n	8008f00 <USBD_StdItfReq+0x28>

08008f48 <USBD_StdEPReq>:
{
 8008f48:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f4a:	780b      	ldrb	r3, [r1, #0]
{
 8008f4c:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d028      	beq.n	8008fa8 <USBD_StdEPReq+0x60>
 8008f56:	2b40      	cmp	r3, #64	; 0x40
 8008f58:	d026      	beq.n	8008fa8 <USBD_StdEPReq+0x60>
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b14b      	cbz	r3, 8008f72 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	4628      	mov	r0, r5
 8008f62:	f00a fc09 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f66:	4628      	mov	r0, r5
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f00a fc05 	bl	8013778 <USBD_LL_StallEP>
}
 8008f6e:	2000      	movs	r0, #0
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8008f72:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8008f74:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8008f76:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8008f78:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8008f7a:	d03f      	beq.n	8008ffc <USBD_StdEPReq+0xb4>
 8008f7c:	d31b      	bcc.n	8008fb6 <USBD_StdEPReq+0x6e>
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d1ed      	bne.n	8008f5e <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 8008f82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d050      	beq.n	800902e <USBD_StdEPReq+0xe6>
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d1e6      	bne.n	8008f5e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f90:	8863      	ldrh	r3, [r4, #2]
 8008f92:	b92b      	cbnz	r3, 8008fa0 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f94:	064a      	lsls	r2, r1, #25
 8008f96:	d003      	beq.n	8008fa0 <USBD_StdEPReq+0x58>
 8008f98:	88e3      	ldrh	r3, [r4, #6]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <USBD_StdEPReq+0x58>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f9c:	f00a fbec 	bl	8013778 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 f8e7 	bl	8009174 <USBD_CtlSendStatus>
              break;
 8008fa6:	e7e2      	b.n	8008f6e <USBD_StdEPReq+0x26>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fa8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8008fac:	4628      	mov	r0, r5
 8008fae:	689b      	ldr	r3, [r3, #8]
}
 8008fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fb4:	4718      	bx	r3
          switch (pdev->dev_state)
 8008fb6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d03f      	beq.n	8009040 <USBD_StdEPReq+0xf8>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d1cc      	bne.n	8008f5e <USBD_StdEPReq+0x16>
 8008fc4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8008fc8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008fce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8008fd2:	d447      	bmi.n	8009064 <USBD_StdEPReq+0x11c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fd4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0c0      	beq.n	8008f5e <USBD_StdEPReq+0x16>
 8008fdc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fe0:	2414      	movs	r4, #20
 8008fe2:	fb04 0403 	mla	r4, r4, r3, r0
 8008fe6:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d146      	bne.n	800907c <USBD_StdEPReq+0x134>
                pep->status = 0x0001U;
 8008fee:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	f000 f88f 	bl	8009118 <USBD_CtlSendData>
              break;
 8008ffa:	e7b8      	b.n	8008f6e <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 8008ffc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d013      	beq.n	800902e <USBD_StdEPReq+0xe6>
 8009006:	2b03      	cmp	r3, #3
 8009008:	d1a9      	bne.n	8008f5e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800900a:	8863      	ldrh	r3, [r4, #2]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1ae      	bne.n	8008f6e <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8009010:	064e      	lsls	r6, r1, #25
 8009012:	d001      	beq.n	8009018 <USBD_StdEPReq+0xd0>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009014:	f00a fbbe 	bl	8013794 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8009018:	4628      	mov	r0, r5
 800901a:	f000 f8ab 	bl	8009174 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800901e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	689b      	ldr	r3, [r3, #8]
}
 8009028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800902c:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800902e:	064b      	lsls	r3, r1, #25
 8009030:	d095      	beq.n	8008f5e <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009032:	f00a fba1 	bl	8013778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009036:	4628      	mov	r0, r5
 8009038:	2180      	movs	r1, #128	; 0x80
 800903a:	f00a fb9d 	bl	8013778 <USBD_LL_StallEP>
 800903e:	e796      	b.n	8008f6e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009040:	0648      	lsls	r0, r1, #25
 8009042:	d18c      	bne.n	8008f5e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009044:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 8009046:	f04f 0400 	mov.w	r4, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800904a:	4628      	mov	r0, r5
 800904c:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009050:	bf4c      	ite	mi
 8009052:	f105 0314 	addmi.w	r3, r5, #20
 8009056:	f505 73aa 	addpl.w	r3, r5, #340	; 0x154
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800905a:	4619      	mov	r1, r3
              pep->status = 0x0000U;
 800905c:	601c      	str	r4, [r3, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800905e:	f000 f85b 	bl	8009118 <USBD_CtlSendData>
              break;
 8009062:	e784      	b.n	8008f6e <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009064:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f af79 	beq.w	8008f5e <USBD_StdEPReq+0x16>
 800906c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009070:	1c5c      	adds	r4, r3, #1
 8009072:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009076:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800907a:	e7b6      	b.n	8008fea <USBD_StdEPReq+0xa2>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800907c:	4628      	mov	r0, r5
 800907e:	f00a fb97 	bl	80137b0 <USBD_LL_IsStallEP>
 8009082:	b108      	cbz	r0, 8009088 <USBD_StdEPReq+0x140>
                pep->status = 0x0001U;
 8009084:	2301      	movs	r3, #1
 8009086:	e7b2      	b.n	8008fee <USBD_StdEPReq+0xa6>
                pep->status = 0x0000U;
 8009088:	6020      	str	r0, [r4, #0]
 800908a:	e7b1      	b.n	8008ff0 <USBD_StdEPReq+0xa8>

0800908c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800908c:	780b      	ldrb	r3, [r1, #0]
 800908e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8009090:	784b      	ldrb	r3, [r1, #1]
 8009092:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009094:	78ca      	ldrb	r2, [r1, #3]
 8009096:	788b      	ldrb	r3, [r1, #2]
 8009098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800909c:	8043      	strh	r3, [r0, #2]
 800909e:	794a      	ldrb	r2, [r1, #5]
 80090a0:	790b      	ldrb	r3, [r1, #4]
 80090a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80090a6:	8083      	strh	r3, [r0, #4]
 80090a8:	79ca      	ldrb	r2, [r1, #7]
 80090aa:	798b      	ldrb	r3, [r1, #6]
 80090ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80090b0:	80c3      	strh	r3, [r0, #6]
}
 80090b2:	4770      	bx	lr

080090b4 <USBD_CtlError>:
{
 80090b4:	b510      	push	{r4, lr}
 80090b6:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b8:	2180      	movs	r1, #128	; 0x80
 80090ba:	f00a fb5d 	bl	8013778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090be:	2100      	movs	r1, #0
 80090c0:	4620      	mov	r0, r4
}
 80090c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80090c6:	f00a bb57 	b.w	8013778 <USBD_LL_StallEP>
 80090ca:	bf00      	nop

080090cc <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80090cc:	b300      	cbz	r0, 8009110 <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80090ce:	7803      	ldrb	r3, [r0, #0]
{
 80090d0:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80090d2:	b1f3      	cbz	r3, 8009112 <USBD_GetString+0x46>
 80090d4:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 80090d6:	2300      	movs	r3, #0
  {
    len++;
 80090d8:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80090da:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 80090de:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	d1f9      	bne.n	80090d8 <USBD_GetString+0xc>
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090e8:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090ea:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80090ec:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090ee:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80090f0:	7804      	ldrb	r4, [r0, #0]
 80090f2:	b15c      	cbz	r4, 800910c <USBD_GetString+0x40>
  idx++;
 80090f4:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80090f6:	2500      	movs	r5, #0
    idx++;
 80090f8:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80090fa:	54cc      	strb	r4, [r1, r3]
    idx++;
 80090fc:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80090fe:	b2d2      	uxtb	r2, r2
    idx++;
 8009100:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8009102:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8009104:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009108:	2c00      	cmp	r4, #0
 800910a:	d1f5      	bne.n	80090f8 <USBD_GetString+0x2c>
}
 800910c:	bc30      	pop	{r4, r5}
 800910e:	4770      	bx	lr
 8009110:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8009112:	2302      	movs	r3, #2
 8009114:	e7e8      	b.n	80090e8 <USBD_GetString+0x1c>
 8009116:	bf00      	nop

08009118 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800911c:	2602      	movs	r6, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800911e:	460a      	mov	r2, r1
 8009120:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 8009122:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009124:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 8009126:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009128:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800912c:	f00a fb62 	bl	80137f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009130:	2000      	movs	r0, #0
 8009132:	bd70      	pop	{r4, r5, r6, pc}

08009134 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009134:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009136:	4613      	mov	r3, r2
 8009138:	460a      	mov	r2, r1
 800913a:	2100      	movs	r1, #0
 800913c:	f00a fb5a 	bl	80137f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009140:	2000      	movs	r0, #0
 8009142:	bd08      	pop	{r3, pc}

08009144 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009148:	2603      	movs	r6, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800914a:	460a      	mov	r2, r1
 800914c:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 800914e:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009152:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 8009154:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009158:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800915c:	f00a fb58 	bl	8013810 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009160:	2000      	movs	r0, #0
 8009162:	bd70      	pop	{r4, r5, r6, pc}

08009164 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009164:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009166:	4613      	mov	r3, r2
 8009168:	460a      	mov	r2, r1
 800916a:	2100      	movs	r1, #0
 800916c:	f00a fb50 	bl	8013810 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009170:	2000      	movs	r0, #0
 8009172:	bd08      	pop	{r3, pc}

08009174 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009174:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009176:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009178:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800917a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800917e:	461a      	mov	r2, r3
 8009180:	4619      	mov	r1, r3
 8009182:	f00a fb37 	bl	80137f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009186:	2000      	movs	r0, #0
 8009188:	bd08      	pop	{r3, pc}
 800918a:	bf00      	nop

0800918c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800918c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800918e:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009190:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009192:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009196:	461a      	mov	r2, r3
 8009198:	4619      	mov	r1, r3
 800919a:	f00a fb39 	bl	8013810 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800919e:	2000      	movs	r0, #0
 80091a0:	bd08      	pop	{r3, pc}
 80091a2:	bf00      	nop

080091a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091a4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <SysTick_Handler+0x18>)
 80091a8:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091aa:	f001 fcff 	bl	800abac <xTaskGetSchedulerState>
 80091ae:	2801      	cmp	r0, #1
 80091b0:	d003      	beq.n	80091ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80091b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80091b6:	f002 b8c5 	b.w	800b344 <xPortSysTickHandler>
}
 80091ba:	bd08      	pop	{r3, pc}
 80091bc:	e000e010 	.word	0xe000e010

080091c0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091c0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80091c4:	b92b      	cbnz	r3, 80091d2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <osKernelInitialize+0x20>)
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	b928      	cbnz	r0, 80091d8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	4770      	bx	lr
    stat = osErrorISR;
 80091d2:	f06f 0005 	mvn.w	r0, #5
 80091d6:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	24000aa8 	.word	0x24000aa8

080091e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80091e4:	b510      	push	{r4, lr}
 80091e6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80091ea:	b974      	cbnz	r4, 800920a <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80091ec:	4b08      	ldr	r3, [pc, #32]	; (8009210 <osKernelStart+0x2c>)
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	2a01      	cmp	r2, #1
 80091f2:	d107      	bne.n	8009204 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091f4:	4907      	ldr	r1, [pc, #28]	; (8009214 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091f6:	2202      	movs	r2, #2
 80091f8:	77cc      	strb	r4, [r1, #31]
 80091fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091fc:	f001 fad0 	bl	800a7a0 <vTaskStartScheduler>
      stat = osOK;
 8009200:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009202:	bd10      	pop	{r4, pc}
      stat = osError;
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009208:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800920a:	f06f 0005 	mvn.w	r0, #5
}
 800920e:	bd10      	pop	{r4, pc}
 8009210:	24000aa8 	.word	0x24000aa8
 8009214:	e000ed00 	.word	0xe000ed00

08009218 <osKernelGetTickCount>:
 8009218:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800921c:	b90b      	cbnz	r3, 8009222 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
  } else {
    ticks = xTaskGetTickCount();
 800921e:	f001 bbbf 	b.w	800a9a0 <xTaskGetTickCount>
    ticks = xTaskGetTickCountFromISR();
 8009222:	f001 bbc3 	b.w	800a9ac <xTaskGetTickCountFromISR>
 8009226:	bf00      	nop

08009228 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009228:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800922a:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800922c:	b087      	sub	sp, #28
  hTask = NULL;
 800922e:	9405      	str	r4, [sp, #20]
 8009230:	f3ef 8505 	mrs	r5, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009234:	bb3d      	cbnz	r5, 8009286 <osThreadNew+0x5e>
 8009236:	b330      	cbz	r0, 8009286 <osThreadNew+0x5e>
 8009238:	460b      	mov	r3, r1
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800923a:	b1ca      	cbz	r2, 8009270 <osThreadNew+0x48>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800923c:	6995      	ldr	r5, [r2, #24]
      if (attr->name != NULL) {
 800923e:	6811      	ldr	r1, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8009240:	bb25      	cbnz	r5, 800928c <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;
 8009242:	2518      	movs	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009244:	6854      	ldr	r4, [r2, #4]
 8009246:	07e4      	lsls	r4, r4, #31
 8009248:	d41d      	bmi.n	8009286 <osThreadNew+0x5e>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800924a:	6956      	ldr	r6, [r2, #20]
 800924c:	b316      	cbz	r6, 8009294 <osThreadNew+0x6c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800924e:	08b7      	lsrs	r7, r6, #2
 8009250:	e9d2 4c02 	ldrd	r4, ip, [r2, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009254:	b30c      	cbz	r4, 800929a <osThreadNew+0x72>
 8009256:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 800925a:	d914      	bls.n	8009286 <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800925c:	6912      	ldr	r2, [r2, #16]
 800925e:	b196      	cbz	r6, 8009286 <osThreadNew+0x5e>
 8009260:	b18a      	cbz	r2, 8009286 <osThreadNew+0x5e>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009262:	9500      	str	r5, [sp, #0]
 8009264:	e9cd 2401 	strd	r2, r4, [sp, #4]
 8009268:	463a      	mov	r2, r7
 800926a:	f001 fa2d 	bl	800a6c8 <xTaskCreateStatic>
 800926e:	e00b      	b.n	8009288 <osThreadNew+0x60>
    name = NULL;
 8009270:	4611      	mov	r1, r2
    prio  = (UBaseType_t)osPriorityNormal;
 8009272:	2518      	movs	r5, #24
 8009274:	f44f 7200 	mov.w	r2, #512	; 0x200
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009278:	ac05      	add	r4, sp, #20
 800927a:	e9cd 5400 	strd	r5, r4, [sp]
 800927e:	f001 fa5b 	bl	800a738 <xTaskCreate>
 8009282:	2801      	cmp	r0, #1
 8009284:	d011      	beq.n	80092aa <osThreadNew+0x82>
        return (NULL);
 8009286:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8009288:	b007      	add	sp, #28
 800928a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800928c:	1e6e      	subs	r6, r5, #1
 800928e:	2e37      	cmp	r6, #55	; 0x37
 8009290:	d9d8      	bls.n	8009244 <osThreadNew+0x1c>
 8009292:	e7f8      	b.n	8009286 <osThreadNew+0x5e>
    stack = configMINIMAL_STACK_SIZE;
 8009294:	f44f 7700 	mov.w	r7, #512	; 0x200
 8009298:	e7da      	b.n	8009250 <osThreadNew+0x28>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800929a:	f1bc 0f00 	cmp.w	ip, #0
 800929e:	d1f2      	bne.n	8009286 <osThreadNew+0x5e>
 80092a0:	6912      	ldr	r2, [r2, #16]
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	d1ef      	bne.n	8009286 <osThreadNew+0x5e>
 80092a6:	b2ba      	uxth	r2, r7
 80092a8:	e7e6      	b.n	8009278 <osThreadNew+0x50>
 80092aa:	9805      	ldr	r0, [sp, #20]
 80092ac:	e7ec      	b.n	8009288 <osThreadNew+0x60>
 80092ae:	bf00      	nop

080092b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092b0:	b510      	push	{r4, lr}
 80092b2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80092b6:	b92c      	cbnz	r4, 80092c4 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80092b8:	b900      	cbnz	r0, 80092bc <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80092ba:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 80092bc:	f001 fb4c 	bl	800a958 <vTaskDelay>
    stat = osOK;
 80092c0:	4620      	mov	r0, r4
}
 80092c2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80092c4:	f06f 0005 	mvn.w	r0, #5
}
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	bf00      	nop

080092cc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80092d2:	bb13      	cbnz	r3, 800931a <osMutexNew+0x4e>
 80092d4:	4604      	mov	r4, r0
    if (attr != NULL) {
 80092d6:	b340      	cbz	r0, 800932a <osMutexNew+0x5e>
      type = attr->attr_bits;
 80092d8:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80092da:	f003 0601 	and.w	r6, r3, #1
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80092de:	071b      	lsls	r3, r3, #28
 80092e0:	d41b      	bmi.n	800931a <osMutexNew+0x4e>
 80092e2:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80092e6:	b181      	cbz	r1, 800930a <osMutexNew+0x3e>
 80092e8:	2b4f      	cmp	r3, #79	; 0x4f
 80092ea:	d916      	bls.n	800931a <osMutexNew+0x4e>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80092ec:	b1c6      	cbz	r6, 8009320 <osMutexNew+0x54>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80092ee:	2004      	movs	r0, #4
 80092f0:	f000 fc6e 	bl	8009bd0 <xQueueCreateMutexStatic>
 80092f4:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80092f6:	b185      	cbz	r5, 800931a <osMutexNew+0x4e>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80092f8:	6821      	ldr	r1, [r4, #0]
 80092fa:	4628      	mov	r0, r5
 80092fc:	f000 ff40 	bl	800a180 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009300:	b166      	cbz	r6, 800931c <osMutexNew+0x50>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009302:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8009306:	4628      	mov	r0, r5
 8009308:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800930a:	b933      	cbnz	r3, 800931a <osMutexNew+0x4e>
            if (rmtx != 0U) {
 800930c:	b16e      	cbz	r6, 800932a <osMutexNew+0x5e>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800930e:	2004      	movs	r0, #4
 8009310:	f000 fc94 	bl	8009c3c <xQueueCreateMutex>
      if (hMutex != NULL) {
 8009314:	4605      	mov	r5, r0
 8009316:	2800      	cmp	r0, #0
 8009318:	d1ee      	bne.n	80092f8 <osMutexNew+0x2c>
  hMutex = NULL;
 800931a:	2500      	movs	r5, #0
}
 800931c:	4628      	mov	r0, r5
 800931e:	bd70      	pop	{r4, r5, r6, pc}
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009320:	2001      	movs	r0, #1
 8009322:	f000 fc55 	bl	8009bd0 <xQueueCreateMutexStatic>
 8009326:	4605      	mov	r5, r0
 8009328:	e7e5      	b.n	80092f6 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800932a:	2001      	movs	r0, #1
 800932c:	f000 fc86 	bl	8009c3c <xQueueCreateMutex>
      if (hMutex != NULL) {
 8009330:	4605      	mov	r5, r0
 8009332:	2800      	cmp	r0, #0
 8009334:	d0f1      	beq.n	800931a <osMutexNew+0x4e>
        if (attr != NULL) {
 8009336:	b924      	cbnz	r4, 8009342 <osMutexNew+0x76>
        vQueueAddToRegistry (hMutex, name);
 8009338:	4621      	mov	r1, r4
 800933a:	f000 ff21 	bl	800a180 <vQueueAddToRegistry>
}
 800933e:	4628      	mov	r0, r5
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	2600      	movs	r6, #0
 8009344:	e7d8      	b.n	80092f8 <osMutexNew+0x2c>
 8009346:	bf00      	nop

08009348 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009348:	b538      	push	{r3, r4, r5, lr}
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800934a:	f020 0501 	bic.w	r5, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800934e:	f000 0301 	and.w	r3, r0, #1
 8009352:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8009356:	b9a0      	cbnz	r0, 8009382 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8009358:	b1b5      	cbz	r5, 8009388 <osMutexAcquire+0x40>
 800935a:	460c      	mov	r4, r1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800935c:	4628      	mov	r0, r5
    if (rmtx != 0U) {
 800935e:	b953      	cbnz	r3, 8009376 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009360:	f000 fda6 	bl	8009eb0 <xQueueSemaphoreTake>
 8009364:	2801      	cmp	r0, #1
 8009366:	d00a      	beq.n	800937e <osMutexAcquire+0x36>
          stat = osErrorResource;
 8009368:	2c00      	cmp	r4, #0
 800936a:	bf14      	ite	ne
 800936c:	f06f 0001 	mvnne.w	r0, #1
 8009370:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8009374:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009376:	f000 fe69 	bl	800a04c <xQueueTakeMutexRecursive>
 800937a:	2801      	cmp	r0, #1
 800937c:	d1f4      	bne.n	8009368 <osMutexAcquire+0x20>
  stat = osOK;
 800937e:	2000      	movs	r0, #0
}
 8009380:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8009382:	f06f 0005 	mvn.w	r0, #5
}
 8009386:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 8009388:	f06f 0003 	mvn.w	r0, #3
}
 800938c:	bd38      	pop	{r3, r4, r5, pc}
 800938e:	bf00      	nop

08009390 <osMutexRelease>:
 8009390:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009394:	b9b1      	cbnz	r1, 80093c4 <osMutexRelease+0x34>
 8009396:	f020 0201 	bic.w	r2, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800939a:	b1b2      	cbz	r2, 80093ca <osMutexRelease+0x3a>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800939c:	b508      	push	{r3, lr}
 800939e:	f000 0301 	and.w	r3, r0, #1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80093a2:	4610      	mov	r0, r2
    if (rmtx != 0U) {
 80093a4:	b93b      	cbnz	r3, 80093b6 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80093a6:	461a      	mov	r2, r3
 80093a8:	4619      	mov	r1, r3
 80093aa:	f000 fb4f 	bl	8009a4c <xQueueGenericSend>
 80093ae:	2801      	cmp	r0, #1
 80093b0:	d105      	bne.n	80093be <osMutexRelease+0x2e>
  stat = osOK;
 80093b2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80093b4:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80093b6:	f000 fc21 	bl	8009bfc <xQueueGiveMutexRecursive>
 80093ba:	2801      	cmp	r0, #1
 80093bc:	d0f9      	beq.n	80093b2 <osMutexRelease+0x22>
        stat = osErrorResource;
 80093be:	f06f 0002 	mvn.w	r0, #2
}
 80093c2:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80093c4:	f06f 0005 	mvn.w	r0, #5
 80093c8:	4770      	bx	lr
    stat = osErrorParameter;
 80093ca:	f06f 0003 	mvn.w	r0, #3
}
 80093ce:	4770      	bx	lr

080093d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80093d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093d2:	b083      	sub	sp, #12
 80093d4:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80093d8:	b98d      	cbnz	r5, 80093fe <osSemaphoreNew+0x2e>
 80093da:	4603      	mov	r3, r0
 80093dc:	b178      	cbz	r0, 80093fe <osSemaphoreNew+0x2e>
 80093de:	4288      	cmp	r0, r1
 80093e0:	460e      	mov	r6, r1
 80093e2:	d30c      	bcc.n	80093fe <osSemaphoreNew+0x2e>
 80093e4:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 80093e6:	b182      	cbz	r2, 800940a <osSemaphoreNew+0x3a>
 80093e8:	e9d2 2702 	ldrd	r2, r7, [r2, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80093ec:	b15a      	cbz	r2, 8009406 <osSemaphoreNew+0x36>
 80093ee:	2f4f      	cmp	r7, #79	; 0x4f
 80093f0:	d905      	bls.n	80093fe <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80093f2:	2801      	cmp	r0, #1
 80093f4:	d02e      	beq.n	8009454 <osSemaphoreNew+0x84>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80093f6:	f000 fae7 	bl	80099c8 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80093fa:	4605      	mov	r5, r0
 80093fc:	b9c0      	cbnz	r0, 8009430 <osSemaphoreNew+0x60>
  hSemaphore = NULL;
 80093fe:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8009400:	4628      	mov	r0, r5
 8009402:	b003      	add	sp, #12
 8009404:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009406:	2f00      	cmp	r7, #0
 8009408:	d1f9      	bne.n	80093fe <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 800940a:	2b01      	cmp	r3, #1
 800940c:	d117      	bne.n	800943e <osSemaphoreNew+0x6e>
            hSemaphore = xSemaphoreCreateBinary();
 800940e:	4618      	mov	r0, r3
 8009410:	2203      	movs	r2, #3
 8009412:	2100      	movs	r1, #0
 8009414:	f000 fab0 	bl	8009978 <xQueueGenericCreate>
 8009418:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800941a:	b1ad      	cbz	r5, 8009448 <osSemaphoreNew+0x78>
 800941c:	b1a6      	cbz	r6, 8009448 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800941e:	2300      	movs	r3, #0
 8009420:	4628      	mov	r0, r5
 8009422:	461a      	mov	r2, r3
 8009424:	4619      	mov	r1, r3
 8009426:	f000 fb11 	bl	8009a4c <xQueueGenericSend>
 800942a:	2801      	cmp	r0, #1
 800942c:	d11d      	bne.n	800946a <osSemaphoreNew+0x9a>
        if (attr != NULL) {
 800942e:	b17c      	cbz	r4, 8009450 <osSemaphoreNew+0x80>
          name = attr->name;
 8009430:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8009432:	4628      	mov	r0, r5
 8009434:	f000 fea4 	bl	800a180 <vQueueAddToRegistry>
}
 8009438:	4628      	mov	r0, r5
 800943a:	b003      	add	sp, #12
 800943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800943e:	4631      	mov	r1, r6
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fae5 	bl	8009a10 <xQueueCreateCountingSemaphore>
 8009446:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8009448:	2d00      	cmp	r5, #0
 800944a:	d0d8      	beq.n	80093fe <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 800944c:	2c00      	cmp	r4, #0
 800944e:	d1ef      	bne.n	8009430 <osSemaphoreNew+0x60>
          name = NULL;
 8009450:	4621      	mov	r1, r4
 8009452:	e7ee      	b.n	8009432 <osSemaphoreNew+0x62>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009454:	2703      	movs	r7, #3
 8009456:	4613      	mov	r3, r2
 8009458:	4629      	mov	r1, r5
 800945a:	462a      	mov	r2, r5
 800945c:	9700      	str	r7, [sp, #0]
 800945e:	f000 fa39 	bl	80098d4 <xQueueGenericCreateStatic>
 8009462:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009464:	2d00      	cmp	r5, #0
 8009466:	d1d9      	bne.n	800941c <osSemaphoreNew+0x4c>
 8009468:	e7ee      	b.n	8009448 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800946a:	4628      	mov	r0, r5
            hSemaphore = NULL;
 800946c:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 800946e:	f000 fe5f 	bl	800a130 <vQueueDelete>
 8009472:	e7c5      	b.n	8009400 <osSemaphoreNew+0x30>

08009474 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009474:	b368      	cbz	r0, 80094d2 <osSemaphoreAcquire+0x5e>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009476:	b510      	push	{r4, lr}
 8009478:	460c      	mov	r4, r1
 800947a:	b082      	sub	sp, #8
 800947c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009480:	b1bb      	cbz	r3, 80094b2 <osSemaphoreAcquire+0x3e>
    if (timeout != 0U) {
 8009482:	bb19      	cbnz	r1, 80094cc <osSemaphoreAcquire+0x58>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009484:	aa02      	add	r2, sp, #8
 8009486:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800948a:	f000 fdff 	bl	800a08c <xQueueReceiveFromISR>
 800948e:	2801      	cmp	r0, #1
 8009490:	d118      	bne.n	80094c4 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009492:	9b01      	ldr	r3, [sp, #4]
 8009494:	b913      	cbnz	r3, 800949c <osSemaphoreAcquire+0x28>
  stat = osOK;
 8009496:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009498:	b002      	add	sp, #8
 800949a:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <osSemaphoreAcquire+0x64>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80094ac:	4620      	mov	r0, r4
}
 80094ae:	b002      	add	sp, #8
 80094b0:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80094b2:	f000 fcfd 	bl	8009eb0 <xQueueSemaphoreTake>
 80094b6:	2801      	cmp	r0, #1
 80094b8:	d0ed      	beq.n	8009496 <osSemaphoreAcquire+0x22>
      if (timeout != 0U) {
 80094ba:	b11c      	cbz	r4, 80094c4 <osSemaphoreAcquire+0x50>
        stat = osErrorTimeout;
 80094bc:	f06f 0001 	mvn.w	r0, #1
}
 80094c0:	b002      	add	sp, #8
 80094c2:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 80094c4:	f06f 0002 	mvn.w	r0, #2
}
 80094c8:	b002      	add	sp, #8
 80094ca:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80094cc:	f06f 0003 	mvn.w	r0, #3
 80094d0:	e7e2      	b.n	8009498 <osSemaphoreAcquire+0x24>
 80094d2:	f06f 0003 	mvn.w	r0, #3
}
 80094d6:	4770      	bx	lr
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b083      	sub	sp, #12
 80094e0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80094e4:	b986      	cbnz	r6, 8009508 <osMessageQueueNew+0x2c>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b170      	cbz	r0, 8009508 <osMessageQueueNew+0x2c>
 80094ea:	b169      	cbz	r1, 8009508 <osMessageQueueNew+0x2c>
 80094ec:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 80094ee:	b17a      	cbz	r2, 8009510 <osMessageQueueNew+0x34>
 80094f0:	e9d2 7202 	ldrd	r7, r2, [r2, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80094f4:	b1c7      	cbz	r7, 8009528 <osMessageQueueNew+0x4c>
 80094f6:	2a4f      	cmp	r2, #79	; 0x4f
 80094f8:	d906      	bls.n	8009508 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80094fa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80094fc:	b122      	cbz	r2, 8009508 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80094fe:	fb01 f505 	mul.w	r5, r1, r5
 8009502:	6963      	ldr	r3, [r4, #20]
 8009504:	42ab      	cmp	r3, r5
 8009506:	d21c      	bcs.n	8009542 <osMessageQueueNew+0x66>
  hQueue = NULL;
 8009508:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800950a:	4628      	mov	r0, r5
 800950c:	b003      	add	sp, #12
 800950e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8009510:	f000 fa32 	bl	8009978 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8009514:	4605      	mov	r5, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d0f6      	beq.n	8009508 <osMessageQueueNew+0x2c>
        name = NULL;
 800951a:	4621      	mov	r1, r4
      vQueueAddToRegistry (hQueue, name);
 800951c:	4628      	mov	r0, r5
 800951e:	f000 fe2f 	bl	800a180 <vQueueAddToRegistry>
}
 8009522:	4628      	mov	r0, r5
 8009524:	b003      	add	sp, #12
 8009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009528:	2a00      	cmp	r2, #0
 800952a:	d1ed      	bne.n	8009508 <osMessageQueueNew+0x2c>
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1ea      	bne.n	8009508 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009532:	6962      	ldr	r2, [r4, #20]
 8009534:	2a00      	cmp	r2, #0
 8009536:	d1e7      	bne.n	8009508 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8009538:	f000 fa1e 	bl	8009978 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800953c:	4605      	mov	r5, r0
 800953e:	b938      	cbnz	r0, 8009550 <osMessageQueueNew+0x74>
 8009540:	e7e2      	b.n	8009508 <osMessageQueueNew+0x2c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009542:	9600      	str	r6, [sp, #0]
 8009544:	463b      	mov	r3, r7
 8009546:	f000 f9c5 	bl	80098d4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800954a:	4605      	mov	r5, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d0db      	beq.n	8009508 <osMessageQueueNew+0x2c>
        name = attr->name;
 8009550:	6821      	ldr	r1, [r4, #0]
 8009552:	e7e3      	b.n	800951c <osMessageQueueNew+0x40>

08009554 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009554:	b530      	push	{r4, r5, lr}
 8009556:	461d      	mov	r5, r3
 8009558:	b083      	sub	sp, #12
 800955a:	f3ef 8205 	mrs	r2, IPSR
 800955e:	fab0 f480 	clz	r4, r0
 8009562:	fab1 f381 	clz	r3, r1
 8009566:	0964      	lsrs	r4, r4, #5
 8009568:	095b      	lsrs	r3, r3, #5

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800956a:	b1ca      	cbz	r2, 80095a0 <osMessageQueuePut+0x4c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800956c:	2d00      	cmp	r5, #0
 800956e:	bf18      	it	ne
 8009570:	2301      	movne	r3, #1
 8009572:	bb43      	cbnz	r3, 80095c6 <osMessageQueuePut+0x72>
 8009574:	bb3c      	cbnz	r4, 80095c6 <osMessageQueuePut+0x72>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009576:	aa02      	add	r2, sp, #8

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009578:	4623      	mov	r3, r4
      yield = pdFALSE;
 800957a:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800957e:	f000 fb6f 	bl	8009c60 <xQueueGenericSendFromISR>
 8009582:	2801      	cmp	r0, #1
 8009584:	d11b      	bne.n	80095be <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	b1b3      	cbz	r3, 80095b8 <osMessageQueuePut+0x64>
 800958a:	4b10      	ldr	r3, [pc, #64]	; (80095cc <osMessageQueuePut+0x78>)
 800958c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800959a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 800959c:	b003      	add	sp, #12
 800959e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80095a0:	b98c      	cbnz	r4, 80095c6 <osMessageQueuePut+0x72>
 80095a2:	b983      	cbnz	r3, 80095c6 <osMessageQueuePut+0x72>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80095a4:	462a      	mov	r2, r5
 80095a6:	f000 fa51 	bl	8009a4c <xQueueGenericSend>
 80095aa:	2801      	cmp	r0, #1
 80095ac:	d004      	beq.n	80095b8 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 80095ae:	b135      	cbz	r5, 80095be <osMessageQueuePut+0x6a>
          stat = osErrorTimeout;
 80095b0:	f06f 0001 	mvn.w	r0, #1
}
 80095b4:	b003      	add	sp, #12
 80095b6:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 80095b8:	2000      	movs	r0, #0
}
 80095ba:	b003      	add	sp, #12
 80095bc:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 80095be:	f06f 0002 	mvn.w	r0, #2
}
 80095c2:	b003      	add	sp, #12
 80095c4:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 80095c6:	f06f 0003 	mvn.w	r0, #3
 80095ca:	e7e7      	b.n	800959c <osMessageQueuePut+0x48>
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80095d0:	b530      	push	{r4, r5, lr}
 80095d2:	461d      	mov	r5, r3
 80095d4:	b083      	sub	sp, #12
 80095d6:	f3ef 8305 	mrs	r3, IPSR
 80095da:	fab0 f480 	clz	r4, r0
 80095de:	fab1 f281 	clz	r2, r1
 80095e2:	0964      	lsrs	r4, r4, #5
 80095e4:	0952      	lsrs	r2, r2, #5

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80095e6:	b1c3      	cbz	r3, 800961a <osMessageQueueGet+0x4a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095e8:	2d00      	cmp	r5, #0
 80095ea:	bf18      	it	ne
 80095ec:	2201      	movne	r2, #1
 80095ee:	bb3a      	cbnz	r2, 8009640 <osMessageQueueGet+0x70>
 80095f0:	bb34      	cbnz	r4, 8009640 <osMessageQueueGet+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80095f2:	aa02      	add	r2, sp, #8
 80095f4:	f842 4d04 	str.w	r4, [r2, #-4]!

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80095f8:	f000 fd48 	bl	800a08c <xQueueReceiveFromISR>
 80095fc:	2801      	cmp	r0, #1
 80095fe:	d11b      	bne.n	8009638 <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009600:	9b01      	ldr	r3, [sp, #4]
 8009602:	b1b3      	cbz	r3, 8009632 <osMessageQueueGet+0x62>
 8009604:	4b10      	ldr	r3, [pc, #64]	; (8009648 <osMessageQueueGet+0x78>)
 8009606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009614:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8009616:	b003      	add	sp, #12
 8009618:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800961a:	b98c      	cbnz	r4, 8009640 <osMessageQueueGet+0x70>
 800961c:	b982      	cbnz	r2, 8009640 <osMessageQueueGet+0x70>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800961e:	462a      	mov	r2, r5
 8009620:	f000 fb8a 	bl	8009d38 <xQueueReceive>
 8009624:	2801      	cmp	r0, #1
 8009626:	d004      	beq.n	8009632 <osMessageQueueGet+0x62>
        if (timeout != 0U) {
 8009628:	b135      	cbz	r5, 8009638 <osMessageQueueGet+0x68>
          stat = osErrorTimeout;
 800962a:	f06f 0001 	mvn.w	r0, #1
}
 800962e:	b003      	add	sp, #12
 8009630:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 8009632:	2000      	movs	r0, #0
}
 8009634:	b003      	add	sp, #12
 8009636:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8009638:	f06f 0002 	mvn.w	r0, #2
}
 800963c:	b003      	add	sp, #12
 800963e:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 8009640:	f06f 0003 	mvn.w	r0, #3
 8009644:	e7e7      	b.n	8009616 <osMessageQueueGet+0x46>
 8009646:	bf00      	nop
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800964c:	b430      	push	{r4, r5}
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800964e:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009652:	4d03      	ldr	r5, [pc, #12]	; (8009660 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009654:	4c03      	ldr	r4, [pc, #12]	; (8009664 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009656:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009658:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800965a:	6013      	str	r3, [r2, #0]
}
 800965c:	bc30      	pop	{r4, r5}
 800965e:	4770      	bx	lr
 8009660:	24000a44 	.word	0x24000a44
 8009664:	24000244 	.word	0x24000244

08009668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009668:	b430      	push	{r4, r5}
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800966a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800966e:	4d03      	ldr	r5, [pc, #12]	; (800967c <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009670:	4c03      	ldr	r4, [pc, #12]	; (8009680 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009672:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009674:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009676:	6013      	str	r3, [r2, #0]
}
 8009678:	bc30      	pop	{r4, r5}
 800967a:	4770      	bx	lr
 800967c:	24001aac 	.word	0x24001aac
 8009680:	24000aac 	.word	0x24000aac

08009684 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009684:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009688:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800968c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800968e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009690:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009692:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009694:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop

0800969c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800969c:	2300      	movs	r3, #0
 800969e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop

080096a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80096a4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80096a6:	6802      	ldr	r2, [r0, #0]
{
 80096a8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096aa:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80096ac:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096ae:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80096b2:	689c      	ldr	r4, [r3, #8]
 80096b4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096b6:	6099      	str	r1, [r3, #8]
}
 80096b8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80096bc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80096be:	6002      	str	r2, [r0, #0]
}
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop

080096c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096c4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096c6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096c8:	1c6b      	adds	r3, r5, #1
 80096ca:	d011      	beq.n	80096f0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096cc:	f100 0208 	add.w	r2, r0, #8
 80096d0:	e000      	b.n	80096d4 <vListInsert+0x10>
 80096d2:	461a      	mov	r2, r3
 80096d4:	6853      	ldr	r3, [r2, #4]
 80096d6:	681c      	ldr	r4, [r3, #0]
 80096d8:	42ac      	cmp	r4, r5
 80096da:	d9fa      	bls.n	80096d2 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80096dc:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80096de:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80096e0:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096e4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80096e6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 80096e8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80096ea:	6004      	str	r4, [r0, #0]
}
 80096ec:	bc30      	pop	{r4, r5}
 80096ee:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80096f0:	6902      	ldr	r2, [r0, #16]
 80096f2:	6853      	ldr	r3, [r2, #4]
 80096f4:	e7f2      	b.n	80096dc <vListInsert+0x18>
 80096f6:	bf00      	nop

080096f8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096f8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096fa:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 80096fe:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009700:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009702:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009704:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8009706:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8009708:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800970c:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 800970e:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009710:	bf08      	it	eq
 8009712:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pxContainer = NULL;
 8009714:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8009716:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8009718:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800971a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800971c:	6818      	ldr	r0, [r3, #0]
}
 800971e:	4770      	bx	lr

08009720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009724:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009726:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009728:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800972a:	b92a      	cbnz	r2, 8009738 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800972c:	6806      	ldr	r6, [r0, #0]
 800972e:	3501      	adds	r5, #1
 8009730:	b366      	cbz	r6, 800978c <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 8009732:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009734:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8009736:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009738:	b97e      	cbnz	r6, 800975a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800973a:	6840      	ldr	r0, [r0, #4]
 800973c:	3501      	adds	r5, #1
 800973e:	f00a f8ba 	bl	80138b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009746:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009748:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800974a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800974c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800974e:	d3f0      	bcc.n	8009732 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009750:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 8009752:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009754:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009756:	6063      	str	r3, [r4, #4]
}
 8009758:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800975a:	68c0      	ldr	r0, [r0, #12]
 800975c:	f00a f8ab 	bl	80138b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009760:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009762:	68e3      	ldr	r3, [r4, #12]
 8009764:	4252      	negs	r2, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009766:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009768:	4413      	add	r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800976a:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800976c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800976e:	d202      	bcs.n	8009776 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	441a      	add	r2, r3
 8009774:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009776:	2e02      	cmp	r6, #2
 8009778:	d003      	beq.n	8009782 <prvCopyDataToQueue+0x62>
 800977a:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800977c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800977e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8009780:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009782:	2d00      	cmp	r5, #0
 8009784:	d1d5      	bne.n	8009732 <prvCopyDataToQueue+0x12>
 8009786:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 8009788:	2000      	movs	r0, #0
 800978a:	e7d3      	b.n	8009734 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800978c:	6880      	ldr	r0, [r0, #8]
 800978e:	f001 fa5f 	bl	800ac50 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009792:	60a6      	str	r6, [r4, #8]
 8009794:	e7ce      	b.n	8009734 <prvCopyDataToQueue+0x14>
 8009796:	bf00      	nop

08009798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009798:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800979a:	b172      	cbz	r2, 80097ba <prvCopyDataFromQueue+0x22>
 800979c:	460b      	mov	r3, r1
{
 800979e:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097a0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097a4:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097a6:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097a8:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097aa:	d301      	bcc.n	80097b0 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097ac:	6801      	ldr	r1, [r0, #0]
 80097ae:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097b0:	4618      	mov	r0, r3
	}
}
 80097b2:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097b6:	f00a b87e 	b.w	80138b6 <memcpy>
 80097ba:	4770      	bx	lr

080097bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097c0:	f001 fd58 	bl	800b274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097c4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80097c8:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	dd16      	ble.n	80097fc <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097d0:	b1a3      	cbz	r3, 80097fc <prvUnlockQueue+0x40>
 80097d2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80097d6:	e005      	b.n	80097e4 <prvUnlockQueue+0x28>
 80097d8:	3c01      	subs	r4, #1
 80097da:	b2e3      	uxtb	r3, r4
 80097dc:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097de:	b16b      	cbz	r3, 80097fc <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097e2:	b15b      	cbz	r3, 80097fc <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097e4:	4630      	mov	r0, r6
 80097e6:	f001 f93f 	bl	800aa68 <xTaskRemoveFromEventList>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d0f4      	beq.n	80097d8 <prvUnlockQueue+0x1c>
 80097ee:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097f0:	f001 f9d0 	bl	800ab94 <vTaskMissedYield>
 80097f4:	b2e3      	uxtb	r3, r4
 80097f6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1f1      	bne.n	80097e0 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097fc:	23ff      	movs	r3, #255	; 0xff
 80097fe:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009802:	f001 fd59 	bl	800b2b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009806:	f001 fd35 	bl	800b274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800980a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800980e:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009810:	2c00      	cmp	r4, #0
 8009812:	dd16      	ble.n	8009842 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009814:	692b      	ldr	r3, [r5, #16]
 8009816:	b1a3      	cbz	r3, 8009842 <prvUnlockQueue+0x86>
 8009818:	f105 0610 	add.w	r6, r5, #16
 800981c:	e005      	b.n	800982a <prvUnlockQueue+0x6e>
 800981e:	3c01      	subs	r4, #1
 8009820:	b2e3      	uxtb	r3, r4
 8009822:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009824:	b16b      	cbz	r3, 8009842 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009826:	692b      	ldr	r3, [r5, #16]
 8009828:	b15b      	cbz	r3, 8009842 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800982a:	4630      	mov	r0, r6
 800982c:	f001 f91c 	bl	800aa68 <xTaskRemoveFromEventList>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0f4      	beq.n	800981e <prvUnlockQueue+0x62>
 8009834:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8009836:	f001 f9ad 	bl	800ab94 <vTaskMissedYield>
 800983a:	b2e3      	uxtb	r3, r4
 800983c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f1      	bne.n	8009826 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009842:	23ff      	movs	r3, #255	; 0xff
 8009844:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8009848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800984c:	f001 bd34 	b.w	800b2b8 <vPortExitCritical>

08009850 <xQueueGenericReset>:
{
 8009850:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009852:	b1e0      	cbz	r0, 800988e <xQueueGenericReset+0x3e>
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8009858:	f001 fd0c 	bl	800b274 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800985c:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800985e:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009860:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009862:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009864:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8009866:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800986a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800986e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8009872:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009876:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009878:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800987a:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800987c:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800987e:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 8009880:	b975      	cbnz	r5, 80098a0 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	b9ab      	cbnz	r3, 80098b2 <xQueueGenericReset+0x62>
	taskEXIT_CRITICAL();
 8009886:	f001 fd17 	bl	800b2b8 <vPortExitCritical>
}
 800988a:	2001      	movs	r0, #1
 800988c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	e7fe      	b.n	800989e <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098a0:	f104 0010 	add.w	r0, r4, #16
 80098a4:	f7ff feee 	bl	8009684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098ac:	f7ff feea 	bl	8009684 <vListInitialise>
 80098b0:	e7e9      	b.n	8009886 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b2:	f104 0010 	add.w	r0, r4, #16
 80098b6:	f001 f8d7 	bl	800aa68 <xTaskRemoveFromEventList>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d0e3      	beq.n	8009886 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80098be:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <xQueueGenericReset+0x80>)
 80098c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	e7da      	b.n	8009886 <xQueueGenericReset+0x36>
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <xQueueGenericCreateStatic>:
	{
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098dc:	b940      	cbnz	r0, 80098f0 <xQueueGenericCreateStatic+0x1c>
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	e7fe      	b.n	80098ee <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80098f0:	b153      	cbz	r3, 8009908 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80098f2:	b192      	cbz	r2, 800991a <xQueueGenericCreateStatic+0x46>
 80098f4:	b989      	cbnz	r1, 800991a <xQueueGenericCreateStatic+0x46>
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	e7fe      	b.n	8009906 <xQueueGenericCreateStatic+0x32>
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	e7fe      	b.n	8009918 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800991a:	b94a      	cbnz	r2, 8009930 <xQueueGenericCreateStatic+0x5c>
 800991c:	b141      	cbz	r1, 8009930 <xQueueGenericCreateStatic+0x5c>
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	e7fe      	b.n	800992e <xQueueGenericCreateStatic+0x5a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009930:	2450      	movs	r4, #80	; 0x50
 8009932:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009934:	9c01      	ldr	r4, [sp, #4]
 8009936:	2c50      	cmp	r4, #80	; 0x50
 8009938:	d008      	beq.n	800994c <xQueueGenericCreateStatic+0x78>
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	e7fe      	b.n	800994a <xQueueGenericCreateStatic+0x76>
 800994c:	461c      	mov	r4, r3
 800994e:	4613      	mov	r3, r2
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009950:	2601      	movs	r6, #1
 8009952:	460a      	mov	r2, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009954:	2900      	cmp	r1, #0
 8009956:	bf08      	it	eq
 8009958:	4623      	moveq	r3, r4
	pxNewQueue->uxLength = uxQueueLength;
 800995a:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800995c:	4631      	mov	r1, r6
 800995e:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009960:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009962:	6422      	str	r2, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009964:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009968:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800996a:	f7ff ff71 	bl	8009850 <xQueueGenericReset>
	}
 800996e:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009970:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 8009974:	b002      	add	sp, #8
 8009976:	bd70      	pop	{r4, r5, r6, pc}

08009978 <xQueueGenericCreate>:
	{
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800997a:	b940      	cbnz	r0, 800998e <xQueueGenericCreate+0x16>
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	e7fe      	b.n	800998c <xQueueGenericCreate+0x14>
 800998e:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009990:	fb01 f000 	mul.w	r0, r1, r0
 8009994:	4617      	mov	r7, r2
 8009996:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009998:	3050      	adds	r0, #80	; 0x50
 800999a:	f001 fde3 	bl	800b564 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800999e:	4604      	mov	r4, r0
 80099a0:	b178      	cbz	r0, 80099c2 <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80099a2:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099a4:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxLength = uxQueueLength;
 80099a8:	63c6      	str	r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099aa:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099ac:	4295      	cmp	r5, r2
 80099ae:	bf08      	it	eq
 80099b0:	4603      	moveq	r3, r0
	pxNewQueue->uxItemSize = uxItemSize;
 80099b2:	6405      	str	r5, [r0, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80099b4:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099b8:	6003      	str	r3, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099ba:	f7ff ff49 	bl	8009850 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80099be:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80099c2:	4620      	mov	r0, r4
 80099c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c6:	bf00      	nop

080099c8 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80099c8:	b940      	cbnz	r0, 80099dc <xQueueCreateCountingSemaphoreStatic+0x14>
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	e7fe      	b.n	80099da <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099dc:	4288      	cmp	r0, r1
 80099de:	d208      	bcs.n	80099f2 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	e7fe      	b.n	80099f0 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 80099f2:	b510      	push	{r4, lr}
 80099f4:	4613      	mov	r3, r2
 80099f6:	b082      	sub	sp, #8
 80099f8:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099fa:	2200      	movs	r2, #0
 80099fc:	2102      	movs	r1, #2
 80099fe:	9100      	str	r1, [sp, #0]
 8009a00:	4611      	mov	r1, r2
 8009a02:	f7ff ff67 	bl	80098d4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009a06:	b100      	cbz	r0, 8009a0a <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a08:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009a0a:	b002      	add	sp, #8
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	bf00      	nop

08009a10 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8009a10:	b940      	cbnz	r0, 8009a24 <xQueueCreateCountingSemaphore+0x14>
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	e7fe      	b.n	8009a22 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009a24:	4288      	cmp	r0, r1
 8009a26:	d208      	bcs.n	8009a3a <xQueueCreateCountingSemaphore+0x2a>
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	e7fe      	b.n	8009a38 <xQueueCreateCountingSemaphore+0x28>
	{
 8009a3a:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	460c      	mov	r4, r1
 8009a40:	2100      	movs	r1, #0
 8009a42:	f7ff ff99 	bl	8009978 <xQueueGenericCreate>
		if( xHandle != NULL )
 8009a46:	b100      	cbz	r0, 8009a4a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a48:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009a4a:	bd10      	pop	{r4, pc}

08009a4c <xQueueGenericSend>:
{
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009a54:	2800      	cmp	r0, #0
 8009a56:	f000 809d 	beq.w	8009b94 <xQueueGenericSend+0x148>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a5a:	2900      	cmp	r1, #0
 8009a5c:	f000 808d 	beq.w	8009b7a <xQueueGenericSend+0x12e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d10b      	bne.n	8009a7c <xQueueGenericSend+0x30>
 8009a64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009a66:	2a01      	cmp	r2, #1
 8009a68:	d008      	beq.n	8009a7c <xQueueGenericSend+0x30>
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	e7fe      	b.n	8009a7a <xQueueGenericSend+0x2e>
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	461e      	mov	r6, r3
 8009a80:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a82:	f001 f893 	bl	800abac <xTaskGetSchedulerState>
 8009a86:	b950      	cbnz	r0, 8009a9e <xQueueGenericSend+0x52>
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	b143      	cbz	r3, 8009a9e <xQueueGenericSend+0x52>
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	e7fe      	b.n	8009a9c <xQueueGenericSend+0x50>
 8009a9e:	f1a6 0502 	sub.w	r5, r6, #2
{
 8009aa2:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8009aa4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009bcc <xQueueGenericSend+0x180>
 8009aa8:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 8009aac:	46b8      	mov	r8, r7
 8009aae:	096d      	lsrs	r5, r5, #5
 8009ab0:	e007      	b.n	8009ac2 <xQueueGenericSend+0x76>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009ab2:	f001 fc01 	bl	800b2b8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f7ff fe80 	bl	80097bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009abc:	f000 febe 	bl	800a83c <xTaskResumeAll>
 8009ac0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8009ac2:	f001 fbd7 	bl	800b274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ac6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d33f      	bcc.n	8009b4e <xQueueGenericSend+0x102>
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	d13d      	bne.n	8009b4e <xQueueGenericSend+0x102>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d066      	beq.n	8009ba6 <xQueueGenericSend+0x15a>
				else if( xEntryTimeSet == pdFALSE )
 8009ad8:	b917      	cbnz	r7, 8009ae0 <xQueueGenericSend+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ada:	a802      	add	r0, sp, #8
 8009adc:	f001 f808 	bl	800aaf0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009ae0:	f001 fbea 	bl	800b2b8 <vPortExitCritical>
		vTaskSuspendAll();
 8009ae4:	f000 fea2 	bl	800a82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ae8:	f001 fbc4 	bl	800b274 <vPortEnterCritical>
 8009aec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009af0:	2bff      	cmp	r3, #255	; 0xff
 8009af2:	d101      	bne.n	8009af8 <xQueueGenericSend+0xac>
 8009af4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8009af8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009afc:	2bff      	cmp	r3, #255	; 0xff
 8009afe:	d101      	bne.n	8009b04 <xQueueGenericSend+0xb8>
 8009b00:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8009b04:	f001 fbd8 	bl	800b2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b08:	a901      	add	r1, sp, #4
 8009b0a:	a802      	add	r0, sp, #8
 8009b0c:	f000 fffc 	bl	800ab08 <xTaskCheckForTimeOut>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d153      	bne.n	8009bbc <xQueueGenericSend+0x170>
	taskENTER_CRITICAL();
 8009b14:	f001 fbae 	bl	800b274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009b1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d1c8      	bne.n	8009ab2 <xQueueGenericSend+0x66>
	taskEXIT_CRITICAL();
 8009b20:	f001 fbca 	bl	800b2b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b24:	9901      	ldr	r1, [sp, #4]
 8009b26:	f104 0010 	add.w	r0, r4, #16
 8009b2a:	f000 ff65 	bl	800a9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f7ff fe44 	bl	80097bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b34:	f000 fe82 	bl	800a83c <xTaskResumeAll>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1c1      	bne.n	8009ac0 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 8009b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b40:	f8ca 3000 	str.w	r3, [sl]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	e7b8      	b.n	8009ac0 <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b4e:	4632      	mov	r2, r6
 8009b50:	4649      	mov	r1, r9
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff fde4 	bl	8009720 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b5a:	bb43      	cbnz	r3, 8009bae <xQueueGenericSend+0x162>
					else if( xYieldRequired != pdFALSE )
 8009b5c:	b138      	cbz	r0, 8009b6e <xQueueGenericSend+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <xQueueGenericSend+0x180>)
 8009b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009b6e:	f001 fba3 	bl	800b2b8 <vPortExitCritical>
				return pdPASS;
 8009b72:	2001      	movs	r0, #1
}
 8009b74:	b004      	add	sp, #16
 8009b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	f43f af6f 	beq.w	8009a60 <xQueueGenericSend+0x14>
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	e7fe      	b.n	8009b92 <xQueueGenericSend+0x146>
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	e7fe      	b.n	8009ba4 <xQueueGenericSend+0x158>
					taskEXIT_CRITICAL();
 8009ba6:	f001 fb87 	bl	800b2b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8009baa:	4628      	mov	r0, r5
 8009bac:	e7e2      	b.n	8009b74 <xQueueGenericSend+0x128>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bb2:	f000 ff59 	bl	800aa68 <xTaskRemoveFromEventList>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d1d1      	bne.n	8009b5e <xQueueGenericSend+0x112>
 8009bba:	e7d8      	b.n	8009b6e <xQueueGenericSend+0x122>
			prvUnlockQueue( pxQueue );
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f7ff fdfd 	bl	80097bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bc2:	f000 fe3b 	bl	800a83c <xTaskResumeAll>
			return errQUEUE_FULL;
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e7d4      	b.n	8009b74 <xQueueGenericSend+0x128>
 8009bca:	bf00      	nop
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <xQueueCreateMutexStatic>:
	{
 8009bd0:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009bd2:	2200      	movs	r2, #0
	{
 8009bd4:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	9000      	str	r0, [sp, #0]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	2001      	movs	r0, #1
 8009bde:	f7ff fe79 	bl	80098d4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8009be2:	4604      	mov	r4, r0
 8009be4:	b138      	cbz	r0, 8009bf6 <xQueueCreateMutexStatic+0x26>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bea:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bec:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bee:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bf0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bf2:	f7ff ff2b 	bl	8009a4c <xQueueGenericSend>
	}
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd10      	pop	{r4, pc}

08009bfc <xQueueGiveMutexRecursive>:
	{
 8009bfc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8009bfe:	b138      	cbz	r0, 8009c10 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009c00:	6885      	ldr	r5, [r0, #8]
 8009c02:	4604      	mov	r4, r0
 8009c04:	f000 ffcc 	bl	800aba0 <xTaskGetCurrentTaskHandle>
 8009c08:	4285      	cmp	r5, r0
 8009c0a:	d00a      	beq.n	8009c22 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8009c0c:	2000      	movs	r0, #0
	}
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	e7fe      	b.n	8009c20 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009c22:	68e3      	ldr	r3, [r4, #12]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009c28:	b10b      	cbz	r3, 8009c2e <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8009c2a:	2001      	movs	r0, #1
	}
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009c2e:	4620      	mov	r0, r4
 8009c30:	461a      	mov	r2, r3
 8009c32:	4619      	mov	r1, r3
 8009c34:	f7ff ff0a 	bl	8009a4c <xQueueGenericSend>
			xReturn = pdPASS;
 8009c38:	2001      	movs	r0, #1
	}
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}

08009c3c <xQueueCreateMutex>:
	{
 8009c3c:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009c3e:	4602      	mov	r2, r0
 8009c40:	2100      	movs	r1, #0
 8009c42:	2001      	movs	r0, #1
 8009c44:	f7ff fe98 	bl	8009978 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8009c48:	4604      	mov	r4, r0
 8009c4a:	b138      	cbz	r0, 8009c5c <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009c50:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009c52:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009c54:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009c56:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009c58:	f7ff fef8 	bl	8009a4c <xQueueGenericSend>
	}
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	bd10      	pop	{r4, pc}

08009c60 <xQueueGenericSendFromISR>:
{
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d038      	beq.n	8009cda <xQueueGenericSendFromISR+0x7a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c68:	b359      	cbz	r1, 8009cc2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d10b      	bne.n	8009c86 <xQueueGenericSendFromISR+0x26>
 8009c6e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009c70:	2c01      	cmp	r4, #1
 8009c72:	d008      	beq.n	8009c86 <xQueueGenericSendFromISR+0x26>
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	e7fe      	b.n	8009c84 <xQueueGenericSendFromISR+0x24>
 8009c86:	4604      	mov	r4, r0
 8009c88:	461f      	mov	r7, r3
 8009c8a:	4690      	mov	r8, r2
 8009c8c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c8e:	f001 fc13 	bl	800b4b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c92:	f3ef 8611 	mrs	r6, BASEPRI
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ca6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d31e      	bcc.n	8009cec <xQueueGenericSendFromISR+0x8c>
 8009cae:	f1a7 0002 	sub.w	r0, r7, #2
 8009cb2:	fab0 f080 	clz	r0, r0
 8009cb6:	0940      	lsrs	r0, r0, #5
 8009cb8:	b9c0      	cbnz	r0, 8009cec <xQueueGenericSendFromISR+0x8c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cba:	f386 8811 	msr	BASEPRI, r6
}
 8009cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cc2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009cc4:	2c00      	cmp	r4, #0
 8009cc6:	d0d0      	beq.n	8009c6a <xQueueGenericSendFromISR+0xa>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	e7fe      	b.n	8009cd8 <xQueueGenericSendFromISR+0x78>
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	e7fe      	b.n	8009cea <xQueueGenericSendFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cf0:	463a      	mov	r2, r7
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cf6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cfa:	f7ff fd11 	bl	8009720 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009cfe:	1c6b      	adds	r3, r5, #1
 8009d00:	d008      	beq.n	8009d14 <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d02:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8009d04:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d06:	b25b      	sxtb	r3, r3
 8009d08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8009d0c:	f386 8811 	msr	BASEPRI, r6
}
 8009d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d16:	b90b      	cbnz	r3, 8009d1c <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8009d18:	2001      	movs	r0, #1
 8009d1a:	e7ce      	b.n	8009cba <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d20:	f000 fea2 	bl	800aa68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0f7      	beq.n	8009d18 <xQueueGenericSendFromISR+0xb8>
 8009d28:	f1b8 0f00 	cmp.w	r8, #0
 8009d2c:	d0f4      	beq.n	8009d18 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d2e:	2001      	movs	r0, #1
 8009d30:	f8c8 0000 	str.w	r0, [r8]
 8009d34:	e7c1      	b.n	8009cba <xQueueGenericSendFromISR+0x5a>
 8009d36:	bf00      	nop

08009d38 <xQueueReceive>:
{
 8009d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f000 809b 	beq.w	8009e7c <xQueueReceive+0x144>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d46:	2900      	cmp	r1, #0
 8009d48:	f000 808b 	beq.w	8009e62 <xQueueReceive+0x12a>
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d50:	f000 ff2c 	bl	800abac <xTaskGetSchedulerState>
 8009d54:	b950      	cbnz	r0, 8009d6c <xQueueReceive+0x34>
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	b143      	cbz	r3, 8009d6c <xQueueReceive+0x34>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	e7fe      	b.n	8009d6a <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 8009d6c:	f001 fa82 	bl	800b274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d70:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	d144      	bne.n	8009e00 <xQueueReceive+0xc8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d06c      	beq.n	8009e56 <xQueueReceive+0x11e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d7c:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8009d7e:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d80:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8009d84:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8009eac <xQueueReceive+0x174>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d88:	f000 feb2 	bl	800aaf0 <vTaskInternalSetTimeOutState>
 8009d8c:	e012      	b.n	8009db4 <xQueueReceive+0x7c>
	taskENTER_CRITICAL();
 8009d8e:	f001 fa71 	bl	800b274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d048      	beq.n	8009e2a <xQueueReceive+0xf2>
	taskEXIT_CRITICAL();
 8009d98:	f001 fa8e 	bl	800b2b8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fd0d 	bl	80097bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009da2:	f000 fd4b 	bl	800a83c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009da6:	f001 fa65 	bl	800b274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009daa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dac:	bb45      	cbnz	r5, 8009e00 <xQueueReceive+0xc8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d050      	beq.n	8009e56 <xQueueReceive+0x11e>
		taskEXIT_CRITICAL();
 8009db4:	f001 fa80 	bl	800b2b8 <vPortExitCritical>
		vTaskSuspendAll();
 8009db8:	f000 fd38 	bl	800a82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dbc:	f001 fa5a 	bl	800b274 <vPortEnterCritical>
 8009dc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009dc4:	2bff      	cmp	r3, #255	; 0xff
 8009dc6:	d02d      	beq.n	8009e24 <xQueueReceive+0xec>
 8009dc8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009dcc:	2bff      	cmp	r3, #255	; 0xff
 8009dce:	d026      	beq.n	8009e1e <xQueueReceive+0xe6>
 8009dd0:	f001 fa72 	bl	800b2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dd4:	a901      	add	r1, sp, #4
 8009dd6:	a802      	add	r0, sp, #8
 8009dd8:	f000 fe96 	bl	800ab08 <xTaskCheckForTimeOut>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d0d6      	beq.n	8009d8e <xQueueReceive+0x56>
			prvUnlockQueue( pxQueue );
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7ff fceb 	bl	80097bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009de6:	f000 fd29 	bl	800a83c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8009dea:	f001 fa43 	bl	800b274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009df0:	b38b      	cbz	r3, 8009e56 <xQueueReceive+0x11e>
	taskEXIT_CRITICAL();
 8009df2:	f001 fa61 	bl	800b2b8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009df6:	f001 fa3d 	bl	800b274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dfa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	d0d6      	beq.n	8009dae <xQueueReceive+0x76>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e00:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e02:	4639      	mov	r1, r7
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7ff fcc7 	bl	8009798 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e0a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d13d      	bne.n	8009e8e <xQueueReceive+0x156>
				taskEXIT_CRITICAL();
 8009e12:	f001 fa51 	bl	800b2b8 <vPortExitCritical>
				return pdPASS;
 8009e16:	2001      	movs	r0, #1
}
 8009e18:	b005      	add	sp, #20
 8009e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		prvLockQueue( pxQueue );
 8009e1e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 8009e22:	e7d5      	b.n	8009dd0 <xQueueReceive+0x98>
 8009e24:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 8009e28:	e7ce      	b.n	8009dc8 <xQueueReceive+0x90>
	taskEXIT_CRITICAL();
 8009e2a:	f001 fa45 	bl	800b2b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e2e:	9901      	ldr	r1, [sp, #4]
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 fde1 	bl	800a9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff fcc0 	bl	80097bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e3c:	f000 fcfe 	bl	800a83c <xTaskResumeAll>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d1d8      	bne.n	8009df6 <xQueueReceive+0xbe>
					portYIELD_WITHIN_API();
 8009e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e48:	f8c8 3000 	str.w	r3, [r8]
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	e7cf      	b.n	8009df6 <xQueueReceive+0xbe>
					taskEXIT_CRITICAL();
 8009e56:	f001 fa2f 	bl	800b2b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009e5a:	2000      	movs	r0, #0
}
 8009e5c:	b005      	add	sp, #20
 8009e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f43f af71 	beq.w	8009d4c <xQueueReceive+0x14>
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	e7fe      	b.n	8009e7a <xQueueReceive+0x142>
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	e7fe      	b.n	8009e8c <xQueueReceive+0x154>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e8e:	f104 0010 	add.w	r0, r4, #16
 8009e92:	f000 fde9 	bl	800aa68 <xTaskRemoveFromEventList>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0bb      	beq.n	8009e12 <xQueueReceive+0xda>
						queueYIELD_IF_USING_PREEMPTION();
 8009e9a:	4b04      	ldr	r3, [pc, #16]	; (8009eac <xQueueReceive+0x174>)
 8009e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	e7b2      	b.n	8009e12 <xQueueReceive+0xda>
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <xQueueSemaphoreTake>:
{
 8009eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009eb8:	b150      	cbz	r0, 8009ed0 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009eba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8009ebc:	b18d      	cbz	r5, 8009ee2 <xQueueSemaphoreTake+0x32>
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	e7fe      	b.n	8009ece <xQueueSemaphoreTake+0x1e>
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	e7fe      	b.n	8009ee0 <xQueueSemaphoreTake+0x30>
 8009ee2:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ee4:	f000 fe62 	bl	800abac <xTaskGetSchedulerState>
 8009ee8:	b950      	cbnz	r0, 8009f00 <xQueueSemaphoreTake+0x50>
 8009eea:	9d01      	ldr	r5, [sp, #4]
 8009eec:	b145      	cbz	r5, 8009f00 <xQueueSemaphoreTake+0x50>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	e7fe      	b.n	8009efe <xQueueSemaphoreTake+0x4e>
 8009f00:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8009f02:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8009f04:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800a048 <xQueueSemaphoreTake+0x198>
 8009f08:	e00c      	b.n	8009f24 <xQueueSemaphoreTake+0x74>
	taskENTER_CRITICAL();
 8009f0a:	f001 f9b3 	bl	800b274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d039      	beq.n	8009f88 <xQueueSemaphoreTake+0xd8>
	taskEXIT_CRITICAL();
 8009f14:	f001 f9d0 	bl	800b2b8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f7ff fc4f 	bl	80097bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f1e:	f000 fc8d 	bl	800a83c <xTaskResumeAll>
 8009f22:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009f24:	f001 f9a6 	bl	800b274 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d16f      	bne.n	800a00e <xQueueSemaphoreTake+0x15e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d061      	beq.n	8009ff8 <xQueueSemaphoreTake+0x148>
				else if( xEntryTimeSet == pdFALSE )
 8009f34:	b916      	cbnz	r6, 8009f3c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f36:	a802      	add	r0, sp, #8
 8009f38:	f000 fdda 	bl	800aaf0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009f3c:	f001 f9bc 	bl	800b2b8 <vPortExitCritical>
		vTaskSuspendAll();
 8009f40:	f000 fc74 	bl	800a82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f44:	f001 f996 	bl	800b274 <vPortEnterCritical>
 8009f48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009f4c:	2bff      	cmp	r3, #255	; 0xff
 8009f4e:	d101      	bne.n	8009f54 <xQueueSemaphoreTake+0xa4>
 8009f50:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8009f54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009f58:	2bff      	cmp	r3, #255	; 0xff
 8009f5a:	d101      	bne.n	8009f60 <xQueueSemaphoreTake+0xb0>
 8009f5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f60:	f001 f9aa 	bl	800b2b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f64:	a901      	add	r1, sp, #4
 8009f66:	a802      	add	r0, sp, #8
 8009f68:	f000 fdce 	bl	800ab08 <xTaskCheckForTimeOut>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d0cc      	beq.n	8009f0a <xQueueSemaphoreTake+0x5a>
			prvUnlockQueue( pxQueue );
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7ff fc23 	bl	80097bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f76:	f000 fc61 	bl	800a83c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8009f7a:	f001 f97b 	bl	800b274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f80:	b1db      	cbz	r3, 8009fba <xQueueSemaphoreTake+0x10a>
	taskEXIT_CRITICAL();
 8009f82:	f001 f999 	bl	800b2b8 <vPortExitCritical>
 8009f86:	e7cc      	b.n	8009f22 <xQueueSemaphoreTake+0x72>
 8009f88:	f001 f996 	bl	800b2b8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	b1db      	cbz	r3, 8009fc8 <xQueueSemaphoreTake+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f90:	9901      	ldr	r1, [sp, #4]
 8009f92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f96:	f000 fd2f 	bl	800a9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f7ff fc0e 	bl	80097bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fa0:	f000 fc4c 	bl	800a83c <xTaskResumeAll>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d1bc      	bne.n	8009f22 <xQueueSemaphoreTake+0x72>
					portYIELD_WITHIN_API();
 8009fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fac:	f8c8 3000 	str.w	r3, [r8]
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	e7b3      	b.n	8009f22 <xQueueSemaphoreTake+0x72>
	taskEXIT_CRITICAL();
 8009fba:	f001 f97d 	bl	800b2b8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8009fbe:	b965      	cbnz	r5, 8009fda <xQueueSemaphoreTake+0x12a>
}
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	b004      	add	sp, #16
 8009fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 8009fc8:	f001 f954 	bl	800b274 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009fcc:	68a0      	ldr	r0, [r4, #8]
 8009fce:	f000 fdfd 	bl	800abcc <xTaskPriorityInherit>
 8009fd2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009fd4:	f001 f970 	bl	800b2b8 <vPortExitCritical>
 8009fd8:	e7da      	b.n	8009f90 <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 8009fda:	f001 f94b 	bl	800b274 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009fde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009fe0:	b119      	cbz	r1, 8009fea <xQueueSemaphoreTake+0x13a>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009fe4:	6819      	ldr	r1, [r3, #0]
 8009fe6:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009fea:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8009fec:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009fee:	f000 fe71 	bl	800acd4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009ff2:	f001 f961 	bl	800b2b8 <vPortExitCritical>
 8009ff6:	e7e3      	b.n	8009fc0 <xQueueSemaphoreTake+0x110>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	d0fa      	beq.n	8009ff2 <xQueueSemaphoreTake+0x142>
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	e7fe      	b.n	800a00c <xQueueSemaphoreTake+0x15c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a00e:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a010:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a012:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a014:	b912      	cbnz	r2, 800a01c <xQueueSemaphoreTake+0x16c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a016:	f000 fea9 	bl	800ad6c <pvTaskIncrementMutexHeldCount>
 800a01a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b91b      	cbnz	r3, 800a028 <xQueueSemaphoreTake+0x178>
				taskEXIT_CRITICAL();
 800a020:	f001 f94a 	bl	800b2b8 <vPortExitCritical>
				return pdPASS;
 800a024:	2501      	movs	r5, #1
 800a026:	e7cb      	b.n	8009fc0 <xQueueSemaphoreTake+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a028:	f104 0010 	add.w	r0, r4, #16
 800a02c:	f000 fd1c 	bl	800aa68 <xTaskRemoveFromEventList>
 800a030:	2800      	cmp	r0, #0
 800a032:	d0f5      	beq.n	800a020 <xQueueSemaphoreTake+0x170>
						queueYIELD_IF_USING_PREEMPTION();
 800a034:	4b04      	ldr	r3, [pc, #16]	; (800a048 <xQueueSemaphoreTake+0x198>)
 800a036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	e7ec      	b.n	800a020 <xQueueSemaphoreTake+0x170>
 800a046:	bf00      	nop
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800a04c:	b180      	cbz	r0, 800a070 <xQueueTakeMutexRecursive+0x24>
	{
 800a04e:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a050:	6886      	ldr	r6, [r0, #8]
 800a052:	4604      	mov	r4, r0
 800a054:	460d      	mov	r5, r1
 800a056:	f000 fda3 	bl	800aba0 <xTaskGetCurrentTaskHandle>
 800a05a:	4286      	cmp	r6, r0
 800a05c:	d011      	beq.n	800a082 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a05e:	4629      	mov	r1, r5
 800a060:	4620      	mov	r0, r4
 800a062:	f7ff ff25 	bl	8009eb0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800a066:	b110      	cbz	r0, 800a06e <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a068:	68e3      	ldr	r3, [r4, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	60e3      	str	r3, [r4, #12]
	}
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	e7fe      	b.n	800a080 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a082:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800a084:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a086:	4403      	add	r3, r0
 800a088:	60e3      	str	r3, [r4, #12]
	}
 800a08a:	bd70      	pop	{r4, r5, r6, pc}

0800a08c <xQueueReceiveFromISR>:
{
 800a08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a090:	b1b0      	cbz	r0, 800a0c0 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a092:	b379      	cbz	r1, 800a0f4 <xQueueReceiveFromISR+0x68>
 800a094:	4605      	mov	r5, r0
 800a096:	4690      	mov	r8, r2
 800a098:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a09a:	f001 fa0d 	bl	800b4b8 <vPortValidateInterruptPriority>
	__asm volatile
 800a09e:	f3ef 8711 	mrs	r7, BASEPRI
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0b2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0b4:	b96c      	cbnz	r4, 800a0d2 <xQueueReceiveFromISR+0x46>
			xReturn = pdFAIL;
 800a0b6:	4620      	mov	r0, r4
	__asm volatile
 800a0b8:	f387 8811 	msr	BASEPRI, r7
}
 800a0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueReceiveFromISR+0x44>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a0d2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0da:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a0dc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0de:	f7ff fb5b 	bl	8009798 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0e2:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a0e4:	1c73      	adds	r3, r6, #1
 800a0e6:	d011      	beq.n	800a10c <xQueueReceiveFromISR+0x80>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0e8:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 800a0ea:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0ec:	b25b      	sxtb	r3, r3
 800a0ee:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800a0f2:	e7e1      	b.n	800a0b8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0cc      	beq.n	800a094 <xQueueReceiveFromISR+0x8>
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	e7fe      	b.n	800a10a <xQueueReceiveFromISR+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a10c:	692b      	ldr	r3, [r5, #16]
 800a10e:	b90b      	cbnz	r3, 800a114 <xQueueReceiveFromISR+0x88>
			xReturn = pdPASS;
 800a110:	2001      	movs	r0, #1
 800a112:	e7d1      	b.n	800a0b8 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a114:	f105 0010 	add.w	r0, r5, #16
 800a118:	f000 fca6 	bl	800aa68 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800a11c:	f1b8 0f00 	cmp.w	r8, #0
 800a120:	d0f6      	beq.n	800a110 <xQueueReceiveFromISR+0x84>
 800a122:	2800      	cmp	r0, #0
 800a124:	d0f4      	beq.n	800a110 <xQueueReceiveFromISR+0x84>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a126:	2001      	movs	r0, #1
 800a128:	f8c8 0000 	str.w	r0, [r8]
 800a12c:	e7c4      	b.n	800a0b8 <xQueueReceiveFromISR+0x2c>
 800a12e:	bf00      	nop

0800a130 <vQueueDelete>:
	configASSERT( pxQueue );
 800a130:	b1b8      	cbz	r0, 800a162 <vQueueDelete+0x32>
 800a132:	4a12      	ldr	r2, [pc, #72]	; (800a17c <vQueueDelete+0x4c>)
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a134:	2300      	movs	r3, #0
{
 800a136:	b410      	push	{r4}
 800a138:	4611      	mov	r1, r2
 800a13a:	e002      	b.n	800a142 <vQueueDelete+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a13c:	3301      	adds	r3, #1
 800a13e:	2b08      	cmp	r3, #8
 800a140:	d009      	beq.n	800a156 <vQueueDelete+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a142:	684c      	ldr	r4, [r1, #4]
 800a144:	3108      	adds	r1, #8
 800a146:	42a0      	cmp	r0, r4
 800a148:	d1f8      	bne.n	800a13c <vQueueDelete+0xc>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a14a:	2100      	movs	r1, #0

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a14c:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a150:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a154:	6061      	str	r1, [r4, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a156:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800a15a:	b15b      	cbz	r3, 800a174 <vQueueDelete+0x44>
}
 800a15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	e7fe      	b.n	800a172 <vQueueDelete+0x42>
 800a174:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 800a178:	f001 ba94 	b.w	800b6a4 <vPortFree>
 800a17c:	24014fa8 	.word	0x24014fa8

0800a180 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a180:	2300      	movs	r3, #0
 800a182:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <vQueueAddToRegistry+0x24>)
	{
 800a184:	b430      	push	{r4, r5}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a186:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800a18a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a18e:	b124      	cbz	r4, 800a19a <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a190:	3301      	adds	r3, #1
 800a192:	2b08      	cmp	r3, #8
 800a194:	d1f7      	bne.n	800a186 <vQueueAddToRegistry+0x6>
	}
 800a196:	bc30      	pop	{r4, r5}
 800a198:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a19a:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a19c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 800a1a0:	bc30      	pop	{r4, r5}
 800a1a2:	4770      	bx	lr
 800a1a4:	24014fa8 	.word	0x24014fa8

0800a1a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1b0:	f001 f860 	bl	800b274 <vPortEnterCritical>
 800a1b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1b8:	2bff      	cmp	r3, #255	; 0xff
 800a1ba:	d102      	bne.n	800a1c2 <vQueueWaitForMessageRestricted+0x1a>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a1c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a1c6:	2bff      	cmp	r3, #255	; 0xff
 800a1c8:	d102      	bne.n	800a1d0 <vQueueWaitForMessageRestricted+0x28>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1d0:	f001 f872 	bl	800b2b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1d6:	b92b      	cbnz	r3, 800a1e4 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4629      	mov	r1, r5
 800a1dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1e0:	f000 fc24 	bl	800aa2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a1e4:	4620      	mov	r0, r4
	}
 800a1e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800a1ea:	f7ff bae7 	b.w	80097bc <prvUnlockQueue>
 800a1ee:	bf00      	nop

0800a1f0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1f6:	f001 f83d 	bl	800b274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1fa:	4a33      	ldr	r2, [pc, #204]	; (800a2c8 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800a1fc:	4e33      	ldr	r6, [pc, #204]	; (800a2cc <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800a1fe:	6813      	ldr	r3, [r2, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a204:	6833      	ldr	r3, [r6, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d030      	beq.n	800a26c <prvAddNewTaskToReadyList+0x7c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a20a:	4c31      	ldr	r4, [pc, #196]	; (800a2d0 <prvAddNewTaskToReadyList+0xe0>)
 800a20c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	b32b      	cbz	r3, 800a25e <prvAddNewTaskToReadyList+0x6e>
 800a212:	4f30      	ldr	r7, [pc, #192]	; (800a2d4 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a214:	4a30      	ldr	r2, [pc, #192]	; (800a2d8 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a216:	4931      	ldr	r1, [pc, #196]	; (800a2dc <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 800a218:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a21a:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 800a21e:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800a220:	4584      	cmp	ip, r0
		uxTaskNumber++;
 800a222:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a224:	64ab      	str	r3, [r5, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800a226:	d200      	bcs.n	800a22a <prvAddNewTaskToReadyList+0x3a>
 800a228:	6008      	str	r0, [r1, #0]
 800a22a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a22e:	1d29      	adds	r1, r5, #4
 800a230:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800a234:	f7ff fa36 	bl	80096a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a238:	f001 f83e 	bl	800b2b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	b163      	cbz	r3, 800a25a <prvAddNewTaskToReadyList+0x6a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a240:	6832      	ldr	r2, [r6, #0]
 800a242:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a244:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a246:	429a      	cmp	r2, r3
 800a248:	d207      	bcs.n	800a25a <prvAddNewTaskToReadyList+0x6a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a24a:	4b25      	ldr	r3, [pc, #148]	; (800a2e0 <prvAddNewTaskToReadyList+0xf0>)
 800a24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a25e:	6833      	ldr	r3, [r6, #0]
 800a260:	4f1c      	ldr	r7, [pc, #112]	; (800a2d4 <prvAddNewTaskToReadyList+0xe4>)
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	4283      	cmp	r3, r0
 800a266:	d8d5      	bhi.n	800a214 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 800a268:	6035      	str	r5, [r6, #0]
 800a26a:	e7d3      	b.n	800a214 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800a26c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d003      	beq.n	800a27c <prvAddNewTaskToReadyList+0x8c>
 800a274:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a276:	4f17      	ldr	r7, [pc, #92]	; (800a2d4 <prvAddNewTaskToReadyList+0xe4>)
 800a278:	4c15      	ldr	r4, [pc, #84]	; (800a2d0 <prvAddNewTaskToReadyList+0xe0>)
 800a27a:	e7cb      	b.n	800a214 <prvAddNewTaskToReadyList+0x24>
 800a27c:	4f15      	ldr	r7, [pc, #84]	; (800a2d4 <prvAddNewTaskToReadyList+0xe4>)
 800a27e:	463c      	mov	r4, r7
 800a280:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a284:	4620      	mov	r0, r4
 800a286:	3414      	adds	r4, #20
 800a288:	f7ff f9fc 	bl	8009684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a28c:	4544      	cmp	r4, r8
 800a28e:	d1f9      	bne.n	800a284 <prvAddNewTaskToReadyList+0x94>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a290:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800a2f8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 800a294:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800a2fc <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 800a298:	4648      	mov	r0, r9
 800a29a:	4c0d      	ldr	r4, [pc, #52]	; (800a2d0 <prvAddNewTaskToReadyList+0xe0>)
 800a29c:	f7ff f9f2 	bl	8009684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	f7ff f9ef 	bl	8009684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2a6:	480f      	ldr	r0, [pc, #60]	; (800a2e4 <prvAddNewTaskToReadyList+0xf4>)
 800a2a8:	f7ff f9ec 	bl	8009684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ac:	480e      	ldr	r0, [pc, #56]	; (800a2e8 <prvAddNewTaskToReadyList+0xf8>)
 800a2ae:	f7ff f9e9 	bl	8009684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2b2:	480e      	ldr	r0, [pc, #56]	; (800a2ec <prvAddNewTaskToReadyList+0xfc>)
 800a2b4:	f7ff f9e6 	bl	8009684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2b8:	4a0d      	ldr	r2, [pc, #52]	; (800a2f0 <prvAddNewTaskToReadyList+0x100>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <prvAddNewTaskToReadyList+0x104>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2bc:	f8c2 9000 	str.w	r9, [r2]
 800a2c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2c2:	f8c3 8000 	str.w	r8, [r3]
 800a2c6:	e7a5      	b.n	800a214 <prvAddNewTaskToReadyList+0x24>
 800a2c8:	24001f80 	.word	0x24001f80
 800a2cc:	24001b10 	.word	0x24001b10
 800a2d0:	24001fdc 	.word	0x24001fdc
 800a2d4:	24001b1c 	.word	0x24001b1c
 800a2d8:	24001f8c 	.word	0x24001f8c
 800a2dc:	24001f90 	.word	0x24001f90
 800a2e0:	e000ed04 	.word	0xe000ed04
 800a2e4:	24001fc8 	.word	0x24001fc8
 800a2e8:	24001ff4 	.word	0x24001ff4
 800a2ec:	24001fe0 	.word	0x24001fe0
 800a2f0:	24001b14 	.word	0x24001b14
 800a2f4:	24001b18 	.word	0x24001b18
 800a2f8:	24001f94 	.word	0x24001f94
 800a2fc:	24001fa8 	.word	0x24001fa8

0800a300 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a300:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a304:	b163      	cbz	r3, 800a320 <prvDeleteTCB+0x20>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a306:	2b01      	cmp	r3, #1
 800a308:	d014      	beq.n	800a334 <prvDeleteTCB+0x34>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d014      	beq.n	800a338 <prvDeleteTCB+0x38>
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	e7fe      	b.n	800a31e <prvDeleteTCB+0x1e>
	{
 800a320:	b510      	push	{r4, lr}
 800a322:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 800a324:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a326:	f001 f9bd 	bl	800b6a4 <vPortFree>
				vPortFree( pxTCB );
 800a32a:	4620      	mov	r0, r4
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a330:	f001 b9b8 	b.w	800b6a4 <vPortFree>
				vPortFree( pxTCB );
 800a334:	f001 b9b6 	b.w	800b6a4 <vPortFree>
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop

0800a33c <prvIdleTask>:
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	4c15      	ldr	r4, [pc, #84]	; (800a394 <prvIdleTask+0x58>)
				taskYIELD();
 800a340:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800a344:	4e14      	ldr	r6, [pc, #80]	; (800a398 <prvIdleTask+0x5c>)
 800a346:	4d15      	ldr	r5, [pc, #84]	; (800a39c <prvIdleTask+0x60>)
 800a348:	f8df a054 	ldr.w	sl, [pc, #84]	; 800a3a0 <prvIdleTask+0x64>
 800a34c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800a3a4 <prvIdleTask+0x68>
 800a350:	e011      	b.n	800a376 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800a352:	f000 ff8f 	bl	800b274 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a356:	68f3      	ldr	r3, [r6, #12]
 800a358:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a35a:	1d38      	adds	r0, r7, #4
 800a35c:	f7ff f9cc 	bl	80096f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	3b01      	subs	r3, #1
 800a364:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	3b01      	subs	r3, #1
 800a36a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a36c:	f000 ffa4 	bl	800b2b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ffc5 	bl	800a300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1ea      	bne.n	800a352 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a37c:	f8da 3000 	ldr.w	r3, [sl]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d9f8      	bls.n	800a376 <prvIdleTask+0x3a>
				taskYIELD();
 800a384:	f8c8 9000 	str.w	r9, [r8]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	e7f1      	b.n	800a376 <prvIdleTask+0x3a>
 800a392:	bf00      	nop
 800a394:	24001f84 	.word	0x24001f84
 800a398:	24001ff4 	.word	0x24001ff4
 800a39c:	24001f80 	.word	0x24001f80
 800a3a0:	24001b1c 	.word	0x24001b1c
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a8:	4a03      	ldr	r2, [pc, #12]	; (800a3b8 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3aa:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3b0:	68d2      	ldr	r2, [r2, #12]
 800a3b2:	6852      	ldr	r2, [r2, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
	}
}
 800a3b6:	4770      	bx	lr
 800a3b8:	24001b14 	.word	0x24001b14
 800a3bc:	24001fbc 	.word	0x24001fbc

0800a3c0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3c6:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a3ca:	4607      	mov	r7, r0
 800a3cc:	468a      	mov	sl, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3ce:	464a      	mov	r2, r9
 800a3d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a3d2:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a3d4:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3d6:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a3da:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3de:	f009 fa75 	bl	80138cc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a3e4:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3e6:	f029 0907 	bic.w	r9, r9, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a3ea:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	if( pcName != NULL )
 800a3ee:	f1ba 0f00 	cmp.w	sl, #0
 800a3f2:	d037      	beq.n	800a464 <prvInitialiseNewTask.isra.2+0xa4>
 800a3f4:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3f8:	f10a 010f 	add.w	r1, sl, #15
 800a3fc:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800a400:	e001      	b.n	800a406 <prvInitialiseNewTask.isra.2+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a402:	428b      	cmp	r3, r1
 800a404:	d006      	beq.n	800a414 <prvInitialiseNewTask.isra.2+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a406:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a40a:	f802 0f01 	strb.w	r0, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800a40e:	7818      	ldrb	r0, [r3, #0]
 800a410:	2800      	cmp	r0, #0
 800a412:	d1f6      	bne.n	800a402 <prvInitialiseNewTask.isra.2+0x42>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a414:	2300      	movs	r3, #0
 800a416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a41a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a41c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a420:	f104 0004 	add.w	r0, r4, #4
 800a424:	bf28      	it	cs
 800a426:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a428:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800a42a:	e9c4 5a14 	strd	r5, sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a42e:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a432:	f7ff f933 	bl	800969c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a436:	f104 0018 	add.w	r0, r4, #24
 800a43a:	f7ff f92f 	bl	800969c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800a43e:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a442:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a444:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a446:	4639      	mov	r1, r7
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a448:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a44c:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a44e:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a452:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a454:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a456:	f000 fee1 	bl	800b21c <pxPortInitialiseStack>
 800a45a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a45c:	b106      	cbz	r6, 800a460 <prvInitialiseNewTask.isra.2+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a45e:	6034      	str	r4, [r6, #0]
}
 800a460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a464:	f884 a034 	strb.w	sl, [r4, #52]	; 0x34
 800a468:	e7d7      	b.n	800a41a <prvInitialiseNewTask.isra.2+0x5a>
 800a46a:	bf00      	nop

0800a46c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a46e:	4b15      	ldr	r3, [pc, #84]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800a470:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a472:	4e15      	ldr	r6, [pc, #84]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800a474:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800a476:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a478:	6830      	ldr	r0, [r6, #0]
 800a47a:	3004      	adds	r0, #4
 800a47c:	f7ff f93c 	bl	80096f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a480:	1c6b      	adds	r3, r5, #1
 800a482:	d100      	bne.n	800a486 <prvAddCurrentTaskToDelayedList+0x1a>
 800a484:	b9bf      	cbnz	r7, 800a4b6 <prvAddCurrentTaskToDelayedList+0x4a>
 800a486:	1964      	adds	r4, r4, r5
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a488:	6833      	ldr	r3, [r6, #0]
 800a48a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a48c:	d20b      	bcs.n	800a4a6 <prvAddCurrentTaskToDelayedList+0x3a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <prvAddCurrentTaskToDelayedList+0x60>)
 800a490:	6818      	ldr	r0, [r3, #0]
 800a492:	6831      	ldr	r1, [r6, #0]
 800a494:	3104      	adds	r1, #4
 800a496:	f7ff f915 	bl	80096c4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x64>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	42a2      	cmp	r2, r4
 800a4a0:	d900      	bls.n	800a4a4 <prvAddCurrentTaskToDelayedList+0x38>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a4a2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	6831      	ldr	r1, [r6, #0]
}
 800a4ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4b0:	3104      	adds	r1, #4
 800a4b2:	f7ff b907 	b.w	80096c4 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4b6:	6831      	ldr	r1, [r6, #0]
 800a4b8:	4807      	ldr	r0, [pc, #28]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a4ba:	3104      	adds	r1, #4
}
 800a4bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4c0:	f7ff b8f0 	b.w	80096a4 <vListInsertEnd>
 800a4c4:	24002008 	.word	0x24002008
 800a4c8:	24001b10 	.word	0x24001b10
 800a4cc:	24001b14 	.word	0x24001b14
 800a4d0:	24001fbc 	.word	0x24001fbc
 800a4d4:	24001b18 	.word	0x24001b18
 800a4d8:	24001fe0 	.word	0x24001fe0

0800a4dc <xTaskIncrementTick.part.5>:
BaseType_t xTaskIncrementTick( void )
 800a4dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4e0:	4b40      	ldr	r3, [pc, #256]	; (800a5e4 <xTaskIncrementTick.part.5+0x108>)
 800a4e2:	681f      	ldr	r7, [r3, #0]
 800a4e4:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 800a4e6:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4e8:	b1df      	cbz	r7, 800a522 <xTaskIncrementTick.part.5+0x46>
 800a4ea:	4e3f      	ldr	r6, [pc, #252]	; (800a5e8 <xTaskIncrementTick.part.5+0x10c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4ec:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a4ee:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4f0:	429f      	cmp	r7, r3
 800a4f2:	d230      	bcs.n	800a556 <xTaskIncrementTick.part.5+0x7a>
 800a4f4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800a600 <xTaskIncrementTick.part.5+0x124>
 800a4f8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a604 <xTaskIncrementTick.part.5+0x128>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4fc:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800a500:	493a      	ldr	r1, [pc, #232]	; (800a5ec <xTaskIncrementTick.part.5+0x110>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800a50e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800a510:	2a02      	cmp	r2, #2
 800a512:	bf28      	it	cs
 800a514:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800a516:	2b00      	cmp	r3, #0
}
 800a518:	bf0c      	ite	eq
 800a51a:	4628      	moveq	r0, r5
 800a51c:	2001      	movne	r0, #1
 800a51e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800a522:	4c33      	ldr	r4, [pc, #204]	; (800a5f0 <xTaskIncrementTick.part.5+0x114>)
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d14d      	bne.n	800a5c8 <xTaskIncrementTick.part.5+0xec>
 800a52c:	4b31      	ldr	r3, [pc, #196]	; (800a5f4 <xTaskIncrementTick.part.5+0x118>)
 800a52e:	6821      	ldr	r1, [r4, #0]
 800a530:	4a31      	ldr	r2, [pc, #196]	; (800a5f8 <xTaskIncrementTick.part.5+0x11c>)
 800a532:	6818      	ldr	r0, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a534:	4e2c      	ldr	r6, [pc, #176]	; (800a5e8 <xTaskIncrementTick.part.5+0x10c>)
			taskSWITCH_DELAYED_LISTS();
 800a536:	6020      	str	r0, [r4, #0]
 800a538:	6019      	str	r1, [r3, #0]
 800a53a:	6813      	ldr	r3, [r2, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d14a      	bne.n	800a5de <xTaskIncrementTick.part.5+0x102>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
BaseType_t xSwitchRequired = pdFALSE;
 800a54c:	2500      	movs	r5, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800a54e:	6033      	str	r3, [r6, #0]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	429f      	cmp	r7, r3
 800a554:	d3ce      	bcc.n	800a4f4 <xTaskIncrementTick.part.5+0x18>
 800a556:	4c26      	ldr	r4, [pc, #152]	; (800a5f0 <xTaskIncrementTick.part.5+0x114>)
 800a558:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a600 <xTaskIncrementTick.part.5+0x124>
 800a55c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800a604 <xTaskIncrementTick.part.5+0x128>
 800a560:	e02a      	b.n	800a5b8 <xTaskIncrementTick.part.5+0xdc>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a56a:	f8da 2004 	ldr.w	r2, [sl, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a56e:	f10a 0b04 	add.w	fp, sl, #4
					if( xConstTickCount < xItemValue )
 800a572:	4297      	cmp	r7, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a574:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 800a576:	d330      	bcc.n	800a5da <xTaskIncrementTick.part.5+0xfe>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a578:	f7ff f8be 	bl	80096f8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a57c:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a580:	f10a 0018 	add.w	r0, sl, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a584:	b10a      	cbz	r2, 800a58a <xTaskIncrementTick.part.5+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a586:	f7ff f8b7 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a58a:	4b1c      	ldr	r3, [pc, #112]	; (800a5fc <xTaskIncrementTick.part.5+0x120>)
 800a58c:	4659      	mov	r1, fp
 800a58e:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800a598:	429a      	cmp	r2, r3
 800a59a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800a59e:	d901      	bls.n	800a5a4 <xTaskIncrementTick.part.5+0xc8>
 800a5a0:	4b16      	ldr	r3, [pc, #88]	; (800a5fc <xTaskIncrementTick.part.5+0x120>)
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	f7ff f87e 	bl	80096a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5a8:	f8d9 1000 	ldr.w	r1, [r9]
 800a5ac:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800a5b0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bf28      	it	cs
 800a5b6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1d0      	bne.n	800a562 <xTaskIncrementTick.part.5+0x86>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c4:	6033      	str	r3, [r6, #0]
 800a5c6:	e799      	b.n	800a4fc <xTaskIncrementTick.part.5+0x20>
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	e7fe      	b.n	800a5d8 <xTaskIncrementTick.part.5+0xfc>
						xNextTaskUnblockTime = xItemValue;
 800a5da:	6032      	str	r2, [r6, #0]
 800a5dc:	e78e      	b.n	800a4fc <xTaskIncrementTick.part.5+0x20>
 800a5de:	f7ff fee3 	bl	800a3a8 <prvResetNextTaskUnblockTime.part.1>
 800a5e2:	e783      	b.n	800a4ec <xTaskIncrementTick.part.5+0x10>
 800a5e4:	24002008 	.word	0x24002008
 800a5e8:	24001fbc 	.word	0x24001fbc
 800a5ec:	2400200c 	.word	0x2400200c
 800a5f0:	24001b14 	.word	0x24001b14
 800a5f4:	24001b18 	.word	0x24001b18
 800a5f8:	24001fc0 	.word	0x24001fc0
 800a5fc:	24001f90 	.word	0x24001f90
 800a600:	24001b1c 	.word	0x24001b1c
 800a604:	24001b10 	.word	0x24001b10

0800a608 <vTaskSwitchContext.part.6>:
		xYieldPending = pdFALSE;
 800a608:	2200      	movs	r2, #0
 800a60a:	4b2a      	ldr	r3, [pc, #168]	; (800a6b4 <vTaskSwitchContext.part.6+0xac>)
void vTaskSwitchContext( void )
 800a60c:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800a60e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a610:	f7f6 f928 	bl	8000864 <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a614:	4a28      	ldr	r2, [pc, #160]	; (800a6b8 <vTaskSwitchContext.part.6+0xb0>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a616:	4c29      	ldr	r4, [pc, #164]	; (800a6bc <vTaskSwitchContext.part.6+0xb4>)
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a618:	6815      	ldr	r5, [r2, #0]
 800a61a:	42a8      	cmp	r0, r5
 800a61c:	d904      	bls.n	800a628 <vTaskSwitchContext.part.6+0x20>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a61e:	6821      	ldr	r1, [r4, #0]
 800a620:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800a622:	1b5b      	subs	r3, r3, r5
 800a624:	4403      	add	r3, r0
 800a626:	658b      	str	r3, [r1, #88]	; 0x58
		taskCHECK_FOR_STACK_OVERFLOW();
 800a628:	6823      	ldr	r3, [r4, #0]
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a62a:	6010      	str	r0, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a634:	d103      	bne.n	800a63e <vTaskSwitchContext.part.6+0x36>
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a63c:	d02b      	beq.n	800a696 <vTaskSwitchContext.part.6+0x8e>
 800a63e:	6820      	ldr	r0, [r4, #0]
 800a640:	6821      	ldr	r1, [r4, #0]
 800a642:	3134      	adds	r1, #52	; 0x34
 800a644:	f7f6 f914 	bl	8000870 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a648:	4d1d      	ldr	r5, [pc, #116]	; (800a6c0 <vTaskSwitchContext.part.6+0xb8>)
 800a64a:	481e      	ldr	r0, [pc, #120]	; (800a6c4 <vTaskSwitchContext.part.6+0xbc>)
 800a64c:	682a      	ldr	r2, [r5, #0]
 800a64e:	0093      	lsls	r3, r2, #2
 800a650:	1899      	adds	r1, r3, r2
 800a652:	0089      	lsls	r1, r1, #2
 800a654:	5841      	ldr	r1, [r0, r1]
 800a656:	b939      	cbnz	r1, 800a668 <vTaskSwitchContext.part.6+0x60>
 800a658:	b1a2      	cbz	r2, 800a684 <vTaskSwitchContext.part.6+0x7c>
 800a65a:	3a01      	subs	r2, #1
 800a65c:	0093      	lsls	r3, r2, #2
 800a65e:	1899      	adds	r1, r3, r2
 800a660:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a664:	2900      	cmp	r1, #0
 800a666:	d0f7      	beq.n	800a658 <vTaskSwitchContext.part.6+0x50>
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	18c6      	adds	r6, r0, r3
 800a66e:	3308      	adds	r3, #8
 800a670:	6871      	ldr	r1, [r6, #4]
 800a672:	4403      	add	r3, r0
 800a674:	6849      	ldr	r1, [r1, #4]
 800a676:	4299      	cmp	r1, r3
 800a678:	6071      	str	r1, [r6, #4]
 800a67a:	d015      	beq.n	800a6a8 <vTaskSwitchContext.part.6+0xa0>
 800a67c:	68cb      	ldr	r3, [r1, #12]
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	602a      	str	r2, [r5, #0]
}
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	e7fe      	b.n	800a694 <vTaskSwitchContext.part.6+0x8c>
		taskCHECK_FOR_STACK_OVERFLOW();
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a69c:	d1cf      	bne.n	800a63e <vTaskSwitchContext.part.6+0x36>
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800a6a4:	d1cb      	bne.n	800a63e <vTaskSwitchContext.part.6+0x36>
 800a6a6:	e7cf      	b.n	800a648 <vTaskSwitchContext.part.6+0x40>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a8:	2314      	movs	r3, #20
 800a6aa:	6849      	ldr	r1, [r1, #4]
 800a6ac:	fb03 0002 	mla	r0, r3, r2, r0
 800a6b0:	6041      	str	r1, [r0, #4]
 800a6b2:	e7e3      	b.n	800a67c <vTaskSwitchContext.part.6+0x74>
 800a6b4:	2400200c 	.word	0x2400200c
 800a6b8:	24001f7c 	.word	0x24001f7c
 800a6bc:	24001b10 	.word	0x24001b10
 800a6c0:	24001f90 	.word	0x24001f90
 800a6c4:	24001b1c 	.word	0x24001b1c

0800a6c8 <xTaskCreateStatic>:
	{
 800a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800a6d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800a6d2:	b1bd      	cbz	r5, 800a704 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 800a6d4:	b16c      	cbz	r4, 800a6f2 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6d6:	2764      	movs	r7, #100	; 0x64
 800a6d8:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6da:	9f05      	ldr	r7, [sp, #20]
 800a6dc:	2f64      	cmp	r7, #100	; 0x64
 800a6de:	d01a      	beq.n	800a716 <xTaskCreateStatic+0x4e>
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	e7fe      	b.n	800a6f0 <xTaskCreateStatic+0x28>
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	e7fe      	b.n	800a702 <xTaskCreateStatic+0x3a>
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	e7fe      	b.n	800a714 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a716:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a718:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a71a:	ad04      	add	r5, sp, #16
 800a71c:	9402      	str	r4, [sp, #8]
 800a71e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a720:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a724:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a726:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a728:	f7ff fe4a 	bl	800a3c0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff fd5f 	bl	800a1f0 <prvAddNewTaskToReadyList>
	}
 800a732:	9804      	ldr	r0, [sp, #16]
 800a734:	b007      	add	sp, #28
 800a736:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a738 <xTaskCreate>:
	{
 800a738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a73c:	4607      	mov	r7, r0
 800a73e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a740:	0090      	lsls	r0, r2, #2
	{
 800a742:	4616      	mov	r6, r2
 800a744:	4688      	mov	r8, r1
 800a746:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a748:	f000 ff0c 	bl	800b564 <pvPortMalloc>
			if( pxStack != NULL )
 800a74c:	b320      	cbz	r0, 800a798 <xTaskCreate+0x60>
 800a74e:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a750:	2064      	movs	r0, #100	; 0x64
 800a752:	f000 ff07 	bl	800b564 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a756:	4604      	mov	r4, r0
 800a758:	b1b0      	cbz	r0, 800a788 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800a75a:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a75c:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a760:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a762:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a764:	f884 c061 	strb.w	ip, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a768:	4632      	mov	r2, r6
 800a76a:	9501      	str	r5, [sp, #4]
 800a76c:	4641      	mov	r1, r8
 800a76e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a770:	4638      	mov	r0, r7
 800a772:	9402      	str	r4, [sp, #8]
 800a774:	9500      	str	r5, [sp, #0]
 800a776:	f7ff fe23 	bl	800a3c0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff fd38 	bl	800a1f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a780:	2001      	movs	r0, #1
	}
 800a782:	b005      	add	sp, #20
 800a784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 ff8b 	bl	800b6a4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a78e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a792:	b005      	add	sp, #20
 800a794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a79c:	e7f1      	b.n	800a782 <xTaskCreate+0x4a>
 800a79e:	bf00      	nop

0800a7a0 <vTaskStartScheduler>:
{
 800a7a0:	b530      	push	{r4, r5, lr}
 800a7a2:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7a4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7a6:	aa07      	add	r2, sp, #28
 800a7a8:	a906      	add	r1, sp, #24
 800a7aa:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7b0:	f7fe ff4c 	bl	800964c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7b4:	9a07      	ldr	r2, [sp, #28]
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	9400      	str	r4, [sp, #0]
 800a7ba:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800a7be:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a7c2:	4915      	ldr	r1, [pc, #84]	; (800a818 <vTaskStartScheduler+0x78>)
 800a7c4:	4815      	ldr	r0, [pc, #84]	; (800a81c <vTaskStartScheduler+0x7c>)
 800a7c6:	f7ff ff7f 	bl	800a6c8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a7ca:	b310      	cbz	r0, 800a812 <vTaskStartScheduler+0x72>
			xReturn = xTimerCreateTimerTask();
 800a7cc:	f000 fb36 	bl	800ae3c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a7d0:	2801      	cmp	r0, #1
 800a7d2:	d00a      	beq.n	800a7ea <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d11c      	bne.n	800a812 <vTaskStartScheduler+0x72>
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	e7fe      	b.n	800a7e8 <vTaskStartScheduler+0x48>
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7fa:	4909      	ldr	r1, [pc, #36]	; (800a820 <vTaskStartScheduler+0x80>)
 800a7fc:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 800a800:	4a08      	ldr	r2, [pc, #32]	; (800a824 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800a804:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800a806:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a808:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a80a:	f7f6 f825 	bl	8000858 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800a80e:	f000 fdcd 	bl	800b3ac <xPortStartScheduler>
}
 800a812:	b009      	add	sp, #36	; 0x24
 800a814:	bd30      	pop	{r4, r5, pc}
 800a816:	bf00      	nop
 800a818:	080148bc 	.word	0x080148bc
 800a81c:	0800a33d 	.word	0x0800a33d
 800a820:	24001fbc 	.word	0x24001fbc
 800a824:	24001fdc 	.word	0x24001fdc
 800a828:	24002008 	.word	0x24002008

0800a82c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a82c:	4a02      	ldr	r2, [pc, #8]	; (800a838 <vTaskSuspendAll+0xc>)
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	6013      	str	r3, [r2, #0]
}
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	24001f88 	.word	0x24001f88

0800a83c <xTaskResumeAll>:
{
 800a83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800a840:	4d3a      	ldr	r5, [pc, #232]	; (800a92c <xTaskResumeAll+0xf0>)
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b943      	cbnz	r3, 800a858 <xTaskResumeAll+0x1c>
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	e7fe      	b.n	800a856 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800a858:	f000 fd0c 	bl	800b274 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	3b01      	subs	r3, #1
 800a860:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a862:	682c      	ldr	r4, [r5, #0]
 800a864:	2c00      	cmp	r4, #0
 800a866:	d151      	bne.n	800a90c <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a868:	4b31      	ldr	r3, [pc, #196]	; (800a930 <xTaskResumeAll+0xf4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d04d      	beq.n	800a90c <xTaskResumeAll+0xd0>
 800a870:	4f30      	ldr	r7, [pc, #192]	; (800a934 <xTaskResumeAll+0xf8>)
 800a872:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800a94c <xTaskResumeAll+0x110>
					prvAddTaskToReadyList( pxTCB );
 800a876:	4e30      	ldr	r6, [pc, #192]	; (800a938 <xTaskResumeAll+0xfc>)
 800a878:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a950 <xTaskResumeAll+0x114>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a87c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800a954 <xTaskResumeAll+0x118>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a880:	f8d8 3000 	ldr.w	r3, [r8]
 800a884:	b303      	cbz	r3, 800a8c8 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a88a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a88c:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a890:	f104 0018 	add.w	r0, r4, #24
 800a894:	f7fe ff30 	bl	80096f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a898:	4658      	mov	r0, fp
 800a89a:	f7fe ff2d 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a89e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8a0:	6832      	ldr	r2, [r6, #0]
 800a8a2:	4659      	mov	r1, fp
 800a8a4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800a8ae:	d900      	bls.n	800a8b2 <xTaskResumeAll+0x76>
 800a8b0:	6033      	str	r3, [r6, #0]
 800a8b2:	f7fe fef7 	bl	80096a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8b6:	f8d9 1000 	ldr.w	r1, [r9]
 800a8ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						xYieldPending = pdTRUE;
 800a8bc:	2301      	movs	r3, #1
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a8c0:	428a      	cmp	r2, r1
 800a8c2:	d3dd      	bcc.n	800a880 <xTaskResumeAll+0x44>
						xYieldPending = pdTRUE;
 800a8c4:	603b      	str	r3, [r7, #0]
 800a8c6:	e7db      	b.n	800a880 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800a8c8:	b13c      	cbz	r4, 800a8da <xTaskResumeAll+0x9e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ca:	4b1c      	ldr	r3, [pc, #112]	; (800a93c <xTaskResumeAll+0x100>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	bb13      	cbnz	r3, 800a918 <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	; (800a940 <xTaskResumeAll+0x104>)
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8da:	4e1a      	ldr	r6, [pc, #104]	; (800a944 <xTaskResumeAll+0x108>)
 800a8dc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a8de:	b14c      	cbz	r4, 800a8f4 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800a8e0:	f04f 0801 	mov.w	r8, #1
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b1d3      	cbz	r3, 800a91e <xTaskResumeAll+0xe2>
		++xPendedTicks;
 800a8e8:	6833      	ldr	r3, [r6, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8ee:	3c01      	subs	r4, #1
 800a8f0:	d1f8      	bne.n	800a8e4 <xTaskResumeAll+0xa8>
						xPendedTicks = 0;
 800a8f2:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	b14b      	cbz	r3, 800a90c <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800a8f8:	4b13      	ldr	r3, [pc, #76]	; (800a948 <xTaskResumeAll+0x10c>)
 800a8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a908:	2401      	movs	r4, #1
 800a90a:	e000      	b.n	800a90e <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 800a90c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a90e:	f000 fcd3 	bl	800b2b8 <vPortExitCritical>
}
 800a912:	4620      	mov	r0, r4
 800a914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a918:	f7ff fd46 	bl	800a3a8 <prvResetNextTaskUnblockTime.part.1>
 800a91c:	e7dd      	b.n	800a8da <xTaskResumeAll+0x9e>
 800a91e:	f7ff fddd 	bl	800a4dc <xTaskIncrementTick.part.5>
							if( xTaskIncrementTick() != pdFALSE )
 800a922:	2800      	cmp	r0, #0
 800a924:	d0e3      	beq.n	800a8ee <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800a926:	f8c7 8000 	str.w	r8, [r7]
 800a92a:	e7e0      	b.n	800a8ee <xTaskResumeAll+0xb2>
 800a92c:	24001f88 	.word	0x24001f88
 800a930:	24001f80 	.word	0x24001f80
 800a934:	2400200c 	.word	0x2400200c
 800a938:	24001f90 	.word	0x24001f90
 800a93c:	24001b14 	.word	0x24001b14
 800a940:	24001fbc 	.word	0x24001fbc
 800a944:	24001fc4 	.word	0x24001fc4
 800a948:	e000ed04 	.word	0xe000ed04
 800a94c:	24001fc8 	.word	0x24001fc8
 800a950:	24001b1c 	.word	0x24001b1c
 800a954:	24001b10 	.word	0x24001b10

0800a958 <vTaskDelay>:
	{
 800a958:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a95a:	b198      	cbz	r0, 800a984 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 800a95c:	4b0e      	ldr	r3, [pc, #56]	; (800a998 <vTaskDelay+0x40>)
 800a95e:	6819      	ldr	r1, [r3, #0]
 800a960:	b141      	cbz	r1, 800a974 <vTaskDelay+0x1c>
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	e7fe      	b.n	800a972 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	3201      	adds	r2, #1
 800a978:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a97a:	f7ff fd77 	bl	800a46c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a97e:	f7ff ff5d 	bl	800a83c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a982:	b938      	cbnz	r0, 800a994 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 800a984:	4b05      	ldr	r3, [pc, #20]	; (800a99c <vTaskDelay+0x44>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
	}
 800a994:	bd08      	pop	{r3, pc}
 800a996:	bf00      	nop
 800a998:	24001f88 	.word	0x24001f88
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a9a0:	4b01      	ldr	r3, [pc, #4]	; (800a9a8 <xTaskGetTickCount+0x8>)
 800a9a2:	6818      	ldr	r0, [r3, #0]
}
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	24002008 	.word	0x24002008

0800a9ac <xTaskGetTickCountFromISR>:
{
 800a9ac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9ae:	f000 fd83 	bl	800b4b8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800a9b2:	4b01      	ldr	r3, [pc, #4]	; (800a9b8 <xTaskGetTickCountFromISR+0xc>)
 800a9b4:	6818      	ldr	r0, [r3, #0]
}
 800a9b6:	bd08      	pop	{r3, pc}
 800a9b8:	24002008 	.word	0x24002008

0800a9bc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <xTaskIncrementTick+0x18>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	b90b      	cbnz	r3, 800a9c6 <xTaskIncrementTick+0xa>
 800a9c2:	f7ff bd8b 	b.w	800a4dc <xTaskIncrementTick.part.5>
		++xPendedTicks;
 800a9c6:	4a04      	ldr	r2, [pc, #16]	; (800a9d8 <xTaskIncrementTick+0x1c>)
}
 800a9c8:	2000      	movs	r0, #0
		++xPendedTicks;
 800a9ca:	6813      	ldr	r3, [r2, #0]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	6013      	str	r3, [r2, #0]
}
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	24001f88 	.word	0x24001f88
 800a9d8:	24001fc4 	.word	0x24001fc4

0800a9dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9dc:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <vTaskSwitchContext+0x14>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	b11b      	cbz	r3, 800a9ea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a9e2:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <vTaskSwitchContext+0x18>)
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	601a      	str	r2, [r3, #0]
}
 800a9e8:	4770      	bx	lr
 800a9ea:	f7ff be0d 	b.w	800a608 <vTaskSwitchContext.part.6>
 800a9ee:	bf00      	nop
 800a9f0:	24001f88 	.word	0x24001f88
 800a9f4:	2400200c 	.word	0x2400200c

0800a9f8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a9f8:	b940      	cbnz	r0, 800aa0c <vTaskPlaceOnEventList+0x14>
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	e7fe      	b.n	800aa0a <vTaskPlaceOnEventList+0x12>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa0c:	4b06      	ldr	r3, [pc, #24]	; (800aa28 <vTaskPlaceOnEventList+0x30>)
{
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	3118      	adds	r1, #24
 800aa16:	f7fe fe55 	bl	80096c4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	2101      	movs	r1, #1
}
 800aa1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa22:	f7ff bd23 	b.w	800a46c <prvAddCurrentTaskToDelayedList>
 800aa26:	bf00      	nop
 800aa28:	24001b10 	.word	0x24001b10

0800aa2c <vTaskPlaceOnEventListRestricted>:
	{
 800aa2c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800aa2e:	b180      	cbz	r0, 800aa52 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa30:	4b0c      	ldr	r3, [pc, #48]	; (800aa64 <vTaskPlaceOnEventListRestricted+0x38>)
 800aa32:	460d      	mov	r5, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	6819      	ldr	r1, [r3, #0]
 800aa38:	3118      	adds	r1, #24
 800aa3a:	f7fe fe33 	bl	80096a4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800aa3e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa40:	4621      	mov	r1, r4
 800aa42:	bf0c      	ite	eq
 800aa44:	4628      	moveq	r0, r5
 800aa46:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800aa4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa4e:	f7ff bd0d 	b.w	800a46c <prvAddCurrentTaskToDelayedList>
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	e7fe      	b.n	800aa62 <vTaskPlaceOnEventListRestricted+0x36>
 800aa64:	24001b10 	.word	0x24001b10

0800aa68 <xTaskRemoveFromEventList>:
{
 800aa68:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa6a:	68c3      	ldr	r3, [r0, #12]
 800aa6c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800aa6e:	b31c      	cbz	r4, 800aab8 <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa70:	f104 0518 	add.w	r5, r4, #24
 800aa74:	4628      	mov	r0, r5
 800aa76:	f7fe fe3f 	bl	80096f8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7a:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <xTaskRemoveFromEventList+0x70>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	bb23      	cbnz	r3, 800aaca <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa80:	1d25      	adds	r5, r4, #4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7fe fe38 	bl	80096f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa88:	4b14      	ldr	r3, [pc, #80]	; (800aadc <xTaskRemoveFromEventList+0x74>)
 800aa8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	4290      	cmp	r0, r2
 800aa90:	d900      	bls.n	800aa94 <xTaskRemoveFromEventList+0x2c>
 800aa92:	6018      	str	r0, [r3, #0]
 800aa94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa98:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <xTaskRemoveFromEventList+0x78>)
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aaa0:	f7fe fe00 	bl	80096a4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aaa4:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <xTaskRemoveFromEventList+0x7c>)
 800aaa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d911      	bls.n	800aad4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <xTaskRemoveFromEventList+0x80>)
 800aab2:	2001      	movs	r0, #1
 800aab4:	6018      	str	r0, [r3, #0]
}
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	e7fe      	b.n	800aac8 <xTaskRemoveFromEventList+0x60>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaca:	4629      	mov	r1, r5
 800aacc:	4807      	ldr	r0, [pc, #28]	; (800aaec <xTaskRemoveFromEventList+0x84>)
 800aace:	f7fe fde9 	bl	80096a4 <vListInsertEnd>
 800aad2:	e7e7      	b.n	800aaa4 <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
 800aad4:	2000      	movs	r0, #0
}
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	24001f88 	.word	0x24001f88
 800aadc:	24001f90 	.word	0x24001f90
 800aae0:	24001b1c 	.word	0x24001b1c
 800aae4:	24001b10 	.word	0x24001b10
 800aae8:	2400200c 	.word	0x2400200c
 800aaec:	24001fc8 	.word	0x24001fc8

0800aaf0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aaf0:	4a03      	ldr	r2, [pc, #12]	; (800ab00 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aaf2:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aaf4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	e9c0 2300 	strd	r2, r3, [r0]
}
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	24001fc0 	.word	0x24001fc0
 800ab04:	24002008 	.word	0x24002008

0800ab08 <xTaskCheckForTimeOut>:
{
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800ab0a:	b340      	cbz	r0, 800ab5e <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800ab0c:	b1f1      	cbz	r1, 800ab4c <xTaskCheckForTimeOut+0x44>
 800ab0e:	460d      	mov	r5, r1
 800ab10:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ab12:	f000 fbaf 	bl	800b274 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ab16:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ab90 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 800ab1a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab1c:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800ab1e:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800ab22:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab24:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 800ab28:	d022      	beq.n	800ab70 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab2a:	4918      	ldr	r1, [pc, #96]	; (800ab8c <xTaskCheckForTimeOut+0x84>)
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	f8d1 e000 	ldr.w	lr, [r1]
 800ab32:	4572      	cmp	r2, lr
 800ab34:	d001      	beq.n	800ab3a <xTaskCheckForTimeOut+0x32>
 800ab36:	42b7      	cmp	r7, r6
 800ab38:	d925      	bls.n	800ab86 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab3a:	4283      	cmp	r3, r0
 800ab3c:	d81a      	bhi.n	800ab74 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 800ab3e:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800ab40:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800ab42:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 800ab44:	f000 fbb8 	bl	800b2b8 <vPortExitCritical>
}
 800ab48:	4630      	mov	r0, r6
 800ab4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	e7fe      	b.n	800ab5c <xTaskCheckForTimeOut+0x54>
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	e7fe      	b.n	800ab6e <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 800ab70:	2600      	movs	r6, #0
 800ab72:	e7e7      	b.n	800ab44 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab74:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 800ab76:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab78:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 800ab7c:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 800ab7e:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab80:	e9c4 1200 	strd	r1, r2, [r4]
 800ab84:	e7de      	b.n	800ab44 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 800ab86:	2601      	movs	r6, #1
 800ab88:	e7dc      	b.n	800ab44 <xTaskCheckForTimeOut+0x3c>
 800ab8a:	bf00      	nop
 800ab8c:	24001fc0 	.word	0x24001fc0
 800ab90:	24002008 	.word	0x24002008

0800ab94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ab94:	4b01      	ldr	r3, [pc, #4]	; (800ab9c <vTaskMissedYield+0x8>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	601a      	str	r2, [r3, #0]
}
 800ab9a:	4770      	bx	lr
 800ab9c:	2400200c 	.word	0x2400200c

0800aba0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800aba0:	4b01      	ldr	r3, [pc, #4]	; (800aba8 <xTaskGetCurrentTaskHandle+0x8>)
 800aba2:	6818      	ldr	r0, [r3, #0]
	}
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	24001b10 	.word	0x24001b10

0800abac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800abac:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <xTaskGetSchedulerState+0x18>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	b133      	cbz	r3, 800abc0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <xTaskGetSchedulerState+0x1c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800abb8:	bf0c      	ite	eq
 800abba:	2002      	moveq	r0, #2
 800abbc:	2000      	movne	r0, #0
 800abbe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abc0:	2001      	movs	r0, #1
	}
 800abc2:	4770      	bx	lr
 800abc4:	24001fdc 	.word	0x24001fdc
 800abc8:	24001f88 	.word	0x24001f88

0800abcc <xTaskPriorityInherit>:
	{
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800abce:	4607      	mov	r7, r0
 800abd0:	b1c8      	cbz	r0, 800ac06 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abd2:	4c1c      	ldr	r4, [pc, #112]	; (800ac44 <xTaskPriorityInherit+0x78>)
 800abd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800abd6:	6821      	ldr	r1, [r4, #0]
 800abd8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800abda:	428a      	cmp	r2, r1
 800abdc:	d214      	bcs.n	800ac08 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abde:	6981      	ldr	r1, [r0, #24]
 800abe0:	2900      	cmp	r1, #0
 800abe2:	db04      	blt.n	800abee <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe4:	6821      	ldr	r1, [r4, #0]
 800abe6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800abe8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800abec:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800abee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800abf2:	4d15      	ldr	r5, [pc, #84]	; (800ac48 <xTaskPriorityInherit+0x7c>)
 800abf4:	6979      	ldr	r1, [r7, #20]
 800abf6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800abfa:	4291      	cmp	r1, r2
 800abfc:	d00c      	beq.n	800ac18 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abfe:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 800ac00:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac04:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 800ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac08:	6822      	ldr	r2, [r4, #0]
 800ac0a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800ac0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ac0e:	4298      	cmp	r0, r3
 800ac10:	bf2c      	ite	cs
 800ac12:	2000      	movcs	r0, #0
 800ac14:	2001      	movcc	r0, #1
	}
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac18:	1d3e      	adds	r6, r7, #4
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7fe fd6c 	bl	80096f8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac20:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac22:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac24:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac26:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac28:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac2a:	4290      	cmp	r0, r2
 800ac2c:	d900      	bls.n	800ac30 <xTaskPriorityInherit+0x64>
 800ac2e:	6018      	str	r0, [r3, #0]
 800ac30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ac34:	4631      	mov	r1, r6
 800ac36:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800ac3a:	f7fe fd33 	bl	80096a4 <vListInsertEnd>
				xReturn = pdTRUE;
 800ac3e:	2001      	movs	r0, #1
	}
 800ac40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac42:	bf00      	nop
 800ac44:	24001b10 	.word	0x24001b10
 800ac48:	24001b1c 	.word	0x24001b1c
 800ac4c:	24001f90 	.word	0x24001f90

0800ac50 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800ac50:	b168      	cbz	r0, 800ac6e <xTaskPriorityDisinherit+0x1e>
	{
 800ac52:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800ac54:	4b1c      	ldr	r3, [pc, #112]	; (800acc8 <xTaskPriorityDisinherit+0x78>)
 800ac56:	681c      	ldr	r4, [r3, #0]
 800ac58:	4284      	cmp	r4, r0
 800ac5a:	d00a      	beq.n	800ac72 <xTaskPriorityDisinherit+0x22>
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	e7fe      	b.n	800ac6c <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800ac6e:	2000      	movs	r0, #0
	}
 800ac70:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800ac72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac74:	b943      	cbnz	r3, 800ac88 <xTaskPriorityDisinherit+0x38>
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	e7fe      	b.n	800ac86 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ac8a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800ac8e:	6563      	str	r3, [r4, #84]	; 0x54
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac90:	4291      	cmp	r1, r2
 800ac92:	d000      	beq.n	800ac96 <xTaskPriorityDisinherit+0x46>
 800ac94:	b10b      	cbz	r3, 800ac9a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800ac96:	2000      	movs	r0, #0
	}
 800ac98:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac9a:	1d25      	adds	r5, r4, #4
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f7fe fd2b 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aca2:	4a0a      	ldr	r2, [pc, #40]	; (800accc <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aca4:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800aca6:	6811      	ldr	r1, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca8:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acac:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800acae:	428b      	cmp	r3, r1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb0:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800acb2:	d900      	bls.n	800acb6 <xTaskPriorityDisinherit+0x66>
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	4a06      	ldr	r2, [pc, #24]	; (800acd0 <xTaskPriorityDisinherit+0x80>)
 800acb8:	2014      	movs	r0, #20
 800acba:	4629      	mov	r1, r5
 800acbc:	fb00 2003 	mla	r0, r0, r3, r2
 800acc0:	f7fe fcf0 	bl	80096a4 <vListInsertEnd>
					xReturn = pdTRUE;
 800acc4:	2001      	movs	r0, #1
	}
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	24001b10 	.word	0x24001b10
 800accc:	24001f90 	.word	0x24001f90
 800acd0:	24001b1c 	.word	0x24001b1c

0800acd4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800acd4:	b1a8      	cbz	r0, 800ad02 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 800acd6:	b570      	push	{r4, r5, r6, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800acd8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800acda:	b944      	cbnz	r4, 800acee <vTaskPriorityDisinheritAfterTimeout+0x1a>
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	e7fe      	b.n	800acec <vTaskPriorityDisinheritAfterTimeout+0x18>
 800acee:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acf0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800acf2:	428b      	cmp	r3, r1
 800acf4:	bf38      	it	cc
 800acf6:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acf8:	2c01      	cmp	r4, #1
 800acfa:	d101      	bne.n	800ad00 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d101      	bne.n	800ad04 <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 800ad00:	bd70      	pop	{r4, r5, r6, pc}
 800ad02:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 800ad04:	4916      	ldr	r1, [pc, #88]	; (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x8c>)
 800ad06:	6809      	ldr	r1, [r1, #0]
 800ad08:	4281      	cmp	r1, r0
 800ad0a:	d020      	beq.n	800ad4e <vTaskPriorityDisinheritAfterTimeout+0x7a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad0c:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad0e:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad10:	2900      	cmp	r1, #0
 800ad12:	db02      	blt.n	800ad1a <vTaskPriorityDisinheritAfterTimeout+0x46>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad14:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ad18:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad1a:	4d12      	ldr	r5, [pc, #72]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800ad1c:	2114      	movs	r1, #20
 800ad1e:	6943      	ldr	r3, [r0, #20]
 800ad20:	fb01 5202 	mla	r2, r1, r2, r5
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d1eb      	bne.n	800ad00 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad28:	1d06      	adds	r6, r0, #4
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f7fe fce3 	bl	80096f8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ad32:	4a0d      	ldr	r2, [pc, #52]	; (800ad68 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800ad34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad36:	6811      	ldr	r1, [r2, #0]
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	d900      	bls.n	800ad3e <vTaskPriorityDisinheritAfterTimeout+0x6a>
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	2014      	movs	r0, #20
 800ad40:	4631      	mov	r1, r6
 800ad42:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ad46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ad4a:	f7fe bcab 	b.w	80096a4 <vListInsertEnd>
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	e7fe      	b.n	800ad5e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800ad60:	24001b10 	.word	0x24001b10
 800ad64:	24001b1c 	.word	0x24001b1c
 800ad68:	24001f90 	.word	0x24001f90

0800ad6c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ad6c:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <pvTaskIncrementMutexHeldCount+0x14>)
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	b11a      	cbz	r2, 800ad7a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800ad76:	3201      	adds	r2, #1
 800ad78:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800ad7a:	6818      	ldr	r0, [r3, #0]
	}
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	24001b10 	.word	0x24001b10

0800ad84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad84:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ad86:	4c14      	ldr	r4, [pc, #80]	; (800add8 <prvCheckForValidListAndQueue+0x54>)
{
 800ad88:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800ad8a:	f000 fa73 	bl	800b274 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ad8e:	6825      	ldr	r5, [r4, #0]
 800ad90:	b125      	cbz	r5, 800ad9c <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ad98:	f000 ba8e 	b.w	800b2b8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 800ad9c:	4f0f      	ldr	r7, [pc, #60]	; (800addc <prvCheckForValidListAndQueue+0x58>)
			vListInitialise( &xActiveTimerList2 );
 800ad9e:	4e10      	ldr	r6, [pc, #64]	; (800ade0 <prvCheckForValidListAndQueue+0x5c>)
			vListInitialise( &xActiveTimerList1 );
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7fe fc6f 	bl	8009684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ada6:	4630      	mov	r0, r6
 800ada8:	f7fe fc6c 	bl	8009684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adac:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 800adae:	4a0e      	ldr	r2, [pc, #56]	; (800ade8 <prvCheckForValidListAndQueue+0x64>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adb0:	2110      	movs	r1, #16
 800adb2:	9500      	str	r5, [sp, #0]
 800adb4:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 800adb6:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adb8:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <prvCheckForValidListAndQueue+0x68>)
 800adbc:	4a0c      	ldr	r2, [pc, #48]	; (800adf0 <prvCheckForValidListAndQueue+0x6c>)
 800adbe:	f7fe fd89 	bl	80098d4 <xQueueGenericCreateStatic>
 800adc2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d0e4      	beq.n	800ad92 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adc8:	490a      	ldr	r1, [pc, #40]	; (800adf4 <prvCheckForValidListAndQueue+0x70>)
 800adca:	f7ff f9d9 	bl	800a180 <vQueueAddToRegistry>
}
 800adce:	b003      	add	sp, #12
 800add0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800add4:	f000 ba70 	b.w	800b2b8 <vPortExitCritical>
 800add8:	24002134 	.word	0x24002134
 800addc:	240020b8 	.word	0x240020b8
 800ade0:	240020cc 	.word	0x240020cc
 800ade4:	24002010 	.word	0x24002010
 800ade8:	24002014 	.word	0x24002014
 800adec:	240020e4 	.word	0x240020e4
 800adf0:	24002018 	.word	0x24002018
 800adf4:	080148c4 	.word	0x080148c4

0800adf8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800adf8:	4291      	cmp	r1, r2
{
 800adfa:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adfc:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adfe:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 800ae00:	d805      	bhi.n	800ae0e <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae02:	1ad2      	subs	r2, r2, r3
 800ae04:	6983      	ldr	r3, [r0, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d30c      	bcc.n	800ae24 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 800ae0a:	2001      	movs	r0, #1
}
 800ae0c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d201      	bcs.n	800ae16 <prvInsertTimerInActiveList+0x1e>
 800ae12:	4299      	cmp	r1, r3
 800ae14:	d2f9      	bcs.n	800ae0a <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae16:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <prvInsertTimerInActiveList+0x3c>)
 800ae18:	1d01      	adds	r1, r0, #4
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	f7fe fc52 	bl	80096c4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ae20:	2000      	movs	r0, #0
}
 800ae22:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <prvInsertTimerInActiveList+0x40>)
 800ae26:	1d01      	adds	r1, r0, #4
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f7fe fc4b 	bl	80096c4 <vListInsert>
 800ae2e:	2000      	movs	r0, #0
}
 800ae30:	bd08      	pop	{r3, pc}
 800ae32:	bf00      	nop
 800ae34:	24002010 	.word	0x24002010
 800ae38:	24002014 	.word	0x24002014

0800ae3c <xTimerCreateTimerTask>:
{
 800ae3c:	b530      	push	{r4, r5, lr}
 800ae3e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800ae40:	f7ff ffa0 	bl	800ad84 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <xTimerCreateTimerTask+0x54>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	b1cb      	cbz	r3, 800ae7e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae4a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae4c:	aa07      	add	r2, sp, #28
 800ae4e:	a906      	add	r1, sp, #24
 800ae50:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae52:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae56:	f7fe fc07 	bl	8009668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae5a:	9806      	ldr	r0, [sp, #24]
 800ae5c:	2102      	movs	r1, #2
 800ae5e:	9d05      	ldr	r5, [sp, #20]
 800ae60:	4623      	mov	r3, r4
 800ae62:	9a07      	ldr	r2, [sp, #28]
 800ae64:	9100      	str	r1, [sp, #0]
 800ae66:	490b      	ldr	r1, [pc, #44]	; (800ae94 <xTimerCreateTimerTask+0x58>)
 800ae68:	e9cd 0501 	strd	r0, r5, [sp, #4]
 800ae6c:	480a      	ldr	r0, [pc, #40]	; (800ae98 <xTimerCreateTimerTask+0x5c>)
 800ae6e:	f7ff fc2b 	bl	800a6c8 <xTaskCreateStatic>
 800ae72:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <xTimerCreateTimerTask+0x60>)
 800ae74:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ae76:	b110      	cbz	r0, 800ae7e <xTimerCreateTimerTask+0x42>
}
 800ae78:	2001      	movs	r0, #1
 800ae7a:	b009      	add	sp, #36	; 0x24
 800ae7c:	bd30      	pop	{r4, r5, pc}
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	e7fe      	b.n	800ae8e <xTimerCreateTimerTask+0x52>
 800ae90:	24002134 	.word	0x24002134
 800ae94:	080148cc 	.word	0x080148cc
 800ae98:	0800af89 	.word	0x0800af89
 800ae9c:	24002138 	.word	0x24002138

0800aea0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800aea0:	b1c0      	cbz	r0, 800aed4 <xTimerGenericCommand+0x34>
{
 800aea2:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800aea4:	4d16      	ldr	r5, [pc, #88]	; (800af00 <xTimerGenericCommand+0x60>)
 800aea6:	4604      	mov	r4, r0
{
 800aea8:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800aeaa:	6828      	ldr	r0, [r5, #0]
 800aeac:	b180      	cbz	r0, 800aed0 <xTimerGenericCommand+0x30>
 800aeae:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeb0:	2905      	cmp	r1, #5
 800aeb2:	461a      	mov	r2, r3
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeb4:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aeb6:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeba:	dc14      	bgt.n	800aee6 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aebc:	f7ff fe76 	bl	800abac <xTaskGetSchedulerState>
 800aec0:	2802      	cmp	r0, #2
 800aec2:	d016      	beq.n	800aef2 <xTimerGenericCommand+0x52>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aec4:	2300      	movs	r3, #0
 800aec6:	6828      	ldr	r0, [r5, #0]
 800aec8:	4669      	mov	r1, sp
 800aeca:	461a      	mov	r2, r3
 800aecc:	f7fe fdbe 	bl	8009a4c <xQueueGenericSend>
}
 800aed0:	b004      	add	sp, #16
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	e7fe      	b.n	800aee4 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aee6:	2300      	movs	r3, #0
 800aee8:	4669      	mov	r1, sp
 800aeea:	f7fe feb9 	bl	8009c60 <xQueueGenericSendFromISR>
}
 800aeee:	b004      	add	sp, #16
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aef2:	6828      	ldr	r0, [r5, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	9a08      	ldr	r2, [sp, #32]
 800aef8:	4669      	mov	r1, sp
 800aefa:	f7fe fda7 	bl	8009a4c <xQueueGenericSend>
 800aefe:	e7e7      	b.n	800aed0 <xTimerGenericCommand+0x30>
 800af00:	24002134 	.word	0x24002134

0800af04 <prvSwitchTimerLists>:
{
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	4e1d      	ldr	r6, [pc, #116]	; (800af80 <prvSwitchTimerLists+0x7c>)
 800af0a:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af0c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af10:	e00d      	b.n	800af2e <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af12:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af14:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af16:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af18:	1d25      	adds	r5, r4, #4
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7fe fbec 	bl	80096f8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af20:	6a23      	ldr	r3, [r4, #32]
 800af22:	4620      	mov	r0, r4
 800af24:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800af2a:	075b      	lsls	r3, r3, #29
 800af2c:	d40a      	bmi.n	800af44 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af2e:	6833      	ldr	r3, [r6, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	2a00      	cmp	r2, #0
 800af34:	d1ed      	bne.n	800af12 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 800af36:	4a13      	ldr	r2, [pc, #76]	; (800af84 <prvSwitchTimerLists+0x80>)
 800af38:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af3a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800af3c:	6031      	str	r1, [r6, #0]
}
 800af3e:	b002      	add	sp, #8
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af44:	69a0      	ldr	r0, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af46:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af48:	2300      	movs	r3, #0
 800af4a:	463a      	mov	r2, r7
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af4c:	183d      	adds	r5, r7, r0
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af4e:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 800af50:	42af      	cmp	r7, r5
 800af52:	d205      	bcs.n	800af60 <prvSwitchTimerLists+0x5c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af54:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af56:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af58:	6830      	ldr	r0, [r6, #0]
 800af5a:	f7fe fbb3 	bl	80096c4 <vListInsert>
 800af5e:	e7e6      	b.n	800af2e <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af60:	f8cd 8000 	str.w	r8, [sp]
 800af64:	4619      	mov	r1, r3
 800af66:	f7ff ff9b 	bl	800aea0 <xTimerGenericCommand>
				configASSERT( xResult );
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d1df      	bne.n	800af2e <prvSwitchTimerLists+0x2a>
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	e7fe      	b.n	800af7e <prvSwitchTimerLists+0x7a>
 800af80:	24002010 	.word	0x24002010
 800af84:	24002014 	.word	0x24002014

0800af88 <prvTimerTask>:
{
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4f7f      	ldr	r7, [pc, #508]	; (800b18c <prvTimerTask+0x204>)
 800af8e:	b087      	sub	sp, #28
 800af90:	4e7f      	ldr	r6, [pc, #508]	; (800b190 <prvTimerTask+0x208>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af92:	f04f 0900 	mov.w	r9, #0
 800af96:	4c7f      	ldr	r4, [pc, #508]	; (800b194 <prvTimerTask+0x20c>)
 800af98:	f8df a200 	ldr.w	sl, [pc, #512]	; 800b19c <prvTimerTask+0x214>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	681d      	ldr	r5, [r3, #0]
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	f000 8097 	beq.w	800b0d4 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 800afaa:	f7ff fc3f 	bl	800a82c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800afae:	f7ff fcf7 	bl	800a9a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800afb2:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800afb4:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800afb6:	4298      	cmp	r0, r3
 800afb8:	f0c0 8094 	bcc.w	800b0e4 <prvTimerTask+0x15c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afbc:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 800afbe:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afc0:	f240 80a3 	bls.w	800b10a <prvTimerTask+0x182>
 800afc4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afc6:	eba5 010b 	sub.w	r1, r5, fp
 800afca:	6820      	ldr	r0, [r4, #0]
 800afcc:	f7ff f8ec 	bl	800a1a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afd0:	f7ff fc34 	bl	800a83c <xTaskResumeAll>
 800afd4:	b938      	cbnz	r0, 800afe6 <prvTimerTask+0x5e>
					portYIELD_WITHIN_API();
 800afd6:	4b70      	ldr	r3, [pc, #448]	; (800b198 <prvTimerTask+0x210>)
 800afd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afe6:	2200      	movs	r2, #0
 800afe8:	a902      	add	r1, sp, #8
 800afea:	6820      	ldr	r0, [r4, #0]
 800afec:	f7fe fea4 	bl	8009d38 <xQueueReceive>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d0d3      	beq.n	800af9c <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	9d04      	ldr	r5, [sp, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	da07      	bge.n	800b00c <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	4628      	mov	r0, r5
 800b000:	9905      	ldr	r1, [sp, #20]
 800b002:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b004:	9b02      	ldr	r3, [sp, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	dbed      	blt.n	800afe6 <prvTimerTask+0x5e>
 800b00a:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b00c:	696b      	ldr	r3, [r5, #20]
 800b00e:	b113      	cbz	r3, 800b016 <prvTimerTask+0x8e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b010:	1d28      	adds	r0, r5, #4
 800b012:	f7fe fb71 	bl	80096f8 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800b016:	f7ff fcc3 	bl	800a9a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b01a:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800b01c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800b01e:	4298      	cmp	r0, r3
 800b020:	d367      	bcc.n	800b0f2 <prvTimerTask+0x16a>
			switch( xMessage.xMessageID )
 800b022:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800b024:	f8c6 8000 	str.w	r8, [r6]
			switch( xMessage.xMessageID )
 800b028:	2b09      	cmp	r3, #9
 800b02a:	d8dc      	bhi.n	800afe6 <prvTimerTask+0x5e>
 800b02c:	e8df f003 	tbb	[pc, r3]
 800b030:	20272727 	.word	0x20272727
 800b034:	2727050e 	.word	0x2727050e
 800b038:	0e20      	.short	0x0e20
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b03a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800b03e:	079a      	lsls	r2, r3, #30
 800b040:	d57a      	bpl.n	800b138 <prvTimerTask+0x1b0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b042:	f023 0301 	bic.w	r3, r3, #1
 800b046:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 800b04a:	e7cc      	b.n	800afe6 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b04c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b050:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b052:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b056:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b058:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b05c:	2900      	cmp	r1, #0
 800b05e:	f000 808c 	beq.w	800b17a <prvTimerTask+0x1f2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b062:	4441      	add	r1, r8
 800b064:	4628      	mov	r0, r5
 800b066:	4643      	mov	r3, r8
 800b068:	4642      	mov	r2, r8
 800b06a:	f7ff fec5 	bl	800adf8 <prvInsertTimerInActiveList>
 800b06e:	e7ba      	b.n	800afe6 <prvTimerTask+0x5e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b070:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800b074:	f023 0301 	bic.w	r3, r3, #1
 800b078:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 800b07c:	e7b3      	b.n	800afe6 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b07e:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b082:	4642      	mov	r2, r8
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b088:	f04c 0c01 	orr.w	ip, ip, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b08c:	69a9      	ldr	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b08e:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b092:	4419      	add	r1, r3
 800b094:	f7ff feb0 	bl	800adf8 <prvInsertTimerInActiveList>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d0a4      	beq.n	800afe6 <prvTimerTask+0x5e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b09c:	6a2b      	ldr	r3, [r5, #32]
 800b09e:	4628      	mov	r0, r5
 800b0a0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0a2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800b0a6:	0759      	lsls	r1, r3, #29
 800b0a8:	d59d      	bpl.n	800afe6 <prvTimerTask+0x5e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0aa:	69aa      	ldr	r2, [r5, #24]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	9d03      	ldr	r5, [sp, #12]
 800b0b2:	f8cd 9000 	str.w	r9, [sp]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	442a      	add	r2, r5
 800b0ba:	f7ff fef1 	bl	800aea0 <xTimerGenericCommand>
							configASSERT( xResult );
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d191      	bne.n	800afe6 <prvTimerTask+0x5e>
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	e7fe      	b.n	800b0d2 <prvTimerTask+0x14a>
	vTaskSuspendAll();
 800b0d4:	f7ff fbaa 	bl	800a82c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800b0d8:	f7ff fc62 	bl	800a9a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b0dc:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800b0de:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800b0e0:	4298      	cmp	r0, r3
 800b0e2:	d209      	bcs.n	800b0f8 <prvTimerTask+0x170>
		prvSwitchTimerLists();
 800b0e4:	f7ff ff0e 	bl	800af04 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b0e8:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 800b0ec:	f7ff fba6 	bl	800a83c <xTaskResumeAll>
 800b0f0:	e779      	b.n	800afe6 <prvTimerTask+0x5e>
		prvSwitchTimerLists();
 800b0f2:	f7ff ff07 	bl	800af04 <prvSwitchTimerLists>
 800b0f6:	e794      	b.n	800b022 <prvTimerTask+0x9a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0f8:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 800b0fc:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	fab2 f282 	clz	r2, r2
 800b106:	0952      	lsrs	r2, r2, #5
 800b108:	e75d      	b.n	800afc6 <prvTimerTask+0x3e>
				( void ) xTaskResumeAll();
 800b10a:	f7ff fb97 	bl	800a83c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	f8d3 800c 	ldr.w	r8, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b116:	f108 0004 	add.w	r0, r8, #4
 800b11a:	f7fe faed 	bl	80096f8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b11e:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800b122:	0758      	lsls	r0, r3, #29
 800b124:	d40c      	bmi.n	800b140 <prvTimerTask+0x1b8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b126:	f023 0301 	bic.w	r3, r3, #1
 800b12a:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b12e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800b132:	4640      	mov	r0, r8
 800b134:	4798      	blx	r3
 800b136:	e756      	b.n	800afe6 <prvTimerTask+0x5e>
							vPortFree( pxTimer );
 800b138:	4628      	mov	r0, r5
 800b13a:	f000 fab3 	bl	800b6a4 <vPortFree>
 800b13e:	e752      	b.n	800afe6 <prvTimerTask+0x5e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b140:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b144:	465a      	mov	r2, fp
 800b146:	462b      	mov	r3, r5
 800b148:	4640      	mov	r0, r8
 800b14a:	4429      	add	r1, r5
 800b14c:	f7ff fe54 	bl	800adf8 <prvInsertTimerInActiveList>
 800b150:	2800      	cmp	r0, #0
 800b152:	d0ec      	beq.n	800b12e <prvTimerTask+0x1a6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b154:	2300      	movs	r3, #0
 800b156:	f8cd 9000 	str.w	r9, [sp]
 800b15a:	462a      	mov	r2, r5
 800b15c:	4640      	mov	r0, r8
 800b15e:	4619      	mov	r1, r3
 800b160:	f7ff fe9e 	bl	800aea0 <xTimerGenericCommand>
			configASSERT( xResult );
 800b164:	2800      	cmp	r0, #0
 800b166:	d1e2      	bne.n	800b12e <prvTimerTask+0x1a6>
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	e7fe      	b.n	800b178 <prvTimerTask+0x1f0>
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	e7fe      	b.n	800b18a <prvTimerTask+0x202>
 800b18c:	24002010 	.word	0x24002010
 800b190:	240020e0 	.word	0x240020e0
 800b194:	24002134 	.word	0x24002134
 800b198:	e000ed04 	.word	0xe000ed04
 800b19c:	24002014 	.word	0x24002014

0800b1a0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <prvTaskExitError+0x3c>)
{
 800b1a2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b1a4:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800b1a6:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 800b1a8:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	d008      	beq.n	800b1c0 <prvTaskExitError+0x20>
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	e7fe      	b.n	800b1be <prvTaskExitError+0x1e>
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1d0:	9b01      	ldr	r3, [sp, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0fc      	beq.n	800b1d0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1d6:	b002      	add	sp, #8
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	24000134 	.word	0x24000134

0800b1e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1e0:	4808      	ldr	r0, [pc, #32]	; (800b204 <prvPortStartFirstTask+0x24>)
 800b1e2:	6800      	ldr	r0, [r0, #0]
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	f380 8808 	msr	MSP, r0
 800b1ea:	f04f 0000 	mov.w	r0, #0
 800b1ee:	f380 8814 	msr	CONTROL, r0
 800b1f2:	b662      	cpsie	i
 800b1f4:	b661      	cpsie	f
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	df00      	svc	0
 800b200:	bf00      	nop
 800b202:	0000      	.short	0x0000
 800b204:	e000ed08 	.word	0xe000ed08

0800b208 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b208:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b218 <vPortEnableVFP+0x10>
 800b20c:	6801      	ldr	r1, [r0, #0]
 800b20e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b212:	6001      	str	r1, [r0, #0]
 800b214:	4770      	bx	lr
 800b216:	0000      	.short	0x0000
 800b218:	e000ed88 	.word	0xe000ed88

0800b21c <pxPortInitialiseStack>:
{
 800b21c:	b470      	push	{r4, r5, r6}
 800b21e:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b220:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b224:	4d08      	ldr	r5, [pc, #32]	; (800b248 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b226:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b22a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b22e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b232:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b234:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b236:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b23a:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b23e:	f843 4c24 	str.w	r4, [r3, #-36]
}
 800b242:	bc70      	pop	{r4, r5, r6}
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	0800b1a1 	.word	0x0800b1a1
 800b24c:	00000000 	.word	0x00000000

0800b250 <SVC_Handler>:
	__asm volatile (
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <pxCurrentTCBConst2>)
 800b252:	6819      	ldr	r1, [r3, #0]
 800b254:	6808      	ldr	r0, [r1, #0]
 800b256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	f380 8809 	msr	PSP, r0
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f04f 0000 	mov.w	r0, #0
 800b266:	f380 8811 	msr	BASEPRI, r0
 800b26a:	4770      	bx	lr
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst2>:
 800b270:	24001b10 	.word	0x24001b10

0800b274 <vPortEnterCritical>:
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b284:	4a0a      	ldr	r2, [pc, #40]	; (800b2b0 <vPortEnterCritical+0x3c>)
 800b286:	6813      	ldr	r3, [r2, #0]
 800b288:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b28a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b28c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b28e:	d000      	beq.n	800b292 <vPortEnterCritical+0x1e>
}
 800b290:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b292:	4b08      	ldr	r3, [pc, #32]	; (800b2b4 <vPortEnterCritical+0x40>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b29a:	d0f9      	beq.n	800b290 <vPortEnterCritical+0x1c>
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	e7fe      	b.n	800b2ac <vPortEnterCritical+0x38>
 800b2ae:	bf00      	nop
 800b2b0:	24000134 	.word	0x24000134
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b2b8:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <vPortExitCritical+0x24>)
 800b2ba:	6813      	ldr	r3, [r2, #0]
 800b2bc:	b943      	cbnz	r3, 800b2d0 <vPortExitCritical+0x18>
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	e7fe      	b.n	800b2ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2d4:	b90b      	cbnz	r3, 800b2da <vPortExitCritical+0x22>
	__asm volatile
 800b2d6:	f383 8811 	msr	BASEPRI, r3
}
 800b2da:	4770      	bx	lr
 800b2dc:	24000134 	.word	0x24000134

0800b2e0 <PendSV_Handler>:
	__asm volatile
 800b2e0:	f3ef 8009 	mrs	r0, PSP
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	4b15      	ldr	r3, [pc, #84]	; (800b340 <pxCurrentTCBConst>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	f01e 0f10 	tst.w	lr, #16
 800b2f0:	bf08      	it	eq
 800b2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	6010      	str	r0, [r2, #0]
 800b2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b300:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b304:	f380 8811 	msr	BASEPRI, r0
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f7ff fb64 	bl	800a9dc <vTaskSwitchContext>
 800b314:	f04f 0000 	mov.w	r0, #0
 800b318:	f380 8811 	msr	BASEPRI, r0
 800b31c:	bc09      	pop	{r0, r3}
 800b31e:	6819      	ldr	r1, [r3, #0]
 800b320:	6808      	ldr	r0, [r1, #0]
 800b322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b326:	f01e 0f10 	tst.w	lr, #16
 800b32a:	bf08      	it	eq
 800b32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b330:	f380 8809 	msr	PSP, r0
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w

0800b340 <pxCurrentTCBConst>:
 800b340:	24001b10 	.word	0x24001b10

0800b344 <xPortSysTickHandler>:
{
 800b344:	b508      	push	{r3, lr}
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b356:	f7ff fb31 	bl	800a9bc <xTaskIncrementTick>
 800b35a:	b118      	cbz	r0, 800b364 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <xPortSysTickHandler+0x28>)
 800b35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b362:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b364:	2300      	movs	r3, #0
 800b366:	f383 8811 	msr	BASEPRI, r3
}
 800b36a:	bd08      	pop	{r3, pc}
 800b36c:	e000ed04 	.word	0xe000ed04

0800b370 <vPortSetupTimerInterrupt>:
{
 800b370:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b372:	2300      	movs	r3, #0
 800b374:	4a08      	ldr	r2, [pc, #32]	; (800b398 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b376:	4c09      	ldr	r4, [pc, #36]	; (800b39c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b378:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b37a:	4809      	ldr	r0, [pc, #36]	; (800b3a0 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b37e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b380:	4c08      	ldr	r4, [pc, #32]	; (800b3a4 <vPortSetupTimerInterrupt+0x34>)
 800b382:	6803      	ldr	r3, [r0, #0]
 800b384:	4808      	ldr	r0, [pc, #32]	; (800b3a8 <vPortSetupTimerInterrupt+0x38>)
 800b386:	fba4 4303 	umull	r4, r3, r4, r3
}
 800b38a:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b38e:	099b      	lsrs	r3, r3, #6
 800b390:	3b01      	subs	r3, #1
 800b392:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b394:	6011      	str	r1, [r2, #0]
}
 800b396:	4770      	bx	lr
 800b398:	e000e010 	.word	0xe000e010
 800b39c:	e000e018 	.word	0xe000e018
 800b3a0:	24000000 	.word	0x24000000
 800b3a4:	10624dd3 	.word	0x10624dd3
 800b3a8:	e000e014 	.word	0xe000e014

0800b3ac <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3ac:	4b39      	ldr	r3, [pc, #228]	; (800b494 <xPortStartScheduler+0xe8>)
 800b3ae:	4a3a      	ldr	r2, [pc, #232]	; (800b498 <xPortStartScheduler+0xec>)
 800b3b0:	6819      	ldr	r1, [r3, #0]
 800b3b2:	4291      	cmp	r1, r2
 800b3b4:	d03f      	beq.n	800b436 <xPortStartScheduler+0x8a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	4b38      	ldr	r3, [pc, #224]	; (800b49c <xPortStartScheduler+0xf0>)
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d032      	beq.n	800b424 <xPortStartScheduler+0x78>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3be:	4b38      	ldr	r3, [pc, #224]	; (800b4a0 <xPortStartScheduler+0xf4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3c0:	4938      	ldr	r1, [pc, #224]	; (800b4a4 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3c2:	4839      	ldr	r0, [pc, #228]	; (800b4a8 <xPortStartScheduler+0xfc>)
{
 800b3c4:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3c6:	781a      	ldrb	r2, [r3, #0]
{
 800b3c8:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3ca:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3cc:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3d2:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b3d4:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3d6:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3de:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3ea:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ec:	0611      	lsls	r1, r2, #24
 800b3ee:	d510      	bpl.n	800b412 <xPortStartScheduler+0x66>
 800b3f0:	2306      	movs	r3, #6
 800b3f2:	e000      	b.n	800b3f6 <xPortStartScheduler+0x4a>
 800b3f4:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b3fa:	1e59      	subs	r1, r3, #1
 800b3fc:	0052      	lsls	r2, r2, #1
 800b3fe:	b2d2      	uxtb	r2, r2
 800b400:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b404:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b408:	0612      	lsls	r2, r2, #24
 800b40a:	d4f3      	bmi.n	800b3f4 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	6003      	str	r3, [r0, #0]
 800b410:	d01a      	beq.n	800b448 <xPortStartScheduler+0x9c>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	e7fe      	b.n	800b422 <xPortStartScheduler+0x76>
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	e7fe      	b.n	800b434 <xPortStartScheduler+0x88>
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	e7fe      	b.n	800b446 <xPortStartScheduler+0x9a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b448:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b44a:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b44c:	4a17      	ldr	r2, [pc, #92]	; (800b4ac <xPortStartScheduler+0x100>)
	uxCriticalNesting = 0;
 800b44e:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b450:	b2c9      	uxtb	r1, r1
 800b452:	4d13      	ldr	r5, [pc, #76]	; (800b4a0 <xPortStartScheduler+0xf4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b458:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b45a:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b45c:	6813      	ldr	r3, [r2, #0]
 800b45e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b462:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b464:	6813      	ldr	r3, [r2, #0]
 800b466:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b46a:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800b46c:	f7ff ff80 	bl	800b370 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b470:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <xPortStartScheduler+0x104>)
 800b472:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800b474:	f7ff fec8 	bl	800b208 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b478:	4a0e      	ldr	r2, [pc, #56]	; (800b4b4 <xPortStartScheduler+0x108>)
 800b47a:	6813      	ldr	r3, [r2, #0]
 800b47c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b480:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b482:	f7ff fead 	bl	800b1e0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b486:	f7ff faa9 	bl	800a9dc <vTaskSwitchContext>
	prvTaskExitError();
 800b48a:	f7ff fe89 	bl	800b1a0 <prvTaskExitError>
}
 800b48e:	4620      	mov	r0, r4
 800b490:	b003      	add	sp, #12
 800b492:	bd30      	pop	{r4, r5, pc}
 800b494:	e000ed00 	.word	0xe000ed00
 800b498:	410fc271 	.word	0x410fc271
 800b49c:	410fc270 	.word	0x410fc270
 800b4a0:	e000e400 	.word	0xe000e400
 800b4a4:	2400213c 	.word	0x2400213c
 800b4a8:	24002140 	.word	0x24002140
 800b4ac:	e000ed20 	.word	0xe000ed20
 800b4b0:	24000134 	.word	0x24000134
 800b4b4:	e000ef34 	.word	0xe000ef34

0800b4b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4bc:	2b0f      	cmp	r3, #15
 800b4be:	d90e      	bls.n	800b4de <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4c0:	4910      	ldr	r1, [pc, #64]	; (800b504 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4c2:	4a11      	ldr	r2, [pc, #68]	; (800b508 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4c4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4c6:	7812      	ldrb	r2, [r2, #0]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d908      	bls.n	800b4de <vPortValidateInterruptPriority+0x26>
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	e7fe      	b.n	800b4dc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4de:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <vPortValidateInterruptPriority+0x54>)
 800b4e0:	4a0b      	ldr	r2, [pc, #44]	; (800b510 <vPortValidateInterruptPriority+0x58>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d908      	bls.n	800b500 <vPortValidateInterruptPriority+0x48>
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	e7fe      	b.n	800b4fe <vPortValidateInterruptPriority+0x46>
	}
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	e000e3f0 	.word	0xe000e3f0
 800b508:	2400213c 	.word	0x2400213c
 800b50c:	e000ed0c 	.word	0xe000ed0c
 800b510:	24002140 	.word	0x24002140

0800b514 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b514:	4b11      	ldr	r3, [pc, #68]	; (800b55c <prvInsertBlockIntoFreeList+0x48>)
{
 800b516:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4282      	cmp	r2, r0
 800b51c:	d201      	bcs.n	800b522 <prvInsertBlockIntoFreeList+0xe>
 800b51e:	4613      	mov	r3, r2
 800b520:	e7fa      	b.n	800b518 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b522:	685c      	ldr	r4, [r3, #4]
 800b524:	1919      	adds	r1, r3, r4
 800b526:	4288      	cmp	r0, r1
 800b528:	d103      	bne.n	800b532 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b52a:	6841      	ldr	r1, [r0, #4]
 800b52c:	4618      	mov	r0, r3
 800b52e:	4421      	add	r1, r4
 800b530:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b532:	6844      	ldr	r4, [r0, #4]
 800b534:	1901      	adds	r1, r0, r4
 800b536:	428a      	cmp	r2, r1
 800b538:	d109      	bne.n	800b54e <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b53a:	4909      	ldr	r1, [pc, #36]	; (800b560 <prvInsertBlockIntoFreeList+0x4c>)
 800b53c:	6809      	ldr	r1, [r1, #0]
 800b53e:	428a      	cmp	r2, r1
 800b540:	d005      	beq.n	800b54e <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b542:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b546:	4421      	add	r1, r4
 800b548:	e9c0 5100 	strd	r5, r1, [r0]
 800b54c:	e000      	b.n	800b550 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b54e:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b550:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b552:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b554:	bf18      	it	ne
 800b556:	6018      	strne	r0, [r3, #0]
}
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	24013a9c 	.word	0x24013a9c
 800b560:	24002144 	.word	0x24002144

0800b564 <pvPortMalloc>:
{
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b568:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b56a:	f7ff f95f 	bl	800a82c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b56e:	4845      	ldr	r0, [pc, #276]	; (800b684 <pvPortMalloc+0x120>)
 800b570:	6803      	ldr	r3, [r0, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d064      	beq.n	800b640 <pvPortMalloc+0xdc>
 800b576:	4b44      	ldr	r3, [pc, #272]	; (800b688 <pvPortMalloc+0x124>)
 800b578:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b57a:	4234      	tst	r4, r6
 800b57c:	d159      	bne.n	800b632 <pvPortMalloc+0xce>
			if( xWantedSize > 0 )
 800b57e:	2c00      	cmp	r4, #0
 800b580:	d057      	beq.n	800b632 <pvPortMalloc+0xce>
				xWantedSize += xHeapStructSize;
 800b582:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b586:	0759      	lsls	r1, r3, #29
 800b588:	d002      	beq.n	800b590 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b58a:	f023 0307 	bic.w	r3, r3, #7
 800b58e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b590:	2b00      	cmp	r3, #0
 800b592:	d04e      	beq.n	800b632 <pvPortMalloc+0xce>
 800b594:	4f3d      	ldr	r7, [pc, #244]	; (800b68c <pvPortMalloc+0x128>)
 800b596:	683d      	ldr	r5, [r7, #0]
 800b598:	429d      	cmp	r5, r3
 800b59a:	d34a      	bcc.n	800b632 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800b59c:	493c      	ldr	r1, [pc, #240]	; (800b690 <pvPortMalloc+0x12c>)
 800b59e:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5a0:	e006      	b.n	800b5b0 <pvPortMalloc+0x4c>
 800b5a2:	f8d4 c000 	ldr.w	ip, [r4]
 800b5a6:	f1bc 0f00 	cmp.w	ip, #0
 800b5aa:	d004      	beq.n	800b5b6 <pvPortMalloc+0x52>
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4664      	mov	r4, ip
 800b5b0:	6862      	ldr	r2, [r4, #4]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d3f5      	bcc.n	800b5a2 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	42a0      	cmp	r0, r4
 800b5ba:	d03a      	beq.n	800b632 <pvPortMalloc+0xce>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5bc:	eba2 0c03 	sub.w	ip, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5c0:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5c2:	f8d1 8000 	ldr.w	r8, [r1]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5c6:	f1bc 0f10 	cmp.w	ip, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5ca:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5cc:	d911      	bls.n	800b5f2 <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5ce:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5d0:	0742      	lsls	r2, r0, #29
 800b5d2:	d008      	beq.n	800b5e6 <pvPortMalloc+0x82>
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	e7fe      	b.n	800b5e4 <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5e6:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5ea:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5ec:	f7ff ff92 	bl	800b514 <prvInsertBlockIntoFreeList>
 800b5f0:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5f2:	4928      	ldr	r1, [pc, #160]	; (800b694 <pvPortMalloc+0x130>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5f4:	1aad      	subs	r5, r5, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5f6:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5f8:	f108 0808 	add.w	r8, r8, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5fc:	6808      	ldr	r0, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5fe:	6062      	str	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b600:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b602:	f04f 0000 	mov.w	r0, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b606:	603d      	str	r5, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b608:	bf38      	it	cc
 800b60a:	600d      	strcc	r5, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b60c:	4922      	ldr	r1, [pc, #136]	; (800b698 <pvPortMalloc+0x134>)
					pxBlock->pxNextFreeBlock = NULL;
 800b60e:	6020      	str	r0, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800b610:	680b      	ldr	r3, [r1, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800b616:	f7ff f911 	bl	800a83c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b61a:	f018 0f07 	tst.w	r8, #7
 800b61e:	d00c      	beq.n	800b63a <pvPortMalloc+0xd6>
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	e7fe      	b.n	800b630 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800b632:	f04f 0800 	mov.w	r8, #0
 800b636:	f7ff f901 	bl	800a83c <xTaskResumeAll>
}
 800b63a:	4640      	mov	r0, r8
 800b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 800b640:	4b16      	ldr	r3, [pc, #88]	; (800b69c <pvPortMalloc+0x138>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b642:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 800b646:	4a16      	ldr	r2, [pc, #88]	; (800b6a0 <pvPortMalloc+0x13c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b648:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b64a:	4e12      	ldr	r6, [pc, #72]	; (800b694 <pvPortMalloc+0x130>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b64c:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b650:	f04f 0500 	mov.w	r5, #0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b654:	bf18      	it	ne
 800b656:	3307      	addne	r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b658:	f8df c030 	ldr.w	ip, [pc, #48]	; 800b68c <pvPortMalloc+0x128>
	pxEnd = ( void * ) uxAddress;
 800b65c:	6002      	str	r2, [r0, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b65e:	bf18      	it	ne
 800b660:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b664:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b666:	1ad3      	subs	r3, r2, r3
	pxEnd->pxNextFreeBlock = NULL;
 800b668:	e9c2 5500 	strd	r5, r5, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b66c:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b66e:	463e      	mov	r6, r7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b670:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b674:	e9c1 2300 	strd	r2, r3, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b67a:	4a03      	ldr	r2, [pc, #12]	; (800b688 <pvPortMalloc+0x124>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b67c:	e9c3 1500 	strd	r1, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b680:	6017      	str	r7, [r2, #0]
 800b682:	e77a      	b.n	800b57a <pvPortMalloc+0x16>
 800b684:	24002144 	.word	0x24002144
 800b688:	24013a88 	.word	0x24013a88
 800b68c:	24013a8c 	.word	0x24013a8c
 800b690:	24013a9c 	.word	0x24013a9c
 800b694:	24013a90 	.word	0x24013a90
 800b698:	24013a94 	.word	0x24013a94
 800b69c:	24002148 	.word	0x24002148
 800b6a0:	24013a80 	.word	0x24013a80

0800b6a4 <vPortFree>:
	if( pv != NULL )
 800b6a4:	b1d0      	cbz	r0, 800b6dc <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6a6:	4a1b      	ldr	r2, [pc, #108]	; (800b714 <vPortFree+0x70>)
 800b6a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b6ac:	6812      	ldr	r2, [r2, #0]
 800b6ae:	4213      	tst	r3, r2
 800b6b0:	d108      	bne.n	800b6c4 <vPortFree+0x20>
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	e7fe      	b.n	800b6c2 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6c4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b6c8:	b149      	cbz	r1, 800b6de <vPortFree+0x3a>
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	e7fe      	b.n	800b6da <vPortFree+0x36>
 800b6dc:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6de:	ea23 0302 	bic.w	r3, r3, r2
{
 800b6e2:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6e4:	f840 3c04 	str.w	r3, [r0, #-4]
 800b6e8:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800b6ea:	f7ff f89f 	bl	800a82c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6ee:	4a0a      	ldr	r2, [pc, #40]	; (800b718 <vPortFree+0x74>)
 800b6f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6f4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6f8:	6811      	ldr	r1, [r2, #0]
 800b6fa:	440b      	add	r3, r1
 800b6fc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6fe:	f7ff ff09 	bl	800b514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b702:	4a06      	ldr	r2, [pc, #24]	; (800b71c <vPortFree+0x78>)
 800b704:	6813      	ldr	r3, [r2, #0]
 800b706:	3301      	adds	r3, #1
}
 800b708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b70c:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b70e:	f7ff b895 	b.w	800a83c <xTaskResumeAll>
 800b712:	bf00      	nop
 800b714:	24013a88 	.word	0x24013a88
 800b718:	24013a8c 	.word	0x24013a8c
 800b71c:	24013a98 	.word	0x24013a98

0800b720 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b720:	b580      	push	{r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b722:	483a      	ldr	r0, [pc, #232]	; (800b80c <tcpip_thread+0xec>)
{
 800b724:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 800b726:	f007 fdab 	bl	8013280 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b72a:	4b39      	ldr	r3, [pc, #228]	; (800b810 <tcpip_thread+0xf0>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	b113      	cbz	r3, 800b736 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 800b730:	4a38      	ldr	r2, [pc, #224]	; (800b814 <tcpip_thread+0xf4>)
 800b732:	6810      	ldr	r0, [r2, #0]
 800b734:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b736:	4d35      	ldr	r5, [pc, #212]	; (800b80c <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b738:	4e37      	ldr	r6, [pc, #220]	; (800b818 <tcpip_thread+0xf8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b73a:	4f38      	ldr	r7, [pc, #224]	; (800b81c <tcpip_thread+0xfc>)
 800b73c:	e010      	b.n	800b760 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 800b73e:	b168      	cbz	r0, 800b75c <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 800b740:	4628      	mov	r0, r5
 800b742:	f007 fda3 	bl	801328c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b746:	4622      	mov	r2, r4
 800b748:	a901      	add	r1, sp, #4
 800b74a:	4630      	mov	r0, r6
 800b74c:	f007 fd46 	bl	80131dc <sys_arch_mbox_fetch>
 800b750:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800b752:	4628      	mov	r0, r5
 800b754:	f007 fd94 	bl	8013280 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b758:	3401      	adds	r4, #1
 800b75a:	d111      	bne.n	800b780 <tcpip_thread+0x60>
    sys_check_timeouts();
 800b75c:	f005 fb18 	bl	8010d90 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 800b760:	f005 fb3a 	bl	8010dd8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b764:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800b766:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b768:	d1e9      	bne.n	800b73e <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 800b76a:	4628      	mov	r0, r5
 800b76c:	f007 fd8e 	bl	801328c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b770:	2200      	movs	r2, #0
 800b772:	a901      	add	r1, sp, #4
 800b774:	4630      	mov	r0, r6
 800b776:	f007 fd31 	bl	80131dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b77a:	4628      	mov	r0, r5
 800b77c:	f007 fd80 	bl	8013280 <sys_mutex_lock>
    if (msg == NULL) {
 800b780:	9c01      	ldr	r4, [sp, #4]
 800b782:	2c00      	cmp	r4, #0
 800b784:	d033      	beq.n	800b7ee <tcpip_thread+0xce>
  switch (msg->type) {
 800b786:	7823      	ldrb	r3, [r4, #0]
 800b788:	2b04      	cmp	r3, #4
 800b78a:	d837      	bhi.n	800b7fc <tcpip_thread+0xdc>
 800b78c:	e8df f003 	tbb	[pc, r3]
 800b790:	070f1822 	.word	0x070f1822
 800b794:	03          	.byte	0x03
 800b795:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b796:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b79a:	4798      	blx	r3
 800b79c:	e7e0      	b.n	800b760 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b79e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b7a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	2008      	movs	r0, #8
 800b7a8:	f000 feb0 	bl	800c50c <memp_free>
 800b7ac:	e7d8      	b.n	800b760 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 800b7ae:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800b7b2:	f005 facf 	bl	8010d54 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	2008      	movs	r0, #8
 800b7ba:	f000 fea7 	bl	800c50c <memp_free>
 800b7be:	e7cf      	b.n	800b760 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 800b7c0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b7c4:	6860      	ldr	r0, [r4, #4]
 800b7c6:	f005 fa89 	bl	8010cdc <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	2008      	movs	r0, #8
 800b7ce:	f000 fe9d 	bl	800c50c <memp_free>
 800b7d2:	e7c5      	b.n	800b760 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b7d4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b7d8:	6860      	ldr	r0, [r4, #4]
 800b7da:	4798      	blx	r3
 800b7dc:	b110      	cbz	r0, 800b7e4 <tcpip_thread+0xc4>
        pbuf_free(msg->msg.inp.p);
 800b7de:	6860      	ldr	r0, [r4, #4]
 800b7e0:	f001 f976 	bl	800cad0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	2009      	movs	r0, #9
 800b7e8:	f000 fe90 	bl	800c50c <memp_free>
 800b7ec:	e7b8      	b.n	800b760 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	2291      	movs	r2, #145	; 0x91
 800b7f2:	490b      	ldr	r1, [pc, #44]	; (800b820 <tcpip_thread+0x100>)
 800b7f4:	480b      	ldr	r0, [pc, #44]	; (800b824 <tcpip_thread+0x104>)
 800b7f6:	f008 f919 	bl	8013a2c <iprintf>
      continue;
 800b7fa:	e7b1      	b.n	800b760 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	22cf      	movs	r2, #207	; 0xcf
 800b800:	4907      	ldr	r1, [pc, #28]	; (800b820 <tcpip_thread+0x100>)
 800b802:	4808      	ldr	r0, [pc, #32]	; (800b824 <tcpip_thread+0x104>)
 800b804:	f008 f912 	bl	8013a2c <iprintf>
 800b808:	e7aa      	b.n	800b760 <tcpip_thread+0x40>
 800b80a:	bf00      	nop
 800b80c:	24014fe8 	.word	0x24014fe8
 800b810:	24013aa4 	.word	0x24013aa4
 800b814:	24013aa8 	.word	0x24013aa8
 800b818:	24013aac 	.word	0x24013aac
 800b81c:	0801493c 	.word	0x0801493c
 800b820:	0801496c 	.word	0x0801496c
 800b824:	0801487c 	.word	0x0801487c

0800b828 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b82c:	4813      	ldr	r0, [pc, #76]	; (800b87c <tcpip_inpkt+0x54>)
{
 800b82e:	460e      	mov	r6, r1
 800b830:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b832:	f007 fcf5 	bl	8013220 <sys_mbox_valid>
 800b836:	b178      	cbz	r0, 800b858 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b838:	2009      	movs	r0, #9
 800b83a:	f000 fe33 	bl	800c4a4 <memp_malloc>
  if (msg == NULL) {
 800b83e:	4604      	mov	r4, r0
 800b840:	b1c0      	cbz	r0, 800b874 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800b842:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b844:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 800b846:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 800b848:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 800b84a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b84e:	480b      	ldr	r0, [pc, #44]	; (800b87c <tcpip_inpkt+0x54>)
 800b850:	f007 fcaa 	bl	80131a8 <sys_mbox_trypost>
 800b854:	b938      	cbnz	r0, 800b866 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b858:	4b09      	ldr	r3, [pc, #36]	; (800b880 <tcpip_inpkt+0x58>)
 800b85a:	22fc      	movs	r2, #252	; 0xfc
 800b85c:	4909      	ldr	r1, [pc, #36]	; (800b884 <tcpip_inpkt+0x5c>)
 800b85e:	480a      	ldr	r0, [pc, #40]	; (800b888 <tcpip_inpkt+0x60>)
 800b860:	f008 f8e4 	bl	8013a2c <iprintf>
 800b864:	e7e8      	b.n	800b838 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b866:	4621      	mov	r1, r4
 800b868:	2009      	movs	r0, #9
 800b86a:	f000 fe4f 	bl	800c50c <memp_free>
    return ERR_MEM;
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b87a:	bf00      	nop
 800b87c:	24013aac 	.word	0x24013aac
 800b880:	0801493c 	.word	0x0801493c
 800b884:	0801492c 	.word	0x0801492c
 800b888:	0801487c 	.word	0x0801487c

0800b88c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b88c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 800b890:	f013 0f18 	tst.w	r3, #24
 800b894:	d102      	bne.n	800b89c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b896:	4a03      	ldr	r2, [pc, #12]	; (800b8a4 <tcpip_input+0x18>)
 800b898:	f7ff bfc6 	b.w	800b828 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b89c:	4a02      	ldr	r2, [pc, #8]	; (800b8a8 <tcpip_input+0x1c>)
 800b89e:	f7ff bfc3 	b.w	800b828 <tcpip_inpkt>
 800b8a2:	bf00      	nop
 800b8a4:	08012269 	.word	0x08012269
 800b8a8:	08013011 	.word	0x08013011

0800b8ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b8b0:	4812      	ldr	r0, [pc, #72]	; (800b8fc <tcpip_try_callback+0x50>)
{
 800b8b2:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b8b4:	f007 fcb4 	bl	8013220 <sys_mbox_valid>
 800b8b8:	b170      	cbz	r0, 800b8d8 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b8ba:	2008      	movs	r0, #8
 800b8bc:	f000 fdf2 	bl	800c4a4 <memp_malloc>
  if (msg == NULL) {
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	b1c0      	cbz	r0, 800b8f6 <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b8c4:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b8c6:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 800b8c8:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 800b8cc:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b8ce:	480b      	ldr	r0, [pc, #44]	; (800b8fc <tcpip_try_callback+0x50>)
 800b8d0:	f007 fc6a 	bl	80131a8 <sys_mbox_trypost>
 800b8d4:	b940      	cbnz	r0, 800b8e8 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <tcpip_try_callback+0x54>)
 800b8da:	f240 125d 	movw	r2, #349	; 0x15d
 800b8de:	4909      	ldr	r1, [pc, #36]	; (800b904 <tcpip_try_callback+0x58>)
 800b8e0:	4809      	ldr	r0, [pc, #36]	; (800b908 <tcpip_try_callback+0x5c>)
 800b8e2:	f008 f8a3 	bl	8013a2c <iprintf>
 800b8e6:	e7e8      	b.n	800b8ba <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	2008      	movs	r0, #8
 800b8ec:	f000 fe0e 	bl	800c50c <memp_free>
    return ERR_MEM;
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b8f4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800b8f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	24013aac 	.word	0x24013aac
 800b900:	0801493c 	.word	0x0801493c
 800b904:	0801492c 	.word	0x0801492c
 800b908:	0801487c 	.word	0x0801487c

0800b90c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b90c:	b530      	push	{r4, r5, lr}
 800b90e:	b083      	sub	sp, #12
 800b910:	4605      	mov	r5, r0
 800b912:	460c      	mov	r4, r1
  lwip_init();
 800b914:	f000 fa02 	bl	800bd1c <lwip_init>

  tcpip_init_done = initfunc;
 800b918:	4a13      	ldr	r2, [pc, #76]	; (800b968 <tcpip_init+0x5c>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b91a:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800b91c:	4b13      	ldr	r3, [pc, #76]	; (800b96c <tcpip_init+0x60>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b91e:	4814      	ldr	r0, [pc, #80]	; (800b970 <tcpip_init+0x64>)
  tcpip_init_done = initfunc;
 800b920:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800b922:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b924:	f007 fc22 	bl	801316c <sys_mbox_new>
 800b928:	b9a8      	cbnz	r0, 800b956 <tcpip_init+0x4a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b92a:	4812      	ldr	r0, [pc, #72]	; (800b974 <tcpip_init+0x68>)
 800b92c:	f007 fc88 	bl	8013240 <sys_mutex_new>
 800b930:	b130      	cbz	r0, 800b940 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b932:	4b11      	ldr	r3, [pc, #68]	; (800b978 <tcpip_init+0x6c>)
 800b934:	f240 2265 	movw	r2, #613	; 0x265
 800b938:	4910      	ldr	r1, [pc, #64]	; (800b97c <tcpip_init+0x70>)
 800b93a:	4811      	ldr	r0, [pc, #68]	; (800b980 <tcpip_init+0x74>)
 800b93c:	f008 f876 	bl	8013a2c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b940:	2028      	movs	r0, #40	; 0x28
 800b942:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b946:	2200      	movs	r2, #0
 800b948:	490e      	ldr	r1, [pc, #56]	; (800b984 <tcpip_init+0x78>)
 800b94a:	9000      	str	r0, [sp, #0]
 800b94c:	480e      	ldr	r0, [pc, #56]	; (800b988 <tcpip_init+0x7c>)
 800b94e:	f007 fca1 	bl	8013294 <sys_thread_new>
}
 800b952:	b003      	add	sp, #12
 800b954:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b956:	4b08      	ldr	r3, [pc, #32]	; (800b978 <tcpip_init+0x6c>)
 800b958:	f240 2261 	movw	r2, #609	; 0x261
 800b95c:	490b      	ldr	r1, [pc, #44]	; (800b98c <tcpip_init+0x80>)
 800b95e:	4808      	ldr	r0, [pc, #32]	; (800b980 <tcpip_init+0x74>)
 800b960:	f008 f864 	bl	8013a2c <iprintf>
 800b964:	e7e1      	b.n	800b92a <tcpip_init+0x1e>
 800b966:	bf00      	nop
 800b968:	24013aa4 	.word	0x24013aa4
 800b96c:	24013aa8 	.word	0x24013aa8
 800b970:	24013aac 	.word	0x24013aac
 800b974:	24014fe8 	.word	0x24014fe8
 800b978:	0801493c 	.word	0x0801493c
 800b97c:	080148f8 	.word	0x080148f8
 800b980:	0801487c 	.word	0x0801487c
 800b984:	0800b721 	.word	0x0800b721
 800b988:	0801491c 	.word	0x0801491c
 800b98c:	080148d4 	.word	0x080148d4

0800b990 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800b990:	ba40      	rev16	r0, r0
}
 800b992:	b280      	uxth	r0, r0
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop

0800b998 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800b998:	ba00      	rev	r0, r0
 800b99a:	4770      	bx	lr

0800b99c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a0:	0106      	lsls	r6, r0, #4
 800b9a2:	4c24      	ldr	r4, [pc, #144]	; (800ba34 <dns_call_found+0x98>)
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800b9a8:	eb06 0800 	add.w	r8, r6, r0
 800b9ac:	4f22      	ldr	r7, [pc, #136]	; (800ba38 <dns_call_found+0x9c>)
 800b9ae:	f104 0930 	add.w	r9, r4, #48	; 0x30
 800b9b2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800b9b6:	f108 0810 	add.w	r8, r8, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800b9ba:	6823      	ldr	r3, [r4, #0]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800b9bc:	4651      	mov	r1, sl
 800b9be:	eb07 0008 	add.w	r0, r7, r8
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800b9c2:	b133      	cbz	r3, 800b9d2 <dns_call_found+0x36>
 800b9c4:	7a22      	ldrb	r2, [r4, #8]
 800b9c6:	42aa      	cmp	r2, r5
 800b9c8:	d103      	bne.n	800b9d2 <dns_call_found+0x36>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800b9ca:	6862      	ldr	r2, [r4, #4]
 800b9cc:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	340c      	adds	r4, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b9d4:	454c      	cmp	r4, r9
 800b9d6:	d1f0      	bne.n	800b9ba <dns_call_found+0x1e>
 800b9d8:	1973      	adds	r3, r6, r5
 800b9da:	2400      	movs	r4, #0
 800b9dc:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800b9e0:	4f15      	ldr	r7, [pc, #84]	; (800ba38 <dns_call_found+0x9c>)
 800b9e2:	7bd9      	ldrb	r1, [r3, #15]
 800b9e4:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 800b9e6:	b2e3      	uxtb	r3, r4
 800b9e8:	3401      	adds	r4, #1
 800b9ea:	42ab      	cmp	r3, r5
 800b9ec:	d002      	beq.n	800b9f4 <dns_call_found+0x58>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800b9ee:	7a93      	ldrb	r3, [r2, #10]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d015      	beq.n	800ba20 <dns_call_found+0x84>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b9f4:	2c04      	cmp	r4, #4
 800b9f6:	f502 7288 	add.w	r2, r2, #272	; 0x110
 800b9fa:	d1f4      	bne.n	800b9e6 <dns_call_found+0x4a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800b9fc:	2903      	cmp	r1, #3
 800b9fe:	d80d      	bhi.n	800ba1c <dns_call_found+0x80>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800ba00:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800ba02:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800ba3c <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800ba06:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800ba0a:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 800ba0e:	f005 fd2d 	bl	801146c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800ba12:	2200      	movs	r2, #0
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800ba16:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800ba18:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 800ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800ba20:	7bd3      	ldrb	r3, [r2, #15]
 800ba22:	428b      	cmp	r3, r1
 800ba24:	d1e6      	bne.n	800b9f4 <dns_call_found+0x58>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800ba26:	4435      	add	r5, r6
 800ba28:	2304      	movs	r3, #4
 800ba2a:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 800ba2e:	73fb      	strb	r3, [r7, #15]
 800ba30:	e7f4      	b.n	800ba1c <dns_call_found+0x80>
 800ba32:	bf00      	nop
 800ba34:	24013ac0 	.word	0x24013ac0
 800ba38:	24013af8 	.word	0x24013af8
 800ba3c:	24013ab0 	.word	0x24013ab0

0800ba40 <dns_send>:
{
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800ba44:	0103      	lsls	r3, r0, #4
{
 800ba46:	b087      	sub	sp, #28
 800ba48:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800ba4a:	181c      	adds	r4, r3, r0
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	4b60      	ldr	r3, [pc, #384]	; (800bbd0 <dns_send+0x190>)
 800ba50:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800ba54:	7ae3      	ldrb	r3, [r4, #11]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d907      	bls.n	800ba6a <dns_send+0x2a>
 800ba5a:	4b5e      	ldr	r3, [pc, #376]	; (800bbd4 <dns_send+0x194>)
 800ba5c:	f240 22fa 	movw	r2, #762	; 0x2fa
 800ba60:	495d      	ldr	r1, [pc, #372]	; (800bbd8 <dns_send+0x198>)
 800ba62:	485e      	ldr	r0, [pc, #376]	; (800bbdc <dns_send+0x19c>)
 800ba64:	f007 ffe2 	bl	8013a2c <iprintf>
 800ba68:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800ba6a:	4a5d      	ldr	r2, [pc, #372]	; (800bbe0 <dns_send+0x1a0>)
 800ba6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba70:	2c00      	cmp	r4, #0
 800ba72:	f000 8099 	beq.w	800bba8 <dns_send+0x168>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	4e55      	ldr	r6, [pc, #340]	; (800bbd0 <dns_send+0x190>)
 800ba7a:	eb03 0409 	add.w	r4, r3, r9
 800ba7e:	0124      	lsls	r4, r4, #4
 800ba80:	f104 0510 	add.w	r5, r4, #16
 800ba84:	4435      	add	r5, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	f7f4 fc2a 	bl	80002e0 <strlen>
 800ba8c:	f100 0112 	add.w	r1, r0, #18
 800ba90:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba94:	2036      	movs	r0, #54	; 0x36
 800ba96:	b289      	uxth	r1, r1
 800ba98:	f001 f88e 	bl	800cbb8 <pbuf_alloc>
  if (p != NULL) {
 800ba9c:	4680      	mov	r8, r0
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	f000 8093 	beq.w	800bbca <dns_send+0x18a>
    hdr.id = lwip_htons(entry->txid);
 800baa4:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800baa6:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 800baa8:	260c      	movs	r6, #12
    --hostname;
 800baaa:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 800baac:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 800baae:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	9303      	str	r3, [sp, #12]
 800bab6:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 800bab8:	f7ff ff6a 	bl	800b990 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 800babc:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 800babe:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 800bac2:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800bac6:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 800baca:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800bace:	4640      	mov	r0, r8
 800bad0:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 800bad2:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800bad6:	f001 fae5 	bl	800d0a4 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800bada:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 800badc:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800bade:	2b2e      	cmp	r3, #46	; 0x2e
 800bae0:	d051      	beq.n	800bb86 <dns_send+0x146>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d04f      	beq.n	800bb86 <dns_send+0x146>
      ++hostname;
 800bae6:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800bae8:	2400      	movs	r4, #0
 800baea:	e000      	b.n	800baee <dns_send+0xae>
 800baec:	b12b      	cbz	r3, 800bafa <dns_send+0xba>
 800baee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        ++n;
 800baf2:	3401      	adds	r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800baf4:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
 800baf6:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800baf8:	d1f8      	bne.n	800baec <dns_send+0xac>
 800bafa:	4623      	mov	r3, r4
 800bafc:	eba5 0a07 	sub.w	sl, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 800bb00:	4433      	add	r3, r6
 800bb02:	fa1f fa8a 	uxth.w	sl, sl
 800bb06:	455b      	cmp	r3, fp
 800bb08:	dc45      	bgt.n	800bb96 <dns_send+0x156>
      pbuf_put_at(p, query_idx, n);
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	4631      	mov	r1, r6
 800bb0e:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 800bb10:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 800bb12:	f001 fb81 	bl	800d218 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800bb16:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 800bb18:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800bb1a:	4652      	mov	r2, sl
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 800bb22:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800bb24:	f001 fb26 	bl	800d174 <pbuf_take_at>
    } while (*hostname != 0);
 800bb28:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 800bb2a:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	d1d4      	bne.n	800bada <dns_send+0x9a>
    pbuf_put_at(p, query_idx, 0);
 800bb30:	4631      	mov	r1, r6
 800bb32:	4640      	mov	r0, r8
 800bb34:	f001 fb70 	bl	800d218 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800bb38:	a906      	add	r1, sp, #24
    query_idx++;
 800bb3a:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800bb3c:	f04f 2001 	mov.w	r0, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800bb40:	2204      	movs	r2, #4
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800bb42:	4d27      	ldr	r5, [pc, #156]	; (800bbe0 <dns_send+0x1a0>)
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800bb44:	f841 0d10 	str.w	r0, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	f001 fb12 	bl	800d174 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 800bb50:	9b01      	ldr	r3, [sp, #4]
 800bb52:	4a1f      	ldr	r2, [pc, #124]	; (800bbd0 <dns_send+0x190>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800bb54:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 800bb56:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800bb58:	4822      	ldr	r0, [pc, #136]	; (800bbe4 <dns_send+0x1a4>)
      dst = &dns_servers[entry->server_idx];
 800bb5a:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800bb5c:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 800bb5e:	eb02 1a09 	add.w	sl, r2, r9, lsl #4
 800bb62:	f89a 200b 	ldrb.w	r2, [sl, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800bb66:	f89a 400f 	ldrb.w	r4, [sl, #15]
 800bb6a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800bb6e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bb72:	f005 fc2d 	bl	80113d0 <udp_sendto>
 800bb76:	4605      	mov	r5, r0
    pbuf_free(p);
 800bb78:	4640      	mov	r0, r8
 800bb7a:	f000 ffa9 	bl	800cad0 <pbuf_free>
}
 800bb7e:	4628      	mov	r0, r5
 800bb80:	b007      	add	sp, #28
 800bb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800bb86:	f04f 0a00 	mov.w	sl, #0
      ++hostname;
 800bb8a:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800bb8c:	4653      	mov	r3, sl
 800bb8e:	4654      	mov	r4, sl
      if (query_idx + n + 1 > 0xFFFF) {
 800bb90:	4433      	add	r3, r6
 800bb92:	455b      	cmp	r3, fp
 800bb94:	ddb9      	ble.n	800bb0a <dns_send+0xca>
  return ERR_VAL;
 800bb96:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	f000 ff98 	bl	800cad0 <pbuf_free>
}
 800bba0:	4628      	mov	r0, r5
 800bba2:	b007      	add	sp, #28
 800bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 800bba8:	4648      	mov	r0, r9
 800bbaa:	4621      	mov	r1, r4
 800bbac:	f7ff fef6 	bl	800b99c <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 800bbb0:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 800bbb2:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 800bbb4:	444b      	add	r3, r9
}
 800bbb6:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 800bbb8:	4699      	mov	r9, r3
 800bbba:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <dns_send+0x190>)
 800bbbc:	eb03 1a09 	add.w	sl, r3, r9, lsl #4
 800bbc0:	f88a 400a 	strb.w	r4, [sl, #10]
}
 800bbc4:	b007      	add	sp, #28
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 800bbca:	f04f 35ff 	mov.w	r5, #4294967295
 800bbce:	e7d6      	b.n	800bb7e <dns_send+0x13e>
 800bbd0:	24013af8 	.word	0x24013af8
 800bbd4:	080149c8 	.word	0x080149c8
 800bbd8:	080149f8 	.word	0x080149f8
 800bbdc:	0801487c 	.word	0x0801487c
 800bbe0:	24013af0 	.word	0x24013af0
 800bbe4:	24013ab0 	.word	0x24013ab0

0800bbe8 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800bbe8:	2803      	cmp	r0, #3
{
 800bbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbee:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800bbf0:	d84a      	bhi.n	800bc88 <dns_check_entry+0xa0>

  switch (entry->state) {
 800bbf2:	0125      	lsls	r5, r4, #4
 800bbf4:	4e39      	ldr	r6, [pc, #228]	; (800bcdc <dns_check_entry+0xf4>)
 800bbf6:	192b      	adds	r3, r5, r4
 800bbf8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 800bbfc:	7a9b      	ldrb	r3, [r3, #10]
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d84e      	bhi.n	800bca0 <dns_check_entry+0xb8>
 800bc02:	e8df f003 	tbb	[pc, r3]
 800bc06:	100e      	.short	0x100e
 800bc08:	022c      	.short	0x022c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800bc0a:	192b      	adds	r3, r5, r4
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	58f2      	ldr	r2, [r6, r3]
 800bc10:	b112      	cbz	r2, 800bc18 <dns_check_entry+0x30>
 800bc12:	3a01      	subs	r2, #1
 800bc14:	50f2      	str	r2, [r6, r3]
 800bc16:	b922      	cbnz	r2, 800bc22 <dns_check_entry+0x3a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800bc18:	442c      	add	r4, r5
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800bc20:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 800bc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc26:	4f2e      	ldr	r7, [pc, #184]	; (800bce0 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 800bc28:	f007 ff18 	bl	8013a5c <rand>
 800bc2c:	4b2b      	ldr	r3, [pc, #172]	; (800bcdc <dns_check_entry+0xf4>)
 800bc2e:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800bc30:	7a9a      	ldrb	r2, [r3, #10]
 800bc32:	2a02      	cmp	r2, #2
 800bc34:	d030      	beq.n	800bc98 <dns_check_entry+0xb0>
 800bc36:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800bc3a:	429f      	cmp	r7, r3
 800bc3c:	d1f8      	bne.n	800bc30 <dns_check_entry+0x48>
      entry->txid = dns_create_txid();
 800bc3e:	4425      	add	r5, r4
      err = dns_send(i);
 800bc40:	4620      	mov	r0, r4
      entry->server_idx = 0;
 800bc42:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 800bc44:	2402      	movs	r4, #2
      entry->txid = dns_create_txid();
 800bc46:	012d      	lsls	r5, r5, #4
 800bc48:	f105 0308 	add.w	r3, r5, #8
 800bc4c:	4435      	add	r5, r6
 800bc4e:	441e      	add	r6, r3
 800bc50:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 800bc52:	8074      	strh	r4, [r6, #2]
      entry->server_idx = 0;
 800bc54:	80b2      	strh	r2, [r6, #4]
}
 800bc56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 800bc5a:	f7ff bef1 	b.w	800ba40 <dns_send>
      if (--entry->tmr == 0) {
 800bc5e:	192a      	adds	r2, r5, r4
 800bc60:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 800bc64:	7b13      	ldrb	r3, [r2, #12]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	7313      	strb	r3, [r2, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1d8      	bne.n	800bc22 <dns_check_entry+0x3a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800bc70:	7b53      	ldrb	r3, [r2, #13]
 800bc72:	3301      	adds	r3, #1
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	7353      	strb	r3, [r2, #13]
 800bc7a:	d01a      	beq.n	800bcb2 <dns_check_entry+0xca>
          entry->tmr = entry->retries;
 800bc7c:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 800bc7e:	4620      	mov	r0, r4
}
 800bc80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 800bc84:	f7ff bedc 	b.w	800ba40 <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800bc88:	4b16      	ldr	r3, [pc, #88]	; (800bce4 <dns_check_entry+0xfc>)
 800bc8a:	f240 421c 	movw	r2, #1052	; 0x41c
 800bc8e:	4916      	ldr	r1, [pc, #88]	; (800bce8 <dns_check_entry+0x100>)
 800bc90:	4816      	ldr	r0, [pc, #88]	; (800bcec <dns_check_entry+0x104>)
 800bc92:	f007 fecb 	bl	8013a2c <iprintf>
 800bc96:	e7ac      	b.n	800bbf2 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800bc98:	891a      	ldrh	r2, [r3, #8]
 800bc9a:	428a      	cmp	r2, r1
 800bc9c:	d1cb      	bne.n	800bc36 <dns_check_entry+0x4e>
 800bc9e:	e7c3      	b.n	800bc28 <dns_check_entry+0x40>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800bca0:	4b10      	ldr	r3, [pc, #64]	; (800bce4 <dns_check_entry+0xfc>)
 800bca2:	f240 425b 	movw	r2, #1115	; 0x45b
 800bca6:	4912      	ldr	r1, [pc, #72]	; (800bcf0 <dns_check_entry+0x108>)
 800bca8:	4810      	ldr	r0, [pc, #64]	; (800bcec <dns_check_entry+0x104>)
}
 800bcaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800bcae:	f007 bebd 	b.w	8013a2c <iprintf>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800bcb2:	7ad3      	ldrb	r3, [r2, #11]
 800bcb4:	b93b      	cbnz	r3, 800bcc6 <dns_check_entry+0xde>
 800bcb6:	490f      	ldr	r1, [pc, #60]	; (800bcf4 <dns_check_entry+0x10c>)
 800bcb8:	6849      	ldr	r1, [r1, #4]
 800bcba:	b121      	cbz	r1, 800bcc6 <dns_check_entry+0xde>
            entry->server_idx++;
 800bcbc:	2101      	movs	r1, #1
            entry->retries = 0;
 800bcbe:	7353      	strb	r3, [r2, #13]
            entry->server_idx++;
 800bcc0:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 800bcc2:	7311      	strb	r1, [r2, #12]
 800bcc4:	e7db      	b.n	800bc7e <dns_check_entry+0x96>
            dns_call_found(i, NULL);
 800bcc6:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 800bcc8:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 800bcca:	2100      	movs	r1, #0
 800bccc:	f7ff fe66 	bl	800b99c <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800bcd6:	72b3      	strb	r3, [r6, #10]
            break;
 800bcd8:	e7a3      	b.n	800bc22 <dns_check_entry+0x3a>
 800bcda:	bf00      	nop
 800bcdc:	24013af8 	.word	0x24013af8
 800bce0:	24013f38 	.word	0x24013f38
 800bce4:	080149c8 	.word	0x080149c8
 800bce8:	0801498c 	.word	0x0801498c
 800bcec:	0801487c 	.word	0x0801487c
 800bcf0:	080149a8 	.word	0x080149a8
 800bcf4:	24013af0 	.word	0x24013af0

0800bcf8 <dns_init>:
}
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <dns_tmr>:
{
 800bcfc:	b508      	push	{r3, lr}
dns_check_entries(void)
{
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
    dns_check_entry(i);
 800bcfe:	2000      	movs	r0, #0
 800bd00:	f7ff ff72 	bl	800bbe8 <dns_check_entry>
 800bd04:	2001      	movs	r0, #1
 800bd06:	f7ff ff6f 	bl	800bbe8 <dns_check_entry>
 800bd0a:	2002      	movs	r0, #2
 800bd0c:	f7ff ff6c 	bl	800bbe8 <dns_check_entry>
 800bd10:	2003      	movs	r0, #3
}
 800bd12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 800bd16:	f7ff bf67 	b.w	800bbe8 <dns_check_entry>
 800bd1a:	bf00      	nop

0800bd1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bd1c:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800bd1e:	f001 fa8d 	bl	800d23c <stats_init>
#if !NO_SYS
  sys_init();
 800bd22:	f007 fa83 	bl	801322c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bd26:	f000 f80f 	bl	800bd48 <mem_init>
  memp_init();
 800bd2a:	f000 fb69 	bl	800c400 <memp_init>
  pbuf_init();
  netif_init();
 800bd2e:	f000 fc67 	bl	800c600 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bd32:	f005 f863 	bl	8010dfc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bd36:	f001 fa83 	bl	800d240 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800bd3a:	f7ff ffdd 	bl	800bcf8 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800bd3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800bd42:	f004 bfe9 	b.w	8010d18 <sys_timeouts_init>
 800bd46:	bf00      	nop

0800bd48 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bd48:	4b11      	ldr	r3, [pc, #68]	; (800bd90 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800bd4a:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bd4c:	4811      	ldr	r0, [pc, #68]	; (800bd94 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 800bd4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 800bd52:	b570      	push	{r4, r5, r6, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bd54:	6003      	str	r3, [r0, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800bd56:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
  mem->prev = 0;
 800bd5a:	711a      	strb	r2, [r3, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bd5c:	2001      	movs	r0, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bd5e:	4a0e      	ldr	r2, [pc, #56]	; (800bd98 <mem_init+0x50>)
 800bd60:	4d0e      	ldr	r5, [pc, #56]	; (800bd9c <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 800bd62:	6019      	str	r1, [r3, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bd64:	602a      	str	r2, [r5, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bd66:	6014      	str	r4, [r2, #0]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bd68:	4d0d      	ldr	r5, [pc, #52]	; (800bda0 <mem_init+0x58>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800bd6a:	4c0e      	ldr	r4, [pc, #56]	; (800bda4 <mem_init+0x5c>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bd6c:	7110      	strb	r0, [r2, #4]

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd6e:	480e      	ldr	r0, [pc, #56]	; (800bda8 <mem_init+0x60>)
  lfree = (struct mem *)(void *)ram;
 800bd70:	602b      	str	r3, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800bd72:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd76:	f007 fa63 	bl	8013240 <sys_mutex_new>
 800bd7a:	b900      	cbnz	r0, 800bd7e <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd7e:	4b0b      	ldr	r3, [pc, #44]	; (800bdac <mem_init+0x64>)
 800bd80:	f240 221f 	movw	r2, #543	; 0x21f
 800bd84:	490a      	ldr	r1, [pc, #40]	; (800bdb0 <mem_init+0x68>)
 800bd86:	480b      	ldr	r0, [pc, #44]	; (800bdb4 <mem_init+0x6c>)
}
 800bd88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd8c:	f007 be4e 	b.w	8013a2c <iprintf>
 800bd90:	30044000 	.word	0x30044000
 800bd94:	24013f40 	.word	0x24013f40
 800bd98:	30045000 	.word	0x30045000
 800bd9c:	24013f44 	.word	0x24013f44
 800bda0:	24013f38 	.word	0x24013f38
 800bda4:	2401bdf8 	.word	0x2401bdf8
 800bda8:	24013f3c 	.word	0x24013f3c
 800bdac:	08014b28 	.word	0x08014b28
 800bdb0:	08014b58 	.word	0x08014b58
 800bdb4:	0801487c 	.word	0x0801487c

0800bdb8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bdb8:	b318      	cbz	r0, 800be02 <mem_free+0x4a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bdba:	0783      	lsls	r3, r0, #30
{
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bdc2:	d11f      	bne.n	800be04 <mem_free+0x4c>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bdc4:	4e6a      	ldr	r6, [pc, #424]	; (800bf70 <mem_free+0x1b8>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bdc6:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bdca:	6833      	ldr	r3, [r6, #0]
 800bdcc:	42ab      	cmp	r3, r5
 800bdce:	d805      	bhi.n	800bddc <mem_free+0x24>
 800bdd0:	4f68      	ldr	r7, [pc, #416]	; (800bf74 <mem_free+0x1bc>)
 800bdd2:	f100 030c 	add.w	r3, r0, #12
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d218      	bcs.n	800be0e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bddc:	4b66      	ldr	r3, [pc, #408]	; (800bf78 <mem_free+0x1c0>)
 800bdde:	f240 227f 	movw	r2, #639	; 0x27f
 800bde2:	4966      	ldr	r1, [pc, #408]	; (800bf7c <mem_free+0x1c4>)
 800bde4:	4866      	ldr	r0, [pc, #408]	; (800bf80 <mem_free+0x1c8>)
 800bde6:	f007 fe21 	bl	8013a2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdea:	f007 fa6b 	bl	80132c4 <sys_arch_protect>
 800bdee:	4a65      	ldr	r2, [pc, #404]	; (800bf84 <mem_free+0x1cc>)
 800bdf0:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 800bdf4:	3301      	adds	r3, #1
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bdf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800bdfa:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
 800bdfe:	f007 ba6d 	b.w	80132dc <sys_arch_unprotect>
 800be02:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800be04:	4b5c      	ldr	r3, [pc, #368]	; (800bf78 <mem_free+0x1c0>)
 800be06:	f240 2273 	movw	r2, #627	; 0x273
 800be0a:	495f      	ldr	r1, [pc, #380]	; (800bf88 <mem_free+0x1d0>)
 800be0c:	e7ea      	b.n	800bde4 <mem_free+0x2c>
  LWIP_MEM_FREE_PROTECT();
 800be0e:	485f      	ldr	r0, [pc, #380]	; (800bf8c <mem_free+0x1d4>)
 800be10:	f007 fa36 	bl	8013280 <sys_mutex_lock>
  if (!mem->used) {
 800be14:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d074      	beq.n	800bf06 <mem_free+0x14e>
  pmem = ptr_to_mem(mem->prev);
 800be1c:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  nmem = ptr_to_mem(mem->next);
 800be20:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be24:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800be28:	d802      	bhi.n	800be30 <mem_free+0x78>
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be2e:	d90a      	bls.n	800be46 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800be30:	4b51      	ldr	r3, [pc, #324]	; (800bf78 <mem_free+0x1c0>)
 800be32:	f240 2295 	movw	r2, #661	; 0x295
 800be36:	4956      	ldr	r1, [pc, #344]	; (800bf90 <mem_free+0x1d8>)
 800be38:	4851      	ldr	r0, [pc, #324]	; (800bf80 <mem_free+0x1c8>)
 800be3a:	f007 fdf7 	bl	8013a2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be3e:	4853      	ldr	r0, [pc, #332]	; (800bf8c <mem_free+0x1d4>)
 800be40:	f007 fa24 	bl	801328c <sys_mutex_unlock>
 800be44:	e7d1      	b.n	800bdea <mem_free+0x32>
  return (mem_size_t)((u8_t *)mem - ram);
 800be46:	f8d6 c000 	ldr.w	ip, [r6]
 800be4a:	eba5 020c 	sub.w	r2, r5, ip
 800be4e:	b292      	uxth	r2, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be50:	428a      	cmp	r2, r1
 800be52:	d003      	beq.n	800be5c <mem_free+0xa4>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be54:	f83c 1001 	ldrh.w	r1, [ip, r1]
 800be58:	4291      	cmp	r1, r2
 800be5a:	d1e9      	bne.n	800be30 <mem_free+0x78>
  return (struct mem *)(void *)&ram[ptr];
 800be5c:	eb0c 0103 	add.w	r1, ip, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be60:	f8d7 e000 	ldr.w	lr, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be64:	4571      	cmp	r1, lr
 800be66:	d002      	beq.n	800be6e <mem_free+0xb6>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be68:	8849      	ldrh	r1, [r1, #2]
 800be6a:	4291      	cmp	r1, r2
 800be6c:	d1e0      	bne.n	800be30 <mem_free+0x78>
  if (mem < lfree) {
 800be6e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800bfa8 <mem_free+0x1f0>
  mem->used = 0;
 800be72:	2000      	movs	r0, #0
  if (mem < lfree) {
 800be74:	f8d8 1000 	ldr.w	r1, [r8]
  mem->used = 0;
 800be78:	f804 0c04 	strb.w	r0, [r4, #-4]
  if (mem < lfree) {
 800be7c:	42a9      	cmp	r1, r5
 800be7e:	d901      	bls.n	800be84 <mem_free+0xcc>
    lfree = mem;
 800be80:	f8c8 5000 	str.w	r5, [r8]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800be84:	483f      	ldr	r0, [pc, #252]	; (800bf84 <mem_free+0x1cc>)
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800be86:	4565      	cmp	r5, ip
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800be88:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
 800be8c:	eba1 0103 	sub.w	r1, r1, r3
 800be90:	440a      	add	r2, r1
 800be92:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800be96:	d341      	bcc.n	800bf1c <mem_free+0x164>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800be98:	4575      	cmp	r5, lr
 800be9a:	d249      	bcs.n	800bf30 <mem_free+0x178>
  return (struct mem *)(void *)&ram[ptr];
 800be9c:	6832      	ldr	r2, [r6, #0]
 800be9e:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bea0:	429d      	cmp	r5, r3
 800bea2:	d014      	beq.n	800bece <mem_free+0x116>
 800bea4:	7919      	ldrb	r1, [r3, #4]
 800bea6:	b991      	cbnz	r1, 800bece <mem_free+0x116>
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	428b      	cmp	r3, r1
 800beac:	d00f      	beq.n	800bece <mem_free+0x116>
    if (lfree == nmem) {
 800beae:	f8d8 1000 	ldr.w	r1, [r8]
 800beb2:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800beb4:	8819      	ldrh	r1, [r3, #0]
 800beb6:	f824 1c08 	strh.w	r1, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800beba:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 800bebc:	bf08      	it	eq
 800bebe:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec6:	d002      	beq.n	800bece <mem_free+0x116>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bec8:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800beca:	1aa9      	subs	r1, r5, r2
 800becc:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 800bece:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800bed2:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800bed4:	429d      	cmp	r5, r3
 800bed6:	d011      	beq.n	800befc <mem_free+0x144>
 800bed8:	7918      	ldrb	r0, [r3, #4]
 800beda:	b978      	cbnz	r0, 800befc <mem_free+0x144>
    if (lfree == mem) {
 800bedc:	f8d8 0000 	ldr.w	r0, [r8]
 800bee0:	4285      	cmp	r5, r0
      lfree = pmem;
 800bee2:	bf08      	it	eq
 800bee4:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800bee8:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800beec:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800beee:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800bef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef6:	d001      	beq.n	800befc <mem_free+0x144>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bef8:	441a      	add	r2, r3
 800befa:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800befc:	4823      	ldr	r0, [pc, #140]	; (800bf8c <mem_free+0x1d4>)
}
 800befe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800bf02:	f007 b9c3 	b.w	801328c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bf06:	4b1c      	ldr	r3, [pc, #112]	; (800bf78 <mem_free+0x1c0>)
 800bf08:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bf0c:	4921      	ldr	r1, [pc, #132]	; (800bf94 <mem_free+0x1dc>)
 800bf0e:	481c      	ldr	r0, [pc, #112]	; (800bf80 <mem_free+0x1c8>)
 800bf10:	f007 fd8c 	bl	8013a2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bf14:	481d      	ldr	r0, [pc, #116]	; (800bf8c <mem_free+0x1d4>)
 800bf16:	f007 f9b9 	bl	801328c <sys_mutex_unlock>
 800bf1a:	e766      	b.n	800bdea <mem_free+0x32>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bf1c:	4b16      	ldr	r3, [pc, #88]	; (800bf78 <mem_free+0x1c0>)
 800bf1e:	f240 12df 	movw	r2, #479	; 0x1df
 800bf22:	491d      	ldr	r1, [pc, #116]	; (800bf98 <mem_free+0x1e0>)
 800bf24:	4816      	ldr	r0, [pc, #88]	; (800bf80 <mem_free+0x1c8>)
 800bf26:	f007 fd81 	bl	8013a2c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	429d      	cmp	r5, r3
 800bf2e:	d306      	bcc.n	800bf3e <mem_free+0x186>
 800bf30:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <mem_free+0x1c0>)
 800bf32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf36:	4919      	ldr	r1, [pc, #100]	; (800bf9c <mem_free+0x1e4>)
 800bf38:	4811      	ldr	r0, [pc, #68]	; (800bf80 <mem_free+0x1c8>)
 800bf3a:	f007 fd77 	bl	8013a2c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bf3e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800bf42:	b133      	cbz	r3, 800bf52 <mem_free+0x19a>
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <mem_free+0x1c0>)
 800bf46:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bf4a:	4915      	ldr	r1, [pc, #84]	; (800bfa0 <mem_free+0x1e8>)
 800bf4c:	480c      	ldr	r0, [pc, #48]	; (800bf80 <mem_free+0x1c8>)
 800bf4e:	f007 fd6d 	bl	8013a2c <iprintf>
 800bf52:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bf56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf5a:	d99f      	bls.n	800be9c <mem_free+0xe4>
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <mem_free+0x1c0>)
 800bf5e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bf62:	4910      	ldr	r1, [pc, #64]	; (800bfa4 <mem_free+0x1ec>)
 800bf64:	4806      	ldr	r0, [pc, #24]	; (800bf80 <mem_free+0x1c8>)
 800bf66:	f007 fd61 	bl	8013a2c <iprintf>
 800bf6a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800bf6e:	e795      	b.n	800be9c <mem_free+0xe4>
 800bf70:	24013f40 	.word	0x24013f40
 800bf74:	24013f44 	.word	0x24013f44
 800bf78:	08014b28 	.word	0x08014b28
 800bf7c:	08014a34 	.word	0x08014a34
 800bf80:	0801487c 	.word	0x0801487c
 800bf84:	2401bdf8 	.word	0x2401bdf8
 800bf88:	08014a10 	.word	0x08014a10
 800bf8c:	24013f3c 	.word	0x24013f3c
 800bf90:	08014a78 	.word	0x08014a78
 800bf94:	08014a50 	.word	0x08014a50
 800bf98:	08014aac 	.word	0x08014aac
 800bf9c:	08014ac4 	.word	0x08014ac4
 800bfa0:	08014ae0 	.word	0x08014ae0
 800bfa4:	08014afc 	.word	0x08014afc
 800bfa8:	24013f38 	.word	0x24013f38

0800bfac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bfb0:	1ccb      	adds	r3, r1, #3
 800bfb2:	f023 0303 	bic.w	r3, r3, #3
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	2b0c      	cmp	r3, #12
 800bfba:	461f      	mov	r7, r3
 800bfbc:	bf38      	it	cc
 800bfbe:	270c      	movcc	r7, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bfc0:	42b9      	cmp	r1, r7
 800bfc2:	d879      	bhi.n	800c0b8 <mem_trim+0x10c>
 800bfc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc8:	d876      	bhi.n	800c0b8 <mem_trim+0x10c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bfca:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800c158 <mem_trim+0x1ac>
 800bfce:	4604      	mov	r4, r0
 800bfd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	d848      	bhi.n	800c06a <mem_trim+0xbe>
 800bfd8:	4a56      	ldr	r2, [pc, #344]	; (800c134 <mem_trim+0x188>)
 800bfda:	6812      	ldr	r2, [r2, #0]
 800bfdc:	4282      	cmp	r2, r0
 800bfde:	d944      	bls.n	800c06a <mem_trim+0xbe>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bfe0:	f1a4 0508 	sub.w	r5, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bfe4:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800bfe8:	1aeb      	subs	r3, r5, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bfea:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800bfec:	b29d      	uxth	r5, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bfee:	1b76      	subs	r6, r6, r5
 800bff0:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bff2:	42be      	cmp	r6, r7
 800bff4:	d355      	bcc.n	800c0a2 <mem_trim+0xf6>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800bff6:	d051      	beq.n	800c09c <mem_trim+0xf0>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bff8:	484f      	ldr	r0, [pc, #316]	; (800c138 <mem_trim+0x18c>)
 800bffa:	f007 f941 	bl	8013280 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bffe:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800c002:	f8d8 2000 	ldr.w	r2, [r8]
 800c006:	eb02 0903 	add.w	r9, r2, r3
  if (mem2->used == 0) {
 800c00a:	f899 1004 	ldrb.w	r1, [r9, #4]
 800c00e:	2900      	cmp	r1, #0
 800c010:	d154      	bne.n	800c0bc <mem_trim+0x110>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c016:	d077      	beq.n	800c108 <mem_trim+0x15c>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c018:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 800c01c:	4947      	ldr	r1, [pc, #284]	; (800c13c <mem_trim+0x190>)
    next = mem2->next;
 800c01e:	f8b9 e000 	ldrh.w	lr, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c022:	442b      	add	r3, r5
 800c024:	fa1f fc83 	uxth.w	ip, r3
    if (lfree == mem2) {
 800c028:	680b      	ldr	r3, [r1, #0]
 800c02a:	eb02 000c 	add.w	r0, r2, ip
 800c02e:	454b      	cmp	r3, r9
      lfree = ptr_to_mem(ptr2);
 800c030:	bf08      	it	eq
 800c032:	6008      	streq	r0, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 800c034:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 800c036:	f8a0 e000 	strh.w	lr, [r0]
    mem2->used = 0;
 800c03a:	7101      	strb	r1, [r0, #4]
    /* link it back to mem */
    mem2->prev = ptr;
 800c03c:	8045      	strh	r5, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c03e:	f824 cc08 	strh.w	ip, [r4, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c042:	8801      	ldrh	r1, [r0, #0]
 800c044:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c048:	d002      	beq.n	800c050 <mem_trim+0xa4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c04a:	440a      	add	r2, r1
 800c04c:	f8a2 c002 	strh.w	ip, [r2, #2]
    mem2->prev = ptr;
    mem->next = ptr2;
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800c050:	4a3b      	ldr	r2, [pc, #236]	; (800c140 <mem_trim+0x194>)
 800c052:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 800c056:	443b      	add	r3, r7
 800c058:	1b9e      	subs	r6, r3, r6
 800c05a:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c05e:	4836      	ldr	r0, [pc, #216]	; (800c138 <mem_trim+0x18c>)
 800c060:	f007 f914 	bl	801328c <sys_mutex_unlock>
  return rmem;
}
 800c064:	4620      	mov	r0, r4
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c06a:	4b36      	ldr	r3, [pc, #216]	; (800c144 <mem_trim+0x198>)
 800c06c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c070:	4935      	ldr	r1, [pc, #212]	; (800c148 <mem_trim+0x19c>)
 800c072:	4836      	ldr	r0, [pc, #216]	; (800c14c <mem_trim+0x1a0>)
 800c074:	f007 fcda 	bl	8013a2c <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c078:	f8d8 3000 	ldr.w	r3, [r8]
 800c07c:	42a3      	cmp	r3, r4
 800c07e:	d803      	bhi.n	800c088 <mem_trim+0xdc>
 800c080:	4a2c      	ldr	r2, [pc, #176]	; (800c134 <mem_trim+0x188>)
 800c082:	6812      	ldr	r2, [r2, #0]
 800c084:	4294      	cmp	r4, r2
 800c086:	d3ab      	bcc.n	800bfe0 <mem_trim+0x34>
    MEM_STATS_INC_LOCKED(illegal);
 800c088:	f007 f91c 	bl	80132c4 <sys_arch_protect>
 800c08c:	4a2c      	ldr	r2, [pc, #176]	; (800c140 <mem_trim+0x194>)
 800c08e:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 800c092:	3301      	adds	r3, #1
 800c094:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
 800c098:	f007 f920 	bl	80132dc <sys_arch_unprotect>
}
 800c09c:	4620      	mov	r0, r4
 800c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800c0a2:	2400      	movs	r4, #0
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c0a4:	4b27      	ldr	r3, [pc, #156]	; (800c144 <mem_trim+0x198>)
 800c0a6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c0aa:	4929      	ldr	r1, [pc, #164]	; (800c150 <mem_trim+0x1a4>)
 800c0ac:	4827      	ldr	r0, [pc, #156]	; (800c14c <mem_trim+0x1a0>)
 800c0ae:	f007 fcbd 	bl	8013a2c <iprintf>
}
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800c0b8:	2400      	movs	r4, #0
 800c0ba:	e7ef      	b.n	800c09c <mem_trim+0xf0>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c0bc:	f107 0114 	add.w	r1, r7, #20
 800c0c0:	42b1      	cmp	r1, r6
 800c0c2:	d8cc      	bhi.n	800c05e <mem_trim+0xb2>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c0c4:	f107 0908 	add.w	r9, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c0c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c0cc:	44a9      	add	r9, r5
 800c0ce:	fa1f f989 	uxth.w	r9, r9
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c0d2:	d023      	beq.n	800c11c <mem_trim+0x170>
    if (mem2 < lfree) {
 800c0d4:	4819      	ldr	r0, [pc, #100]	; (800c13c <mem_trim+0x190>)
  return (struct mem *)(void *)&ram[ptr];
 800c0d6:	eb02 0c09 	add.w	ip, r2, r9
    if (mem2 < lfree) {
 800c0da:	6801      	ldr	r1, [r0, #0]
    mem2->next = mem->next;
 800c0dc:	f8ac 3000 	strh.w	r3, [ip]
    if (mem2 < lfree) {
 800c0e0:	4561      	cmp	r1, ip
    mem2->prev = ptr;
 800c0e2:	f8ac 5002 	strh.w	r5, [ip, #2]
      lfree = mem2;
 800c0e6:	bf88      	it	hi
 800c0e8:	f8c0 c000 	strhi.w	ip, [r0]
    mem2->used = 0;
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f88c 0004 	strb.w	r0, [ip, #4]
    mem->next = ptr2;
 800c0f2:	f824 9c08 	strh.w	r9, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0f6:	f8bc 3000 	ldrh.w	r3, [ip]
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d0a7      	beq.n	800c050 <mem_trim+0xa4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c100:	441a      	add	r2, r3
 800c102:	f8a2 9002 	strh.w	r9, [r2, #2]
 800c106:	e7a3      	b.n	800c050 <mem_trim+0xa4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c108:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c10c:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <mem_trim+0x198>)
 800c10e:	4911      	ldr	r1, [pc, #68]	; (800c154 <mem_trim+0x1a8>)
 800c110:	480e      	ldr	r0, [pc, #56]	; (800c14c <mem_trim+0x1a0>)
 800c112:	f007 fc8b 	bl	8013a2c <iprintf>
 800c116:	f8d8 2000 	ldr.w	r2, [r8]
 800c11a:	e77d      	b.n	800c018 <mem_trim+0x6c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c11c:	4b09      	ldr	r3, [pc, #36]	; (800c144 <mem_trim+0x198>)
 800c11e:	f240 3216 	movw	r2, #790	; 0x316
 800c122:	490c      	ldr	r1, [pc, #48]	; (800c154 <mem_trim+0x1a8>)
 800c124:	4809      	ldr	r0, [pc, #36]	; (800c14c <mem_trim+0x1a0>)
 800c126:	f007 fc81 	bl	8013a2c <iprintf>
 800c12a:	f8d8 2000 	ldr.w	r2, [r8]
 800c12e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800c132:	e7cf      	b.n	800c0d4 <mem_trim+0x128>
 800c134:	24013f44 	.word	0x24013f44
 800c138:	24013f3c 	.word	0x24013f3c
 800c13c:	24013f38 	.word	0x24013f38
 800c140:	2401bdf8 	.word	0x2401bdf8
 800c144:	08014b28 	.word	0x08014b28
 800c148:	08014bf8 	.word	0x08014bf8
 800c14c:	0801487c 	.word	0x0801487c
 800c150:	08014c10 	.word	0x08014c10
 800c154:	08014c30 	.word	0x08014c30
 800c158:	24013f40 	.word	0x24013f40

0800c15c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f000 80a5 	beq.w	800c2ac <mem_malloc+0x150>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c162:	1cc3      	adds	r3, r0, #3
 800c164:	f023 0303 	bic.w	r3, r3, #3
 800c168:	b29b      	uxth	r3, r3
 800c16a:	2b0c      	cmp	r3, #12
{
 800c16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c170:	461e      	mov	r6, r3
 800c172:	bf38      	it	cc
 800c174:	260c      	movcc	r6, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c176:	4286      	cmp	r6, r0
 800c178:	f0c0 8095 	bcc.w	800c2a6 <mem_malloc+0x14a>
 800c17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c180:	f200 8091 	bhi.w	800c2a6 <mem_malloc+0x14a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c184:	4f5e      	ldr	r7, [pc, #376]	; (800c300 <mem_malloc+0x1a4>)
 800c186:	f5c6 5980 	rsb	r9, r6, #4096	; 0x1000
  return (mem_size_t)((u8_t *)mem - ram);
 800c18a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800c328 <mem_malloc+0x1cc>
  sys_mutex_lock(&mem_mutex);
 800c18e:	485d      	ldr	r0, [pc, #372]	; (800c304 <mem_malloc+0x1a8>)
 800c190:	f007 f876 	bl	8013280 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c194:	6838      	ldr	r0, [r7, #0]
  return (mem_size_t)((u8_t *)mem - ram);
 800c196:	f8d8 c000 	ldr.w	ip, [r8]
 800c19a:	eba0 050c 	sub.w	r5, r0, ip
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c19e:	b2ab      	uxth	r3, r5
 800c1a0:	454b      	cmp	r3, r9
  return (mem_size_t)((u8_t *)mem - ram);
 800c1a2:	461d      	mov	r5, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c1a4:	d213      	bcs.n	800c1ce <mem_malloc+0x72>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c1a6:	f06f 0a07 	mvn.w	sl, #7
  return (struct mem *)(void *)&ram[ptr];
 800c1aa:	eb0c 0403 	add.w	r4, ip, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c1ae:	ebaa 0203 	sub.w	r2, sl, r3
 800c1b2:	f83c 1003 	ldrh.w	r1, [ip, r3]
      if ((!mem->used) &&
 800c1b6:	f894 e004 	ldrb.w	lr, [r4, #4]
 800c1ba:	460b      	mov	r3, r1
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c1bc:	440a      	add	r2, r1
      if ((!mem->used) &&
 800c1be:	f1be 0f00 	cmp.w	lr, #0
 800c1c2:	d101      	bne.n	800c1c8 <mem_malloc+0x6c>
 800c1c4:	42b2      	cmp	r2, r6
 800c1c6:	d20e      	bcs.n	800c1e6 <mem_malloc+0x8a>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c1c8:	454b      	cmp	r3, r9
 800c1ca:	461d      	mov	r5, r3
 800c1cc:	d3ed      	bcc.n	800c1aa <mem_malloc+0x4e>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800c1ce:	4a4e      	ldr	r2, [pc, #312]	; (800c308 <mem_malloc+0x1ac>)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c1d0:	484c      	ldr	r0, [pc, #304]	; (800c304 <mem_malloc+0x1a8>)
  MEM_STATS_INC(err);
 800c1d2:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 800c1dc:	f007 f856 	bl	801328c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c1e0:	2000      	movs	r0, #0
}
 800c1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c1e6:	f106 0314 	add.w	r3, r6, #20
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d22f      	bcs.n	800c24e <mem_malloc+0xf2>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800c1ee:	4b46      	ldr	r3, [pc, #280]	; (800c308 <mem_malloc+0x1ac>)
          mem->used = 1;
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f106 0908 	add.w	r9, r6, #8
 800c1f6:	7122      	strb	r2, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800c1f8:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	; 0xac
 800c1fc:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 800c200:	4461      	add	r1, ip
 800c202:	1b4d      	subs	r5, r1, r5
 800c204:	b2ad      	uxth	r5, r5
 800c206:	42aa      	cmp	r2, r5
 800c208:	f8a3 50ac 	strh.w	r5, [r3, #172]	; 0xac
 800c20c:	bf38      	it	cc
 800c20e:	f8a3 50ae 	strhcc.w	r5, [r3, #174]	; 0xae
        if (mem == lfree) {
 800c212:	4284      	cmp	r4, r0
          while (cur->used && cur != ram_end) {
 800c214:	4d3d      	ldr	r5, [pc, #244]	; (800c30c <mem_malloc+0x1b0>)
        if (mem == lfree) {
 800c216:	d052      	beq.n	800c2be <mem_malloc+0x162>
        sys_mutex_unlock(&mem_mutex);
 800c218:	483a      	ldr	r0, [pc, #232]	; (800c304 <mem_malloc+0x1a8>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c21a:	44a1      	add	r9, r4
        sys_mutex_unlock(&mem_mutex);
 800c21c:	f007 f836 	bl	801328c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	454b      	cmp	r3, r9
 800c224:	d343      	bcc.n	800c2ae <mem_malloc+0x152>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c226:	07a3      	lsls	r3, r4, #30
 800c228:	d00d      	beq.n	800c246 <mem_malloc+0xea>
 800c22a:	4b39      	ldr	r3, [pc, #228]	; (800c310 <mem_malloc+0x1b4>)
 800c22c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c230:	4938      	ldr	r1, [pc, #224]	; (800c314 <mem_malloc+0x1b8>)
 800c232:	4839      	ldr	r0, [pc, #228]	; (800c318 <mem_malloc+0x1bc>)
 800c234:	f007 fbfa 	bl	8013a2c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c238:	4b35      	ldr	r3, [pc, #212]	; (800c310 <mem_malloc+0x1b4>)
 800c23a:	f240 32be 	movw	r2, #958	; 0x3be
 800c23e:	4937      	ldr	r1, [pc, #220]	; (800c31c <mem_malloc+0x1c0>)
 800c240:	4835      	ldr	r0, [pc, #212]	; (800c318 <mem_malloc+0x1bc>)
 800c242:	f007 fbf3 	bl	8013a2c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c246:	f104 0008 	add.w	r0, r4, #8
}
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c24e:	f106 0908 	add.w	r9, r6, #8
 800c252:	eb05 0a09 	add.w	sl, r5, r9
 800c256:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c25a:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
 800c25e:	d043      	beq.n	800c2e8 <mem_malloc+0x18c>
  return (struct mem *)(void *)&ram[ptr];
 800c260:	eb0c 030a 	add.w	r3, ip, sl
          mem2->used = 0;
 800c264:	2000      	movs	r0, #0
          mem->used = 1;
 800c266:	2201      	movs	r2, #1
          mem2->used = 0;
 800c268:	7118      	strb	r0, [r3, #4]
          mem2->next = mem->next;
 800c26a:	f82c 100a 	strh.w	r1, [ip, sl]
          mem2->prev = ptr;
 800c26e:	805d      	strh	r5, [r3, #2]
          mem->next = ptr2;
 800c270:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 800c274:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c276:	f83c 300a 	ldrh.w	r3, [ip, sl]
 800c27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c27e:	d002      	beq.n	800c286 <mem_malloc+0x12a>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c280:	449c      	add	ip, r3
 800c282:	f8ac a002 	strh.w	sl, [ip, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800c286:	4a20      	ldr	r2, [pc, #128]	; (800c308 <mem_malloc+0x1ac>)
 800c288:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 800c28c:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 800c290:	3308      	adds	r3, #8
 800c292:	441e      	add	r6, r3
 800c294:	b2b6      	uxth	r6, r6
 800c296:	42b1      	cmp	r1, r6
 800c298:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 800c29c:	d21f      	bcs.n	800c2de <mem_malloc+0x182>
 800c29e:	f8a2 60ae 	strh.w	r6, [r2, #174]	; 0xae
 800c2a2:	6838      	ldr	r0, [r7, #0]
 800c2a4:	e7b5      	b.n	800c212 <mem_malloc+0xb6>
    return NULL;
 800c2a6:	2000      	movs	r0, #0
}
 800c2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ac:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c2ae:	4b18      	ldr	r3, [pc, #96]	; (800c310 <mem_malloc+0x1b4>)
 800c2b0:	f240 32ba 	movw	r2, #954	; 0x3ba
 800c2b4:	491a      	ldr	r1, [pc, #104]	; (800c320 <mem_malloc+0x1c4>)
 800c2b6:	4818      	ldr	r0, [pc, #96]	; (800c318 <mem_malloc+0x1bc>)
 800c2b8:	f007 fbb8 	bl	8013a2c <iprintf>
 800c2bc:	e7b3      	b.n	800c226 <mem_malloc+0xca>
          while (cur->used && cur != ram_end) {
 800c2be:	6829      	ldr	r1, [r5, #0]
 800c2c0:	42a1      	cmp	r1, r4
 800c2c2:	d00e      	beq.n	800c2e2 <mem_malloc+0x186>
  return (struct mem *)(void *)&ram[ptr];
 800c2c4:	f8d8 0000 	ldr.w	r0, [r8]
 800c2c8:	4623      	mov	r3, r4
 800c2ca:	e001      	b.n	800c2d0 <mem_malloc+0x174>
          while (cur->used && cur != ram_end) {
 800c2cc:	4299      	cmp	r1, r3
 800c2ce:	d009      	beq.n	800c2e4 <mem_malloc+0x188>
  return (struct mem *)(void *)&ram[ptr];
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800c2d4:	791a      	ldrb	r2, [r3, #4]
 800c2d6:	2a00      	cmp	r2, #0
 800c2d8:	d1f8      	bne.n	800c2cc <mem_malloc+0x170>
          lfree = cur;
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	e79c      	b.n	800c218 <mem_malloc+0xbc>
 800c2de:	6838      	ldr	r0, [r7, #0]
 800c2e0:	e797      	b.n	800c212 <mem_malloc+0xb6>
          while (cur->used && cur != ram_end) {
 800c2e2:	4621      	mov	r1, r4
          lfree = cur;
 800c2e4:	6039      	str	r1, [r7, #0]
 800c2e6:	e797      	b.n	800c218 <mem_malloc+0xbc>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c2e8:	490e      	ldr	r1, [pc, #56]	; (800c324 <mem_malloc+0x1c8>)
 800c2ea:	f240 3287 	movw	r2, #903	; 0x387
 800c2ee:	4b08      	ldr	r3, [pc, #32]	; (800c310 <mem_malloc+0x1b4>)
 800c2f0:	4809      	ldr	r0, [pc, #36]	; (800c318 <mem_malloc+0x1bc>)
 800c2f2:	f007 fb9b 	bl	8013a2c <iprintf>
 800c2f6:	8821      	ldrh	r1, [r4, #0]
 800c2f8:	f8d8 c000 	ldr.w	ip, [r8]
 800c2fc:	e7b0      	b.n	800c260 <mem_malloc+0x104>
 800c2fe:	bf00      	nop
 800c300:	24013f38 	.word	0x24013f38
 800c304:	24013f3c 	.word	0x24013f3c
 800c308:	2401bdf8 	.word	0x2401bdf8
 800c30c:	24013f44 	.word	0x24013f44
 800c310:	08014b28 	.word	0x08014b28
 800c314:	08014ba4 	.word	0x08014ba4
 800c318:	0801487c 	.word	0x0801487c
 800c31c:	08014bd4 	.word	0x08014bd4
 800c320:	08014b74 	.word	0x08014b74
 800c324:	08014c30 	.word	0x08014c30
 800c328:	24013f40 	.word	0x24013f40

0800c32c <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	460c      	mov	r4, r1
 800c330:	4606      	mov	r6, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c332:	f006 ffc7 	bl	80132c4 <sys_arch_protect>

  memp = *desc->tab;
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c33a:	b1d4      	cbz	r4, 800c372 <do_memp_malloc_pool.isra.0+0x46>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c33c:	6822      	ldr	r2, [r4, #0]
 800c33e:	4605      	mov	r5, r0
 800c340:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c342:	07a3      	lsls	r3, r4, #30
 800c344:	d10d      	bne.n	800c362 <do_memp_malloc_pool.isra.0+0x36>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800c346:	6832      	ldr	r2, [r6, #0]
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c348:	4628      	mov	r0, r5
    desc->stats->used++;
 800c34a:	8893      	ldrh	r3, [r2, #4]
    if (desc->stats->used > desc->stats->max) {
 800c34c:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 800c34e:	3301      	adds	r3, #1
 800c350:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 800c352:	4299      	cmp	r1, r3
    desc->stats->used++;
 800c354:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 800c356:	bf38      	it	cc
 800c358:	80d3      	strhcc	r3, [r2, #6]
    SYS_ARCH_UNPROTECT(old_level);
 800c35a:	f006 ffbf 	bl	80132dc <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800c35e:	4620      	mov	r0, r4
 800c360:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c362:	4b07      	ldr	r3, [pc, #28]	; (800c380 <do_memp_malloc_pool.isra.0+0x54>)
 800c364:	f240 1219 	movw	r2, #281	; 0x119
 800c368:	4906      	ldr	r1, [pc, #24]	; (800c384 <do_memp_malloc_pool.isra.0+0x58>)
 800c36a:	4807      	ldr	r0, [pc, #28]	; (800c388 <do_memp_malloc_pool.isra.0+0x5c>)
 800c36c:	f007 fb5e 	bl	8013a2c <iprintf>
 800c370:	e7e9      	b.n	800c346 <do_memp_malloc_pool.isra.0+0x1a>
    desc->stats->err++;
 800c372:	6832      	ldr	r2, [r6, #0]
 800c374:	8813      	ldrh	r3, [r2, #0]
 800c376:	3301      	adds	r3, #1
 800c378:	8013      	strh	r3, [r2, #0]
    SYS_ARCH_UNPROTECT(old_level);
 800c37a:	f006 ffaf 	bl	80132dc <sys_arch_unprotect>
 800c37e:	e7ee      	b.n	800c35e <do_memp_malloc_pool.isra.0+0x32>
 800c380:	08014c64 	.word	0x08014c64
 800c384:	08014c94 	.word	0x08014c94
 800c388:	0801487c 	.word	0x0801487c

0800c38c <do_memp_free_pool.isra.1>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c38c:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800c38e:	b570      	push	{r4, r5, r6, lr}
 800c390:	4614      	mov	r4, r2
 800c392:	4606      	mov	r6, r0
 800c394:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800c396:	d006      	beq.n	800c3a6 <do_memp_free_pool.isra.1+0x1a>
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <do_memp_free_pool.isra.1+0x38>)
 800c39a:	f240 126d 	movw	r2, #365	; 0x16d
 800c39e:	490a      	ldr	r1, [pc, #40]	; (800c3c8 <do_memp_free_pool.isra.1+0x3c>)
 800c3a0:	480a      	ldr	r0, [pc, #40]	; (800c3cc <do_memp_free_pool.isra.1+0x40>)
 800c3a2:	f007 fb43 	bl	8013a2c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800c3a6:	f006 ff8d 	bl	80132c4 <sys_arch_protect>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800c3aa:	6831      	ldr	r1, [r6, #0]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c3ac:	682a      	ldr	r2, [r5, #0]
  desc->stats->used--;
 800c3ae:	888b      	ldrh	r3, [r1, #4]
  memp->next = *desc->tab;
 800c3b0:	6815      	ldr	r5, [r2, #0]
  desc->stats->used--;
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	808b      	strh	r3, [r1, #4]
  memp->next = *desc->tab;
 800c3b6:	6025      	str	r5, [r4, #0]
  *desc->tab = memp;
 800c3b8:	6014      	str	r4, [r2, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800c3be:	f006 bf8d 	b.w	80132dc <sys_arch_unprotect>
 800c3c2:	bf00      	nop
 800c3c4:	08014c64 	.word	0x08014c64
 800c3c8:	08014c44 	.word	0x08014c44
 800c3cc:	0801487c 	.word	0x0801487c

0800c3d0 <memp_init_pool>:
{
 800c3d0:	b4f0      	push	{r4, r5, r6, r7}
  *desc->tab = NULL;
 800c3d2:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800c3d4:	88c5      	ldrh	r5, [r0, #6]
  *desc->tab = NULL;
 800c3d6:	e9d0 3602 	ldrd	r3, r6, [r0, #8]
 800c3da:	6031      	str	r1, [r6, #0]
  for (i = 0; i < desc->num; ++i) {
 800c3dc:	b165      	cbz	r5, 800c3f8 <memp_init_pool+0x28>
 800c3de:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c3e0:	8887      	ldrh	r7, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 800c3e2:	460a      	mov	r2, r1
 800c3e4:	f023 0303 	bic.w	r3, r3, #3
 800c3e8:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c3ea:	19dc      	adds	r4, r3, r7
    memp->next = *desc->tab;
 800c3ec:	6019      	str	r1, [r3, #0]
 800c3ee:	4619      	mov	r1, r3
  for (i = 0; i < desc->num; ++i) {
 800c3f0:	42aa      	cmp	r2, r5
    *desc->tab = memp;
 800c3f2:	6033      	str	r3, [r6, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c3f4:	4623      	mov	r3, r4
  for (i = 0; i < desc->num; ++i) {
 800c3f6:	d1f7      	bne.n	800c3e8 <memp_init_pool+0x18>
  desc->stats->avail = desc->num;
 800c3f8:	6803      	ldr	r3, [r0, #0]
 800c3fa:	805d      	strh	r5, [r3, #2]
}
 800c3fc:	bcf0      	pop	{r4, r5, r6, r7}
 800c3fe:	4770      	bx	lr

0800c400 <memp_init>:
{
 800c400:	f8df c068 	ldr.w	ip, [pc, #104]	; 800c46c <memp_init+0x6c>
 800c404:	4b15      	ldr	r3, [pc, #84]	; (800c45c <memp_init+0x5c>)
 800c406:	4a16      	ldr	r2, [pc, #88]	; (800c460 <memp_init+0x60>)
 800c408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c40c:	2404      	movs	r4, #4
 800c40e:	f8df e060 	ldr.w	lr, [pc, #96]	; 800c470 <memp_init+0x70>
  *desc->tab = NULL;
 800c412:	f04f 0900 	mov.w	r9, #0
 800c416:	f10c 0834 	add.w	r8, ip, #52	; 0x34
{
 800c41a:	4f12      	ldr	r7, [pc, #72]	; (800c464 <memp_init+0x64>)
 800c41c:	4d12      	ldr	r5, [pc, #72]	; (800c468 <memp_init+0x68>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c41e:	3303      	adds	r3, #3
  *desc->tab = NULL;
 800c420:	f8c5 9000 	str.w	r9, [r5]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c424:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800c428:	b154      	cbz	r4, 800c440 <memp_init+0x40>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c42a:	2100      	movs	r1, #0
 800c42c:	8896      	ldrh	r6, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800c42e:	460a      	mov	r2, r1
 800c430:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c432:	1998      	adds	r0, r3, r6
    memp->next = *desc->tab;
 800c434:	6019      	str	r1, [r3, #0]
 800c436:	4619      	mov	r1, r3
  for (i = 0; i < desc->num; ++i) {
 800c438:	4294      	cmp	r4, r2
    *desc->tab = memp;
 800c43a:	602b      	str	r3, [r5, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c43c:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800c43e:	d1f7      	bne.n	800c430 <memp_init+0x30>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c440:	45e0      	cmp	r8, ip
  desc->stats->avail = desc->num;
 800c442:	807c      	strh	r4, [r7, #2]
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800c444:	f84e 7b04 	str.w	r7, [lr], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c448:	d006      	beq.n	800c458 <memp_init+0x58>
 800c44a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c44e:	e9d2 3502 	ldrd	r3, r5, [r2, #8]
 800c452:	6817      	ldr	r7, [r2, #0]
 800c454:	88d4      	ldrh	r4, [r2, #6]
 800c456:	e7e2      	b.n	800c41e <memp_init+0x1e>
}
 800c458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c45c:	2401b908 	.word	0x2401b908
 800c460:	08014d88 	.word	0x08014d88
 800c464:	24013fe4 	.word	0x24013fe4
 800c468:	24014024 	.word	0x24014024
 800c46c:	08014dec 	.word	0x08014dec
 800c470:	2401beac 	.word	0x2401beac

0800c474 <memp_malloc_pool>:
{
 800c474:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c476:	4604      	mov	r4, r0
 800c478:	b128      	cbz	r0, 800c486 <memp_malloc_pool+0x12>
  return do_memp_malloc_pool(desc);
 800c47a:	f100 010c 	add.w	r1, r0, #12
}
 800c47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800c482:	f7ff bf53 	b.w	800c32c <do_memp_malloc_pool.isra.0>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c486:	4b04      	ldr	r3, [pc, #16]	; (800c498 <memp_malloc_pool+0x24>)
 800c488:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c48c:	4903      	ldr	r1, [pc, #12]	; (800c49c <memp_malloc_pool+0x28>)
 800c48e:	4804      	ldr	r0, [pc, #16]	; (800c4a0 <memp_malloc_pool+0x2c>)
 800c490:	f007 facc 	bl	8013a2c <iprintf>
}
 800c494:	4620      	mov	r0, r4
 800c496:	bd10      	pop	{r4, pc}
 800c498:	08014c64 	.word	0x08014c64
 800c49c:	08014dd4 	.word	0x08014dd4
 800c4a0:	0801487c 	.word	0x0801487c

0800c4a4 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c4a4:	280d      	cmp	r0, #13
{
 800c4a6:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c4a8:	d808      	bhi.n	800c4bc <memp_malloc+0x18>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c4aa:	4b09      	ldr	r3, [pc, #36]	; (800c4d0 <memp_malloc+0x2c>)
 800c4ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800c4b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c4b4:	f100 010c 	add.w	r1, r0, #12
 800c4b8:	f7ff bf38 	b.w	800c32c <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c4bc:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <memp_malloc+0x30>)
 800c4be:	f240 1257 	movw	r2, #343	; 0x157
 800c4c2:	4905      	ldr	r1, [pc, #20]	; (800c4d8 <memp_malloc+0x34>)
 800c4c4:	4805      	ldr	r0, [pc, #20]	; (800c4dc <memp_malloc+0x38>)
 800c4c6:	f007 fab1 	bl	8013a2c <iprintf>
}
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	bd08      	pop	{r3, pc}
 800c4ce:	bf00      	nop
 800c4d0:	08014de8 	.word	0x08014de8
 800c4d4:	08014c64 	.word	0x08014c64
 800c4d8:	08014db4 	.word	0x08014db4
 800c4dc:	0801487c 	.word	0x0801487c

0800c4e0 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c4e0:	b130      	cbz	r0, 800c4f0 <memp_free_pool+0x10>
  if ((desc == NULL) || (mem == NULL)) {
 800c4e2:	b901      	cbnz	r1, 800c4e6 <memp_free_pool+0x6>
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800c4e4:	4770      	bx	lr
  do_memp_free_pool(desc, mem);
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	f100 010c 	add.w	r1, r0, #12
 800c4ec:	f7ff bf4e 	b.w	800c38c <do_memp_free_pool.isra.1>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c4f0:	4b03      	ldr	r3, [pc, #12]	; (800c500 <memp_free_pool+0x20>)
 800c4f2:	f240 1295 	movw	r2, #405	; 0x195
 800c4f6:	4903      	ldr	r1, [pc, #12]	; (800c504 <memp_free_pool+0x24>)
 800c4f8:	4803      	ldr	r0, [pc, #12]	; (800c508 <memp_free_pool+0x28>)
 800c4fa:	f007 ba97 	b.w	8013a2c <iprintf>
 800c4fe:	bf00      	nop
 800c500:	08014c64 	.word	0x08014c64
 800c504:	08014dd4 	.word	0x08014dd4
 800c508:	0801487c 	.word	0x0801487c

0800c50c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c50c:	280d      	cmp	r0, #13
 800c50e:	d809      	bhi.n	800c524 <memp_free+0x18>

  if (mem == NULL) {
 800c510:	b139      	cbz	r1, 800c522 <memp_free+0x16>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c512:	4b08      	ldr	r3, [pc, #32]	; (800c534 <memp_free+0x28>)
 800c514:	460a      	mov	r2, r1
 800c516:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c51a:	f100 010c 	add.w	r1, r0, #12
 800c51e:	f7ff bf35 	b.w	800c38c <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c522:	4770      	bx	lr
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <memp_free+0x2c>)
 800c526:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c52a:	4904      	ldr	r1, [pc, #16]	; (800c53c <memp_free+0x30>)
 800c52c:	4804      	ldr	r0, [pc, #16]	; (800c540 <memp_free+0x34>)
 800c52e:	f007 ba7d 	b.w	8013a2c <iprintf>
 800c532:	bf00      	nop
 800c534:	08014de8 	.word	0x08014de8
 800c538:	08014c64 	.word	0x08014c64
 800c53c:	08014d98 	.word	0x08014d98
 800c540:	0801487c 	.word	0x0801487c

0800c544 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800c544:	f06f 000b 	mvn.w	r0, #11
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop

0800c54c <netif_issue_reports>:
{
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c550:	4604      	mov	r4, r0
 800c552:	b198      	cbz	r0, 800c57c <netif_issue_reports+0x30>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c554:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800c558:	f003 0205 	and.w	r2, r3, #5
 800c55c:	2a05      	cmp	r2, #5
 800c55e:	d000      	beq.n	800c562 <netif_issue_reports+0x16>
}
 800c560:	bd38      	pop	{r3, r4, r5, pc}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c562:	07ea      	lsls	r2, r5, #31
 800c564:	d5fc      	bpl.n	800c560 <netif_issue_reports+0x14>
 800c566:	6862      	ldr	r2, [r4, #4]
 800c568:	2a00      	cmp	r2, #0
 800c56a:	d0f9      	beq.n	800c560 <netif_issue_reports+0x14>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c56c:	071b      	lsls	r3, r3, #28
 800c56e:	d5f7      	bpl.n	800c560 <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 800c570:	1d21      	adds	r1, r4, #4
 800c572:	4620      	mov	r0, r4
}
 800c574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 800c578:	f005 bc30 	b.w	8011ddc <etharp_request>
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c57c:	4b03      	ldr	r3, [pc, #12]	; (800c58c <netif_issue_reports+0x40>)
 800c57e:	f240 326d 	movw	r2, #877	; 0x36d
 800c582:	4903      	ldr	r1, [pc, #12]	; (800c590 <netif_issue_reports+0x44>)
 800c584:	4803      	ldr	r0, [pc, #12]	; (800c594 <netif_issue_reports+0x48>)
 800c586:	f007 fa51 	bl	8013a2c <iprintf>
 800c58a:	e7e3      	b.n	800c554 <netif_issue_reports+0x8>
 800c58c:	08014eb4 	.word	0x08014eb4
 800c590:	08014ee8 	.word	0x08014ee8
 800c594:	0801487c 	.word	0x0801487c

0800c598 <netif_do_set_ipaddr>:
{
 800c598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59a:	4604      	mov	r4, r0
 800c59c:	b083      	sub	sp, #12
 800c59e:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c5a0:	460d      	mov	r5, r1
 800c5a2:	b1f9      	cbz	r1, 800c5e4 <netif_do_set_ipaddr+0x4c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	682a      	ldr	r2, [r5, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d018      	beq.n	800c5de <netif_do_set_ipaddr+0x46>
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c5ac:	ae02      	add	r6, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c5ae:	603b      	str	r3, [r7, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c5b0:	4638      	mov	r0, r7
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c5b2:	f846 2d04 	str.w	r2, [r6, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	f001 fe7e 	bl	800e2b8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4638      	mov	r0, r7
 800c5c0:	f004 ff80 	bl	80114c4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c5c4:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c5ca:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c5cc:	f7ff ffbe 	bl	800c54c <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 800c5d0:	69e3      	ldr	r3, [r4, #28]
 800c5d2:	b10b      	cbz	r3, 800c5d8 <netif_do_set_ipaddr+0x40>
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4798      	blx	r3
    return 1; /* address changed */
 800c5d8:	2001      	movs	r0, #1
}
 800c5da:	b003      	add	sp, #12
 800c5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 800c5de:	2000      	movs	r0, #0
}
 800c5e0:	b003      	add	sp, #12
 800c5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c5e4:	4b03      	ldr	r3, [pc, #12]	; (800c5f4 <netif_do_set_ipaddr+0x5c>)
 800c5e6:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c5ea:	4903      	ldr	r1, [pc, #12]	; (800c5f8 <netif_do_set_ipaddr+0x60>)
 800c5ec:	4803      	ldr	r0, [pc, #12]	; (800c5fc <netif_do_set_ipaddr+0x64>)
 800c5ee:	f007 fa1d 	bl	8013a2c <iprintf>
 800c5f2:	e7d7      	b.n	800c5a4 <netif_do_set_ipaddr+0xc>
 800c5f4:	08014eb4 	.word	0x08014eb4
 800c5f8:	08014ea4 	.word	0x08014ea4
 800c5fc:	0801487c 	.word	0x0801487c

0800c600 <netif_init>:
}
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop

0800c604 <netif_set_addr>:
{
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800c606:	4c14      	ldr	r4, [pc, #80]	; (800c658 <netif_set_addr+0x54>)
{
 800c608:	b083      	sub	sp, #12
 800c60a:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 800c60c:	2900      	cmp	r1, #0
 800c60e:	bf14      	ite	ne
 800c610:	460e      	movne	r6, r1
 800c612:	4626      	moveq	r6, r4
    netmask = IP4_ADDR_ANY4;
 800c614:	2a00      	cmp	r2, #0
 800c616:	bf14      	ite	ne
 800c618:	4617      	movne	r7, r2
 800c61a:	4627      	moveq	r7, r4
    gw = IP4_ADDR_ANY4;
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	bf18      	it	ne
 800c620:	461c      	movne	r4, r3
  remove = ip4_addr_isany(ipaddr);
 800c622:	6833      	ldr	r3, [r6, #0]
 800c624:	b193      	cbz	r3, 800c64c <netif_set_addr+0x48>
 800c626:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	68a9      	ldr	r1, [r5, #8]
 800c62c:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c62e:	68e9      	ldr	r1, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c630:	bf18      	it	ne
 800c632:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c638:	bf18      	it	ne
 800c63a:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 800c63c:	b922      	cbnz	r2, 800c648 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c63e:	4631      	mov	r1, r6
 800c640:	4628      	mov	r0, r5
 800c642:	aa01      	add	r2, sp, #4
 800c644:	f7ff ffa8 	bl	800c598 <netif_do_set_ipaddr>
}
 800c648:	b003      	add	sp, #12
 800c64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c64c:	aa01      	add	r2, sp, #4
 800c64e:	4631      	mov	r1, r6
 800c650:	f7ff ffa2 	bl	800c598 <netif_do_set_ipaddr>
 800c654:	2201      	movs	r2, #1
 800c656:	e7e7      	b.n	800c628 <netif_set_addr+0x24>
 800c658:	08016694 	.word	0x08016694

0800c65c <netif_add>:
{
 800c65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c660:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c662:	4606      	mov	r6, r0
 800c664:	2800      	cmp	r0, #0
 800c666:	f000 8086 	beq.w	800c776 <netif_add+0x11a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c66a:	2f00      	cmp	r7, #0
 800c66c:	d07a      	beq.n	800c764 <netif_add+0x108>
 800c66e:	4688      	mov	r8, r1
  netif->num = netif_num;
 800c670:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c7a0 <netif_add+0x144>
  netif->state = state;
 800c674:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c676:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c678:	4d43      	ldr	r5, [pc, #268]	; (800c788 <netif_add+0x12c>)
  netif->state = state;
 800c67a:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 800c67c:	f89b e000 	ldrb.w	lr, [fp]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c680:	42a3      	cmp	r3, r4
 800c682:	bf08      	it	eq
 800c684:	462b      	moveq	r3, r5
  netif->input = input;
 800c686:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c688:	42a2      	cmp	r2, r4
 800c68a:	bf08      	it	eq
 800c68c:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 800c68e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800c7a4 <netif_add+0x148>
  netif->input = input;
 800c692:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c694:	45a0      	cmp	r8, r4
 800c696:	bf14      	ite	ne
 800c698:	4641      	movne	r1, r8
 800c69a:	4629      	moveq	r1, r5
  netif->num = netif_num;
 800c69c:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  ip_addr_set_zero_ip4(&netif->gw);
 800c6a0:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 800c6a2:	8504      	strh	r4, [r0, #40]	; 0x28
  netif->flags = 0;
 800c6a4:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
  netif->output = netif_null_output_ip4;
 800c6a8:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 800c6b0:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c6b4:	f7ff ffa6 	bl	800c604 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	47b8      	blx	r7
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d14f      	bne.n	800c760 <netif_add+0x104>
 800c6c0:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800c6c4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800c7a8 <netif_add+0x14c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6c8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800c794 <netif_add+0x138>
 800c6cc:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800c7ac <netif_add+0x150>
 800c6d0:	4f2e      	ldr	r7, [pc, #184]	; (800c78c <netif_add+0x130>)
      if (netif->num == 255) {
 800c6d2:	2bff      	cmp	r3, #255	; 0xff
 800c6d4:	d102      	bne.n	800c6dc <netif_add+0x80>
        netif->num = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6dc:	f8d9 4000 	ldr.w	r4, [r9]
 800c6e0:	b3b4      	cbz	r4, 800c750 <netif_add+0xf4>
      num_netifs = 0;
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	e007      	b.n	800c6f6 <netif_add+0x9a>
        if (netif2->num == netif->num) {
 800c6e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c6ea:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d014      	beq.n	800c71c <netif_add+0xc0>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6f2:	6824      	ldr	r4, [r4, #0]
 800c6f4:	b1fc      	cbz	r4, 800c736 <netif_add+0xda>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6f6:	42a6      	cmp	r6, r4
        num_netifs++;
 800c6f8:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6fc:	d013      	beq.n	800c726 <netif_add+0xca>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c6fe:	2dff      	cmp	r5, #255	; 0xff
 800c700:	ddf1      	ble.n	800c6e6 <netif_add+0x8a>
 800c702:	4643      	mov	r3, r8
 800c704:	f240 128d 	movw	r2, #397	; 0x18d
 800c708:	4921      	ldr	r1, [pc, #132]	; (800c790 <netif_add+0x134>)
 800c70a:	4638      	mov	r0, r7
 800c70c:	f007 f98e 	bl	8013a2c <iprintf>
        if (netif2->num == netif->num) {
 800c710:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c714:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
 800c718:	4293      	cmp	r3, r2
 800c71a:	d1ea      	bne.n	800c6f2 <netif_add+0x96>
          netif->num++;
 800c71c:	3301      	adds	r3, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 800c724:	e7d5      	b.n	800c6d2 <netif_add+0x76>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c726:	4643      	mov	r3, r8
 800c728:	f240 128b 	movw	r2, #395	; 0x18b
 800c72c:	4651      	mov	r1, sl
 800c72e:	4638      	mov	r0, r7
 800c730:	f007 f97c 	bl	8013a2c <iprintf>
 800c734:	e7e3      	b.n	800c6fe <netif_add+0xa2>
  if (netif->num == 254) {
 800c736:	2afe      	cmp	r2, #254	; 0xfe
 800c738:	f8d9 4000 	ldr.w	r4, [r9]
 800c73c:	d00c      	beq.n	800c758 <netif_add+0xfc>
    netif_num = (u8_t)(netif->num + 1);
 800c73e:	3201      	adds	r2, #1
 800c740:	f88b 2000 	strb.w	r2, [fp]
  return netif;
 800c744:	4630      	mov	r0, r6
  netif->next = netif_list;
 800c746:	6034      	str	r4, [r6, #0]
  netif_list = netif;
 800c748:	f8c9 6000 	str.w	r6, [r9]
}
 800c74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
  if (netif->num == 254) {
 800c754:	2afe      	cmp	r2, #254	; 0xfe
 800c756:	d1f2      	bne.n	800c73e <netif_add+0xe2>
    netif_num = 0;
 800c758:	2300      	movs	r3, #0
 800c75a:	f88b 3000 	strb.w	r3, [fp]
 800c75e:	e7f1      	b.n	800c744 <netif_add+0xe8>
    return NULL;
 800c760:	4620      	mov	r0, r4
 800c762:	e7f3      	b.n	800c74c <netif_add+0xf0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <netif_add+0x138>)
 800c766:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c76a:	490b      	ldr	r1, [pc, #44]	; (800c798 <netif_add+0x13c>)
 800c76c:	4807      	ldr	r0, [pc, #28]	; (800c78c <netif_add+0x130>)
 800c76e:	f007 f95d 	bl	8013a2c <iprintf>
 800c772:	4638      	mov	r0, r7
 800c774:	e7ea      	b.n	800c74c <netif_add+0xf0>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c776:	4b07      	ldr	r3, [pc, #28]	; (800c794 <netif_add+0x138>)
 800c778:	f240 1227 	movw	r2, #295	; 0x127
 800c77c:	4907      	ldr	r1, [pc, #28]	; (800c79c <netif_add+0x140>)
 800c77e:	4803      	ldr	r0, [pc, #12]	; (800c78c <netif_add+0x130>)
 800c780:	f007 f954 	bl	8013a2c <iprintf>
 800c784:	4630      	mov	r0, r6
 800c786:	e7e1      	b.n	800c74c <netif_add+0xf0>
 800c788:	08016694 	.word	0x08016694
 800c78c:	0801487c 	.word	0x0801487c
 800c790:	08014e74 	.word	0x08014e74
 800c794:	08014eb4 	.word	0x08014eb4
 800c798:	08014e3c 	.word	0x08014e3c
 800c79c:	08014e20 	.word	0x08014e20
 800c7a0:	24014028 	.word	0x24014028
 800c7a4:	0800c545 	.word	0x0800c545
 800c7a8:	2401bdec 	.word	0x2401bdec
 800c7ac:	08014e60 	.word	0x08014e60

0800c7b0 <netif_set_default>:
  netif_default = netif;
 800c7b0:	4b01      	ldr	r3, [pc, #4]	; (800c7b8 <netif_set_default+0x8>)
 800c7b2:	6018      	str	r0, [r3, #0]
}
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	2401bdf0 	.word	0x2401bdf0

0800c7bc <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c7bc:	b1d8      	cbz	r0, 800c7f6 <netif_set_up+0x3a>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c7be:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800c7c2:	07da      	lsls	r2, r3, #31
 800c7c4:	d500      	bpl.n	800c7c8 <netif_set_up+0xc>
 800c7c6:	4770      	bx	lr
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c7c8:	f043 0301 	orr.w	r3, r3, #1
{
 800c7cc:	b510      	push	{r4, lr}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c7ce:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 800c7d2:	4604      	mov	r4, r0
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800c7d4:	f7fb fde2 	bl	800839c <sys_now>
 800c7d8:	4a0a      	ldr	r2, [pc, #40]	; (800c804 <netif_set_up+0x48>)
    NETIF_STATUS_CALLBACK(netif);
 800c7da:	69e3      	ldr	r3, [r4, #28]
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800c7dc:	fba2 2000 	umull	r2, r0, r2, r0
 800c7e0:	08c0      	lsrs	r0, r0, #3
 800c7e2:	63e0      	str	r0, [r4, #60]	; 0x3c
    NETIF_STATUS_CALLBACK(netif);
 800c7e4:	b10b      	cbz	r3, 800c7ea <netif_set_up+0x2e>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	4798      	blx	r3
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	2103      	movs	r1, #3
}
 800c7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c7f2:	f7ff beab 	b.w	800c54c <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c7f6:	4b04      	ldr	r3, [pc, #16]	; (800c808 <netif_set_up+0x4c>)
 800c7f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c7fc:	4903      	ldr	r1, [pc, #12]	; (800c80c <netif_set_up+0x50>)
 800c7fe:	4804      	ldr	r0, [pc, #16]	; (800c810 <netif_set_up+0x54>)
 800c800:	f007 b914 	b.w	8013a2c <iprintf>
 800c804:	cccccccd 	.word	0xcccccccd
 800c808:	08014eb4 	.word	0x08014eb4
 800c80c:	08014f74 	.word	0x08014f74
 800c810:	0801487c 	.word	0x0801487c

0800c814 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c814:	b1e8      	cbz	r0, 800c852 <netif_set_down+0x3e>
  if (netif->flags & NETIF_FLAG_UP) {
 800c816:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800c81a:	07da      	lsls	r2, r3, #31
 800c81c:	d400      	bmi.n	800c820 <netif_set_down+0xc>
 800c81e:	4770      	bx	lr
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c820:	f023 0301 	bic.w	r3, r3, #1
{
 800c824:	b510      	push	{r4, lr}
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c826:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 800c82a:	4604      	mov	r4, r0
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800c82c:	f7fb fdb6 	bl	800839c <sys_now>
 800c830:	4a0d      	ldr	r2, [pc, #52]	; (800c868 <netif_set_down+0x54>)
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c832:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800c836:	fba2 2000 	umull	r2, r0, r2, r0
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c83a:	071b      	lsls	r3, r3, #28
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800c83c:	ea4f 00d0 	mov.w	r0, r0, lsr #3
 800c840:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c842:	d40d      	bmi.n	800c860 <netif_set_down+0x4c>
    NETIF_STATUS_CALLBACK(netif);
 800c844:	69e3      	ldr	r3, [r4, #28]
 800c846:	b11b      	cbz	r3, 800c850 <netif_set_down+0x3c>
 800c848:	4620      	mov	r0, r4
}
 800c84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 800c84e:	4718      	bx	r3
}
 800c850:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c852:	4b06      	ldr	r3, [pc, #24]	; (800c86c <netif_set_down+0x58>)
 800c854:	f240 329b 	movw	r2, #923	; 0x39b
 800c858:	4905      	ldr	r1, [pc, #20]	; (800c870 <netif_set_down+0x5c>)
 800c85a:	4806      	ldr	r0, [pc, #24]	; (800c874 <netif_set_down+0x60>)
 800c85c:	f007 b8e6 	b.w	8013a2c <iprintf>
      etharp_cleanup_netif(netif);
 800c860:	4620      	mov	r0, r4
 800c862:	f005 f845 	bl	80118f0 <etharp_cleanup_netif>
 800c866:	e7ed      	b.n	800c844 <netif_set_down+0x30>
 800c868:	cccccccd 	.word	0xcccccccd
 800c86c:	08014eb4 	.word	0x08014eb4
 800c870:	08014f0c 	.word	0x08014f0c
 800c874:	0801487c 	.word	0x0801487c

0800c878 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c878:	b1a0      	cbz	r0, 800c8a4 <netif_set_link_up+0x2c>
{
 800c87a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c87c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800c880:	4604      	mov	r4, r0
 800c882:	0753      	lsls	r3, r2, #29
 800c884:	d500      	bpl.n	800c888 <netif_set_link_up+0x10>
}
 800c886:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c888:	f042 0204 	orr.w	r2, r2, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c88c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c88e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c892:	f7ff fe5b 	bl	800c54c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800c896:	6a23      	ldr	r3, [r4, #32]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0f4      	beq.n	800c886 <netif_set_link_up+0xe>
 800c89c:	4620      	mov	r0, r4
}
 800c89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800c8a2:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c8a4:	4b03      	ldr	r3, [pc, #12]	; (800c8b4 <netif_set_link_up+0x3c>)
 800c8a6:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c8aa:	4903      	ldr	r1, [pc, #12]	; (800c8b8 <netif_set_link_up+0x40>)
 800c8ac:	4803      	ldr	r0, [pc, #12]	; (800c8bc <netif_set_link_up+0x44>)
 800c8ae:	f007 b8bd 	b.w	8013a2c <iprintf>
 800c8b2:	bf00      	nop
 800c8b4:	08014eb4 	.word	0x08014eb4
 800c8b8:	08014f50 	.word	0x08014f50
 800c8bc:	0801487c 	.word	0x0801487c

0800c8c0 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c8c0:	b158      	cbz	r0, 800c8da <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c8c2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800c8c6:	0759      	lsls	r1, r3, #29
 800c8c8:	d506      	bpl.n	800c8d8 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c8ca:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800c8ce:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c8d0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c8d4:	b101      	cbz	r1, 800c8d8 <netif_set_link_down+0x18>
 800c8d6:	4708      	bx	r1
}
 800c8d8:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c8da:	4b03      	ldr	r3, [pc, #12]	; (800c8e8 <netif_set_link_down+0x28>)
 800c8dc:	f240 4206 	movw	r2, #1030	; 0x406
 800c8e0:	4902      	ldr	r1, [pc, #8]	; (800c8ec <netif_set_link_down+0x2c>)
 800c8e2:	4803      	ldr	r0, [pc, #12]	; (800c8f0 <netif_set_link_down+0x30>)
 800c8e4:	f007 b8a2 	b.w	8013a2c <iprintf>
 800c8e8:	08014eb4 	.word	0x08014eb4
 800c8ec:	08014f2c 	.word	0x08014f2c
 800c8f0:	0801487c 	.word	0x0801487c

0800c8f4 <netif_set_link_callback>:
  if (netif) {
 800c8f4:	b100      	cbz	r0, 800c8f8 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800c8f6:	6201      	str	r1, [r0, #32]
}
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop

0800c8fc <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c8fc:	b1a0      	cbz	r0, 800c928 <netif_get_by_index+0x2c>
    NETIF_FOREACH(netif) {
 800c8fe:	4b0b      	ldr	r3, [pc, #44]	; (800c92c <netif_get_by_index+0x30>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	b17a      	cbz	r2, 800c924 <netif_get_by_index+0x28>
      if (idx == netif_get_index(netif)) {
 800c904:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800c908:	3301      	adds	r3, #1
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	4298      	cmp	r0, r3
 800c90e:	d106      	bne.n	800c91e <netif_get_by_index+0x22>
 800c910:	e008      	b.n	800c924 <netif_get_by_index+0x28>
 800c912:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800c916:	3301      	adds	r3, #1
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	4283      	cmp	r3, r0
 800c91c:	d002      	beq.n	800c924 <netif_get_by_index+0x28>
    NETIF_FOREACH(netif) {
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	2a00      	cmp	r2, #0
 800c922:	d1f6      	bne.n	800c912 <netif_get_by_index+0x16>
      }
    }
  }

  return NULL;
}
 800c924:	4610      	mov	r0, r2
 800c926:	4770      	bx	lr
  return NULL;
 800c928:	4602      	mov	r2, r0
 800c92a:	e7fb      	b.n	800c924 <netif_get_by_index+0x28>
 800c92c:	2401bdec 	.word	0x2401bdec

0800c930 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c930:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c932:	f006 fcc7 	bl	80132c4 <sys_arch_protect>
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <pbuf_free_ooseq_callback+0x2c>)
 800c938:	2200      	movs	r2, #0
 800c93a:	701a      	strb	r2, [r3, #0]
 800c93c:	f006 fcce 	bl	80132dc <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c940:	4b07      	ldr	r3, [pc, #28]	; (800c960 <pbuf_free_ooseq_callback+0x30>)
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	b910      	cbnz	r0, 800c94c <pbuf_free_ooseq_callback+0x1c>
 800c946:	e008      	b.n	800c95a <pbuf_free_ooseq_callback+0x2a>
 800c948:	68c0      	ldr	r0, [r0, #12]
 800c94a:	b130      	cbz	r0, 800c95a <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 800c94c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0fa      	beq.n	800c948 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800c952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 800c956:	f001 bcd9 	b.w	800e30c <tcp_free_ooseq>
}
 800c95a:	bd08      	pop	{r3, pc}
 800c95c:	2401bdf4 	.word	0x2401bdf4
 800c960:	2401bfbc 	.word	0x2401bfbc

0800c964 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c964:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c966:	b308      	cbz	r0, 800c9ac <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c968:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c96c:	d21b      	bcs.n	800c9a6 <pbuf_add_header_impl+0x42>
    return 1;
  }
  if (header_size_increment == 0) {
 800c96e:	b191      	cbz	r1, 800c996 <pbuf_add_header_impl+0x32>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c970:	b28c      	uxth	r4, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c972:	8903      	ldrh	r3, [r0, #8]
 800c974:	4423      	add	r3, r4
 800c976:	b29b      	uxth	r3, r3
 800c978:	429c      	cmp	r4, r3
 800c97a:	d814      	bhi.n	800c9a6 <pbuf_add_header_impl+0x42>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c97c:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800c980:	2d00      	cmp	r5, #0
 800c982:	db0a      	blt.n	800c99a <pbuf_add_header_impl+0x36>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c984:	b17a      	cbz	r2, 800c9a6 <pbuf_add_header_impl+0x42>
      payload = (u8_t *)p->payload - header_size_increment;
 800c986:	6842      	ldr	r2, [r0, #4]
 800c988:	1a52      	subs	r2, r2, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800c98a:	8945      	ldrh	r5, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 800c98c:	2100      	movs	r1, #0
  p->payload = payload;
 800c98e:	6042      	str	r2, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c990:	442c      	add	r4, r5
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c992:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c994:	8144      	strh	r4, [r0, #10]
}
 800c996:	4608      	mov	r0, r1
 800c998:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800c99a:	6842      	ldr	r2, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c99c:	f100 0510 	add.w	r5, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 800c9a0:	1a52      	subs	r2, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c9a2:	42aa      	cmp	r2, r5
 800c9a4:	d2f1      	bcs.n	800c98a <pbuf_add_header_impl+0x26>
    return 1;
 800c9a6:	2101      	movs	r1, #1
}
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c9ac:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <pbuf_add_header_impl+0x5c>)
 800c9ae:	f240 12df 	movw	r2, #479	; 0x1df
 800c9b2:	4904      	ldr	r1, [pc, #16]	; (800c9c4 <pbuf_add_header_impl+0x60>)
 800c9b4:	4804      	ldr	r0, [pc, #16]	; (800c9c8 <pbuf_add_header_impl+0x64>)
 800c9b6:	f007 f839 	bl	8013a2c <iprintf>
    return 1;
 800c9ba:	2101      	movs	r1, #1
}
 800c9bc:	4608      	mov	r0, r1
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	08014f90 	.word	0x08014f90
 800c9c4:	08014fc0 	.word	0x08014fc0
 800c9c8:	0801487c 	.word	0x0801487c

0800c9cc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c9cc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800c9d0:	2b01      	cmp	r3, #1
{
 800c9d2:	b570      	push	{r4, r5, r6, lr}
 800c9d4:	4614      	mov	r4, r2
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c9da:	d10e      	bne.n	800c9fa <pbuf_alloc_reference+0x2e>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c9dc:	200c      	movs	r0, #12
 800c9de:	f7ff fd61 	bl	800c4a4 <memp_malloc>
  if (p == NULL) {
 800c9e2:	b148      	cbz	r0, 800c9f8 <pbuf_alloc_reference+0x2c>
  p->next = NULL;
 800c9e4:	2300      	movs	r3, #0
  p->ref = 1;
 800c9e6:	2201      	movs	r2, #1
  p->payload = payload;
 800c9e8:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800c9ea:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800c9ec:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800c9ee:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 800c9f0:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 800c9f2:	7343      	strb	r3, [r0, #13]
  p->if_idx = NETIF_NO_INDEX;
 800c9f4:	73c3      	strb	r3, [r0, #15]
  p->ref = 1;
 800c9f6:	7382      	strb	r2, [r0, #14]
}
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c9fa:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <pbuf_alloc_reference+0x40>)
 800c9fc:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca00:	4903      	ldr	r1, [pc, #12]	; (800ca10 <pbuf_alloc_reference+0x44>)
 800ca02:	4804      	ldr	r0, [pc, #16]	; (800ca14 <pbuf_alloc_reference+0x48>)
 800ca04:	f007 f812 	bl	8013a2c <iprintf>
 800ca08:	e7e8      	b.n	800c9dc <pbuf_alloc_reference+0x10>
 800ca0a:	bf00      	nop
 800ca0c:	08014f90 	.word	0x08014f90
 800ca10:	08014fe8 	.word	0x08014fe8
 800ca14:	0801487c 	.word	0x0801487c

0800ca18 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca18:	3003      	adds	r0, #3
 800ca1a:	f020 0003 	bic.w	r0, r0, #3
{
 800ca1e:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca20:	180e      	adds	r6, r1, r0
{
 800ca22:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800ca26:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca28:	42ae      	cmp	r6, r5
 800ca2a:	d80f      	bhi.n	800ca4c <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
 800ca2c:	b104      	cbz	r4, 800ca30 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ca2e:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ca30:	4618      	mov	r0, r3
  p->flags = flags;
 800ca32:	2602      	movs	r6, #2
  p->next = NULL;
 800ca34:	2300      	movs	r3, #0
  p->ref = 1;
 800ca36:	2501      	movs	r5, #1
  p->payload = payload;
 800ca38:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 800ca3a:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800ca3c:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800ca3e:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800ca40:	7346      	strb	r6, [r0, #13]
  p->ref = 1;
 800ca42:	7385      	strb	r5, [r0, #14]
  p->next = NULL;
 800ca44:	6003      	str	r3, [r0, #0]
  p->if_idx = NETIF_NO_INDEX;
 800ca46:	73c3      	strb	r3, [r0, #15]
}
 800ca48:	bc70      	pop	{r4, r5, r6}
 800ca4a:	4770      	bx	lr
    return NULL;
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	e7fb      	b.n	800ca48 <pbuf_alloced_custom+0x30>

0800ca50 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ca50:	2200      	movs	r2, #0
 800ca52:	f7ff bf87 	b.w	800c964 <pbuf_add_header_impl>
 800ca56:	bf00      	nop

0800ca58 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ca58:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ca5a:	b1a8      	cbz	r0, 800ca88 <pbuf_remove_header+0x30>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ca5c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800ca60:	d20f      	bcs.n	800ca82 <pbuf_remove_header+0x2a>
    return 1;
  }
  if (header_size_decrement == 0) {
 800ca62:	b161      	cbz	r1, 800ca7e <pbuf_remove_header+0x26>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ca64:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ca66:	8943      	ldrh	r3, [r0, #10]
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d317      	bcc.n	800ca9c <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ca6c:	6845      	ldr	r5, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ca6e:	1a9b      	subs	r3, r3, r2
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ca70:	8904      	ldrh	r4, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ca72:	440d      	add	r5, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ca74:	2100      	movs	r1, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ca76:	1aa2      	subs	r2, r4, r2
  p->len = (u16_t)(p->len - increment_magnitude);
 800ca78:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ca7a:	6045      	str	r5, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ca7c:	8102      	strh	r2, [r0, #8]
}
 800ca7e:	4608      	mov	r0, r1
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 800ca82:	2101      	movs	r1, #1
}
 800ca84:	4608      	mov	r0, r1
 800ca86:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800ca88:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <pbuf_remove_header+0x58>)
 800ca8a:	f240 224b 	movw	r2, #587	; 0x24b
 800ca8e:	4909      	ldr	r1, [pc, #36]	; (800cab4 <pbuf_remove_header+0x5c>)
 800ca90:	4809      	ldr	r0, [pc, #36]	; (800cab8 <pbuf_remove_header+0x60>)
 800ca92:	f006 ffcb 	bl	8013a2c <iprintf>
    return 1;
 800ca96:	2101      	movs	r1, #1
}
 800ca98:	4608      	mov	r0, r1
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ca9c:	4907      	ldr	r1, [pc, #28]	; (800cabc <pbuf_remove_header+0x64>)
 800ca9e:	f240 2255 	movw	r2, #597	; 0x255
 800caa2:	4b03      	ldr	r3, [pc, #12]	; (800cab0 <pbuf_remove_header+0x58>)
 800caa4:	4804      	ldr	r0, [pc, #16]	; (800cab8 <pbuf_remove_header+0x60>)
 800caa6:	f006 ffc1 	bl	8013a2c <iprintf>
 800caaa:	2101      	movs	r1, #1
 800caac:	e7e7      	b.n	800ca7e <pbuf_remove_header+0x26>
 800caae:	bf00      	nop
 800cab0:	08014f90 	.word	0x08014f90
 800cab4:	08014fc0 	.word	0x08014fc0
 800cab8:	0801487c 	.word	0x0801487c
 800cabc:	0801521c 	.word	0x0801521c

0800cac0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800cac0:	1e0b      	subs	r3, r1, #0
 800cac2:	db02      	blt.n	800caca <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cac4:	2201      	movs	r2, #1
 800cac6:	f7ff bf4d 	b.w	800c964 <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800caca:	4259      	negs	r1, r3
 800cacc:	f7ff bfc4 	b.w	800ca58 <pbuf_remove_header>

0800cad0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cad4:	4605      	mov	r5, r0
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d056      	beq.n	800cb88 <pbuf_free+0xb8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cada:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cadc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800cbac <pbuf_free+0xdc>
 800cae0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800cbb4 <pbuf_free+0xe4>
 800cae4:	4f2e      	ldr	r7, [pc, #184]	; (800cba0 <pbuf_free+0xd0>)
 800cae6:	e008      	b.n	800cafa <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cae8:	692b      	ldr	r3, [r5, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d03e      	beq.n	800cb6c <pbuf_free+0x9c>
        pc->custom_free_function(p);
 800caee:	4628      	mov	r0, r5
 800caf0:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800caf2:	3601      	adds	r6, #1
  while (p != NULL) {
 800caf4:	4625      	mov	r5, r4
      count++;
 800caf6:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800caf8:	b1fc      	cbz	r4, 800cb3a <pbuf_free+0x6a>
    SYS_ARCH_PROTECT(old_level);
 800cafa:	f006 fbe3 	bl	80132c4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cafe:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800cb00:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cb02:	b1eb      	cbz	r3, 800cb40 <pbuf_free+0x70>
    ref = --(p->ref);
 800cb04:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800cb06:	4620      	mov	r0, r4
    ref = --(p->ref);
 800cb08:	b2dc      	uxtb	r4, r3
 800cb0a:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800cb0c:	f006 fbe6 	bl	80132dc <sys_arch_unprotect>
    if (ref == 0) {
 800cb10:	b99c      	cbnz	r4, 800cb3a <pbuf_free+0x6a>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cb12:	7b6b      	ldrb	r3, [r5, #13]
      q = p->next;
 800cb14:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cb16:	079b      	lsls	r3, r3, #30
 800cb18:	d4e6      	bmi.n	800cae8 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800cb1a:	7b2b      	ldrb	r3, [r5, #12]
 800cb1c:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d01e      	beq.n	800cb62 <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d02a      	beq.n	800cb7e <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cb28:	b99b      	cbnz	r3, 800cb52 <pbuf_free+0x82>
      count++;
 800cb2a:	3601      	adds	r6, #1
          mem_free(p);
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f7ff f943 	bl	800bdb8 <mem_free>
  while (p != NULL) {
 800cb32:	4625      	mov	r5, r4
      count++;
 800cb34:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800cb36:	2c00      	cmp	r4, #0
 800cb38:	d1df      	bne.n	800cafa <pbuf_free+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cb40:	4643      	mov	r3, r8
 800cb42:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cb46:	4649      	mov	r1, r9
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f006 ff6f 	bl	8013a2c <iprintf>
 800cb4e:	7bab      	ldrb	r3, [r5, #14]
 800cb50:	e7d8      	b.n	800cb04 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800cb52:	4643      	mov	r3, r8
 800cb54:	f240 320f 	movw	r2, #783	; 0x30f
 800cb58:	4912      	ldr	r1, [pc, #72]	; (800cba4 <pbuf_free+0xd4>)
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f006 ff66 	bl	8013a2c <iprintf>
 800cb60:	e7c7      	b.n	800caf2 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800cb62:	4629      	mov	r1, r5
 800cb64:	200d      	movs	r0, #13
 800cb66:	f7ff fcd1 	bl	800c50c <memp_free>
 800cb6a:	e7c2      	b.n	800caf2 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cb6c:	4643      	mov	r3, r8
 800cb6e:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cb72:	490d      	ldr	r1, [pc, #52]	; (800cba8 <pbuf_free+0xd8>)
 800cb74:	4638      	mov	r0, r7
 800cb76:	f006 ff59 	bl	8013a2c <iprintf>
 800cb7a:	692b      	ldr	r3, [r5, #16]
 800cb7c:	e7b7      	b.n	800caee <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800cb7e:	4629      	mov	r1, r5
 800cb80:	200c      	movs	r0, #12
 800cb82:	f7ff fcc3 	bl	800c50c <memp_free>
 800cb86:	e7b4      	b.n	800caf2 <pbuf_free+0x22>
    return 0;
 800cb88:	4606      	mov	r6, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 800cb8a:	4b08      	ldr	r3, [pc, #32]	; (800cbac <pbuf_free+0xdc>)
 800cb8c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cb90:	4907      	ldr	r1, [pc, #28]	; (800cbb0 <pbuf_free+0xe0>)
 800cb92:	4803      	ldr	r0, [pc, #12]	; (800cba0 <pbuf_free+0xd0>)
 800cb94:	f006 ff4a 	bl	8013a2c <iprintf>
}
 800cb98:	4630      	mov	r0, r6
 800cb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb9e:	bf00      	nop
 800cba0:	0801487c 	.word	0x0801487c
 800cba4:	080151a8 	.word	0x080151a8
 800cba8:	08015184 	.word	0x08015184
 800cbac:	08014f90 	.word	0x08014f90
 800cbb0:	08014fc0 	.word	0x08014fc0
 800cbb4:	0801516c 	.word	0x0801516c

0800cbb8 <pbuf_alloc>:
  switch (type) {
 800cbb8:	2a41      	cmp	r2, #65	; 0x41
{
 800cbba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbbe:	4688      	mov	r8, r1
  switch (type) {
 800cbc0:	d068      	beq.n	800cc94 <pbuf_alloc+0xdc>
 800cbc2:	d95a      	bls.n	800cc7a <pbuf_alloc+0xc2>
 800cbc4:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 800cbc8:	fa1f f980 	uxth.w	r9, r0
 800cbcc:	d027      	beq.n	800cc1e <pbuf_alloc+0x66>
 800cbce:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800cbd2:	d154      	bne.n	800cc7e <pbuf_alloc+0xc6>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cbd4:	f109 0303 	add.w	r3, r9, #3
 800cbd8:	1cca      	adds	r2, r1, #3
 800cbda:	4605      	mov	r5, r0
 800cbdc:	f022 0203 	bic.w	r2, r2, #3
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	4413      	add	r3, r2
 800cbe6:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cbe8:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbec:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cbee:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbf0:	d356      	bcc.n	800cca0 <pbuf_alloc+0xe8>
 800cbf2:	4282      	cmp	r2, r0
 800cbf4:	d854      	bhi.n	800cca0 <pbuf_alloc+0xe8>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cbf6:	f7ff fab1 	bl	800c15c <mem_malloc>
      if (p == NULL) {
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	b160      	cbz	r0, 800cc18 <pbuf_alloc+0x60>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cbfe:	4405      	add	r5, r0
  p->next = NULL;
 800cc00:	2200      	movs	r2, #0
  p->type_internal = (u8_t)type;
 800cc02:	4b38      	ldr	r3, [pc, #224]	; (800cce4 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cc04:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 800cc06:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->len = len;
 800cc0a:	f8a0 800a 	strh.w	r8, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cc0e:	f025 0503 	bic.w	r5, r5, #3
  p->next = NULL;
 800cc12:	6002      	str	r2, [r0, #0]
  p->type_internal = (u8_t)type;
 800cc14:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800cc16:	6045      	str	r5, [r0, #4]
}
 800cc18:	4620      	mov	r0, r4
 800cc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      last = NULL;
 800cc1e:	2500      	movs	r5, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc20:	f240 57ec 	movw	r7, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 800cc24:	4e30      	ldr	r6, [pc, #192]	; (800cce8 <pbuf_alloc+0x130>)
      p = NULL;
 800cc26:	462c      	mov	r4, r5
 800cc28:	e00a      	b.n	800cc40 <pbuf_alloc+0x88>
          last->next = q;
 800cc2a:	6028      	str	r0, [r5, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800cc2c:	eba8 0303 	sub.w	r3, r8, r3
 800cc30:	4605      	mov	r5, r0
        offset = 0;
 800cc32:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800cc36:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800cc3a:	f1b8 0f00 	cmp.w	r8, #0
 800cc3e:	d0eb      	beq.n	800cc18 <pbuf_alloc+0x60>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc40:	200d      	movs	r0, #13
 800cc42:	f7ff fc2f 	bl	800c4a4 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc46:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800cc4a:	2100      	movs	r1, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cc4c:	4481      	add	r9, r0
        if (q == NULL) {
 800cc4e:	b358      	cbz	r0, 800cca8 <pbuf_alloc+0xf0>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc50:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cc54:	f109 0913 	add.w	r9, r9, #19
  p->next = NULL;
 800cc58:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc5a:	1afb      	subs	r3, r7, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cc5c:	f029 0203 	bic.w	r2, r9, #3
  p->tot_len = tot_len;
 800cc60:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc64:	b29b      	uxth	r3, r3
  p->type_internal = (u8_t)type;
 800cc66:	60c6      	str	r6, [r0, #12]
  p->payload = payload;
 800cc68:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc6a:	4543      	cmp	r3, r8
 800cc6c:	bf28      	it	cs
 800cc6e:	4643      	movcs	r3, r8
  p->len = len;
 800cc70:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800cc72:	2c00      	cmp	r4, #0
 800cc74:	d1d9      	bne.n	800cc2a <pbuf_alloc+0x72>
 800cc76:	4604      	mov	r4, r0
 800cc78:	e7d8      	b.n	800cc2c <pbuf_alloc+0x74>
  switch (type) {
 800cc7a:	2a01      	cmp	r2, #1
 800cc7c:	d00a      	beq.n	800cc94 <pbuf_alloc+0xdc>
      return NULL;
 800cc7e:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc80:	4b1a      	ldr	r3, [pc, #104]	; (800ccec <pbuf_alloc+0x134>)
 800cc82:	f240 1227 	movw	r2, #295	; 0x127
 800cc86:	491a      	ldr	r1, [pc, #104]	; (800ccf0 <pbuf_alloc+0x138>)
 800cc88:	481a      	ldr	r0, [pc, #104]	; (800ccf4 <pbuf_alloc+0x13c>)
 800cc8a:	f006 fecf 	bl	8013a2c <iprintf>
}
 800cc8e:	4620      	mov	r0, r4
 800cc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800cc94:	4641      	mov	r1, r8
 800cc96:	2000      	movs	r0, #0
}
 800cc98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800cc9c:	f7ff be96 	b.w	800c9cc <pbuf_alloc_reference>
          return NULL;
 800cca0:	2400      	movs	r4, #0
}
 800cca2:	4620      	mov	r0, r4
 800cca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 800cca8:	4e13      	ldr	r6, [pc, #76]	; (800ccf8 <pbuf_alloc+0x140>)
  SYS_ARCH_PROTECT(old_level);
 800ccaa:	f006 fb0b 	bl	80132c4 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 800ccae:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800ccb0:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800ccb2:	7033      	strb	r3, [r6, #0]
  queued = pbuf_free_ooseq_pending;
 800ccb4:	b2ed      	uxtb	r5, r5
  SYS_ARCH_UNPROTECT(old_level);
 800ccb6:	f006 fb11 	bl	80132dc <sys_arch_unprotect>
  if (!queued) {
 800ccba:	b135      	cbz	r5, 800ccca <pbuf_alloc+0x112>
          if (p) {
 800ccbc:	2c00      	cmp	r4, #0
 800ccbe:	d0ef      	beq.n	800cca0 <pbuf_alloc+0xe8>
            pbuf_free(p);
 800ccc0:	4620      	mov	r0, r4
          return NULL;
 800ccc2:	2400      	movs	r4, #0
            pbuf_free(p);
 800ccc4:	f7ff ff04 	bl	800cad0 <pbuf_free>
 800ccc8:	e7a6      	b.n	800cc18 <pbuf_alloc+0x60>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ccca:	4629      	mov	r1, r5
 800cccc:	480b      	ldr	r0, [pc, #44]	; (800ccfc <pbuf_alloc+0x144>)
 800ccce:	f7fe fded 	bl	800b8ac <tcpip_try_callback>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d0f2      	beq.n	800ccbc <pbuf_alloc+0x104>
 800ccd6:	f006 faf5 	bl	80132c4 <sys_arch_protect>
 800ccda:	7035      	strb	r5, [r6, #0]
 800ccdc:	f006 fafe 	bl	80132dc <sys_arch_unprotect>
 800cce0:	e7ec      	b.n	800ccbc <pbuf_alloc+0x104>
 800cce2:	bf00      	nop
 800cce4:	00010080 	.word	0x00010080
 800cce8:	00010082 	.word	0x00010082
 800ccec:	08014f90 	.word	0x08014f90
 800ccf0:	08014fcc 	.word	0x08014fcc
 800ccf4:	0801487c 	.word	0x0801487c
 800ccf8:	2401bdf4 	.word	0x2401bdf4
 800ccfc:	0800c931 	.word	0x0800c931

0800cd00 <pbuf_realloc>:
{
 800cd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd04:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd06:	4604      	mov	r4, r0
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d043      	beq.n	800cd94 <pbuf_realloc+0x94>
  if (new_len >= p->tot_len) {
 800cd0c:	8926      	ldrh	r6, [r4, #8]
 800cd0e:	42ae      	cmp	r6, r5
 800cd10:	d928      	bls.n	800cd64 <pbuf_realloc+0x64>
  shrink = (u16_t)(p->tot_len - new_len);
 800cd12:	1b76      	subs	r6, r6, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd14:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cda8 <pbuf_realloc+0xa8>
 800cd18:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800cdb4 <pbuf_realloc+0xb4>
  shrink = (u16_t)(p->tot_len - new_len);
 800cd1c:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd1e:	4f21      	ldr	r7, [pc, #132]	; (800cda4 <pbuf_realloc+0xa4>)
  while (rem_len > q->len) {
 800cd20:	8961      	ldrh	r1, [r4, #10]
 800cd22:	42a9      	cmp	r1, r5
 800cd24:	d211      	bcs.n	800cd4a <pbuf_realloc+0x4a>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd26:	8923      	ldrh	r3, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800cd28:	1a69      	subs	r1, r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd2a:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 800cd2c:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd2e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800cd30:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd32:	2c00      	cmp	r4, #0
 800cd34:	d1f4      	bne.n	800cd20 <pbuf_realloc+0x20>
 800cd36:	4641      	mov	r1, r8
 800cd38:	464b      	mov	r3, r9
 800cd3a:	f240 12af 	movw	r2, #431	; 0x1af
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f006 fe74 	bl	8013a2c <iprintf>
  while (rem_len > q->len) {
 800cd44:	8961      	ldrh	r1, [r4, #10]
 800cd46:	42a9      	cmp	r1, r5
 800cd48:	d3ed      	bcc.n	800cd26 <pbuf_realloc+0x26>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cd4a:	7b23      	ldrb	r3, [r4, #12]
 800cd4c:	071a      	lsls	r2, r3, #28
 800cd4e:	d101      	bne.n	800cd54 <pbuf_realloc+0x54>
 800cd50:	42a9      	cmp	r1, r5
 800cd52:	d109      	bne.n	800cd68 <pbuf_realloc+0x68>
  if (q->next != NULL) {
 800cd54:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800cd56:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800cd58:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800cd5a:	b108      	cbz	r0, 800cd60 <pbuf_realloc+0x60>
    pbuf_free(q->next);
 800cd5c:	f7ff feb8 	bl	800cad0 <pbuf_free>
  q->next = NULL;
 800cd60:	2300      	movs	r3, #0
 800cd62:	6023      	str	r3, [r4, #0]
}
 800cd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd68:	7b63      	ldrb	r3, [r4, #13]
 800cd6a:	079b      	lsls	r3, r3, #30
 800cd6c:	d4f2      	bmi.n	800cd54 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cd6e:	6863      	ldr	r3, [r4, #4]
 800cd70:	4620      	mov	r0, r4
 800cd72:	1b1c      	subs	r4, r3, r4
 800cd74:	1929      	adds	r1, r5, r4
 800cd76:	b289      	uxth	r1, r1
 800cd78:	f7ff f918 	bl	800bfac <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d1e8      	bne.n	800cd54 <pbuf_realloc+0x54>
 800cd82:	4b09      	ldr	r3, [pc, #36]	; (800cda8 <pbuf_realloc+0xa8>)
 800cd84:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cd88:	4908      	ldr	r1, [pc, #32]	; (800cdac <pbuf_realloc+0xac>)
 800cd8a:	4806      	ldr	r0, [pc, #24]	; (800cda4 <pbuf_realloc+0xa4>)
 800cd8c:	f006 fe4e 	bl	8013a2c <iprintf>
  q->len = rem_len;
 800cd90:	8164      	strh	r4, [r4, #10]
 800cd92:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd94:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <pbuf_realloc+0xa8>)
 800cd96:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cd9a:	4905      	ldr	r1, [pc, #20]	; (800cdb0 <pbuf_realloc+0xb0>)
 800cd9c:	4801      	ldr	r0, [pc, #4]	; (800cda4 <pbuf_realloc+0xa4>)
 800cd9e:	f006 fe45 	bl	8013a2c <iprintf>
 800cda2:	e7b3      	b.n	800cd0c <pbuf_realloc+0xc>
 800cda4:	0801487c 	.word	0x0801487c
 800cda8:	08014f90 	.word	0x08014f90
 800cdac:	080151ec 	.word	0x080151ec
 800cdb0:	080151bc 	.word	0x080151bc
 800cdb4:	080151d4 	.word	0x080151d4

0800cdb8 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800cdb8:	b138      	cbz	r0, 800cdca <pbuf_clen+0x12>
  len = 0;
 800cdba:	2300      	movs	r3, #0
    ++len;
 800cdbc:	3301      	adds	r3, #1
    p = p->next;
 800cdbe:	6800      	ldr	r0, [r0, #0]
    ++len;
 800cdc0:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d1fa      	bne.n	800cdbc <pbuf_clen+0x4>
  }
  return len;
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	4770      	bx	lr
  len = 0;
 800cdca:	4603      	mov	r3, r0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	4770      	bx	lr

0800cdd0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800cdd0:	b1a0      	cbz	r0, 800cdfc <pbuf_ref+0x2c>
{
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cdd6:	f006 fa75 	bl	80132c4 <sys_arch_protect>
 800cdda:	7ba3      	ldrb	r3, [r4, #14]
 800cddc:	3301      	adds	r3, #1
 800cdde:	73a3      	strb	r3, [r4, #14]
 800cde0:	f006 fa7c 	bl	80132dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cde4:	7ba3      	ldrb	r3, [r4, #14]
 800cde6:	b103      	cbz	r3, 800cdea <pbuf_ref+0x1a>
  }
}
 800cde8:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cdea:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <pbuf_ref+0x30>)
 800cdec:	f240 3242 	movw	r2, #834	; 0x342
 800cdf0:	4904      	ldr	r1, [pc, #16]	; (800ce04 <pbuf_ref+0x34>)
 800cdf2:	4805      	ldr	r0, [pc, #20]	; (800ce08 <pbuf_ref+0x38>)
}
 800cdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cdf8:	f006 be18 	b.w	8013a2c <iprintf>
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	08014f90 	.word	0x08014f90
 800ce04:	08015208 	.word	0x08015208
 800ce08:	0801487c 	.word	0x0801487c

0800ce0c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ce0c:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ce0e:	b338      	cbz	r0, 800ce60 <pbuf_cat+0x54>
 800ce10:	460d      	mov	r5, r1
 800ce12:	b329      	cbz	r1, 800ce60 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ce14:	6804      	ldr	r4, [r0, #0]
 800ce16:	b90c      	cbnz	r4, 800ce1c <pbuf_cat+0x10>
 800ce18:	e02b      	b.n	800ce72 <pbuf_cat+0x66>
 800ce1a:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce1c:	8903      	ldrh	r3, [r0, #8]
 800ce1e:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ce20:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce22:	440b      	add	r3, r1
 800ce24:	8103      	strh	r3, [r0, #8]
 800ce26:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	d1f6      	bne.n	800ce1a <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ce2c:	8963      	ldrh	r3, [r4, #10]
 800ce2e:	8922      	ldrh	r2, [r4, #8]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d010      	beq.n	800ce56 <pbuf_cat+0x4a>
 800ce34:	4b12      	ldr	r3, [pc, #72]	; (800ce80 <pbuf_cat+0x74>)
 800ce36:	f240 3262 	movw	r2, #866	; 0x362
 800ce3a:	4912      	ldr	r1, [pc, #72]	; (800ce84 <pbuf_cat+0x78>)
 800ce3c:	4812      	ldr	r0, [pc, #72]	; (800ce88 <pbuf_cat+0x7c>)
 800ce3e:	f006 fdf5 	bl	8013a2c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	b133      	cbz	r3, 800ce54 <pbuf_cat+0x48>
 800ce46:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <pbuf_cat+0x74>)
 800ce48:	f240 3263 	movw	r2, #867	; 0x363
 800ce4c:	490f      	ldr	r1, [pc, #60]	; (800ce8c <pbuf_cat+0x80>)
 800ce4e:	480e      	ldr	r0, [pc, #56]	; (800ce88 <pbuf_cat+0x7c>)
 800ce50:	f006 fdec 	bl	8013a2c <iprintf>
 800ce54:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce56:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ce58:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce5a:	4413      	add	r3, r2
 800ce5c:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <pbuf_cat+0x74>)
 800ce62:	f240 325a 	movw	r2, #858	; 0x35a
 800ce66:	490a      	ldr	r1, [pc, #40]	; (800ce90 <pbuf_cat+0x84>)
 800ce68:	4807      	ldr	r0, [pc, #28]	; (800ce88 <pbuf_cat+0x7c>)
}
 800ce6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ce6e:	f006 bddd 	b.w	8013a2c <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 800ce72:	4604      	mov	r4, r0
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ce74:	8963      	ldrh	r3, [r4, #10]
 800ce76:	8922      	ldrh	r2, [r4, #8]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d1db      	bne.n	800ce34 <pbuf_cat+0x28>
 800ce7c:	e7eb      	b.n	800ce56 <pbuf_cat+0x4a>
 800ce7e:	bf00      	nop
 800ce80:	08014f90 	.word	0x08014f90
 800ce84:	08015034 	.word	0x08015034
 800ce88:	0801487c 	.word	0x0801487c
 800ce8c:	08015064 	.word	0x08015064
 800ce90:	08014ffc 	.word	0x08014ffc

0800ce94 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ce94:	b510      	push	{r4, lr}
 800ce96:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800ce98:	f7ff ffb8 	bl	800ce0c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ce9c:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ce9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800cea2:	f7ff bf95 	b.w	800cdd0 <pbuf_ref>
 800cea6:	bf00      	nop

0800cea8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ceac:	2800      	cmp	r0, #0
 800ceae:	f000 808c 	beq.w	800cfca <pbuf_copy+0x122>
 800ceb2:	fab1 f681 	clz	r6, r1
 800ceb6:	460f      	mov	r7, r1
 800ceb8:	0976      	lsrs	r6, r6, #5
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	f040 8085 	bne.w	800cfca <pbuf_copy+0x122>
 800cec0:	8902      	ldrh	r2, [r0, #8]
 800cec2:	4605      	mov	r5, r0
 800cec4:	890b      	ldrh	r3, [r1, #8]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d37f      	bcc.n	800cfca <pbuf_copy+0x122>
 800ceca:	8943      	ldrh	r3, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 800cecc:	46b0      	mov	r8, r6
 800cece:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ced0:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800cfe0 <pbuf_copy+0x138>
 800ced4:	f8df b120 	ldr.w	fp, [pc, #288]	; 800cff8 <pbuf_copy+0x150>
 800ced8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800cfe8 <pbuf_copy+0x140>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cedc:	eba3 0308 	sub.w	r3, r3, r8
 800cee0:	1ba4      	subs	r4, r4, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cee2:	6868      	ldr	r0, [r5, #4]
 800cee4:	429c      	cmp	r4, r3
 800cee6:	6879      	ldr	r1, [r7, #4]
 800cee8:	4440      	add	r0, r8
 800ceea:	bf28      	it	cs
 800ceec:	461c      	movcs	r4, r3
 800ceee:	4431      	add	r1, r6
 800cef0:	4622      	mov	r2, r4
    offset_to += len;
 800cef2:	44a0      	add	r8, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cef4:	f006 fcdf 	bl	80138b6 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cef8:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800cefa:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cefc:	4598      	cmp	r8, r3
 800cefe:	d83d      	bhi.n	800cf7c <pbuf_copy+0xd4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cf00:	897b      	ldrh	r3, [r7, #10]
 800cf02:	429e      	cmp	r6, r3
 800cf04:	d831      	bhi.n	800cf6a <pbuf_copy+0xc2>
    if (offset_from >= p_from->len) {
 800cf06:	429e      	cmp	r6, r3
 800cf08:	d301      	bcc.n	800cf0e <pbuf_copy+0x66>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 800cf0a:	683f      	ldr	r7, [r7, #0]
      offset_from = 0;
 800cf0c:	2600      	movs	r6, #0
    }
    if (offset_to == p_to->len) {
 800cf0e:	896b      	ldrh	r3, [r5, #10]
 800cf10:	4598      	cmp	r8, r3
 800cf12:	d011      	beq.n	800cf38 <pbuf_copy+0x90>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cf14:	2f00      	cmp	r7, #0
 800cf16:	d03b      	beq.n	800cf90 <pbuf_copy+0xe8>
 800cf18:	897c      	ldrh	r4, [r7, #10]
 800cf1a:	893b      	ldrh	r3, [r7, #8]
 800cf1c:	429c      	cmp	r4, r3
 800cf1e:	d016      	beq.n	800cf4e <pbuf_copy+0xa6>
 800cf20:	896b      	ldrh	r3, [r5, #10]
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cf22:	892a      	ldrh	r2, [r5, #8]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d1d9      	bne.n	800cedc <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf28:	682a      	ldr	r2, [r5, #0]
 800cf2a:	2a00      	cmp	r2, #0
 800cf2c:	d137      	bne.n	800cf9e <pbuf_copy+0xf6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cf2e:	2f00      	cmp	r7, #0
 800cf30:	d1d4      	bne.n	800cedc <pbuf_copy+0x34>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cf32:	2000      	movs	r0, #0
}
 800cf34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 800cf38:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cf3a:	b90d      	cbnz	r5, 800cf40 <pbuf_copy+0x98>
 800cf3c:	2f00      	cmp	r7, #0
 800cf3e:	d139      	bne.n	800cfb4 <pbuf_copy+0x10c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cf40:	b327      	cbz	r7, 800cf8c <pbuf_copy+0xe4>
 800cf42:	897c      	ldrh	r4, [r7, #10]
      offset_to = 0;
 800cf44:	f04f 0800 	mov.w	r8, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cf48:	893b      	ldrh	r3, [r7, #8]
 800cf4a:	429c      	cmp	r4, r3
 800cf4c:	d1e8      	bne.n	800cf20 <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0e5      	beq.n	800cf20 <pbuf_copy+0x78>
 800cf54:	4b22      	ldr	r3, [pc, #136]	; (800cfe0 <pbuf_copy+0x138>)
 800cf56:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800cf5a:	4922      	ldr	r1, [pc, #136]	; (800cfe4 <pbuf_copy+0x13c>)
 800cf5c:	4822      	ldr	r0, [pc, #136]	; (800cfe8 <pbuf_copy+0x140>)
 800cf5e:	f006 fd65 	bl	8013a2c <iprintf>
 800cf62:	f06f 0005 	mvn.w	r0, #5
}
 800cf66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cf6a:	4653      	mov	r3, sl
 800cf6c:	f240 32da 	movw	r2, #986	; 0x3da
 800cf70:	491e      	ldr	r1, [pc, #120]	; (800cfec <pbuf_copy+0x144>)
 800cf72:	4648      	mov	r0, r9
 800cf74:	f006 fd5a 	bl	8013a2c <iprintf>
 800cf78:	897b      	ldrh	r3, [r7, #10]
 800cf7a:	e7c4      	b.n	800cf06 <pbuf_copy+0x5e>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cf7c:	4653      	mov	r3, sl
 800cf7e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800cf82:	4659      	mov	r1, fp
 800cf84:	4648      	mov	r0, r9
 800cf86:	f006 fd51 	bl	8013a2c <iprintf>
 800cf8a:	e7b9      	b.n	800cf00 <pbuf_copy+0x58>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d0d0      	beq.n	800cf32 <pbuf_copy+0x8a>
 800cf90:	892a      	ldrh	r2, [r5, #8]
 800cf92:	896b      	ldrh	r3, [r5, #10]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d1cc      	bne.n	800cf32 <pbuf_copy+0x8a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf98:	6828      	ldr	r0, [r5, #0]
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d0ca      	beq.n	800cf34 <pbuf_copy+0x8c>
 800cf9e:	4b10      	ldr	r3, [pc, #64]	; (800cfe0 <pbuf_copy+0x138>)
 800cfa0:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cfa4:	490f      	ldr	r1, [pc, #60]	; (800cfe4 <pbuf_copy+0x13c>)
 800cfa6:	4810      	ldr	r0, [pc, #64]	; (800cfe8 <pbuf_copy+0x140>)
 800cfa8:	f006 fd40 	bl	8013a2c <iprintf>
 800cfac:	f06f 0005 	mvn.w	r0, #5
}
 800cfb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cfb4:	4b0a      	ldr	r3, [pc, #40]	; (800cfe0 <pbuf_copy+0x138>)
 800cfb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cfba:	490d      	ldr	r1, [pc, #52]	; (800cff0 <pbuf_copy+0x148>)
 800cfbc:	480a      	ldr	r0, [pc, #40]	; (800cfe8 <pbuf_copy+0x140>)
 800cfbe:	f006 fd35 	bl	8013a2c <iprintf>
 800cfc2:	f06f 000f 	mvn.w	r0, #15
}
 800cfc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cfca:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <pbuf_copy+0x138>)
 800cfcc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800cfd0:	4908      	ldr	r1, [pc, #32]	; (800cff4 <pbuf_copy+0x14c>)
 800cfd2:	4805      	ldr	r0, [pc, #20]	; (800cfe8 <pbuf_copy+0x140>)
 800cfd4:	f006 fd2a 	bl	8013a2c <iprintf>
 800cfd8:	f06f 000f 	mvn.w	r0, #15
 800cfdc:	e7aa      	b.n	800cf34 <pbuf_copy+0x8c>
 800cfde:	bf00      	nop
 800cfe0:	08014f90 	.word	0x08014f90
 800cfe4:	080150fc 	.word	0x080150fc
 800cfe8:	0801487c 	.word	0x0801487c
 800cfec:	080150d0 	.word	0x080150d0
 800cff0:	080150ec 	.word	0x080150ec
 800cff4:	08015088 	.word	0x08015088
 800cff8:	080150b8 	.word	0x080150b8

0800cffc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d000:	4605      	mov	r5, r0
 800d002:	b368      	cbz	r0, 800d060 <pbuf_copy_partial+0x64>
 800d004:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d006:	2900      	cmp	r1, #0
 800d008:	d035      	beq.n	800d076 <pbuf_copy_partial+0x7a>
 800d00a:	4690      	mov	r8, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	d03d      	beq.n	800d08c <pbuf_copy_partial+0x90>
  u16_t left = 0;
 800d010:	2600      	movs	r6, #0
 800d012:	e009      	b.n	800d028 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 800d014:	429a      	cmp	r2, r3
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d016:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 800d01a:	d809      	bhi.n	800d030 <pbuf_copy_partial+0x34>
      offset = (u16_t)(offset - p->len);
 800d01c:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d01e:	682d      	ldr	r5, [r5, #0]
 800d020:	f1b8 0f00 	cmp.w	r8, #0
 800d024:	d019      	beq.n	800d05a <pbuf_copy_partial+0x5e>
 800d026:	b1c5      	cbz	r5, 800d05a <pbuf_copy_partial+0x5e>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d028:	19b8      	adds	r0, r7, r6
 800d02a:	896a      	ldrh	r2, [r5, #10]
    if ((offset != 0) && (offset >= p->len)) {
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1f1      	bne.n	800d014 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 800d030:	1ad4      	subs	r4, r2, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d032:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 800d034:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d036:	4419      	add	r1, r3
 800d038:	4544      	cmp	r4, r8
 800d03a:	bf28      	it	cs
 800d03c:	4644      	movcs	r4, r8
 800d03e:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d040:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800d042:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d046:	f006 fc36 	bl	80138b6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d04a:	b2b6      	uxth	r6, r6
      offset = 0;
 800d04c:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800d04e:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d052:	682d      	ldr	r5, [r5, #0]
 800d054:	f1b8 0f00 	cmp.w	r8, #0
 800d058:	d1e5      	bne.n	800d026 <pbuf_copy_partial+0x2a>
    }
  }
  return copied_total;
}
 800d05a:	4630      	mov	r0, r6
 800d05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d060:	4606      	mov	r6, r0
 800d062:	4b0c      	ldr	r3, [pc, #48]	; (800d094 <pbuf_copy_partial+0x98>)
 800d064:	f240 420a 	movw	r2, #1034	; 0x40a
 800d068:	490b      	ldr	r1, [pc, #44]	; (800d098 <pbuf_copy_partial+0x9c>)
 800d06a:	480c      	ldr	r0, [pc, #48]	; (800d09c <pbuf_copy_partial+0xa0>)
 800d06c:	f006 fcde 	bl	8013a2c <iprintf>
}
 800d070:	4630      	mov	r0, r6
 800d072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d076:	463e      	mov	r6, r7
 800d078:	4b06      	ldr	r3, [pc, #24]	; (800d094 <pbuf_copy_partial+0x98>)
 800d07a:	f240 420b 	movw	r2, #1035	; 0x40b
 800d07e:	4908      	ldr	r1, [pc, #32]	; (800d0a0 <pbuf_copy_partial+0xa4>)
 800d080:	4806      	ldr	r0, [pc, #24]	; (800d09c <pbuf_copy_partial+0xa0>)
 800d082:	f006 fcd3 	bl	8013a2c <iprintf>
}
 800d086:	4630      	mov	r0, r6
 800d088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t left = 0;
 800d08c:	4616      	mov	r6, r2
}
 800d08e:	4630      	mov	r0, r6
 800d090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d094:	08014f90 	.word	0x08014f90
 800d098:	08015128 	.word	0x08015128
 800d09c:	0801487c 	.word	0x0801487c
 800d0a0:	08015148 	.word	0x08015148

0800d0a4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d04a      	beq.n	800d142 <pbuf_take+0x9e>
 800d0ac:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	d03d      	beq.n	800d12e <pbuf_take+0x8a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d0b2:	8903      	ldrh	r3, [r0, #8]
 800d0b4:	4690      	mov	r8, r2
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d32e      	bcc.n	800d11a <pbuf_take+0x76>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d0bc:	b352      	cbz	r2, 800d114 <pbuf_take+0x70>
 800d0be:	4615      	mov	r5, r2
  size_t copied_total = 0;
 800d0c0:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d0c2:	f8df b098 	ldr.w	fp, [pc, #152]	; 800d15c <pbuf_take+0xb8>
 800d0c6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800d170 <pbuf_take+0xcc>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 800d0ca:	8963      	ldrh	r3, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d0cc:	19b9      	adds	r1, r7, r6
 800d0ce:	6860      	ldr	r0, [r4, #4]
 800d0d0:	42ab      	cmp	r3, r5
 800d0d2:	bf28      	it	cs
 800d0d4:	462b      	movcs	r3, r5
 800d0d6:	4699      	mov	r9, r3
 800d0d8:	461a      	mov	r2, r3
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 800d0da:	441e      	add	r6, r3
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d0dc:	f006 fbeb 	bl	80138b6 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d0e0:	ebb5 0509 	subs.w	r5, r5, r9
 800d0e4:	6824      	ldr	r4, [r4, #0]
 800d0e6:	d009      	beq.n	800d0fc <pbuf_take+0x58>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d0e8:	2c00      	cmp	r4, #0
 800d0ea:	d1ee      	bne.n	800d0ca <pbuf_take+0x26>
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d0f2:	4651      	mov	r1, sl
 800d0f4:	4818      	ldr	r0, [pc, #96]	; (800d158 <pbuf_take+0xb4>)
 800d0f6:	f006 fc99 	bl	8013a2c <iprintf>
 800d0fa:	e7e6      	b.n	800d0ca <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d0fc:	45b0      	cmp	r8, r6
 800d0fe:	d009      	beq.n	800d114 <pbuf_take+0x70>
 800d100:	4b16      	ldr	r3, [pc, #88]	; (800d15c <pbuf_take+0xb8>)
 800d102:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d106:	4916      	ldr	r1, [pc, #88]	; (800d160 <pbuf_take+0xbc>)
 800d108:	4813      	ldr	r0, [pc, #76]	; (800d158 <pbuf_take+0xb4>)
 800d10a:	f006 fc8f 	bl	8013a2c <iprintf>
  return ERR_OK;
 800d10e:	4628      	mov	r0, r5
}
 800d110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 800d114:	2000      	movs	r0, #0
}
 800d116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d11a:	4b10      	ldr	r3, [pc, #64]	; (800d15c <pbuf_take+0xb8>)
 800d11c:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d120:	4910      	ldr	r1, [pc, #64]	; (800d164 <pbuf_take+0xc0>)
 800d122:	480d      	ldr	r0, [pc, #52]	; (800d158 <pbuf_take+0xb4>)
 800d124:	f006 fc82 	bl	8013a2c <iprintf>
 800d128:	f04f 30ff 	mov.w	r0, #4294967295
 800d12c:	e7f0      	b.n	800d110 <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d12e:	4b0b      	ldr	r3, [pc, #44]	; (800d15c <pbuf_take+0xb8>)
 800d130:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d134:	490c      	ldr	r1, [pc, #48]	; (800d168 <pbuf_take+0xc4>)
 800d136:	4808      	ldr	r0, [pc, #32]	; (800d158 <pbuf_take+0xb4>)
 800d138:	f006 fc78 	bl	8013a2c <iprintf>
 800d13c:	f06f 000f 	mvn.w	r0, #15
 800d140:	e7e6      	b.n	800d110 <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d142:	4b06      	ldr	r3, [pc, #24]	; (800d15c <pbuf_take+0xb8>)
 800d144:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d148:	4908      	ldr	r1, [pc, #32]	; (800d16c <pbuf_take+0xc8>)
 800d14a:	4803      	ldr	r0, [pc, #12]	; (800d158 <pbuf_take+0xb4>)
 800d14c:	f006 fc6e 	bl	8013a2c <iprintf>
 800d150:	f06f 000f 	mvn.w	r0, #15
 800d154:	e7dc      	b.n	800d110 <pbuf_take+0x6c>
 800d156:	bf00      	nop
 800d158:	0801487c 	.word	0x0801487c
 800d15c:	08014f90 	.word	0x08014f90
 800d160:	080152a8 	.word	0x080152a8
 800d164:	08015270 	.word	0x08015270
 800d168:	08015254 	.word	0x08015254
 800d16c:	0801523c 	.word	0x0801523c
 800d170:	08015290 	.word	0x08015290

0800d174 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 800d174:	b380      	cbz	r0, 800d1d8 <pbuf_take_at+0x64>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800d176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d178:	4604      	mov	r4, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 800d17a:	8940      	ldrh	r0, [r0, #10]
 800d17c:	460e      	mov	r6, r1
 800d17e:	4615      	mov	r5, r2
 800d180:	4283      	cmp	r3, r0
 800d182:	d203      	bcs.n	800d18c <pbuf_take_at+0x18>
 800d184:	e00a      	b.n	800d19c <pbuf_take_at+0x28>
 800d186:	8960      	ldrh	r0, [r4, #10]
 800d188:	4298      	cmp	r0, r3
 800d18a:	d807      	bhi.n	800d19c <pbuf_take_at+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d18c:	1a1b      	subs	r3, r3, r0
    q = q->next;
 800d18e:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800d190:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 800d192:	2c00      	cmp	r4, #0
 800d194:	d1f7      	bne.n	800d186 <pbuf_take_at+0x12>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
 800d196:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800d19c:	8921      	ldrh	r1, [r4, #8]
 800d19e:	195a      	adds	r2, r3, r5
 800d1a0:	4291      	cmp	r1, r2
 800d1a2:	dbf8      	blt.n	800d196 <pbuf_take_at+0x22>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800d1a4:	8962      	ldrh	r2, [r4, #10]
 800d1a6:	6860      	ldr	r0, [r4, #4]
 800d1a8:	1ad2      	subs	r2, r2, r3
 800d1aa:	4418      	add	r0, r3
 800d1ac:	42aa      	cmp	r2, r5
 800d1ae:	da0d      	bge.n	800d1cc <pbuf_take_at+0x58>
 800d1b0:	b297      	uxth	r7, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	463a      	mov	r2, r7
 800d1b6:	f006 fb7e 	bl	80138b6 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800d1ba:	1be8      	subs	r0, r5, r7
 800d1bc:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 800d1be:	b14a      	cbz	r2, 800d1d4 <pbuf_take_at+0x60>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800d1c0:	19f1      	adds	r1, r6, r7
 800d1c2:	6820      	ldr	r0, [r4, #0]
}
 800d1c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 800d1c8:	f7ff bf6c 	b.w	800d0a4 <pbuf_take>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	f006 fb71 	bl	80138b6 <memcpy>
    return ERR_OK;
 800d1d4:	2000      	movs	r0, #0
}
 800d1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ERR_MEM;
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop

0800d1e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d1e4:	460a      	mov	r2, r1
 800d1e6:	8921      	ldrh	r1, [r4, #8]
 800d1e8:	f7ff fce6 	bl	800cbb8 <pbuf_alloc>
  if (q == NULL) {
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	b150      	cbz	r0, 800d206 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	f7ff fe59 	bl	800cea8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d1f6:	b130      	cbz	r0, 800d206 <pbuf_clone+0x26>
 800d1f8:	4b04      	ldr	r3, [pc, #16]	; (800d20c <pbuf_clone+0x2c>)
 800d1fa:	f240 5224 	movw	r2, #1316	; 0x524
 800d1fe:	4904      	ldr	r1, [pc, #16]	; (800d210 <pbuf_clone+0x30>)
 800d200:	4804      	ldr	r0, [pc, #16]	; (800d214 <pbuf_clone+0x34>)
 800d202:	f006 fc13 	bl	8013a2c <iprintf>
  return q;
}
 800d206:	4628      	mov	r0, r5
 800d208:	bd38      	pop	{r3, r4, r5, pc}
 800d20a:	bf00      	nop
 800d20c:	08014f90 	.word	0x08014f90
 800d210:	08015074 	.word	0x08015074
 800d214:	0801487c 	.word	0x0801487c

0800d218 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 800d218:	b158      	cbz	r0, 800d232 <pbuf_put_at+0x1a>
 800d21a:	8943      	ldrh	r3, [r0, #10]
 800d21c:	4299      	cmp	r1, r3
 800d21e:	d203      	bcs.n	800d228 <pbuf_put_at+0x10>
 800d220:	e008      	b.n	800d234 <pbuf_put_at+0x1c>
 800d222:	8943      	ldrh	r3, [r0, #10]
 800d224:	428b      	cmp	r3, r1
 800d226:	d805      	bhi.n	800d234 <pbuf_put_at+0x1c>
    offset_left = (u16_t)(offset_left - q->len);
 800d228:	1ac9      	subs	r1, r1, r3
    q = q->next;
 800d22a:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800d22c:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 800d22e:	2800      	cmp	r0, #0
 800d230:	d1f7      	bne.n	800d222 <pbuf_put_at+0xa>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
  }
}
 800d232:	4770      	bx	lr
    ((u8_t *)q->payload)[q_idx] = data;
 800d234:	6843      	ldr	r3, [r0, #4]
 800d236:	545a      	strb	r2, [r3, r1]
}
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop

0800d23c <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop

0800d240 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d240:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d242:	f006 fc0b 	bl	8013a5c <rand>
 800d246:	4b02      	ldr	r3, [pc, #8]	; (800d250 <tcp_init+0x10>)
 800d248:	4a02      	ldr	r2, [pc, #8]	; (800d254 <tcp_init+0x14>)
 800d24a:	4303      	orrs	r3, r0
 800d24c:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800d24e:	bd08      	pop	{r3, pc}
 800d250:	ffffc000 	.word	0xffffc000
 800d254:	2400013c 	.word	0x2400013c

0800d258 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d258:	7d03      	ldrb	r3, [r0, #20]
 800d25a:	2b01      	cmp	r3, #1
{
 800d25c:	b510      	push	{r4, lr}
 800d25e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d260:	d005      	beq.n	800d26e <tcp_free+0x16>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d262:	4621      	mov	r1, r4
 800d264:	2001      	movs	r0, #1
}
 800d266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800d26a:	f7ff b94f 	b.w	800c50c <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d26e:	4906      	ldr	r1, [pc, #24]	; (800d288 <tcp_free+0x30>)
 800d270:	22d4      	movs	r2, #212	; 0xd4
 800d272:	4b06      	ldr	r3, [pc, #24]	; (800d28c <tcp_free+0x34>)
 800d274:	4806      	ldr	r0, [pc, #24]	; (800d290 <tcp_free+0x38>)
 800d276:	f006 fbd9 	bl	8013a2c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800d27a:	4621      	mov	r1, r4
 800d27c:	2001      	movs	r0, #1
}
 800d27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800d282:	f7ff b943 	b.w	800c50c <memp_free>
 800d286:	bf00      	nop
 800d288:	0801540c 	.word	0x0801540c
 800d28c:	080153dc 	.word	0x080153dc
 800d290:	0801487c 	.word	0x0801487c

0800d294 <tcp_backlog_accepted>:
 *
 * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 */
void
tcp_backlog_accepted(struct tcp_pcb *pcb)
{
 800d294:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d296:	4604      	mov	r4, r0
 800d298:	b160      	cbz	r0, 800d2b4 <tcp_backlog_accepted+0x20>
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 800d29a:	8b63      	ldrh	r3, [r4, #26]
 800d29c:	059a      	lsls	r2, r3, #22
 800d29e:	d508      	bpl.n	800d2b2 <tcp_backlog_accepted+0x1e>
    if (pcb->listener != NULL) {
 800d2a0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d2a2:	b132      	cbz	r2, 800d2b2 <tcp_backlog_accepted+0x1e>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 800d2a4:	7f51      	ldrb	r1, [r2, #29]
 800d2a6:	b169      	cbz	r1, 800d2c4 <tcp_backlog_accepted+0x30>
      pcb->listener->accepts_pending--;
 800d2a8:	3901      	subs	r1, #1
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
 800d2aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
      pcb->listener->accepts_pending--;
 800d2ae:	7751      	strb	r1, [r2, #29]
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
 800d2b0:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800d2b2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d2b4:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <tcp_backlog_accepted+0x48>)
 800d2b6:	f240 123f 	movw	r2, #319	; 0x13f
 800d2ba:	4909      	ldr	r1, [pc, #36]	; (800d2e0 <tcp_backlog_accepted+0x4c>)
 800d2bc:	4809      	ldr	r0, [pc, #36]	; (800d2e4 <tcp_backlog_accepted+0x50>)
 800d2be:	f006 fbb5 	bl	8013a2c <iprintf>
 800d2c2:	e7ea      	b.n	800d29a <tcp_backlog_accepted+0x6>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 800d2c4:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <tcp_backlog_accepted+0x48>)
 800d2c6:	f240 1243 	movw	r2, #323	; 0x143
 800d2ca:	4907      	ldr	r1, [pc, #28]	; (800d2e8 <tcp_backlog_accepted+0x54>)
 800d2cc:	4805      	ldr	r0, [pc, #20]	; (800d2e4 <tcp_backlog_accepted+0x50>)
 800d2ce:	f006 fbad 	bl	8013a2c <iprintf>
 800d2d2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d2d4:	8b63      	ldrh	r3, [r4, #26]
 800d2d6:	7f51      	ldrb	r1, [r2, #29]
 800d2d8:	e7e6      	b.n	800d2a8 <tcp_backlog_accepted+0x14>
 800d2da:	bf00      	nop
 800d2dc:	080153dc 	.word	0x080153dc
 800d2e0:	08015310 	.word	0x08015310
 800d2e4:	0801487c 	.word	0x0801487c
 800d2e8:	0801531c 	.word	0x0801531c

0800d2ec <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d2ec:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d040      	beq.n	800d376 <tcp_close_shutdown_fin+0x8a>

  switch (pcb->state) {
 800d2f4:	7d23      	ldrb	r3, [r4, #20]
 800d2f6:	2b04      	cmp	r3, #4
 800d2f8:	d01f      	beq.n	800d33a <tcp_close_shutdown_fin+0x4e>
 800d2fa:	2b07      	cmp	r3, #7
 800d2fc:	d00f      	beq.n	800d31e <tcp_close_shutdown_fin+0x32>
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d001      	beq.n	800d306 <tcp_close_shutdown_fin+0x1a>
        pcb->state = LAST_ACK;
      }
      break;
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d302:	2000      	movs	r0, #0
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 800d304:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800d306:	4620      	mov	r0, r4
 800d308:	f003 f812 	bl	8010330 <tcp_send_fin>
      if (err == ERR_OK) {
 800d30c:	b338      	cbz	r0, 800d35e <tcp_close_shutdown_fin+0x72>
  } else if (err == ERR_MEM) {
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d1f8      	bne.n	800d304 <tcp_close_shutdown_fin+0x18>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d312:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 800d314:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d316:	f043 0308 	orr.w	r3, r3, #8
 800d31a:	8363      	strh	r3, [r4, #26]
}
 800d31c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800d31e:	4620      	mov	r0, r4
 800d320:	f003 f806 	bl	8010330 <tcp_send_fin>
      if (err == ERR_OK) {
 800d324:	2800      	cmp	r0, #0
 800d326:	d1f2      	bne.n	800d30e <tcp_close_shutdown_fin+0x22>
        MIB2_STATS_INC(mib2.tcpestabresets);
 800d328:	4a17      	ldr	r2, [pc, #92]	; (800d388 <tcp_close_shutdown_fin+0x9c>)
        pcb->state = LAST_ACK;
 800d32a:	2109      	movs	r1, #9
        MIB2_STATS_INC(mib2.tcpestabresets);
 800d32c:	f8d2 314c 	ldr.w	r3, [r2, #332]	; 0x14c
 800d330:	3301      	adds	r3, #1
 800d332:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
        pcb->state = LAST_ACK;
 800d336:	7521      	strb	r1, [r4, #20]
 800d338:	e00c      	b.n	800d354 <tcp_close_shutdown_fin+0x68>
      err = tcp_send_fin(pcb);
 800d33a:	4620      	mov	r0, r4
 800d33c:	f002 fff8 	bl	8010330 <tcp_send_fin>
      if (err == ERR_OK) {
 800d340:	2800      	cmp	r0, #0
 800d342:	d1e4      	bne.n	800d30e <tcp_close_shutdown_fin+0x22>
        MIB2_STATS_INC(mib2.tcpestabresets);
 800d344:	4a10      	ldr	r2, [pc, #64]	; (800d388 <tcp_close_shutdown_fin+0x9c>)
        pcb->state = FIN_WAIT_1;
 800d346:	2105      	movs	r1, #5
        MIB2_STATS_INC(mib2.tcpestabresets);
 800d348:	f8d2 314c 	ldr.w	r3, [r2, #332]	; 0x14c
 800d34c:	3301      	adds	r3, #1
 800d34e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
        pcb->state = FIN_WAIT_1;
 800d352:	7521      	strb	r1, [r4, #20]
    tcp_output(pcb);
 800d354:	4620      	mov	r0, r4
 800d356:	f003 f96b 	bl	8010630 <tcp_output>
 800d35a:	2000      	movs	r0, #0
}
 800d35c:	bd10      	pop	{r4, pc}
        tcp_backlog_accepted(pcb);
 800d35e:	4620      	mov	r0, r4
 800d360:	f7ff ff98 	bl	800d294 <tcp_backlog_accepted>
        MIB2_STATS_INC(mib2.tcpattemptfails);
 800d364:	4a08      	ldr	r2, [pc, #32]	; (800d388 <tcp_close_shutdown_fin+0x9c>)
        pcb->state = FIN_WAIT_1;
 800d366:	2105      	movs	r1, #5
        MIB2_STATS_INC(mib2.tcpattemptfails);
 800d368:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800d36c:	3301      	adds	r3, #1
 800d36e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
        pcb->state = FIN_WAIT_1;
 800d372:	7521      	strb	r1, [r4, #20]
 800d374:	e7ee      	b.n	800d354 <tcp_close_shutdown_fin+0x68>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d376:	4b05      	ldr	r3, [pc, #20]	; (800d38c <tcp_close_shutdown_fin+0xa0>)
 800d378:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d37c:	4904      	ldr	r1, [pc, #16]	; (800d390 <tcp_close_shutdown_fin+0xa4>)
 800d37e:	4805      	ldr	r0, [pc, #20]	; (800d394 <tcp_close_shutdown_fin+0xa8>)
 800d380:	f006 fb54 	bl	8013a2c <iprintf>
 800d384:	e7b6      	b.n	800d2f4 <tcp_close_shutdown_fin+0x8>
 800d386:	bf00      	nop
 800d388:	2401bdf8 	.word	0x2401bdf8
 800d38c:	080153dc 	.word	0x080153dc
 800d390:	08015310 	.word	0x08015310
 800d394:	0801487c 	.word	0x0801487c

0800d398 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d398:	b570      	push	{r4, r5, r6, lr}
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d39a:	4604      	mov	r4, r0
 800d39c:	b1a8      	cbz	r0, 800d3ca <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d39e:	8d21      	ldrh	r1, [r4, #40]	; 0x28

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d3a0:	f640 3668 	movw	r6, #2920	; 0xb68
 800d3a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d3a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d3a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d3aa:	1a88      	subs	r0, r1, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d3ac:	42b3      	cmp	r3, r6
 800d3ae:	4428      	add	r0, r5
 800d3b0:	bf94      	ite	ls
 800d3b2:	1ac3      	subls	r3, r0, r3
 800d3b4:	1b83      	subhi	r3, r0, r6
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	db01      	blt.n	800d3be <tcp_update_rcv_ann_wnd+0x26>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d3ba:	8561      	strh	r1, [r4, #42]	; 0x2a
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
    }
    return 0;
  }
}
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d3be:	1aab      	subs	r3, r5, r2
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	dd0a      	ble.n	800d3da <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 800d3c8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <tcp_update_rcv_ann_wnd+0x60>)
 800d3cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d3d0:	490a      	ldr	r1, [pc, #40]	; (800d3fc <tcp_update_rcv_ann_wnd+0x64>)
 800d3d2:	480b      	ldr	r0, [pc, #44]	; (800d400 <tcp_update_rcv_ann_wnd+0x68>)
 800d3d4:	f006 fb2a 	bl	8013a2c <iprintf>
 800d3d8:	e7e1      	b.n	800d39e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d3da:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d3dc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800d3e0:	d202      	bcs.n	800d3e8 <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 800d3e2:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d3e4:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d3e8:	4b03      	ldr	r3, [pc, #12]	; (800d3f8 <tcp_update_rcv_ann_wnd+0x60>)
 800d3ea:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d3ee:	4905      	ldr	r1, [pc, #20]	; (800d404 <tcp_update_rcv_ann_wnd+0x6c>)
 800d3f0:	4803      	ldr	r0, [pc, #12]	; (800d400 <tcp_update_rcv_ann_wnd+0x68>)
 800d3f2:	f006 fb1b 	bl	8013a2c <iprintf>
 800d3f6:	e7f4      	b.n	800d3e2 <tcp_update_rcv_ann_wnd+0x4a>
 800d3f8:	080153dc 	.word	0x080153dc
 800d3fc:	08015798 	.word	0x08015798
 800d400:	0801487c 	.word	0x0801487c
 800d404:	080157bc 	.word	0x080157bc

0800d408 <tcp_recved>:
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d408:	b390      	cbz	r0, 800d470 <tcp_recved+0x68>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d40a:	7d03      	ldrb	r3, [r0, #20]
 800d40c:	2b01      	cmp	r3, #1
{
 800d40e:	b570      	push	{r4, r5, r6, lr}
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d414:	d024      	beq.n	800d460 <tcp_recved+0x58>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d416:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800d418:	1959      	adds	r1, r3, r5
 800d41a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d41c:	428b      	cmp	r3, r1
 800d41e:	d803      	bhi.n	800d428 <tcp_recved+0x20>
 800d420:	f241 63d0 	movw	r3, #5840	; 0x16d0
 800d424:	4299      	cmp	r1, r3
 800d426:	d90a      	bls.n	800d43e <tcp_recved+0x36>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d428:	f241 63d0 	movw	r3, #5840	; 0x16d0
  } else  {
    pcb->rcv_wnd = rcv_wnd;
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d42c:	4620      	mov	r0, r4
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d42e:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d430:	f7ff ffb2 	bl	800d398 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d434:	f240 53b3 	movw	r3, #1459	; 0x5b3
 800d438:	4298      	cmp	r0, r3
 800d43a:	d808      	bhi.n	800d44e <tcp_recved+0x46>
    tcp_output(pcb);
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d43c:	bd70      	pop	{r4, r5, r6, pc}
    pcb->rcv_wnd = rcv_wnd;
 800d43e:	8521      	strh	r1, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d440:	4620      	mov	r0, r4
 800d442:	f7ff ffa9 	bl	800d398 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d446:	f240 53b3 	movw	r3, #1459	; 0x5b3
 800d44a:	4298      	cmp	r0, r3
 800d44c:	d9f6      	bls.n	800d43c <tcp_recved+0x34>
    tcp_ack_now(pcb);
 800d44e:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 800d450:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800d452:	f043 0302 	orr.w	r3, r3, #2
 800d456:	8363      	strh	r3, [r4, #26]
}
 800d458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800d45c:	f003 b8e8 	b.w	8010630 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d460:	4b07      	ldr	r3, [pc, #28]	; (800d480 <tcp_recved+0x78>)
 800d462:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d466:	4907      	ldr	r1, [pc, #28]	; (800d484 <tcp_recved+0x7c>)
 800d468:	4807      	ldr	r0, [pc, #28]	; (800d488 <tcp_recved+0x80>)
 800d46a:	f006 fadf 	bl	8013a2c <iprintf>
 800d46e:	e7d2      	b.n	800d416 <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d470:	4b03      	ldr	r3, [pc, #12]	; (800d480 <tcp_recved+0x78>)
 800d472:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d476:	4905      	ldr	r1, [pc, #20]	; (800d48c <tcp_recved+0x84>)
 800d478:	4803      	ldr	r0, [pc, #12]	; (800d488 <tcp_recved+0x80>)
 800d47a:	f006 bad7 	b.w	8013a2c <iprintf>
 800d47e:	bf00      	nop
 800d480:	080153dc 	.word	0x080153dc
 800d484:	08015588 	.word	0x08015588
 800d488:	0801487c 	.word	0x0801487c
 800d48c:	08015570 	.word	0x08015570

0800d490 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800d490:	b158      	cbz	r0, 800d4aa <tcp_seg_free+0x1a>
{
 800d492:	b510      	push	{r4, lr}
 800d494:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800d496:	6840      	ldr	r0, [r0, #4]
 800d498:	b108      	cbz	r0, 800d49e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800d49a:	f7ff fb19 	bl	800cad0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d49e:	4621      	mov	r1, r4
 800d4a0:	2003      	movs	r0, #3
  }
}
 800d4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800d4a6:	f7ff b831 	b.w	800c50c <memp_free>
 800d4aa:	4770      	bx	lr

0800d4ac <tcp_segs_free>:
  while (seg != NULL) {
 800d4ac:	b138      	cbz	r0, 800d4be <tcp_segs_free+0x12>
{
 800d4ae:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800d4b0:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800d4b2:	f7ff ffed 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	2c00      	cmp	r4, #0
 800d4ba:	d1f9      	bne.n	800d4b0 <tcp_segs_free+0x4>
}
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	4770      	bx	lr

0800d4c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d4c0:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	b188      	cbz	r0, 800d4ea <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d4c6:	2003      	movs	r0, #3
 800d4c8:	f7fe ffec 	bl	800c4a4 <memp_malloc>
  if (cseg == NULL) {
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	b150      	cbz	r0, 800d4e6 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d4d0:	6828      	ldr	r0, [r5, #0]
 800d4d2:	6869      	ldr	r1, [r5, #4]
 800d4d4:	68aa      	ldr	r2, [r5, #8]
 800d4d6:	68eb      	ldr	r3, [r5, #12]
 800d4d8:	6020      	str	r0, [r4, #0]
 800d4da:	6061      	str	r1, [r4, #4]
 800d4dc:	60a2      	str	r2, [r4, #8]
 800d4de:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800d4e0:	6860      	ldr	r0, [r4, #4]
 800d4e2:	f7ff fc75 	bl	800cdd0 <pbuf_ref>
  return cseg;
}
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d4ea:	4b04      	ldr	r3, [pc, #16]	; (800d4fc <tcp_seg_copy+0x3c>)
 800d4ec:	f240 6282 	movw	r2, #1666	; 0x682
 800d4f0:	4903      	ldr	r1, [pc, #12]	; (800d500 <tcp_seg_copy+0x40>)
 800d4f2:	4804      	ldr	r0, [pc, #16]	; (800d504 <tcp_seg_copy+0x44>)
 800d4f4:	f006 fa9a 	bl	8013a2c <iprintf>
 800d4f8:	e7e5      	b.n	800d4c6 <tcp_seg_copy+0x6>
 800d4fa:	bf00      	nop
 800d4fc:	080153dc 	.word	0x080153dc
 800d500:	080155b0 	.word	0x080155b0
 800d504:	0801487c 	.word	0x0801487c

0800d508 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d508:	2800      	cmp	r0, #0
 800d50a:	d031      	beq.n	800d570 <tcp_pcb_purge+0x68>

  if (pcb->state != CLOSED &&
 800d50c:	7d03      	ldrb	r3, [r0, #20]
      pcb->state != TIME_WAIT &&
 800d50e:	2b0a      	cmp	r3, #10
{
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	4604      	mov	r4, r0
      pcb->state != TIME_WAIT &&
 800d514:	d001      	beq.n	800d51a <tcp_pcb_purge+0x12>
 800d516:	2b01      	cmp	r3, #1
 800d518:	d800      	bhi.n	800d51c <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800d51a:	bd70      	pop	{r4, r5, r6, pc}
    tcp_backlog_accepted(pcb);
 800d51c:	f7ff feba 	bl	800d294 <tcp_backlog_accepted>
    if (pcb->refused_data != NULL) {
 800d520:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d522:	b118      	cbz	r0, 800d52c <tcp_pcb_purge+0x24>
      pbuf_free(pcb->refused_data);
 800d524:	f7ff fad4 	bl	800cad0 <pbuf_free>
      pcb->refused_data = NULL;
 800d528:	2300      	movs	r3, #0
 800d52a:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800d52c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d52e:	b130      	cbz	r0, 800d53e <tcp_pcb_purge+0x36>
    struct tcp_seg *next = seg->next;
 800d530:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 800d532:	f7ff ffad 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800d536:	4628      	mov	r0, r5
 800d538:	2d00      	cmp	r5, #0
 800d53a:	d1f9      	bne.n	800d530 <tcp_pcb_purge+0x28>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800d53c:	6765      	str	r5, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800d53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800d542:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800d544:	8623      	strh	r3, [r4, #48]	; 0x30
  while (seg != NULL) {
 800d546:	b128      	cbz	r0, 800d554 <tcp_pcb_purge+0x4c>
    struct tcp_seg *next = seg->next;
 800d548:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 800d54a:	f7ff ffa1 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800d54e:	4628      	mov	r0, r5
 800d550:	2d00      	cmp	r5, #0
 800d552:	d1f9      	bne.n	800d548 <tcp_pcb_purge+0x40>
    tcp_segs_free(pcb->unacked);
 800d554:	6f20      	ldr	r0, [r4, #112]	; 0x70
  while (seg != NULL) {
 800d556:	b128      	cbz	r0, 800d564 <tcp_pcb_purge+0x5c>
    struct tcp_seg *next = seg->next;
 800d558:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 800d55a:	f7ff ff99 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800d55e:	4628      	mov	r0, r5
 800d560:	2d00      	cmp	r5, #0
 800d562:	d1f9      	bne.n	800d558 <tcp_pcb_purge+0x50>
    pcb->unacked = pcb->unsent = NULL;
 800d564:	2300      	movs	r3, #0
 800d566:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800d56a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d570:	4b03      	ldr	r3, [pc, #12]	; (800d580 <tcp_pcb_purge+0x78>)
 800d572:	f640 0251 	movw	r2, #2129	; 0x851
 800d576:	4903      	ldr	r1, [pc, #12]	; (800d584 <tcp_pcb_purge+0x7c>)
 800d578:	4803      	ldr	r0, [pc, #12]	; (800d588 <tcp_pcb_purge+0x80>)
 800d57a:	f006 ba57 	b.w	8013a2c <iprintf>
 800d57e:	bf00      	nop
 800d580:	080153dc 	.word	0x080153dc
 800d584:	08015480 	.word	0x08015480
 800d588:	0801487c 	.word	0x0801487c

0800d58c <tcp_slowtmr>:
{
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800d590:	4e9d      	ldr	r6, [pc, #628]	; (800d808 <tcp_slowtmr+0x27c>)
{
 800d592:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 800d594:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800d830 <tcp_slowtmr+0x2a4>
  ++tcp_ticks;
 800d598:	6832      	ldr	r2, [r6, #0]
  ++tcp_timer_ctr;
 800d59a:	f898 3000 	ldrb.w	r3, [r8]
  ++tcp_ticks;
 800d59e:	3201      	adds	r2, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d5a0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800d834 <tcp_slowtmr+0x2a8>
  ++tcp_timer_ctr;
 800d5a4:	3301      	adds	r3, #1
  ++tcp_ticks;
 800d5a6:	6032      	str	r2, [r6, #0]
  ++tcp_timer_ctr;
 800d5a8:	f888 3000 	strb.w	r3, [r8]
  pcb = tcp_active_pcbs;
 800d5ac:	4b97      	ldr	r3, [pc, #604]	; (800d80c <tcp_slowtmr+0x280>)
 800d5ae:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800d5b0:	2c00      	cmp	r4, #0
 800d5b2:	d07f      	beq.n	800d6b4 <tcp_slowtmr+0x128>
  prev = NULL;
 800d5b4:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d5b6:	7d23      	ldrb	r3, [r4, #20]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 80f6 	beq.w	800d7aa <tcp_slowtmr+0x21e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	f000 80fe 	beq.w	800d7c0 <tcp_slowtmr+0x234>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d5c4:	2b0a      	cmp	r3, #10
 800d5c6:	f000 8106 	beq.w	800d7d6 <tcp_slowtmr+0x24a>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d5ca:	f898 2000 	ldrb.w	r2, [r8]
 800d5ce:	7fa3      	ldrb	r3, [r4, #30]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	f000 810d 	beq.w	800d7f0 <tcp_slowtmr+0x264>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d5d6:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800d5d8:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800d5e0:	f000 810c 	beq.w	800d7fc <tcp_slowtmr+0x270>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d5e4:	2a0b      	cmp	r2, #11
 800d5e6:	f240 80c7 	bls.w	800d778 <tcp_slowtmr+0x1ec>
      ++pcb_remove;
 800d5ea:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 800d5ec:	2b06      	cmp	r3, #6
 800d5ee:	f000 80b6 	beq.w	800d75e <tcp_slowtmr+0x1d2>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d5f2:	f894 a009 	ldrb.w	sl, [r4, #9]
 800d5f6:	f01a 0a08 	ands.w	sl, sl, #8
 800d5fa:	d01d      	beq.n	800d638 <tcp_slowtmr+0xac>
 800d5fc:	2b04      	cmp	r3, #4
 800d5fe:	d007      	beq.n	800d610 <tcp_slowtmr+0x84>
 800d600:	f1a3 0307 	sub.w	r3, r3, #7
 800d604:	fab3 f383 	clz	r3, r3
 800d608:	095b      	lsrs	r3, r3, #5
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 80b1 	beq.w	800d772 <tcp_slowtmr+0x1e6>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d610:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800d614:	4a7e      	ldr	r2, [pc, #504]	; (800d810 <tcp_slowtmr+0x284>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d616:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d618:	e9d4 0c25 	ldrd	r0, ip, [r4, #148]	; 0x94
 800d61c:	fb03 030c 	mla	r3, r3, ip, r0
 800d620:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d624:	6a22      	ldr	r2, [r4, #32]
 800d626:	1a8a      	subs	r2, r1, r2
 800d628:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800d62c:	f240 8155 	bls.w	800d8da <tcp_slowtmr+0x34e>
        ++pcb_remove;
 800d630:	3501      	adds	r5, #1
        ++pcb_reset;
 800d632:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800d636:	b2ed      	uxtb	r5, r5
    if (pcb->ooseq != NULL &&
 800d638:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d63a:	b148      	cbz	r0, 800d650 <tcp_slowtmr+0xc4>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d63c:	6833      	ldr	r3, [r6, #0]
 800d63e:	6a22      	ldr	r2, [r4, #32]
 800d640:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800d644:	1a9b      	subs	r3, r3, r2
 800d646:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    if (pcb->ooseq != NULL &&
 800d64a:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 800d64e:	d252      	bcs.n	800d6f6 <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 800d650:	7d23      	ldrb	r3, [r4, #20]
 800d652:	2b03      	cmp	r3, #3
 800d654:	d05b      	beq.n	800d70e <tcp_slowtmr+0x182>
    if (pcb->state == LAST_ACK) {
 800d656:	2b09      	cmp	r3, #9
 800d658:	d15e      	bne.n	800d718 <tcp_slowtmr+0x18c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d65a:	6833      	ldr	r3, [r6, #0]
 800d65c:	6a22      	ldr	r2, [r4, #32]
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	2bf0      	cmp	r3, #240	; 0xf0
 800d662:	d959      	bls.n	800d718 <tcp_slowtmr+0x18c>
      tcp_pcb_purge(pcb);
 800d664:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800d666:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800d66a:	f7ff ff4d 	bl	800d508 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d66e:	4b67      	ldr	r3, [pc, #412]	; (800d80c <tcp_slowtmr+0x280>)
 800d670:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800d672:	2f00      	cmp	r7, #0
 800d674:	f000 8194 	beq.w	800d9a0 <tcp_slowtmr+0x414>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d678:	42a3      	cmp	r3, r4
 800d67a:	f000 81a7 	beq.w	800d9cc <tcp_slowtmr+0x440>
        prev->next = pcb->next;
 800d67e:	68e3      	ldr	r3, [r4, #12]
 800d680:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 800d682:	f1ba 0f00 	cmp.w	sl, #0
 800d686:	f040 8154 	bne.w	800d932 <tcp_slowtmr+0x3a6>
      tcp_free(pcb2);
 800d68a:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 800d68c:	4d61      	ldr	r5, [pc, #388]	; (800d814 <tcp_slowtmr+0x288>)
      pcb = pcb->next;
 800d68e:	e9d4 4a03 	ldrd	r4, sl, [r4, #12]
      tcp_free(pcb2);
 800d692:	f7ff fde1 	bl	800d258 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d69a:	f1bb 0f00 	cmp.w	fp, #0
 800d69e:	d007      	beq.n	800d6b0 <tcp_slowtmr+0x124>
 800d6a0:	4650      	mov	r0, sl
 800d6a2:	f06f 010c 	mvn.w	r1, #12
 800d6a6:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800d6a8:	782b      	ldrb	r3, [r5, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f47f af7e 	bne.w	800d5ac <tcp_slowtmr+0x20>
  while (pcb != NULL) {
 800d6b0:	2c00      	cmp	r4, #0
 800d6b2:	d180      	bne.n	800d5b6 <tcp_slowtmr+0x2a>
  pcb = tcp_tw_pcbs;
 800d6b4:	4f58      	ldr	r7, [pc, #352]	; (800d818 <tcp_slowtmr+0x28c>)
 800d6b6:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800d6b8:	b1d4      	cbz	r4, 800d6f0 <tcp_slowtmr+0x164>
  prev = NULL;
 800d6ba:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d6bc:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800d834 <tcp_slowtmr+0x2a8>
 800d6c0:	f8df a174 	ldr.w	sl, [pc, #372]	; 800d838 <tcp_slowtmr+0x2ac>
 800d6c4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800d820 <tcp_slowtmr+0x294>
 800d6c8:	7d23      	ldrb	r3, [r4, #20]
 800d6ca:	2b0a      	cmp	r3, #10
 800d6cc:	d006      	beq.n	800d6dc <tcp_slowtmr+0x150>
 800d6ce:	464b      	mov	r3, r9
 800d6d0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d6d4:	4651      	mov	r1, sl
 800d6d6:	4640      	mov	r0, r8
 800d6d8:	f006 f9a8 	bl	8013a2c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6dc:	6833      	ldr	r3, [r6, #0]
 800d6de:	6a22      	ldr	r2, [r4, #32]
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	2bf0      	cmp	r3, #240	; 0xf0
 800d6e4:	f200 8111 	bhi.w	800d90a <tcp_slowtmr+0x37e>
      pcb = pcb->next;
 800d6e8:	4625      	mov	r5, r4
 800d6ea:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800d6ec:	2c00      	cmp	r4, #0
 800d6ee:	d1eb      	bne.n	800d6c8 <tcp_slowtmr+0x13c>
}
 800d6f0:	b005      	add	sp, #20
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 800d6f6:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 800d6fa:	f7ff fec9 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800d6fe:	4658      	mov	r0, fp
 800d700:	2800      	cmp	r0, #0
 800d702:	d1f8      	bne.n	800d6f6 <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 800d704:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 800d706:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d1a3      	bne.n	800d656 <tcp_slowtmr+0xca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d70e:	6833      	ldr	r3, [r6, #0]
 800d710:	6a22      	ldr	r2, [r4, #32]
 800d712:	1a9b      	subs	r3, r3, r2
 800d714:	2b28      	cmp	r3, #40	; 0x28
 800d716:	d8a5      	bhi.n	800d664 <tcp_slowtmr+0xd8>
    if (pcb_remove) {
 800d718:	2d00      	cmp	r5, #0
 800d71a:	d1a3      	bne.n	800d664 <tcp_slowtmr+0xd8>
      ++prev->polltmr;
 800d71c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d71e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800d720:	3301      	adds	r3, #1
      pcb = pcb->next;
 800d722:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 800d726:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800d728:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800d72a:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d72c:	d811      	bhi.n	800d752 <tcp_slowtmr+0x1c6>
        tcp_active_pcbs_changed = 0;
 800d72e:	4f39      	ldr	r7, [pc, #228]	; (800d814 <tcp_slowtmr+0x288>)
        TCP_EVENT_POLL(prev, err);
 800d730:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800d734:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800d736:	703d      	strb	r5, [r7, #0]
        TCP_EVENT_POLL(prev, err);
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f000 8107 	beq.w	800d94c <tcp_slowtmr+0x3c0>
 800d73e:	4621      	mov	r1, r4
 800d740:	6920      	ldr	r0, [r4, #16]
 800d742:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800d744:	783b      	ldrb	r3, [r7, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	f47f af30 	bne.w	800d5ac <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 800d74c:	2800      	cmp	r0, #0
 800d74e:	f000 80fd 	beq.w	800d94c <tcp_slowtmr+0x3c0>
 800d752:	4627      	mov	r7, r4
      pcb = pcb->next;
 800d754:	4654      	mov	r4, sl
  while (pcb != NULL) {
 800d756:	2c00      	cmp	r4, #0
 800d758:	f47f af2d 	bne.w	800d5b6 <tcp_slowtmr+0x2a>
 800d75c:	e7aa      	b.n	800d6b4 <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
 800d75e:	8b63      	ldrh	r3, [r4, #26]
 800d760:	06db      	lsls	r3, r3, #27
 800d762:	d506      	bpl.n	800d772 <tcp_slowtmr+0x1e6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d764:	6833      	ldr	r3, [r6, #0]
 800d766:	6a22      	ldr	r2, [r4, #32]
 800d768:	1a9b      	subs	r3, r3, r2
 800d76a:	2b28      	cmp	r3, #40	; 0x28
 800d76c:	d901      	bls.n	800d772 <tcp_slowtmr+0x1e6>
          ++pcb_remove;
 800d76e:	3501      	adds	r5, #1
 800d770:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 800d772:	f04f 0a00 	mov.w	sl, #0
 800d776:	e75f      	b.n	800d638 <tcp_slowtmr+0xac>
      if (pcb->persist_backoff > 0) {
 800d778:	f894 50a1 	ldrb.w	r5, [r4, #161]	; 0xa1
 800d77c:	2d00      	cmp	r5, #0
 800d77e:	d05d      	beq.n	800d83c <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d780:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d782:	b133      	cbz	r3, 800d792 <tcp_slowtmr+0x206>
 800d784:	464b      	mov	r3, r9
 800d786:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d78a:	4924      	ldr	r1, [pc, #144]	; (800d81c <tcp_slowtmr+0x290>)
 800d78c:	4824      	ldr	r0, [pc, #144]	; (800d820 <tcp_slowtmr+0x294>)
 800d78e:	f006 f94d 	bl	8013a2c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d792:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 812e 	beq.w	800d9f6 <tcp_slowtmr+0x46a>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d79a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800d79e:	2b0b      	cmp	r3, #11
 800d7a0:	f240 80dd 	bls.w	800d95e <tcp_slowtmr+0x3d2>
 800d7a4:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800d7a6:	2501      	movs	r5, #1
 800d7a8:	e720      	b.n	800d5ec <tcp_slowtmr+0x60>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d7aa:	464b      	mov	r3, r9
 800d7ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800d7b0:	491c      	ldr	r1, [pc, #112]	; (800d824 <tcp_slowtmr+0x298>)
 800d7b2:	481b      	ldr	r0, [pc, #108]	; (800d820 <tcp_slowtmr+0x294>)
 800d7b4:	f006 f93a 	bl	8013a2c <iprintf>
 800d7b8:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	f47f af02 	bne.w	800d5c4 <tcp_slowtmr+0x38>
 800d7c0:	464b      	mov	r3, r9
 800d7c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d7c6:	4918      	ldr	r1, [pc, #96]	; (800d828 <tcp_slowtmr+0x29c>)
 800d7c8:	4815      	ldr	r0, [pc, #84]	; (800d820 <tcp_slowtmr+0x294>)
 800d7ca:	f006 f92f 	bl	8013a2c <iprintf>
 800d7ce:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d7d0:	2b0a      	cmp	r3, #10
 800d7d2:	f47f aefa 	bne.w	800d5ca <tcp_slowtmr+0x3e>
 800d7d6:	464b      	mov	r3, r9
 800d7d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d7dc:	4913      	ldr	r1, [pc, #76]	; (800d82c <tcp_slowtmr+0x2a0>)
 800d7de:	4810      	ldr	r0, [pc, #64]	; (800d820 <tcp_slowtmr+0x294>)
 800d7e0:	f006 f924 	bl	8013a2c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d7e4:	f898 2000 	ldrb.w	r2, [r8]
 800d7e8:	7fa3      	ldrb	r3, [r4, #30]
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	f47f aef3 	bne.w	800d5d6 <tcp_slowtmr+0x4a>
      continue;
 800d7f0:	4627      	mov	r7, r4
      pcb = pcb->next;
 800d7f2:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800d7f4:	2c00      	cmp	r4, #0
 800d7f6:	f47f aede 	bne.w	800d5b6 <tcp_slowtmr+0x2a>
 800d7fa:	e75b      	b.n	800d6b4 <tcp_slowtmr+0x128>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d7fc:	2a05      	cmp	r2, #5
 800d7fe:	d9bb      	bls.n	800d778 <tcp_slowtmr+0x1ec>
    pcb_reset = 0;
 800d800:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 800d804:	2501      	movs	r5, #1
 800d806:	e717      	b.n	800d638 <tcp_slowtmr+0xac>
 800d808:	2401bfc0 	.word	0x2401bfc0
 800d80c:	2401bfbc 	.word	0x2401bfbc
 800d810:	10624dd3 	.word	0x10624dd3
 800d814:	2401bfb8 	.word	0x2401bfb8
 800d818:	2401bfcc 	.word	0x2401bfcc
 800d81c:	08015654 	.word	0x08015654
 800d820:	0801487c 	.word	0x0801487c
 800d824:	080155cc 	.word	0x080155cc
 800d828:	080155f8 	.word	0x080155f8
 800d82c:	08015624 	.word	0x08015624
 800d830:	2401402a 	.word	0x2401402a
 800d834:	080153dc 	.word	0x080153dc
 800d838:	08015718 	.word	0x08015718
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d83c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800d840:	2a00      	cmp	r2, #0
 800d842:	db06      	blt.n	800d852 <tcp_slowtmr+0x2c6>
 800d844:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d848:	428a      	cmp	r2, r1
 800d84a:	d002      	beq.n	800d852 <tcp_slowtmr+0x2c6>
          ++pcb->rtime;
 800d84c:	3201      	adds	r2, #1
 800d84e:	b212      	sxth	r2, r2
 800d850:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800d852:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800d856:	4291      	cmp	r1, r2
 800d858:	f73f aec8 	bgt.w	800d5ec <tcp_slowtmr+0x60>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d85c:	4620      	mov	r0, r4
 800d85e:	f002 fd9b 	bl	8010398 <tcp_rexmit_rto_prepare>
 800d862:	2800      	cmp	r0, #0
 800d864:	f040 80cf 	bne.w	800da06 <tcp_slowtmr+0x47a>
 800d868:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d016      	beq.n	800d89c <tcp_slowtmr+0x310>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d86e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d872:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d876:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800da6c <tcp_slowtmr+0x4e0>
 800d87a:	2a0c      	cmp	r2, #12
 800d87c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800d880:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800d884:	bf28      	it	cs
 800d886:	220c      	movcs	r2, #12
 800d888:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 800d88c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800d890:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d892:	428b      	cmp	r3, r1
 800d894:	bfa8      	it	ge
 800d896:	460b      	movge	r3, r1
 800d898:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d89c:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
            pcb->rtime = 0;
 800d8a0:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d8a2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8a6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800d8a8:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 800d8aa:	8622      	strh	r2, [r4, #48]	; 0x30
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
            pcb->cwnd = pcb->mss;
 800d8b0:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800d8b4:	bf28      	it	cs
 800d8b6:	4603      	movcs	r3, r0
            tcp_rexmit_rto_commit(pcb);
 800d8b8:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8ba:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 800d8bc:	085b      	lsrs	r3, r3, #1
 800d8be:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8c2:	4293      	cmp	r3, r2
            pcb->bytes_acked = 0;
 800d8c4:	f04f 0300 	mov.w	r3, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d8c8:	bf38      	it	cc
 800d8ca:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            pcb->bytes_acked = 0;
 800d8ce:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d8d2:	f003 f8a5 	bl	8010a20 <tcp_rexmit_rto_commit>
 800d8d6:	7d23      	ldrb	r3, [r4, #20]
 800d8d8:	e688      	b.n	800d5ec <tcp_slowtmr+0x60>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d8da:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
                 / TCP_SLOW_INTERVAL) {
 800d8de:	495a      	ldr	r1, [pc, #360]	; (800da48 <tcp_slowtmr+0x4bc>)
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d8e0:	fb0c 0303 	mla	r3, ip, r3, r0
                 / TCP_SLOW_INTERVAL) {
 800d8e4:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8e8:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800d8ec:	f67f af41 	bls.w	800d772 <tcp_slowtmr+0x1e6>
        err = tcp_keepalive(pcb);
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f003 f8cf 	bl	8010a94 <tcp_keepalive>
        if (err == ERR_OK) {
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	f47f af3b 	bne.w	800d772 <tcp_slowtmr+0x1e6>
          pcb->keep_cnt_sent++;
 800d8fc:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    pcb_reset = 0;
 800d900:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800d902:	3301      	adds	r3, #1
 800d904:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800d908:	e696      	b.n	800d638 <tcp_slowtmr+0xac>
      tcp_pcb_purge(pcb);
 800d90a:	4620      	mov	r0, r4
 800d90c:	f7ff fdfc 	bl	800d508 <tcp_pcb_purge>
      if (prev != NULL) {
 800d910:	2d00      	cmp	r5, #0
 800d912:	d063      	beq.n	800d9dc <tcp_slowtmr+0x450>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	42a3      	cmp	r3, r4
 800d918:	f000 8086 	beq.w	800da28 <tcp_slowtmr+0x49c>
        prev->next = pcb->next;
 800d91c:	68e3      	ldr	r3, [r4, #12]
 800d91e:	60eb      	str	r3, [r5, #12]
 800d920:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 800d922:	4620      	mov	r0, r4
      pcb = pcb->next;
 800d924:	461c      	mov	r4, r3
      tcp_free(pcb2);
 800d926:	f7ff fc97 	bl	800d258 <tcp_free>
  while (pcb != NULL) {
 800d92a:	2c00      	cmp	r4, #0
 800d92c:	f47f aecc 	bne.w	800d6c8 <tcp_slowtmr+0x13c>
 800d930:	e6de      	b.n	800d6f0 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d932:	8b25      	ldrh	r5, [r4, #24]
 800d934:	1d20      	adds	r0, r4, #4
 800d936:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d938:	4623      	mov	r3, r4
 800d93a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d93c:	9502      	str	r5, [sp, #8]
 800d93e:	8ae5      	ldrh	r5, [r4, #22]
 800d940:	9000      	str	r0, [sp, #0]
 800d942:	4620      	mov	r0, r4
 800d944:	9501      	str	r5, [sp, #4]
 800d946:	f002 fdef 	bl	8010528 <tcp_rst>
 800d94a:	e69e      	b.n	800d68a <tcp_slowtmr+0xfe>
          tcp_output(prev);
 800d94c:	4620      	mov	r0, r4
 800d94e:	4627      	mov	r7, r4
      pcb = pcb->next;
 800d950:	4654      	mov	r4, sl
          tcp_output(prev);
 800d952:	f002 fe6d 	bl	8010630 <tcp_output>
  while (pcb != NULL) {
 800d956:	2c00      	cmp	r4, #0
 800d958:	f47f ae2d 	bne.w	800d5b6 <tcp_slowtmr+0x2a>
 800d95c:	e6aa      	b.n	800d6b4 <tcp_slowtmr+0x128>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d95e:	4a3b      	ldr	r2, [pc, #236]	; (800da4c <tcp_slowtmr+0x4c0>)
 800d960:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
          if (pcb->persist_cnt < backoff_cnt) {
 800d964:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d968:	440a      	add	r2, r1
 800d96a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800d96e:	4293      	cmp	r3, r2
 800d970:	d323      	bcc.n	800d9ba <tcp_slowtmr+0x42e>
            if (pcb->snd_wnd == 0) {
 800d972:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d976:	2d00      	cmp	r5, #0
 800d978:	d04f      	beq.n	800da1a <tcp_slowtmr+0x48e>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d97a:	4629      	mov	r1, r5
 800d97c:	4620      	mov	r0, r4
 800d97e:	f002 fb4d 	bl	801001c <tcp_split_unsent_seg>
 800d982:	2800      	cmp	r0, #0
 800d984:	d058      	beq.n	800da38 <tcp_slowtmr+0x4ac>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d986:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
              pcb->persist_cnt = 0;
 800d98a:	2500      	movs	r5, #0
 800d98c:	7d23      	ldrb	r3, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d98e:	2a06      	cmp	r2, #6
              pcb->persist_cnt = 0;
 800d990:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d994:	f63f ae2a 	bhi.w	800d5ec <tcp_slowtmr+0x60>
                pcb->persist_backoff++;
 800d998:	3201      	adds	r2, #1
 800d99a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 800d99e:	e625      	b.n	800d5ec <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d9a0:	42a3      	cmp	r3, r4
 800d9a2:	d006      	beq.n	800d9b2 <tcp_slowtmr+0x426>
 800d9a4:	464b      	mov	r3, r9
 800d9a6:	f240 5271 	movw	r2, #1393	; 0x571
 800d9aa:	4929      	ldr	r1, [pc, #164]	; (800da50 <tcp_slowtmr+0x4c4>)
 800d9ac:	4829      	ldr	r0, [pc, #164]	; (800da54 <tcp_slowtmr+0x4c8>)
 800d9ae:	f006 f83d 	bl	8013a2c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d9b2:	68e3      	ldr	r3, [r4, #12]
 800d9b4:	4a28      	ldr	r2, [pc, #160]	; (800da58 <tcp_slowtmr+0x4cc>)
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	e663      	b.n	800d682 <tcp_slowtmr+0xf6>
            pcb->persist_cnt++;
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800d9be:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800d9c0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 800d9c4:	d2d5      	bcs.n	800d972 <tcp_slowtmr+0x3e6>
 800d9c6:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 800d9c8:	2500      	movs	r5, #0
 800d9ca:	e60f      	b.n	800d5ec <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d9cc:	464b      	mov	r3, r9
 800d9ce:	f240 526d 	movw	r2, #1389	; 0x56d
 800d9d2:	4922      	ldr	r1, [pc, #136]	; (800da5c <tcp_slowtmr+0x4d0>)
 800d9d4:	481f      	ldr	r0, [pc, #124]	; (800da54 <tcp_slowtmr+0x4c8>)
 800d9d6:	f006 f829 	bl	8013a2c <iprintf>
 800d9da:	e650      	b.n	800d67e <tcp_slowtmr+0xf2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	42a3      	cmp	r3, r4
 800d9e0:	d006      	beq.n	800d9f0 <tcp_slowtmr+0x464>
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d9e8:	491d      	ldr	r1, [pc, #116]	; (800da60 <tcp_slowtmr+0x4d4>)
 800d9ea:	4640      	mov	r0, r8
 800d9ec:	f006 f81e 	bl	8013a2c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d9f0:	68e3      	ldr	r3, [r4, #12]
 800d9f2:	603b      	str	r3, [r7, #0]
 800d9f4:	e795      	b.n	800d922 <tcp_slowtmr+0x396>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d9f6:	464b      	mov	r3, r9
 800d9f8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d9fc:	4919      	ldr	r1, [pc, #100]	; (800da64 <tcp_slowtmr+0x4d8>)
 800d9fe:	4815      	ldr	r0, [pc, #84]	; (800da54 <tcp_slowtmr+0x4c8>)
 800da00:	f006 f814 	bl	8013a2c <iprintf>
 800da04:	e6c9      	b.n	800d79a <tcp_slowtmr+0x20e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800da06:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800da08:	7d23      	ldrb	r3, [r4, #20]
 800da0a:	2a00      	cmp	r2, #0
 800da0c:	f47f adee 	bne.w	800d5ec <tcp_slowtmr+0x60>
 800da10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800da12:	2a00      	cmp	r2, #0
 800da14:	f47f af29 	bne.w	800d86a <tcp_slowtmr+0x2de>
 800da18:	e5e8      	b.n	800d5ec <tcp_slowtmr+0x60>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800da1a:	4620      	mov	r0, r4
 800da1c:	f003 f864 	bl	8010ae8 <tcp_zero_window_probe>
 800da20:	2800      	cmp	r0, #0
 800da22:	d0b0      	beq.n	800d986 <tcp_slowtmr+0x3fa>
 800da24:	7d23      	ldrb	r3, [r4, #20]
 800da26:	e5e1      	b.n	800d5ec <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800da28:	464b      	mov	r3, r9
 800da2a:	f240 52af 	movw	r2, #1455	; 0x5af
 800da2e:	490e      	ldr	r1, [pc, #56]	; (800da68 <tcp_slowtmr+0x4dc>)
 800da30:	4640      	mov	r0, r8
 800da32:	f005 fffb 	bl	8013a2c <iprintf>
 800da36:	e771      	b.n	800d91c <tcp_slowtmr+0x390>
                if (tcp_output(pcb) == ERR_OK) {
 800da38:	4620      	mov	r0, r4
 800da3a:	f002 fdf9 	bl	8010630 <tcp_output>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d1a1      	bne.n	800d986 <tcp_slowtmr+0x3fa>
    pcb_remove = 0;
 800da42:	4605      	mov	r5, r0
 800da44:	e7ee      	b.n	800da24 <tcp_slowtmr+0x498>
 800da46:	bf00      	nop
 800da48:	10624dd3 	.word	0x10624dd3
 800da4c:	08015524 	.word	0x08015524
 800da50:	080156ec 	.word	0x080156ec
 800da54:	0801487c 	.word	0x0801487c
 800da58:	2401bfbc 	.word	0x2401bfbc
 800da5c:	080156c0 	.word	0x080156c0
 800da60:	08015770 	.word	0x08015770
 800da64:	08015688 	.word	0x08015688
 800da68:	08015748 	.word	0x08015748
 800da6c:	08015334 	.word	0x08015334

0800da70 <tcp_pcb_remove>:
{
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800da74:	460c      	mov	r4, r1
 800da76:	2900      	cmp	r1, #0
 800da78:	d04f      	beq.n	800db1a <tcp_pcb_remove+0xaa>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da7a:	2d00      	cmp	r5, #0
 800da7c:	d056      	beq.n	800db2c <tcp_pcb_remove+0xbc>
  TCP_RMV(pcblist, pcb);
 800da7e:	682a      	ldr	r2, [r5, #0]
 800da80:	42a2      	cmp	r2, r4
 800da82:	d047      	beq.n	800db14 <tcp_pcb_remove+0xa4>
 800da84:	b14a      	cbz	r2, 800da9a <tcp_pcb_remove+0x2a>
 800da86:	68d3      	ldr	r3, [r2, #12]
 800da88:	429c      	cmp	r4, r3
 800da8a:	d03f      	beq.n	800db0c <tcp_pcb_remove+0x9c>
 800da8c:	b12b      	cbz	r3, 800da9a <tcp_pcb_remove+0x2a>
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	42a2      	cmp	r2, r4
 800da92:	d03c      	beq.n	800db0e <tcp_pcb_remove+0x9e>
 800da94:	4613      	mov	r3, r2
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1f9      	bne.n	800da8e <tcp_pcb_remove+0x1e>
 800da9a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800da9c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800da9e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800daa0:	f7ff fd32 	bl	800d508 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800daa4:	7d23      	ldrb	r3, [r4, #20]
 800daa6:	2b0a      	cmp	r3, #10
 800daa8:	d02a      	beq.n	800db00 <tcp_pcb_remove+0x90>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d028      	beq.n	800db00 <tcp_pcb_remove+0x90>
      (pcb->flags & TF_ACK_DELAY)) {
 800daae:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800dab0:	07da      	lsls	r2, r3, #31
 800dab2:	d41e      	bmi.n	800daf2 <tcp_pcb_remove+0x82>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dab4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dab6:	b133      	cbz	r3, 800dac6 <tcp_pcb_remove+0x56>
 800dab8:	4b20      	ldr	r3, [pc, #128]	; (800db3c <tcp_pcb_remove+0xcc>)
 800daba:	f640 0293 	movw	r2, #2195	; 0x893
 800dabe:	4920      	ldr	r1, [pc, #128]	; (800db40 <tcp_pcb_remove+0xd0>)
 800dac0:	4820      	ldr	r0, [pc, #128]	; (800db44 <tcp_pcb_remove+0xd4>)
 800dac2:	f005 ffb3 	bl	8013a2c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dac6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dac8:	b133      	cbz	r3, 800dad8 <tcp_pcb_remove+0x68>
 800daca:	4b1c      	ldr	r3, [pc, #112]	; (800db3c <tcp_pcb_remove+0xcc>)
 800dacc:	f640 0294 	movw	r2, #2196	; 0x894
 800dad0:	491d      	ldr	r1, [pc, #116]	; (800db48 <tcp_pcb_remove+0xd8>)
 800dad2:	481c      	ldr	r0, [pc, #112]	; (800db44 <tcp_pcb_remove+0xd4>)
 800dad4:	f005 ffaa 	bl	8013a2c <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dad8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dada:	b133      	cbz	r3, 800daea <tcp_pcb_remove+0x7a>
 800dadc:	4b17      	ldr	r3, [pc, #92]	; (800db3c <tcp_pcb_remove+0xcc>)
 800dade:	f640 0296 	movw	r2, #2198	; 0x896
 800dae2:	491a      	ldr	r1, [pc, #104]	; (800db4c <tcp_pcb_remove+0xdc>)
 800dae4:	4817      	ldr	r0, [pc, #92]	; (800db44 <tcp_pcb_remove+0xd4>)
 800dae6:	f005 ffa1 	bl	8013a2c <iprintf>
  pcb->state = CLOSED;
 800daea:	2300      	movs	r3, #0
 800daec:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800daee:	82e3      	strh	r3, [r4, #22]
}
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800daf2:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800daf6:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800daf8:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800dafa:	f002 fd99 	bl	8010630 <tcp_output>
 800dafe:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 800db00:	2b01      	cmp	r3, #1
 800db02:	d0f2      	beq.n	800daea <tcp_pcb_remove+0x7a>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1d6      	bne.n	800dab8 <tcp_pcb_remove+0x48>
 800db0a:	e7dc      	b.n	800dac6 <tcp_pcb_remove+0x56>
  TCP_RMV(pcblist, pcb);
 800db0c:	4613      	mov	r3, r2
 800db0e:	68e2      	ldr	r2, [r4, #12]
 800db10:	60da      	str	r2, [r3, #12]
 800db12:	e7c2      	b.n	800da9a <tcp_pcb_remove+0x2a>
 800db14:	68e3      	ldr	r3, [r4, #12]
 800db16:	602b      	str	r3, [r5, #0]
 800db18:	e7bf      	b.n	800da9a <tcp_pcb_remove+0x2a>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800db1a:	4b08      	ldr	r3, [pc, #32]	; (800db3c <tcp_pcb_remove+0xcc>)
 800db1c:	f640 0283 	movw	r2, #2179	; 0x883
 800db20:	490b      	ldr	r1, [pc, #44]	; (800db50 <tcp_pcb_remove+0xe0>)
 800db22:	4808      	ldr	r0, [pc, #32]	; (800db44 <tcp_pcb_remove+0xd4>)
 800db24:	f005 ff82 	bl	8013a2c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800db28:	2d00      	cmp	r5, #0
 800db2a:	d1a8      	bne.n	800da7e <tcp_pcb_remove+0xe>
 800db2c:	4b03      	ldr	r3, [pc, #12]	; (800db3c <tcp_pcb_remove+0xcc>)
 800db2e:	f640 0284 	movw	r2, #2180	; 0x884
 800db32:	4908      	ldr	r1, [pc, #32]	; (800db54 <tcp_pcb_remove+0xe4>)
 800db34:	4803      	ldr	r0, [pc, #12]	; (800db44 <tcp_pcb_remove+0xd4>)
 800db36:	f005 ff79 	bl	8013a2c <iprintf>
 800db3a:	e7a0      	b.n	800da7e <tcp_pcb_remove+0xe>
 800db3c:	080153dc 	.word	0x080153dc
 800db40:	080154d8 	.word	0x080154d8
 800db44:	0801487c 	.word	0x0801487c
 800db48:	080154f0 	.word	0x080154f0
 800db4c:	0801550c 	.word	0x0801550c
 800db50:	0801549c 	.word	0x0801549c
 800db54:	080154b8 	.word	0x080154b8

0800db58 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800db58:	2800      	cmp	r0, #0
 800db5a:	f000 8082 	beq.w	800dc62 <tcp_abandon+0x10a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800db5e:	7d03      	ldrb	r3, [r0, #20]
 800db60:	2b01      	cmp	r3, #1
{
 800db62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db66:	460d      	mov	r5, r1
 800db68:	b085      	sub	sp, #20
 800db6a:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800db6c:	d065      	beq.n	800dc3a <tcp_abandon+0xe2>
  if (pcb->state == TIME_WAIT) {
 800db6e:	2b0a      	cmp	r3, #10
 800db70:	d06d      	beq.n	800dc4e <tcp_abandon+0xf6>
    seqno = pcb->snd_nxt;
 800db72:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800db76:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800db7a:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800db7e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800db82:	8ae7      	ldrh	r7, [r4, #22]
    if (pcb->state == CLOSED) {
 800db84:	b98b      	cbnz	r3, 800dbaa <tcp_abandon+0x52>
      if (pcb->local_port != 0) {
 800db86:	2f00      	cmp	r7, #0
 800db88:	d042      	beq.n	800dc10 <tcp_abandon+0xb8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db8a:	4b3d      	ldr	r3, [pc, #244]	; (800dc80 <tcp_abandon+0x128>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	42a2      	cmp	r2, r4
 800db90:	d04c      	beq.n	800dc2c <tcp_abandon+0xd4>
 800db92:	2a00      	cmp	r2, #0
 800db94:	d04c      	beq.n	800dc30 <tcp_abandon+0xd8>
 800db96:	68d3      	ldr	r3, [r2, #12]
 800db98:	429c      	cmp	r4, r3
 800db9a:	d069      	beq.n	800dc70 <tcp_abandon+0x118>
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d047      	beq.n	800dc30 <tcp_abandon+0xd8>
 800dba0:	68da      	ldr	r2, [r3, #12]
 800dba2:	42a2      	cmp	r2, r4
 800dba4:	d065      	beq.n	800dc72 <tcp_abandon+0x11a>
 800dba6:	4613      	mov	r3, r2
 800dba8:	e7f8      	b.n	800db9c <tcp_abandon+0x44>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4835      	ldr	r0, [pc, #212]	; (800dc84 <tcp_abandon+0x12c>)
 800dbae:	f7ff ff5f 	bl	800da70 <tcp_pcb_remove>
 800dbb2:	4b35      	ldr	r3, [pc, #212]	; (800dc88 <tcp_abandon+0x130>)
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800dbb8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800dbba:	b130      	cbz	r0, 800dbca <tcp_abandon+0x72>
    struct tcp_seg *next = seg->next;
 800dbbc:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 800dbc0:	f7ff fc66 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800dbc4:	4658      	mov	r0, fp
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d1f8      	bne.n	800dbbc <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 800dbca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800dbcc:	b130      	cbz	r0, 800dbdc <tcp_abandon+0x84>
    struct tcp_seg *next = seg->next;
 800dbce:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 800dbd2:	f7ff fc5d 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d1f8      	bne.n	800dbce <tcp_abandon+0x76>
    if (pcb->ooseq != NULL) {
 800dbdc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800dbde:	b130      	cbz	r0, 800dbee <tcp_abandon+0x96>
    struct tcp_seg *next = seg->next;
 800dbe0:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 800dbe4:	f7ff fc54 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800dbe8:	4658      	mov	r0, fp
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d1f8      	bne.n	800dbe0 <tcp_abandon+0x88>
    tcp_backlog_accepted(pcb);
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f7ff fb50 	bl	800d294 <tcp_backlog_accepted>
    if (send_rst) {
 800dbf4:	b975      	cbnz	r5, 800dc14 <tcp_abandon+0xbc>
    tcp_free(pcb);
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f7ff fb2e 	bl	800d258 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dbfc:	2e00      	cmp	r6, #0
 800dbfe:	d03b      	beq.n	800dc78 <tcp_abandon+0x120>
 800dc00:	4640      	mov	r0, r8
 800dc02:	f06f 010c 	mvn.w	r1, #12
 800dc06:	4633      	mov	r3, r6
}
 800dc08:	b005      	add	sp, #20
 800dc0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dc0e:	4718      	bx	r3
    int send_rst = 0;
 800dc10:	461d      	mov	r5, r3
 800dc12:	e7d1      	b.n	800dbb8 <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dc14:	8b23      	ldrh	r3, [r4, #24]
 800dc16:	1d25      	adds	r5, r4, #4
 800dc18:	4652      	mov	r2, sl
 800dc1a:	4649      	mov	r1, r9
 800dc1c:	9302      	str	r3, [sp, #8]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4623      	mov	r3, r4
 800dc22:	9701      	str	r7, [sp, #4]
 800dc24:	9500      	str	r5, [sp, #0]
 800dc26:	f002 fc7f 	bl	8010528 <tcp_rst>
 800dc2a:	e7e4      	b.n	800dbf6 <tcp_abandon+0x9e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc2c:	68e2      	ldr	r2, [r4, #12]
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	2300      	movs	r3, #0
    u16_t local_port = 0;
 800dc32:	461f      	mov	r7, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc34:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
 800dc36:	461d      	mov	r5, r3
 800dc38:	e7be      	b.n	800dbb8 <tcp_abandon+0x60>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc3a:	4b14      	ldr	r3, [pc, #80]	; (800dc8c <tcp_abandon+0x134>)
 800dc3c:	f240 2241 	movw	r2, #577	; 0x241
 800dc40:	4913      	ldr	r1, [pc, #76]	; (800dc90 <tcp_abandon+0x138>)
 800dc42:	4814      	ldr	r0, [pc, #80]	; (800dc94 <tcp_abandon+0x13c>)
 800dc44:	f005 fef2 	bl	8013a2c <iprintf>
 800dc48:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state == TIME_WAIT) {
 800dc4a:	2b0a      	cmp	r3, #10
 800dc4c:	d191      	bne.n	800db72 <tcp_abandon+0x1a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4811      	ldr	r0, [pc, #68]	; (800dc98 <tcp_abandon+0x140>)
 800dc52:	f7ff ff0d 	bl	800da70 <tcp_pcb_remove>
    tcp_free(pcb);
 800dc56:	4620      	mov	r0, r4
}
 800dc58:	b005      	add	sp, #20
 800dc5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 800dc5e:	f7ff bafb 	b.w	800d258 <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dc62:	4b0a      	ldr	r3, [pc, #40]	; (800dc8c <tcp_abandon+0x134>)
 800dc64:	f240 223d 	movw	r2, #573	; 0x23d
 800dc68:	490c      	ldr	r1, [pc, #48]	; (800dc9c <tcp_abandon+0x144>)
 800dc6a:	480a      	ldr	r0, [pc, #40]	; (800dc94 <tcp_abandon+0x13c>)
 800dc6c:	f005 bede 	b.w	8013a2c <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc70:	4613      	mov	r3, r2
 800dc72:	68e2      	ldr	r2, [r4, #12]
 800dc74:	60da      	str	r2, [r3, #12]
 800dc76:	e7db      	b.n	800dc30 <tcp_abandon+0xd8>
}
 800dc78:	b005      	add	sp, #20
 800dc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7e:	bf00      	nop
 800dc80:	2401bfc8 	.word	0x2401bfc8
 800dc84:	2401bfbc 	.word	0x2401bfbc
 800dc88:	2401bfb8 	.word	0x2401bfb8
 800dc8c:	080153dc 	.word	0x080153dc
 800dc90:	080152dc 	.word	0x080152dc
 800dc94:	0801487c 	.word	0x0801487c
 800dc98:	2401bfcc 	.word	0x2401bfcc
 800dc9c:	080152c0 	.word	0x080152c0

0800dca0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800dca0:	2101      	movs	r1, #1
 800dca2:	f7ff bf59 	b.w	800db58 <tcp_abandon>
 800dca6:	bf00      	nop

0800dca8 <tcp_netif_ip_addr_changed_pcblist>:
{
 800dca8:	b570      	push	{r4, r5, r6, lr}
 800dcaa:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dcac:	4606      	mov	r6, r0
 800dcae:	b178      	cbz	r0, 800dcd0 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 800dcb0:	b13c      	cbz	r4, 800dcc2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dcb2:	6822      	ldr	r2, [r4, #0]
 800dcb4:	6833      	ldr	r3, [r6, #0]
 800dcb6:	68e5      	ldr	r5, [r4, #12]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d003      	beq.n	800dcc4 <tcp_netif_ip_addr_changed_pcblist+0x1c>
  while (pcb != NULL) {
 800dcbc:	462c      	mov	r4, r5
 800dcbe:	2c00      	cmp	r4, #0
 800dcc0:	d1f7      	bne.n	800dcb2 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
  tcp_abandon(pcb, 1);
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	f7ff ff46 	bl	800db58 <tcp_abandon>
  while (pcb != NULL) {
 800dccc:	462c      	mov	r4, r5
 800dcce:	e7f6      	b.n	800dcbe <tcp_netif_ip_addr_changed_pcblist+0x16>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dcd0:	4b03      	ldr	r3, [pc, #12]	; (800dce0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800dcd2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dcd6:	4903      	ldr	r1, [pc, #12]	; (800dce4 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800dcd8:	4803      	ldr	r0, [pc, #12]	; (800dce8 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800dcda:	f005 fea7 	bl	8013a2c <iprintf>
 800dcde:	e7e7      	b.n	800dcb0 <tcp_netif_ip_addr_changed_pcblist+0x8>
 800dce0:	080153dc 	.word	0x080153dc
 800dce4:	08015420 	.word	0x08015420
 800dce8:	0801487c 	.word	0x0801487c

0800dcec <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcec:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <tcp_kill_state+0x40>)
 800dcee:	6819      	ldr	r1, [r3, #0]
 800dcf0:	b1d1      	cbz	r1, 800dd28 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcf2:	4b0f      	ldr	r3, [pc, #60]	; (800dd30 <tcp_kill_state+0x44>)
  inactivity = 0;
 800dcf4:	2200      	movs	r2, #0
{
 800dcf6:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcf8:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800dcfa:	4614      	mov	r4, r2
 800dcfc:	e001      	b.n	800dd02 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfe:	68c9      	ldr	r1, [r1, #12]
 800dd00:	b159      	cbz	r1, 800dd1a <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 800dd02:	7d0b      	ldrb	r3, [r1, #20]
 800dd04:	4283      	cmp	r3, r0
 800dd06:	d1fa      	bne.n	800dcfe <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd08:	6a0b      	ldr	r3, [r1, #32]
 800dd0a:	1aeb      	subs	r3, r5, r3
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d3f6      	bcc.n	800dcfe <tcp_kill_state+0x12>
 800dd10:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd12:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd14:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd16:	2900      	cmp	r1, #0
 800dd18:	d1f3      	bne.n	800dd02 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 800dd1a:	b11c      	cbz	r4, 800dd24 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 800dd1c:	4620      	mov	r0, r4
}
 800dd1e:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800dd20:	f7ff bf1a 	b.w	800db58 <tcp_abandon>
}
 800dd24:	bc30      	pop	{r4, r5}
 800dd26:	4770      	bx	lr
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	2401bfbc 	.word	0x2401bfbc
 800dd30:	2401bfc0 	.word	0x2401bfc0

0800dd34 <tcp_alloc>:
{
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd38:	2001      	movs	r0, #1
 800dd3a:	f7fe fbb3 	bl	800c4a4 <memp_malloc>
  if (pcb == NULL) {
 800dd3e:	b360      	cbz	r0, 800dd9a <tcp_alloc+0x66>
 800dd40:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dd42:	22a4      	movs	r2, #164	; 0xa4
 800dd44:	2100      	movs	r1, #0
 800dd46:	4618      	mov	r0, r3
    pcb->ttl = TCP_TTL;
 800dd48:	26ff      	movs	r6, #255	; 0xff
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dd4a:	f005 fdbf 	bl	80138cc <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800dd4e:	f640 3168 	movw	r1, #2920	; 0xb68
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dd52:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 800dd54:	4a53      	ldr	r2, [pc, #332]	; (800dea4 <tcp_alloc+0x170>)
    pcb->tmr = tcp_ticks;
 800dd56:	4854      	ldr	r0, [pc, #336]	; (800dea8 <tcp_alloc+0x174>)
    pcb->cwnd = 1;
 800dd58:	2501      	movs	r5, #1
    pcb->last_timer = tcp_timer_ctr;
 800dd5a:	7817      	ldrb	r7, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dd5c:	2206      	movs	r2, #6
    pcb->tmr = tcp_ticks;
 800dd5e:	6800      	ldr	r0, [r0, #0]
    pcb->snd_buf = TCP_SND_BUF;
 800dd60:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
    pcb->ssthresh = TCP_SND_BUF;
 800dd64:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd68:	4950      	ldr	r1, [pc, #320]	; (800deac <tcp_alloc+0x178>)
    pcb->prio = prio;
 800dd6a:	755c      	strb	r4, [r3, #21]
    pcb->tmr = tcp_ticks;
 800dd6c:	6218      	str	r0, [r3, #32]
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800dd6e:	2009      	movs	r0, #9
    pcb->ttl = TCP_TTL;
 800dd70:	72de      	strb	r6, [r3, #11]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd72:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->rtime = -1;
 800dd74:	4e4e      	ldr	r6, [pc, #312]	; (800deb0 <tcp_alloc+0x17c>)
    pcb->recv = tcp_recv_null;
 800dd76:	4c4f      	ldr	r4, [pc, #316]	; (800deb4 <tcp_alloc+0x180>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dd78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dd7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd7e:	494e      	ldr	r1, [pc, #312]	; (800deb8 <tcp_alloc+0x184>)
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800dd80:	4a4e      	ldr	r2, [pc, #312]	; (800debc <tcp_alloc+0x188>)
    pcb->last_timer = tcp_timer_ctr;
 800dd82:	779f      	strb	r7, [r3, #30]
    pcb->rtime = -1;
 800dd84:	631e      	str	r6, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dd86:	f8a3 5048 	strh.w	r5, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800dd8a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800dd8e:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800dd92:	e9c3 1225 	strd	r1, r2, [r3, #148]	; 0x94
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dd9a:	4d49      	ldr	r5, [pc, #292]	; (800dec0 <tcp_alloc+0x18c>)
 800dd9c:	682b      	ldr	r3, [r5, #0]
  while (pcb != NULL) {
 800dd9e:	b913      	cbnz	r3, 800dda6 <tcp_alloc+0x72>
 800dda0:	e00e      	b.n	800ddc0 <tcp_alloc+0x8c>
 800dda2:	4633      	mov	r3, r6
 800dda4:	b166      	cbz	r6, 800ddc0 <tcp_alloc+0x8c>
    if (pcb->flags & TF_CLOSEPEND) {
 800dda6:	8b5a      	ldrh	r2, [r3, #26]
    struct tcp_pcb *next = pcb->next;
 800dda8:	68de      	ldr	r6, [r3, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800ddaa:	0711      	lsls	r1, r2, #28
 800ddac:	d5f9      	bpl.n	800dda2 <tcp_alloc+0x6e>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ddae:	f022 0208 	bic.w	r2, r2, #8
      tcp_close_shutdown_fin(pcb);
 800ddb2:	4618      	mov	r0, r3
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ddb4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ddb6:	f7ff fa99 	bl	800d2ec <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800ddba:	4633      	mov	r3, r6
 800ddbc:	2e00      	cmp	r6, #0
 800ddbe:	d1f2      	bne.n	800dda6 <tcp_alloc+0x72>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddc0:	4b40      	ldr	r3, [pc, #256]	; (800dec4 <tcp_alloc+0x190>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	b193      	cbz	r3, 800ddec <tcp_alloc+0xb8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ddc6:	4a38      	ldr	r2, [pc, #224]	; (800dea8 <tcp_alloc+0x174>)
 800ddc8:	4618      	mov	r0, r3
 800ddca:	6a19      	ldr	r1, [r3, #32]
 800ddcc:	6816      	ldr	r6, [r2, #0]
 800ddce:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	b143      	cbz	r3, 800dde6 <tcp_alloc+0xb2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ddd4:	6a1a      	ldr	r2, [r3, #32]
 800ddd6:	1ab2      	subs	r2, r6, r2
 800ddd8:	428a      	cmp	r2, r1
 800ddda:	d3f9      	bcc.n	800ddd0 <tcp_alloc+0x9c>
 800dddc:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddde:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dde0:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1f6      	bne.n	800ddd4 <tcp_alloc+0xa0>
  tcp_abandon(pcb, 1);
 800dde6:	2101      	movs	r1, #1
 800dde8:	f7ff feb6 	bl	800db58 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddec:	2001      	movs	r0, #1
 800ddee:	f7fe fb59 	bl	800c4a4 <memp_malloc>
    if (pcb == NULL) {
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	b130      	cbz	r0, 800de04 <tcp_alloc+0xd0>
 800ddf6:	4a34      	ldr	r2, [pc, #208]	; (800dec8 <tcp_alloc+0x194>)
 800ddf8:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 800ddfc:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800ddfe:	3a01      	subs	r2, #1
 800de00:	800a      	strh	r2, [r1, #0]
 800de02:	e79e      	b.n	800dd42 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800de04:	2009      	movs	r0, #9
 800de06:	f7ff ff71 	bl	800dcec <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de0a:	2001      	movs	r0, #1
 800de0c:	f7fe fb4a 	bl	800c4a4 <memp_malloc>
      if (pcb == NULL) {
 800de10:	4603      	mov	r3, r0
 800de12:	b138      	cbz	r0, 800de24 <tcp_alloc+0xf0>
 800de14:	4a2c      	ldr	r2, [pc, #176]	; (800dec8 <tcp_alloc+0x194>)
 800de16:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 800de1a:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800de1c:	3a01      	subs	r2, #1
 800de1e:	b292      	uxth	r2, r2
 800de20:	800a      	strh	r2, [r1, #0]
 800de22:	e7ec      	b.n	800ddfe <tcp_alloc+0xca>
        tcp_kill_state(CLOSING);
 800de24:	2008      	movs	r0, #8
 800de26:	f7ff ff61 	bl	800dcec <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de2a:	2001      	movs	r0, #1
 800de2c:	f7fe fb3a 	bl	800c4a4 <memp_malloc>
        if (pcb == NULL) {
 800de30:	4603      	mov	r3, r0
 800de32:	b138      	cbz	r0, 800de44 <tcp_alloc+0x110>
 800de34:	4a24      	ldr	r2, [pc, #144]	; (800dec8 <tcp_alloc+0x194>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800de36:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 800de3a:	880a      	ldrh	r2, [r1, #0]
 800de3c:	3a01      	subs	r2, #1
 800de3e:	b292      	uxth	r2, r2
 800de40:	800a      	strh	r2, [r1, #0]
 800de42:	e7eb      	b.n	800de1c <tcp_alloc+0xe8>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800de44:	0622      	lsls	r2, r4, #24
 800de46:	d42b      	bmi.n	800dea0 <tcp_alloc+0x16c>
  if (mprio == 0) {
 800de48:	b1ec      	cbz	r4, 800de86 <tcp_alloc+0x152>
 800de4a:	4622      	mov	r2, r4
  mprio--;
 800de4c:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de4e:	682a      	ldr	r2, [r5, #0]
  mprio--;
 800de50:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de52:	b1c2      	cbz	r2, 800de86 <tcp_alloc+0x152>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800de54:	4814      	ldr	r0, [pc, #80]	; (800dea8 <tcp_alloc+0x174>)
  inactivity = 0;
 800de56:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800de58:	6806      	ldr	r6, [r0, #0]
 800de5a:	e005      	b.n	800de68 <tcp_alloc+0x134>
 800de5c:	6a15      	ldr	r5, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800de5e:	1b77      	subs	r7, r6, r5
    if ((pcb->prio < mprio) ||
 800de60:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 800de62:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de64:	68d2      	ldr	r2, [r2, #12]
 800de66:	b14a      	cbz	r2, 800de7c <tcp_alloc+0x148>
    if ((pcb->prio < mprio) ||
 800de68:	7d50      	ldrb	r0, [r2, #21]
 800de6a:	4281      	cmp	r1, r0
 800de6c:	d8f6      	bhi.n	800de5c <tcp_alloc+0x128>
 800de6e:	d1f9      	bne.n	800de64 <tcp_alloc+0x130>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800de70:	6a15      	ldr	r5, [r2, #32]
 800de72:	eba6 0c05 	sub.w	ip, r6, r5
 800de76:	4567      	cmp	r7, ip
 800de78:	d8f4      	bhi.n	800de64 <tcp_alloc+0x130>
 800de7a:	e7f0      	b.n	800de5e <tcp_alloc+0x12a>
  if (inactive != NULL) {
 800de7c:	b11b      	cbz	r3, 800de86 <tcp_alloc+0x152>
  tcp_abandon(pcb, 1);
 800de7e:	4618      	mov	r0, r3
 800de80:	2101      	movs	r1, #1
 800de82:	f7ff fe69 	bl	800db58 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de86:	2001      	movs	r0, #1
 800de88:	f7fe fb0c 	bl	800c4a4 <memp_malloc>
          if (pcb != NULL) {
 800de8c:	4603      	mov	r3, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	d081      	beq.n	800dd96 <tcp_alloc+0x62>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800de92:	4a0d      	ldr	r2, [pc, #52]	; (800dec8 <tcp_alloc+0x194>)
 800de94:	f8d2 00b8 	ldr.w	r0, [r2, #184]	; 0xb8
 800de98:	8801      	ldrh	r1, [r0, #0]
 800de9a:	3901      	subs	r1, #1
 800de9c:	8001      	strh	r1, [r0, #0]
 800de9e:	e7ca      	b.n	800de36 <tcp_alloc+0x102>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dea0:	227f      	movs	r2, #127	; 0x7f
 800dea2:	e7d3      	b.n	800de4c <tcp_alloc+0x118>
 800dea4:	2401402a 	.word	0x2401402a
 800dea8:	2401bfc0 	.word	0x2401bfc0
 800deac:	16d016d0 	.word	0x16d016d0
 800deb0:	0218ffff 	.word	0x0218ffff
 800deb4:	0800e0b5 	.word	0x0800e0b5
 800deb8:	006ddd00 	.word	0x006ddd00
 800debc:	000124f8 	.word	0x000124f8
 800dec0:	2401bfbc 	.word	0x2401bfbc
 800dec4:	2401bfcc 	.word	0x2401bfcc
 800dec8:	2401bdf8 	.word	0x2401bdf8

0800decc <tcp_close_shutdown>:
{
 800decc:	b530      	push	{r4, r5, lr}
 800dece:	460d      	mov	r5, r1
 800ded0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ded2:	4604      	mov	r4, r0
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d077      	beq.n	800dfc8 <tcp_close_shutdown+0xfc>
 800ded8:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800deda:	b11d      	cbz	r5, 800dee4 <tcp_close_shutdown+0x18>
 800dedc:	2b04      	cmp	r3, #4
 800dede:	d019      	beq.n	800df14 <tcp_close_shutdown+0x48>
 800dee0:	2b07      	cmp	r3, #7
 800dee2:	d017      	beq.n	800df14 <tcp_close_shutdown+0x48>
  switch (pcb->state) {
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d077      	beq.n	800dfd8 <tcp_close_shutdown+0x10c>
 800dee8:	d337      	bcc.n	800df5a <tcp_close_shutdown+0x8e>
 800deea:	2b02      	cmp	r3, #2
 800deec:	d166      	bne.n	800dfbc <tcp_close_shutdown+0xf0>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800deee:	4621      	mov	r1, r4
 800def0:	4855      	ldr	r0, [pc, #340]	; (800e048 <tcp_close_shutdown+0x17c>)
 800def2:	f7ff fdbd 	bl	800da70 <tcp_pcb_remove>
 800def6:	4b55      	ldr	r3, [pc, #340]	; (800e04c <tcp_close_shutdown+0x180>)
 800def8:	2201      	movs	r2, #1
      tcp_free(pcb);
 800defa:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800defc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800defe:	f7ff f9ab 	bl	800d258 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
 800df02:	4a53      	ldr	r2, [pc, #332]	; (800e050 <tcp_close_shutdown+0x184>)
 800df04:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800df08:	3301      	adds	r3, #1
 800df0a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
 800df0e:	2000      	movs	r0, #0
 800df10:	b005      	add	sp, #20
 800df12:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800df14:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800df16:	2a00      	cmp	r2, #0
 800df18:	d031      	beq.n	800df7e <tcp_close_shutdown+0xb2>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800df1a:	8b63      	ldrh	r3, [r4, #26]
 800df1c:	06db      	lsls	r3, r3, #27
 800df1e:	d534      	bpl.n	800df8a <tcp_close_shutdown+0xbe>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800df20:	8b25      	ldrh	r5, [r4, #24]
 800df22:	1d20      	adds	r0, r4, #4
 800df24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800df26:	4623      	mov	r3, r4
 800df28:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800df2a:	9502      	str	r5, [sp, #8]
 800df2c:	8ae5      	ldrh	r5, [r4, #22]
 800df2e:	9000      	str	r0, [sp, #0]
 800df30:	4620      	mov	r0, r4
 800df32:	9501      	str	r5, [sp, #4]
 800df34:	f002 faf8 	bl	8010528 <tcp_rst>
      tcp_pcb_purge(pcb);
 800df38:	4620      	mov	r0, r4
 800df3a:	f7ff fae5 	bl	800d508 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800df3e:	4b42      	ldr	r3, [pc, #264]	; (800e048 <tcp_close_shutdown+0x17c>)
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	42a2      	cmp	r2, r4
 800df44:	d029      	beq.n	800df9a <tcp_close_shutdown+0xce>
 800df46:	b352      	cbz	r2, 800df9e <tcp_close_shutdown+0xd2>
 800df48:	68d3      	ldr	r3, [r2, #12]
 800df4a:	429c      	cmp	r4, r3
 800df4c:	d06b      	beq.n	800e026 <tcp_close_shutdown+0x15a>
 800df4e:	b333      	cbz	r3, 800df9e <tcp_close_shutdown+0xd2>
 800df50:	68da      	ldr	r2, [r3, #12]
 800df52:	42a2      	cmp	r2, r4
 800df54:	d068      	beq.n	800e028 <tcp_close_shutdown+0x15c>
 800df56:	4613      	mov	r3, r2
 800df58:	e7f9      	b.n	800df4e <tcp_close_shutdown+0x82>
      if (pcb->local_port != 0) {
 800df5a:	8ae3      	ldrh	r3, [r4, #22]
 800df5c:	b343      	cbz	r3, 800dfb0 <tcp_close_shutdown+0xe4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df5e:	4b3d      	ldr	r3, [pc, #244]	; (800e054 <tcp_close_shutdown+0x188>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	42a2      	cmp	r2, r4
 800df64:	d06d      	beq.n	800e042 <tcp_close_shutdown+0x176>
 800df66:	2a00      	cmp	r2, #0
 800df68:	d05a      	beq.n	800e020 <tcp_close_shutdown+0x154>
 800df6a:	68d3      	ldr	r3, [r2, #12]
 800df6c:	429c      	cmp	r4, r3
 800df6e:	d054      	beq.n	800e01a <tcp_close_shutdown+0x14e>
 800df70:	2b00      	cmp	r3, #0
 800df72:	d055      	beq.n	800e020 <tcp_close_shutdown+0x154>
 800df74:	68da      	ldr	r2, [r3, #12]
 800df76:	42a2      	cmp	r2, r4
 800df78:	d050      	beq.n	800e01c <tcp_close_shutdown+0x150>
 800df7a:	4613      	mov	r3, r2
 800df7c:	e7f8      	b.n	800df70 <tcp_close_shutdown+0xa4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800df7e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800df80:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800df84:	4291      	cmp	r1, r2
 800df86:	d1c8      	bne.n	800df1a <tcp_close_shutdown+0x4e>
 800df88:	e7ac      	b.n	800dee4 <tcp_close_shutdown+0x18>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800df8a:	4b33      	ldr	r3, [pc, #204]	; (800e058 <tcp_close_shutdown+0x18c>)
 800df8c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800df90:	4932      	ldr	r1, [pc, #200]	; (800e05c <tcp_close_shutdown+0x190>)
 800df92:	4833      	ldr	r0, [pc, #204]	; (800e060 <tcp_close_shutdown+0x194>)
 800df94:	f005 fd4a 	bl	8013a2c <iprintf>
 800df98:	e7c2      	b.n	800df20 <tcp_close_shutdown+0x54>
      TCP_RMV_ACTIVE(pcb);
 800df9a:	68e2      	ldr	r2, [r4, #12]
 800df9c:	601a      	str	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800df9e:	4b31      	ldr	r3, [pc, #196]	; (800e064 <tcp_close_shutdown+0x198>)
      TCP_RMV_ACTIVE(pcb);
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	4a2a      	ldr	r2, [pc, #168]	; (800e04c <tcp_close_shutdown+0x180>)
 800dfa4:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800dfa6:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800dfa8:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800dfaa:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800dfac:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800dfae:	d03e      	beq.n	800e02e <tcp_close_shutdown+0x162>
        tcp_free(pcb);
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7ff f951 	bl	800d258 <tcp_free>
}
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	b005      	add	sp, #20
 800dfba:	bd30      	pop	{r4, r5, pc}
      return tcp_close_shutdown_fin(pcb);
 800dfbc:	4620      	mov	r0, r4
}
 800dfbe:	b005      	add	sp, #20
 800dfc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800dfc4:	f7ff b992 	b.w	800d2ec <tcp_close_shutdown_fin>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dfc8:	4b23      	ldr	r3, [pc, #140]	; (800e058 <tcp_close_shutdown+0x18c>)
 800dfca:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dfce:	4926      	ldr	r1, [pc, #152]	; (800e068 <tcp_close_shutdown+0x19c>)
 800dfd0:	4823      	ldr	r0, [pc, #140]	; (800e060 <tcp_close_shutdown+0x194>)
 800dfd2:	f005 fd2b 	bl	8013a2c <iprintf>
 800dfd6:	e77f      	b.n	800ded8 <tcp_close_shutdown+0xc>
  switch (pcb->state) {
 800dfd8:	4619      	mov	r1, r3
      pcb->listener = NULL;
 800dfda:	2000      	movs	r0, #0
  switch (pcb->state) {
 800dfdc:	4b1d      	ldr	r3, [pc, #116]	; (800e054 <tcp_close_shutdown+0x188>)
 800dfde:	4d23      	ldr	r5, [pc, #140]	; (800e06c <tcp_close_shutdown+0x1a0>)
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dfe0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dfe2:	b133      	cbz	r3, 800dff2 <tcp_close_shutdown+0x126>
    if (pcb->listener == lpcb) {
 800dfe4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800dfe6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800dfe8:	bf08      	it	eq
 800dfea:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f8      	bne.n	800dfe4 <tcp_close_shutdown+0x118>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dff2:	3101      	adds	r1, #1
 800dff4:	2904      	cmp	r1, #4
 800dff6:	d002      	beq.n	800dffe <tcp_close_shutdown+0x132>
 800dff8:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 800dffc:	e7f0      	b.n	800dfe0 <tcp_close_shutdown+0x114>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dffe:	4621      	mov	r1, r4
 800e000:	481b      	ldr	r0, [pc, #108]	; (800e070 <tcp_close_shutdown+0x1a4>)
 800e002:	f7ff fd35 	bl	800da70 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e006:	7d23      	ldrb	r3, [r4, #20]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d013      	beq.n	800e034 <tcp_close_shutdown+0x168>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e00c:	4621      	mov	r1, r4
 800e00e:	2002      	movs	r0, #2
 800e010:	f7fe fa7c 	bl	800c50c <memp_free>
}
 800e014:	2000      	movs	r0, #0
 800e016:	b005      	add	sp, #20
 800e018:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e01a:	4613      	mov	r3, r2
 800e01c:	68e2      	ldr	r2, [r4, #12]
 800e01e:	60da      	str	r2, [r3, #12]
 800e020:	2300      	movs	r3, #0
 800e022:	60e3      	str	r3, [r4, #12]
 800e024:	e7c4      	b.n	800dfb0 <tcp_close_shutdown+0xe4>
      TCP_RMV_ACTIVE(pcb);
 800e026:	4613      	mov	r3, r2
 800e028:	68e2      	ldr	r2, [r4, #12]
 800e02a:	60da      	str	r2, [r3, #12]
 800e02c:	e7b7      	b.n	800df9e <tcp_close_shutdown+0xd2>
        tcp_trigger_input_pcb_close();
 800e02e:	f001 fe7f 	bl	800fd30 <tcp_trigger_input_pcb_close>
 800e032:	e76c      	b.n	800df0e <tcp_close_shutdown+0x42>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e034:	4b08      	ldr	r3, [pc, #32]	; (800e058 <tcp_close_shutdown+0x18c>)
 800e036:	22df      	movs	r2, #223	; 0xdf
 800e038:	490e      	ldr	r1, [pc, #56]	; (800e074 <tcp_close_shutdown+0x1a8>)
 800e03a:	4809      	ldr	r0, [pc, #36]	; (800e060 <tcp_close_shutdown+0x194>)
 800e03c:	f005 fcf6 	bl	8013a2c <iprintf>
 800e040:	e7e4      	b.n	800e00c <tcp_close_shutdown+0x140>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e042:	68e2      	ldr	r2, [r4, #12]
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	e7eb      	b.n	800e020 <tcp_close_shutdown+0x154>
 800e048:	2401bfbc 	.word	0x2401bfbc
 800e04c:	2401bfb8 	.word	0x2401bfb8
 800e050:	2401bdf8 	.word	0x2401bdf8
 800e054:	2401bfc8 	.word	0x2401bfc8
 800e058:	080153dc 	.word	0x080153dc
 800e05c:	0801537c 	.word	0x0801537c
 800e060:	0801487c 	.word	0x0801487c
 800e064:	2401bfd0 	.word	0x2401bfd0
 800e068:	0801535c 	.word	0x0801535c
 800e06c:	08015470 	.word	0x08015470
 800e070:	2401bfc4 	.word	0x2401bfc4
 800e074:	08015398 	.word	0x08015398

0800e078 <tcp_close>:
{
 800e078:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e07a:	b158      	cbz	r0, 800e094 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800e07c:	7d03      	ldrb	r3, [r0, #20]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d003      	beq.n	800e08a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e082:	8b43      	ldrh	r3, [r0, #26]
 800e084:	f043 0310 	orr.w	r3, r3, #16
 800e088:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800e08a:	2101      	movs	r1, #1
}
 800e08c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800e090:	f7ff bf1c 	b.w	800decc <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e094:	4b04      	ldr	r3, [pc, #16]	; (800e0a8 <tcp_close+0x30>)
 800e096:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e09a:	4904      	ldr	r1, [pc, #16]	; (800e0ac <tcp_close+0x34>)
 800e09c:	4804      	ldr	r0, [pc, #16]	; (800e0b0 <tcp_close+0x38>)
 800e09e:	f005 fcc5 	bl	8013a2c <iprintf>
}
 800e0a2:	f06f 000f 	mvn.w	r0, #15
 800e0a6:	bd08      	pop	{r3, pc}
 800e0a8:	080153dc 	.word	0x080153dc
 800e0ac:	08015344 	.word	0x08015344
 800e0b0:	0801487c 	.word	0x0801487c

0800e0b4 <tcp_recv_null>:
{
 800e0b4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0b6:	b191      	cbz	r1, 800e0de <tcp_recv_null+0x2a>
 800e0b8:	4614      	mov	r4, r2
  if (p != NULL) {
 800e0ba:	b912      	cbnz	r2, 800e0c2 <tcp_recv_null+0xe>
  } else if (err == ERR_OK) {
 800e0bc:	b153      	cbz	r3, 800e0d4 <tcp_recv_null+0x20>
  return ERR_OK;
 800e0be:	4610      	mov	r0, r2
}
 800e0c0:	bd10      	pop	{r4, pc}
    tcp_recved(pcb, p->tot_len);
 800e0c2:	4608      	mov	r0, r1
 800e0c4:	8911      	ldrh	r1, [r2, #8]
 800e0c6:	f7ff f99f 	bl	800d408 <tcp_recved>
    pbuf_free(p);
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f7fe fd00 	bl	800cad0 <pbuf_free>
  return ERR_OK;
 800e0d0:	2000      	movs	r0, #0
}
 800e0d2:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 800e0d4:	4608      	mov	r0, r1
}
 800e0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800e0da:	f7ff bfcd 	b.w	800e078 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0de:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <tcp_recv_null+0x40>)
 800e0e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e0e4:	4904      	ldr	r1, [pc, #16]	; (800e0f8 <tcp_recv_null+0x44>)
 800e0e6:	4805      	ldr	r0, [pc, #20]	; (800e0fc <tcp_recv_null+0x48>)
 800e0e8:	f005 fca0 	bl	8013a2c <iprintf>
 800e0ec:	f06f 000f 	mvn.w	r0, #15
}
 800e0f0:	bd10      	pop	{r4, pc}
 800e0f2:	bf00      	nop
 800e0f4:	080153dc 	.word	0x080153dc
 800e0f8:	08015554 	.word	0x08015554
 800e0fc:	0801487c 	.word	0x0801487c

0800e100 <tcp_process_refused_data>:
{
 800e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e102:	2800      	cmp	r0, #0
 800e104:	d036      	beq.n	800e174 <tcp_process_refused_data+0x74>
    u8_t refused_flags = pcb->refused_data->flags;
 800e106:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800e108:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e10a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800e10e:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800e110:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800e112:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e114:	b325      	cbz	r5, 800e160 <tcp_process_refused_data+0x60>
 800e116:	4601      	mov	r1, r0
 800e118:	4632      	mov	r2, r6
 800e11a:	6900      	ldr	r0, [r0, #16]
 800e11c:	47a8      	blx	r5
 800e11e:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800e120:	b135      	cbz	r5, 800e130 <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 800e122:	350d      	adds	r5, #13
 800e124:	d018      	beq.n	800e158 <tcp_process_refused_data+0x58>
      return ERR_INPROGRESS;
 800e126:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800e12a:	67a6      	str	r6, [r4, #120]	; 0x78
}
 800e12c:	4628      	mov	r0, r5
 800e12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e130:	06bb      	lsls	r3, r7, #26
 800e132:	d5fb      	bpl.n	800e12c <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e134:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e136:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d001      	beq.n	800e142 <tcp_process_refused_data+0x42>
          pcb->rcv_wnd++;
 800e13e:	3301      	adds	r3, #1
 800e140:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800e142:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800e146:	2e00      	cmp	r6, #0
 800e148:	d0f0      	beq.n	800e12c <tcp_process_refused_data+0x2c>
 800e14a:	2300      	movs	r3, #0
 800e14c:	4621      	mov	r1, r4
 800e14e:	6920      	ldr	r0, [r4, #16]
 800e150:	461a      	mov	r2, r3
 800e152:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800e154:	300d      	adds	r0, #13
 800e156:	d1e9      	bne.n	800e12c <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 800e158:	f06f 050c 	mvn.w	r5, #12
}
 800e15c:	4628      	mov	r0, r5
 800e15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e160:	462b      	mov	r3, r5
 800e162:	4628      	mov	r0, r5
 800e164:	4632      	mov	r2, r6
 800e166:	4621      	mov	r1, r4
 800e168:	f7ff ffa4 	bl	800e0b4 <tcp_recv_null>
 800e16c:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800e16e:	2d00      	cmp	r5, #0
 800e170:	d1d7      	bne.n	800e122 <tcp_process_refused_data+0x22>
 800e172:	e7dd      	b.n	800e130 <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e174:	4b04      	ldr	r3, [pc, #16]	; (800e188 <tcp_process_refused_data+0x88>)
 800e176:	f240 6209 	movw	r2, #1545	; 0x609
 800e17a:	4904      	ldr	r1, [pc, #16]	; (800e18c <tcp_process_refused_data+0x8c>)
 800e17c:	f06f 050f 	mvn.w	r5, #15
 800e180:	4803      	ldr	r0, [pc, #12]	; (800e190 <tcp_process_refused_data+0x90>)
 800e182:	f005 fc53 	bl	8013a2c <iprintf>
 800e186:	e7d1      	b.n	800e12c <tcp_process_refused_data+0x2c>
 800e188:	080153dc 	.word	0x080153dc
 800e18c:	0801552c 	.word	0x0801552c
 800e190:	0801487c 	.word	0x0801487c

0800e194 <tcp_fasttmr>:
{
 800e194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800e198:	4d1c      	ldr	r5, [pc, #112]	; (800e20c <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800e19a:	2700      	movs	r7, #0
 800e19c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800e214 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800e1a0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800e1a2:	4e1b      	ldr	r6, [pc, #108]	; (800e210 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800e1a8:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800e1ac:	b1bc      	cbz	r4, 800e1de <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e1ae:	782a      	ldrb	r2, [r5, #0]
 800e1b0:	7fa3      	ldrb	r3, [r4, #30]
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d015      	beq.n	800e1e2 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 800e1b6:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800e1b8:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800e1ba:	07d9      	lsls	r1, r3, #31
 800e1bc:	d41a      	bmi.n	800e1f4 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 800e1be:	071a      	lsls	r2, r3, #28
 800e1c0:	d411      	bmi.n	800e1e6 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 800e1c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800e1c4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800e1c8:	b133      	cbz	r3, 800e1d8 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 800e1ca:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800e1cc:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800e1ce:	f7ff ff97 	bl	800e100 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e1d2:	7833      	ldrb	r3, [r6, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1e7      	bne.n	800e1a8 <tcp_fasttmr+0x14>
      pcb = next;
 800e1d8:	464c      	mov	r4, r9
  while (pcb != NULL) {
 800e1da:	2c00      	cmp	r4, #0
 800e1dc:	d1e7      	bne.n	800e1ae <tcp_fasttmr+0x1a>
}
 800e1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800e1e2:	68e4      	ldr	r4, [r4, #12]
 800e1e4:	e7e2      	b.n	800e1ac <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e1e6:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800e1ea:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e1ec:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800e1ee:	f7ff f87d 	bl	800d2ec <tcp_close_shutdown_fin>
 800e1f2:	e7e6      	b.n	800e1c2 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800e1f4:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800e1f8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800e1fa:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800e1fc:	f002 fa18 	bl	8010630 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e200:	8b63      	ldrh	r3, [r4, #26]
 800e202:	f023 0303 	bic.w	r3, r3, #3
 800e206:	b29b      	uxth	r3, r3
 800e208:	8363      	strh	r3, [r4, #26]
 800e20a:	e7d8      	b.n	800e1be <tcp_fasttmr+0x2a>
 800e20c:	2401402a 	.word	0x2401402a
 800e210:	2401bfb8 	.word	0x2401bfb8
 800e214:	2401bfbc 	.word	0x2401bfbc

0800e218 <tcp_tmr>:
{
 800e218:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800e21a:	f7ff ffbb 	bl	800e194 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800e21e:	4a06      	ldr	r2, [pc, #24]	; (800e238 <tcp_tmr+0x20>)
 800e220:	7813      	ldrb	r3, [r2, #0]
 800e222:	3301      	adds	r3, #1
 800e224:	b2db      	uxtb	r3, r3
 800e226:	7013      	strb	r3, [r2, #0]
 800e228:	07db      	lsls	r3, r3, #31
 800e22a:	d400      	bmi.n	800e22e <tcp_tmr+0x16>
}
 800e22c:	bd08      	pop	{r3, pc}
 800e22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800e232:	f7ff b9ab 	b.w	800d58c <tcp_slowtmr>
 800e236:	bf00      	nop
 800e238:	24014029 	.word	0x24014029

0800e23c <tcp_next_iss>:
{
 800e23c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e23e:	b130      	cbz	r0, 800e24e <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800e240:	4b07      	ldr	r3, [pc, #28]	; (800e260 <tcp_next_iss+0x24>)
 800e242:	4a08      	ldr	r2, [pc, #32]	; (800e264 <tcp_next_iss+0x28>)
 800e244:	6818      	ldr	r0, [r3, #0]
 800e246:	6812      	ldr	r2, [r2, #0]
 800e248:	4410      	add	r0, r2
 800e24a:	6018      	str	r0, [r3, #0]
}
 800e24c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e24e:	4b06      	ldr	r3, [pc, #24]	; (800e268 <tcp_next_iss+0x2c>)
 800e250:	f640 02af 	movw	r2, #2223	; 0x8af
 800e254:	4905      	ldr	r1, [pc, #20]	; (800e26c <tcp_next_iss+0x30>)
 800e256:	4806      	ldr	r0, [pc, #24]	; (800e270 <tcp_next_iss+0x34>)
 800e258:	f005 fbe8 	bl	8013a2c <iprintf>
 800e25c:	e7f0      	b.n	800e240 <tcp_next_iss+0x4>
 800e25e:	bf00      	nop
 800e260:	24000138 	.word	0x24000138
 800e264:	2401bfc0 	.word	0x2401bfc0
 800e268:	080153dc 	.word	0x080153dc
 800e26c:	08015454 	.word	0x08015454
 800e270:	0801487c 	.word	0x0801487c

0800e274 <tcp_eff_send_mss_netif>:
{
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	4605      	mov	r5, r0
 800e278:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e27a:	b172      	cbz	r2, 800e29a <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 800e27c:	b144      	cbz	r4, 800e290 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 800e27e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (mtu != 0) {
 800e280:	b133      	cbz	r3, 800e290 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e282:	2b28      	cmp	r3, #40	; 0x28
 800e284:	d906      	bls.n	800e294 <tcp_eff_send_mss_netif+0x20>
 800e286:	3b28      	subs	r3, #40	; 0x28
 800e288:	b29b      	uxth	r3, r3
 800e28a:	429d      	cmp	r5, r3
 800e28c:	bf28      	it	cs
 800e28e:	461d      	movcs	r5, r3
}
 800e290:	4628      	mov	r0, r5
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	2500      	movs	r5, #0
 800e296:	4628      	mov	r0, r5
 800e298:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e29a:	4b04      	ldr	r3, [pc, #16]	; (800e2ac <tcp_eff_send_mss_netif+0x38>)
 800e29c:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e2a0:	4903      	ldr	r1, [pc, #12]	; (800e2b0 <tcp_eff_send_mss_netif+0x3c>)
 800e2a2:	4804      	ldr	r0, [pc, #16]	; (800e2b4 <tcp_eff_send_mss_netif+0x40>)
 800e2a4:	f005 fbc2 	bl	8013a2c <iprintf>
 800e2a8:	e7e8      	b.n	800e27c <tcp_eff_send_mss_netif+0x8>
 800e2aa:	bf00      	nop
 800e2ac:	080153dc 	.word	0x080153dc
 800e2b0:	080153b4 	.word	0x080153b4
 800e2b4:	0801487c 	.word	0x0801487c

0800e2b8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800e2b8:	b308      	cbz	r0, 800e2fe <tcp_netif_ip_addr_changed+0x46>
 800e2ba:	6802      	ldr	r2, [r0, #0]
{
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4605      	mov	r5, r0
  if (!ip_addr_isany(old_addr)) {
 800e2c0:	b902      	cbnz	r2, 800e2c4 <tcp_netif_ip_addr_changed+0xc>
}
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e2c4:	4b0e      	ldr	r3, [pc, #56]	; (800e300 <tcp_netif_ip_addr_changed+0x48>)
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	6819      	ldr	r1, [r3, #0]
 800e2ca:	f7ff fced 	bl	800dca8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	; (800e304 <tcp_netif_ip_addr_changed+0x4c>)
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	6819      	ldr	r1, [r3, #0]
 800e2d4:	f7ff fce8 	bl	800dca8 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800e2d8:	2c00      	cmp	r4, #0
 800e2da:	d0f2      	beq.n	800e2c2 <tcp_netif_ip_addr_changed+0xa>
 800e2dc:	6823      	ldr	r3, [r4, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0ef      	beq.n	800e2c2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2e2:	4b09      	ldr	r3, [pc, #36]	; (800e308 <tcp_netif_ip_addr_changed+0x50>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0eb      	beq.n	800e2c2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e2ea:	6819      	ldr	r1, [r3, #0]
 800e2ec:	682a      	ldr	r2, [r5, #0]
 800e2ee:	4291      	cmp	r1, r2
 800e2f0:	d101      	bne.n	800e2f6 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e2f2:	6822      	ldr	r2, [r4, #0]
 800e2f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1f6      	bne.n	800e2ea <tcp_netif_ip_addr_changed+0x32>
}
 800e2fc:	bd38      	pop	{r3, r4, r5, pc}
 800e2fe:	4770      	bx	lr
 800e300:	2401bfbc 	.word	0x2401bfbc
 800e304:	2401bfc8 	.word	0x2401bfc8
 800e308:	2401bfc4 	.word	0x2401bfc4

0800e30c <tcp_free_ooseq>:
{
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4605      	mov	r5, r0
  if (pcb->ooseq) {
 800e310:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800e312:	b130      	cbz	r0, 800e322 <tcp_free_ooseq+0x16>
    struct tcp_seg *next = seg->next;
 800e314:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800e316:	f7ff f8bb 	bl	800d490 <tcp_seg_free>
  while (seg != NULL) {
 800e31a:	4620      	mov	r0, r4
 800e31c:	2c00      	cmp	r4, #0
 800e31e:	d1f9      	bne.n	800e314 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800e320:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e322:	bd38      	pop	{r3, r4, r5, pc}

0800e324 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e328:	4606      	mov	r6, r0
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f000 808d 	beq.w	800e44a <tcp_parseopt+0x126>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e330:	4b52      	ldr	r3, [pc, #328]	; (800e47c <tcp_parseopt+0x158>)
 800e332:	881f      	ldrh	r7, [r3, #0]
 800e334:	2f00      	cmp	r7, #0
 800e336:	d066      	beq.n	800e406 <tcp_parseopt+0xe2>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e338:	4a51      	ldr	r2, [pc, #324]	; (800e480 <tcp_parseopt+0x15c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e33a:	2300      	movs	r3, #0
 800e33c:	4c51      	ldr	r4, [pc, #324]	; (800e484 <tcp_parseopt+0x160>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e33e:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e342:	461a      	mov	r2, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e344:	4850      	ldr	r0, [pc, #320]	; (800e488 <tcp_parseopt+0x164>)
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e346:	4951      	ldr	r1, [pc, #324]	; (800e48c <tcp_parseopt+0x168>)
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e348:	fa5f fa8c 	uxtb.w	sl, ip
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e34c:	8023      	strh	r3, [r4, #0]
 800e34e:	461c      	mov	r4, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e350:	6805      	ldr	r5, [r0, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e352:	f8d1 8000 	ldr.w	r8, [r1]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e356:	4613      	mov	r3, r2
 800e358:	f04f 0e00 	mov.w	lr, #0
    return tcphdr_opt2[idx];
 800e35c:	eba2 090a 	sub.w	r9, r2, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e360:	eb02 000e 	add.w	r0, r2, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e364:	429f      	cmp	r7, r3
  u16_t optidx = tcp_optidx++;
 800e366:	f103 0101 	add.w	r1, r3, #1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e36a:	fa1f fb80 	uxth.w	fp, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e36e:	d97a      	bls.n	800e466 <tcp_parseopt+0x142>
  u16_t optidx = tcp_optidx++;
 800e370:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e372:	2d00      	cmp	r5, #0
 800e374:	d037      	beq.n	800e3e6 <tcp_parseopt+0xc2>
    return tcphdr_opt2[idx];
 800e376:	eb09 040e 	add.w	r4, r9, lr
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e37a:	45dc      	cmp	ip, fp
    return tcphdr_opt2[idx];
 800e37c:	b2e4      	uxtb	r4, r4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e37e:	d834      	bhi.n	800e3ea <tcp_parseopt+0xc6>
    return tcphdr_opt2[idx];
 800e380:	f815 b004 	ldrb.w	fp, [r5, r4]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800e384:	f1bb 0f01 	cmp.w	fp, #1
 800e388:	d035      	beq.n	800e3f6 <tcp_parseopt+0xd2>
 800e38a:	d374      	bcc.n	800e476 <tcp_parseopt+0x152>
 800e38c:	f1bb 0f02 	cmp.w	fp, #2
 800e390:	d13b      	bne.n	800e40a <tcp_parseopt+0xe6>
  u16_t optidx = tcp_optidx++;
 800e392:	1c98      	adds	r0, r3, #2
 800e394:	b280      	uxth	r0, r0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e396:	b10d      	cbz	r5, 800e39c <tcp_parseopt+0x78>
 800e398:	4561      	cmp	r1, ip
 800e39a:	d241      	bcs.n	800e420 <tcp_parseopt+0xfc>
    return opts[optidx];
 800e39c:	4441      	add	r1, r8
 800e39e:	7d0a      	ldrb	r2, [r1, #20]
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e3a0:	2a04      	cmp	r2, #4
 800e3a2:	d165      	bne.n	800e470 <tcp_parseopt+0x14c>
 800e3a4:	1c42      	adds	r2, r0, #1
 800e3a6:	42ba      	cmp	r2, r7
 800e3a8:	da62      	bge.n	800e470 <tcp_parseopt+0x14c>
  u16_t optidx = tcp_optidx++;
 800e3aa:	1cd9      	adds	r1, r3, #3
 800e3ac:	1d1a      	adds	r2, r3, #4
 800e3ae:	b289      	uxth	r1, r1
 800e3b0:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e3b2:	2d00      	cmp	r5, #0
 800e3b4:	d051      	beq.n	800e45a <tcp_parseopt+0x136>
 800e3b6:	4584      	cmp	ip, r0
 800e3b8:	d93c      	bls.n	800e434 <tcp_parseopt+0x110>
    return opts[optidx];
 800e3ba:	4440      	add	r0, r8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e3bc:	458c      	cmp	ip, r1
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e3be:	7d03      	ldrb	r3, [r0, #20]
 800e3c0:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e3c4:	d83e      	bhi.n	800e444 <tcp_parseopt+0x120>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e3c6:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 800e3ca:	b2c9      	uxtb	r1, r1
 800e3cc:	5c69      	ldrb	r1, [r5, r1]
          mss |= tcp_get_next_optbyte();
 800e3ce:	430b      	orrs	r3, r1
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e3d0:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800e3d4:	f240 54b3 	movw	r4, #1459	; 0x5b3
 800e3d8:	1e59      	subs	r1, r3, #1
 800e3da:	b289      	uxth	r1, r1
 800e3dc:	42a1      	cmp	r1, r4
 800e3de:	bf88      	it	hi
 800e3e0:	4603      	movhi	r3, r0
 800e3e2:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800e3e4:	e01a      	b.n	800e41c <tcp_parseopt+0xf8>
 800e3e6:	eb02 000e 	add.w	r0, r2, lr
    return opts[optidx];
 800e3ea:	4440      	add	r0, r8
 800e3ec:	f890 b014 	ldrb.w	fp, [r0, #20]
      switch (opt) {
 800e3f0:	f1bb 0f01 	cmp.w	fp, #1
 800e3f4:	d1c9      	bne.n	800e38a <tcp_parseopt+0x66>
 800e3f6:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	465c      	mov	r4, fp
 800e3fe:	e7af      	b.n	800e360 <tcp_parseopt+0x3c>
 800e400:	3302      	adds	r3, #2
 800e402:	4a20      	ldr	r2, [pc, #128]	; (800e484 <tcp_parseopt+0x160>)
 800e404:	8013      	strh	r3, [r2, #0]
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800e406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e40a:	b10d      	cbz	r5, 800e410 <tcp_parseopt+0xec>
 800e40c:	4561      	cmp	r1, ip
 800e40e:	d20c      	bcs.n	800e42a <tcp_parseopt+0x106>
    return opts[optidx];
 800e410:	4441      	add	r1, r8
 800e412:	7d0a      	ldrb	r2, [r1, #20]
          if (data < 2) {
 800e414:	2a01      	cmp	r2, #1
 800e416:	d9f3      	bls.n	800e400 <tcp_parseopt+0xdc>
          tcp_optidx += data - 2;
 800e418:	441a      	add	r2, r3
 800e41a:	b292      	uxth	r2, r2
 800e41c:	2401      	movs	r4, #1
 800e41e:	e79a      	b.n	800e356 <tcp_parseopt+0x32>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e420:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 800e424:	b2c9      	uxtb	r1, r1
 800e426:	5c6a      	ldrb	r2, [r5, r1]
 800e428:	e7ba      	b.n	800e3a0 <tcp_parseopt+0x7c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e42a:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 800e42e:	b2c9      	uxtb	r1, r1
 800e430:	5c6a      	ldrb	r2, [r5, r1]
 800e432:	e7ef      	b.n	800e414 <tcp_parseopt+0xf0>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e434:	eba0 000a 	sub.w	r0, r0, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e438:	458c      	cmp	ip, r1
    return tcphdr_opt2[idx];
 800e43a:	b2c0      	uxtb	r0, r0
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e43c:	5c2b      	ldrb	r3, [r5, r0]
 800e43e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e442:	d9c0      	bls.n	800e3c6 <tcp_parseopt+0xa2>
    return opts[optidx];
 800e444:	4441      	add	r1, r8
 800e446:	7d09      	ldrb	r1, [r1, #20]
 800e448:	e7c1      	b.n	800e3ce <tcp_parseopt+0xaa>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e44a:	4b11      	ldr	r3, [pc, #68]	; (800e490 <tcp_parseopt+0x16c>)
 800e44c:	f240 727d 	movw	r2, #1917	; 0x77d
 800e450:	4910      	ldr	r1, [pc, #64]	; (800e494 <tcp_parseopt+0x170>)
 800e452:	4811      	ldr	r0, [pc, #68]	; (800e498 <tcp_parseopt+0x174>)
 800e454:	f005 faea 	bl	8013a2c <iprintf>
 800e458:	e76a      	b.n	800e330 <tcp_parseopt+0xc>
    return opts[optidx];
 800e45a:	4440      	add	r0, r8
 800e45c:	4441      	add	r1, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e45e:	7d03      	ldrb	r3, [r0, #20]
    return opts[optidx];
 800e460:	7d09      	ldrb	r1, [r1, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e462:	021b      	lsls	r3, r3, #8
 800e464:	e7b3      	b.n	800e3ce <tcp_parseopt+0xaa>
 800e466:	2c00      	cmp	r4, #0
 800e468:	d0cd      	beq.n	800e406 <tcp_parseopt+0xe2>
 800e46a:	4a06      	ldr	r2, [pc, #24]	; (800e484 <tcp_parseopt+0x160>)
 800e46c:	8013      	strh	r3, [r2, #0]
 800e46e:	e7ca      	b.n	800e406 <tcp_parseopt+0xe2>
 800e470:	4b04      	ldr	r3, [pc, #16]	; (800e484 <tcp_parseopt+0x160>)
 800e472:	8018      	strh	r0, [r3, #0]
 800e474:	e7c7      	b.n	800e406 <tcp_parseopt+0xe2>
 800e476:	4b03      	ldr	r3, [pc, #12]	; (800e484 <tcp_parseopt+0x160>)
 800e478:	8019      	strh	r1, [r3, #0]
 800e47a:	e7c4      	b.n	800e406 <tcp_parseopt+0xe2>
 800e47c:	24014064 	.word	0x24014064
 800e480:	2401405c 	.word	0x2401405c
 800e484:	24014054 	.word	0x24014054
 800e488:	24014060 	.word	0x24014060
 800e48c:	24014058 	.word	0x24014058
 800e490:	08015a50 	.word	0x08015a50
 800e494:	08015a84 	.word	0x08015a84
 800e498:	0801487c 	.word	0x0801487c

0800e49c <tcp_oos_insert_segment>:
{
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d03e      	beq.n	800e524 <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e4a6:	68eb      	ldr	r3, [r5, #12]
 800e4a8:	8998      	ldrh	r0, [r3, #12]
 800e4aa:	f7fd fa71 	bl	800b990 <lwip_htons>
 800e4ae:	07c2      	lsls	r2, r0, #31
 800e4b0:	d432      	bmi.n	800e518 <tcp_oos_insert_segment+0x7c>
 800e4b2:	4e20      	ldr	r6, [pc, #128]	; (800e534 <tcp_oos_insert_segment+0x98>)
 800e4b4:	e005      	b.n	800e4c2 <tcp_oos_insert_segment+0x26>
      next = next->next;
 800e4b6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f7fe ffe9 	bl	800d490 <tcp_seg_free>
 800e4be:	463c      	mov	r4, r7
    while (next &&
 800e4c0:	b1ef      	cbz	r7, 800e4fe <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e4c2:	68e1      	ldr	r1, [r4, #12]
 800e4c4:	8923      	ldrh	r3, [r4, #8]
 800e4c6:	6848      	ldr	r0, [r1, #4]
 800e4c8:	6837      	ldr	r7, [r6, #0]
 800e4ca:	892a      	ldrh	r2, [r5, #8]
 800e4cc:	4403      	add	r3, r0
 800e4ce:	443a      	add	r2, r7
 800e4d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	db15      	blt.n	800e502 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e4d6:	8988      	ldrh	r0, [r1, #12]
 800e4d8:	f7fd fa5a 	bl	800b990 <lwip_htons>
 800e4dc:	07c3      	lsls	r3, r0, #31
 800e4de:	d5ea      	bpl.n	800e4b6 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e4e0:	68eb      	ldr	r3, [r5, #12]
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	899f      	ldrh	r7, [r3, #12]
 800e4e6:	f7fd fa53 	bl	800b990 <lwip_htons>
 800e4ea:	68eb      	ldr	r3, [r5, #12]
 800e4ec:	4338      	orrs	r0, r7
      next = next->next;
 800e4ee:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e4f0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f7fe ffcc 	bl	800d490 <tcp_seg_free>
 800e4f8:	463c      	mov	r4, r7
    while (next &&
 800e4fa:	2f00      	cmp	r7, #0
 800e4fc:	d1e1      	bne.n	800e4c2 <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 800e4fe:	602c      	str	r4, [r5, #0]
}
 800e500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e502:	1a12      	subs	r2, r2, r0
    if (next &&
 800e504:	2a00      	cmp	r2, #0
 800e506:	ddfa      	ble.n	800e4fe <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e508:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800e50a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e50c:	b289      	uxth	r1, r1
 800e50e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e510:	f7fe fbf6 	bl	800cd00 <pbuf_realloc>
  cseg->next = next;
 800e514:	602c      	str	r4, [r5, #0]
}
 800e516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800e518:	4620      	mov	r0, r4
    next = NULL;
 800e51a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800e51c:	f7fe ffc6 	bl	800d4ac <tcp_segs_free>
  cseg->next = next;
 800e520:	602c      	str	r4, [r5, #0]
}
 800e522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e524:	4b04      	ldr	r3, [pc, #16]	; (800e538 <tcp_oos_insert_segment+0x9c>)
 800e526:	f240 421f 	movw	r2, #1055	; 0x41f
 800e52a:	4904      	ldr	r1, [pc, #16]	; (800e53c <tcp_oos_insert_segment+0xa0>)
 800e52c:	4804      	ldr	r0, [pc, #16]	; (800e540 <tcp_oos_insert_segment+0xa4>)
 800e52e:	f005 fa7d 	bl	8013a2c <iprintf>
 800e532:	e7b8      	b.n	800e4a6 <tcp_oos_insert_segment+0xa>
 800e534:	24014050 	.word	0x24014050
 800e538:	08015a50 	.word	0x08015a50
 800e53c:	08015a28 	.word	0x08015a28
 800e540:	0801487c 	.word	0x0801487c

0800e544 <tcp_input_delayed_close>:
{
 800e544:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e546:	4604      	mov	r4, r0
 800e548:	b930      	cbnz	r0, 800e558 <tcp_input_delayed_close+0x14>
 800e54a:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <tcp_input_delayed_close+0x44>)
 800e54c:	f240 225a 	movw	r2, #602	; 0x25a
 800e550:	490e      	ldr	r1, [pc, #56]	; (800e58c <tcp_input_delayed_close+0x48>)
 800e552:	480f      	ldr	r0, [pc, #60]	; (800e590 <tcp_input_delayed_close+0x4c>)
 800e554:	f005 fa6a 	bl	8013a2c <iprintf>
  if (recv_flags & TF_CLOSED) {
 800e558:	4b0e      	ldr	r3, [pc, #56]	; (800e594 <tcp_input_delayed_close+0x50>)
 800e55a:	7818      	ldrb	r0, [r3, #0]
 800e55c:	f010 0010 	ands.w	r0, r0, #16
 800e560:	d011      	beq.n	800e586 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e562:	8b63      	ldrh	r3, [r4, #26]
 800e564:	06db      	lsls	r3, r3, #27
 800e566:	d406      	bmi.n	800e576 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e568:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e56c:	b11b      	cbz	r3, 800e576 <tcp_input_delayed_close+0x32>
 800e56e:	f06f 010e 	mvn.w	r1, #14
 800e572:	6920      	ldr	r0, [r4, #16]
 800e574:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e576:	4621      	mov	r1, r4
 800e578:	4807      	ldr	r0, [pc, #28]	; (800e598 <tcp_input_delayed_close+0x54>)
 800e57a:	f7ff fa79 	bl	800da70 <tcp_pcb_remove>
    tcp_free(pcb);
 800e57e:	4620      	mov	r0, r4
 800e580:	f7fe fe6a 	bl	800d258 <tcp_free>
 800e584:	2001      	movs	r0, #1
}
 800e586:	bd10      	pop	{r4, pc}
 800e588:	08015a50 	.word	0x08015a50
 800e58c:	08015a00 	.word	0x08015a00
 800e590:	0801487c 	.word	0x0801487c
 800e594:	2401404c 	.word	0x2401404c
 800e598:	2401bfbc 	.word	0x2401bfbc

0800e59c <tcp_free_acked_segments.isra.1>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a0:	b083      	sub	sp, #12
 800e5a2:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d03e      	beq.n	800e626 <tcp_free_acked_segments.isra.1+0x8a>
 800e5a8:	4606      	mov	r6, r0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800e660 <tcp_free_acked_segments.isra.1+0xc4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e5b0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800e654 <tcp_free_acked_segments.isra.1+0xb8>
 800e5b4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e664 <tcp_free_acked_segments.isra.1+0xc8>
 800e5b8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800e65c <tcp_free_acked_segments.isra.1+0xc0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e5bc:	68e3      	ldr	r3, [r4, #12]
 800e5be:	6858      	ldr	r0, [r3, #4]
 800e5c0:	f7fd f9ea 	bl	800b998 <lwip_htonl>
 800e5c4:	68e3      	ldr	r3, [r4, #12]
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	8927      	ldrh	r7, [r4, #8]
 800e5ca:	8998      	ldrh	r0, [r3, #12]
 800e5cc:	f7fd f9e0 	bl	800b990 <lwip_htons>
 800e5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e5d4:	f010 0003 	ands.w	r0, r0, #3
 800e5d8:	eba5 0503 	sub.w	r5, r5, r3
 800e5dc:	bf18      	it	ne
 800e5de:	2001      	movne	r0, #1
 800e5e0:	443d      	add	r5, r7
 800e5e2:	4428      	add	r0, r5
  while (seg_list != NULL &&
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dc2e      	bgt.n	800e646 <tcp_free_acked_segments.isra.1+0xaa>
    seg_list = seg_list->next;
 800e5e8:	e9d4 5000 	ldrd	r5, r0, [r4]
    clen = pbuf_clen(next->p);
 800e5ec:	f7fe fbe4 	bl	800cdb8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e5f0:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 800e5f2:	4607      	mov	r7, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e5f4:	4298      	cmp	r0, r3
 800e5f6:	d81d      	bhi.n	800e634 <tcp_free_acked_segments.isra.1+0x98>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e5f8:	4a15      	ldr	r2, [pc, #84]	; (800e650 <tcp_free_acked_segments.isra.1+0xb4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e5fa:	1bdf      	subs	r7, r3, r7
    tcp_seg_free(next);
 800e5fc:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e5fe:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e600:	8037      	strh	r7, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e602:	8923      	ldrh	r3, [r4, #8]
  while (seg_list != NULL &&
 800e604:	462c      	mov	r4, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e606:	440b      	add	r3, r1
 800e608:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800e60a:	f7fe ff41 	bl	800d490 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800e60e:	8833      	ldrh	r3, [r6, #0]
 800e610:	b16b      	cbz	r3, 800e62e <tcp_free_acked_segments.isra.1+0x92>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e612:	b965      	cbnz	r5, 800e62e <tcp_free_acked_segments.isra.1+0x92>
 800e614:	9b01      	ldr	r3, [sp, #4]
 800e616:	b953      	cbnz	r3, 800e62e <tcp_free_acked_segments.isra.1+0x92>
 800e618:	4b0e      	ldr	r3, [pc, #56]	; (800e654 <tcp_free_acked_segments.isra.1+0xb8>)
 800e61a:	f240 4262 	movw	r2, #1122	; 0x462
 800e61e:	490e      	ldr	r1, [pc, #56]	; (800e658 <tcp_free_acked_segments.isra.1+0xbc>)
 800e620:	480e      	ldr	r0, [pc, #56]	; (800e65c <tcp_free_acked_segments.isra.1+0xc0>)
 800e622:	f005 fa03 	bl	8013a2c <iprintf>
  while (seg_list != NULL &&
 800e626:	2000      	movs	r0, #0
}
 800e628:	b003      	add	sp, #12
 800e62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (seg_list != NULL &&
 800e62e:	2d00      	cmp	r5, #0
 800e630:	d1c4      	bne.n	800e5bc <tcp_free_acked_segments.isra.1+0x20>
 800e632:	e7f8      	b.n	800e626 <tcp_free_acked_segments.isra.1+0x8a>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e634:	465b      	mov	r3, fp
 800e636:	f240 4257 	movw	r2, #1111	; 0x457
 800e63a:	4651      	mov	r1, sl
 800e63c:	4648      	mov	r0, r9
 800e63e:	f005 f9f5 	bl	8013a2c <iprintf>
 800e642:	8833      	ldrh	r3, [r6, #0]
 800e644:	e7d8      	b.n	800e5f8 <tcp_free_acked_segments.isra.1+0x5c>
  while (seg_list != NULL &&
 800e646:	4620      	mov	r0, r4
}
 800e648:	b003      	add	sp, #12
 800e64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64e:	bf00      	nop
 800e650:	24014044 	.word	0x24014044
 800e654:	08015a50 	.word	0x08015a50
 800e658:	08015800 	.word	0x08015800
 800e65c:	0801487c 	.word	0x0801487c
 800e660:	2401402c 	.word	0x2401402c
 800e664:	080157d8 	.word	0x080157d8

0800e668 <tcp_receive>:
{
 800e668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e66c:	4604      	mov	r4, r0
 800e66e:	2800      	cmp	r0, #0
 800e670:	f000 8119 	beq.w	800e8a6 <tcp_receive+0x23e>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e674:	7d23      	ldrb	r3, [r4, #20]
 800e676:	2b03      	cmp	r3, #3
 800e678:	f240 8085 	bls.w	800e786 <tcp_receive+0x11e>
  if (flags & TCP_ACK) {
 800e67c:	4bb5      	ldr	r3, [pc, #724]	; (800e954 <tcp_receive+0x2ec>)
 800e67e:	4db6      	ldr	r5, [pc, #728]	; (800e958 <tcp_receive+0x2f0>)
 800e680:	781a      	ldrb	r2, [r3, #0]
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	06d6      	lsls	r6, r2, #27
 800e686:	d46a      	bmi.n	800e75e <tcp_receive+0xf6>
 800e688:	4eb4      	ldr	r6, [pc, #720]	; (800e95c <tcp_receive+0x2f4>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e68a:	8832      	ldrh	r2, [r6, #0]
 800e68c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e68e:	2a00      	cmp	r2, #0
 800e690:	d055      	beq.n	800e73e <tcp_receive+0xd6>
 800e692:	7d20      	ldrb	r0, [r4, #20]
 800e694:	2806      	cmp	r0, #6
 800e696:	d852      	bhi.n	800e73e <tcp_receive+0xd6>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e698:	1acf      	subs	r7, r1, r3
 800e69a:	2f01      	cmp	r7, #1
 800e69c:	d406      	bmi.n	800e6ac <tcp_receive+0x44>
 800e69e:	1a8a      	subs	r2, r1, r2
 800e6a0:	f1c3 0001 	rsb	r0, r3, #1
 800e6a4:	4402      	add	r2, r0
 800e6a6:	2a00      	cmp	r2, #0
 800e6a8:	f340 81c5 	ble.w	800ea36 <tcp_receive+0x3ce>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e6ac:	1a5a      	subs	r2, r3, r1
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	f2c0 8101 	blt.w	800e8b6 <tcp_receive+0x24e>
 800e6b4:	f103 0c01 	add.w	ip, r3, #1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6b8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800e6ba:	ebac 0201 	sub.w	r2, ip, r1
 800e6be:	1a12      	subs	r2, r2, r0
 800e6c0:	2a00      	cmp	r2, #0
 800e6c2:	f340 80fd 	ble.w	800e8c0 <tcp_receive+0x258>
        tcp_send_empty_ack(pcb);
 800e6c6:	4620      	mov	r0, r4
}
 800e6c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800e6cc:	f001 bf7c 	b.w	80105c8 <tcp_send_empty_ack>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e6d0:	ebac 0102 	sub.w	r1, ip, r2
 800e6d4:	2900      	cmp	r1, #0
 800e6d6:	da4e      	bge.n	800e776 <tcp_receive+0x10e>
 800e6d8:	49a1      	ldr	r1, [pc, #644]	; (800e960 <tcp_receive+0x2f8>)
 800e6da:	6809      	ldr	r1, [r1, #0]
 800e6dc:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e6de:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e6e2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e6e6:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 800e6e8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e6ec:	bf38      	it	cc
 800e6ee:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e6f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e6f4:	1a11      	subs	r1, r2, r0
 800e6f6:	2900      	cmp	r1, #0
 800e6f8:	dc4d      	bgt.n	800e796 <tcp_receive+0x12e>
      if (tcplen == 0) {
 800e6fa:	4e98      	ldr	r6, [pc, #608]	; (800e95c <tcp_receive+0x2f4>)
 800e6fc:	8831      	ldrh	r1, [r6, #0]
 800e6fe:	2900      	cmp	r1, #0
 800e700:	d15a      	bne.n	800e7b8 <tcp_receive+0x150>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e702:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e706:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e708:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e70a:	4441      	add	r1, r8
 800e70c:	4561      	cmp	r1, ip
 800e70e:	d153      	bne.n	800e7b8 <tcp_receive+0x150>
          if (pcb->rtime >= 0) {
 800e710:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800e712:	0bc9      	lsrs	r1, r1, #15
 800e714:	d150      	bne.n	800e7b8 <tcp_receive+0x150>
 800e716:	4290      	cmp	r0, r2
 800e718:	d14e      	bne.n	800e7b8 <tcp_receive+0x150>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e71a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800e71e:	29ff      	cmp	r1, #255	; 0xff
 800e720:	f000 83c2 	beq.w	800eea8 <tcp_receive+0x840>
                ++pcb->dupacks;
 800e724:	3101      	adds	r1, #1
 800e726:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800e728:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800e72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800e72e:	f200 83bb 	bhi.w	800eea8 <tcp_receive+0x840>
              if (pcb->dupacks >= 3) {
 800e732:	f000 83c4 	beq.w	800eebe <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e738:	2900      	cmp	r1, #0
 800e73a:	d137      	bne.n	800e7ac <tcp_receive+0x144>
 800e73c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e73e:	1a5a      	subs	r2, r3, r1
 800e740:	2a00      	cmp	r2, #0
 800e742:	db06      	blt.n	800e752 <tcp_receive+0xea>
 800e744:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e746:	f1c2 0201 	rsb	r2, r2, #1
 800e74a:	4413      	add	r3, r2
 800e74c:	1a5b      	subs	r3, r3, r1
 800e74e:	2b00      	cmp	r3, #0
 800e750:	dd03      	ble.n	800e75a <tcp_receive+0xf2>
      tcp_ack_now(pcb);
 800e752:	8b63      	ldrh	r3, [r4, #26]
 800e754:	f043 0302 	orr.w	r3, r3, #2
 800e758:	8363      	strh	r3, [r4, #26]
}
 800e75a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e75e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e760:	4f80      	ldr	r7, [pc, #512]	; (800e964 <tcp_receive+0x2fc>)
 800e762:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e764:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 800e768:	683a      	ldr	r2, [r7, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e76a:	2800      	cmp	r0, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e76c:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e770:	dbb2      	blt.n	800e6d8 <tcp_receive+0x70>
 800e772:	4299      	cmp	r1, r3
 800e774:	d0ac      	beq.n	800e6d0 <tcp_receive+0x68>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e776:	4594      	cmp	ip, r2
 800e778:	d1bb      	bne.n	800e6f2 <tcp_receive+0x8a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e77a:	4979      	ldr	r1, [pc, #484]	; (800e960 <tcp_receive+0x2f8>)
 800e77c:	6809      	ldr	r1, [r1, #0]
 800e77e:	89c9      	ldrh	r1, [r1, #14]
 800e780:	458e      	cmp	lr, r1
 800e782:	d2b6      	bcs.n	800e6f2 <tcp_receive+0x8a>
 800e784:	e7ab      	b.n	800e6de <tcp_receive+0x76>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e786:	4b78      	ldr	r3, [pc, #480]	; (800e968 <tcp_receive+0x300>)
 800e788:	f240 427c 	movw	r2, #1148	; 0x47c
 800e78c:	4977      	ldr	r1, [pc, #476]	; (800e96c <tcp_receive+0x304>)
 800e78e:	4878      	ldr	r0, [pc, #480]	; (800e970 <tcp_receive+0x308>)
 800e790:	f005 f94c 	bl	8013a2c <iprintf>
 800e794:	e772      	b.n	800e67c <tcp_receive+0x14>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e796:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	dd10      	ble.n	800e7c0 <tcp_receive+0x158>
      tcp_send_empty_ack(pcb);
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4e6e      	ldr	r6, [pc, #440]	; (800e95c <tcp_receive+0x2f4>)
 800e7a2:	f001 ff11 	bl	80105c8 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e7a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7a8:	b121      	cbz	r1, 800e7b4 <tcp_receive+0x14c>
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7ae:	1a9a      	subs	r2, r3, r2
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	db57      	blt.n	800e864 <tcp_receive+0x1fc>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	e768      	b.n	800e68a <tcp_receive+0x22>
        pcb->dupacks = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7be:	e7f2      	b.n	800e7a6 <tcp_receive+0x13e>
      if (pcb->flags & TF_INFR) {
 800e7c0:	8b63      	ldrh	r3, [r4, #26]
 800e7c2:	0758      	lsls	r0, r3, #29
 800e7c4:	d509      	bpl.n	800e7da <tcp_receive+0x172>
        tcp_clear_flags(pcb, TF_INFR);
 800e7c6:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 800e7ca:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 800e7ce:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 800e7d0:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800e7d2:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e7d6:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e7da:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 800e7de:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e7e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800e7e2:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800e7e4:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e7e6:	eb03 03e6 	add.w	r3, r3, r6, asr #3
      pcb->nrtx = 0;
 800e7ea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800e7ee:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e7f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800e7f4:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800e7f8:	f200 81c7 	bhi.w	800eb8a <tcp_receive+0x522>
 800e7fc:	f104 0666 	add.w	r6, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e800:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800e804:	4630      	mov	r0, r6
 800e806:	f7ff fec9 	bl	800e59c <tcp_free_acked_segments.isra.1>
 800e80a:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e80c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e80e:	4630      	mov	r0, r6
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e810:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e812:	f7ff fec3 	bl	800e59c <tcp_free_acked_segments.isra.1>
      if (pcb->unacked == NULL) {
 800e816:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e818:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800e81a:	2a00      	cmp	r2, #0
 800e81c:	f000 8299 	beq.w	800ed52 <tcp_receive+0x6ea>
        pcb->rtime = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800e828:	2800      	cmp	r0, #0
 800e82a:	f000 828f 	beq.w	800ed4c <tcp_receive+0x6e4>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e82e:	4951      	ldr	r1, [pc, #324]	; (800e974 <tcp_receive+0x30c>)
 800e830:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800e834:	880e      	ldrh	r6, [r1, #0]
      if (pcb->flags & TF_RTO) {
 800e836:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e838:	4433      	add	r3, r6
      if (pcb->flags & TF_RTO) {
 800e83a:	050e      	lsls	r6, r1, #20
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e83c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800e840:	d52f      	bpl.n	800e8a2 <tcp_receive+0x23a>
        if (pcb->unacked == NULL) {
 800e842:	2a00      	cmp	r2, #0
 800e844:	f000 82a1 	beq.w	800ed8a <tcp_receive+0x722>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e848:	68d3      	ldr	r3, [r2, #12]
 800e84a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800e84c:	6858      	ldr	r0, [r3, #4]
 800e84e:	f7fd f8a3 	bl	800b998 <lwip_htonl>
 800e852:	1a30      	subs	r0, r6, r0
 800e854:	2800      	cmp	r0, #0
 800e856:	dc24      	bgt.n	800e8a2 <tcp_receive+0x23a>
          tcp_clear_flags(pcb, TF_RTO);
 800e858:	8b63      	ldrh	r3, [r4, #26]
 800e85a:	4e40      	ldr	r6, [pc, #256]	; (800e95c <tcp_receive+0x2f4>)
 800e85c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e860:	8363      	strh	r3, [r4, #26]
 800e862:	e7a0      	b.n	800e7a6 <tcp_receive+0x13e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e864:	4b44      	ldr	r3, [pc, #272]	; (800e978 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800e866:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	1a59      	subs	r1, r3, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800e86e:	eba1 01e2 	sub.w	r1, r1, r2, asr #3
 800e872:	b289      	uxth	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800e874:	440a      	add	r2, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800e876:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800e878:	b212      	sxth	r2, r2
      if (m < 0) {
 800e87a:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800e87c:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 800e87e:	da01      	bge.n	800e884 <tcp_receive+0x21c>
        m = (s16_t) - m;
 800e880:	4249      	negs	r1, r1
 800e882:	b208      	sxth	r0, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800e884:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800e888:	2700      	movs	r7, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 800e88a:	eba3 01a3 	sub.w	r1, r3, r3, asr #2
      pcb->rttest = 0;
 800e88e:	6367      	str	r7, [r4, #52]	; 0x34
 800e890:	682b      	ldr	r3, [r5, #0]
      pcb->sv = (s16_t)(pcb->sv + m);
 800e892:	4401      	add	r1, r0
 800e894:	b289      	uxth	r1, r1
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e896:	eb01 02e2 	add.w	r2, r1, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800e89a:	87e1      	strh	r1, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e89c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 800e8a0:	e6f3      	b.n	800e68a <tcp_receive+0x22>
 800e8a2:	4e2e      	ldr	r6, [pc, #184]	; (800e95c <tcp_receive+0x2f4>)
 800e8a4:	e77f      	b.n	800e7a6 <tcp_receive+0x13e>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e8a6:	4b30      	ldr	r3, [pc, #192]	; (800e968 <tcp_receive+0x300>)
 800e8a8:	f240 427b 	movw	r2, #1147	; 0x47b
 800e8ac:	4933      	ldr	r1, [pc, #204]	; (800e97c <tcp_receive+0x314>)
 800e8ae:	4830      	ldr	r0, [pc, #192]	; (800e970 <tcp_receive+0x308>)
 800e8b0:	f005 f8bc 	bl	8013a2c <iprintf>
 800e8b4:	e6de      	b.n	800e674 <tcp_receive+0xc>
        tcp_ack_now(pcb);
 800e8b6:	8b63      	ldrh	r3, [r4, #26]
 800e8b8:	f043 0302 	orr.w	r3, r3, #2
 800e8bc:	8363      	strh	r3, [r4, #26]
 800e8be:	e702      	b.n	800e6c6 <tcp_receive+0x5e>
      if (pcb->rcv_nxt == seqno) {
 800e8c0:	428b      	cmp	r3, r1
 800e8c2:	f000 8363 	beq.w	800ef8c <tcp_receive+0x924>
        if (pcb->ooseq == NULL) {
 800e8c6:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800e8c8:	2f00      	cmp	r7, #0
 800e8ca:	f000 827f 	beq.w	800edcc <tcp_receive+0x764>
            if (seqno == next->tcphdr->seqno) {
 800e8ce:	68f8      	ldr	r0, [r7, #12]
          struct tcp_seg *next, *prev = NULL;
 800e8d0:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e8d4:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800e8d8:	6842      	ldr	r2, [r0, #4]
 800e8da:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e8dc:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 800e8e0:	d018      	beq.n	800e914 <tcp_receive+0x2ac>
              if (prev == NULL) {
 800e8e2:	f1b8 0f00 	cmp.w	r8, #0
 800e8e6:	d02a      	beq.n	800e93e <tcp_receive+0x2d6>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e8e8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800e8ec:	6849      	ldr	r1, [r1, #4]
 800e8ee:	ebae 0101 	sub.w	r1, lr, r1
 800e8f2:	2900      	cmp	r1, #0
 800e8f4:	db03      	blt.n	800e8fe <tcp_receive+0x296>
 800e8f6:	f1b9 0f00 	cmp.w	r9, #0
 800e8fa:	f340 8270 	ble.w	800edde <tcp_receive+0x776>
              if (next->next == NULL &&
 800e8fe:	6839      	ldr	r1, [r7, #0]
 800e900:	46b8      	mov	r8, r7
 800e902:	2900      	cmp	r1, #0
 800e904:	d03e      	beq.n	800e984 <tcp_receive+0x31c>
 800e906:	460f      	mov	r7, r1
            if (seqno == next->tcphdr->seqno) {
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	6842      	ldr	r2, [r0, #4]
 800e90c:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e90e:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 800e912:	d1e6      	bne.n	800e8e2 <tcp_receive+0x27a>
              if (inseg.len > next->len) {
 800e914:	481a      	ldr	r0, [pc, #104]	; (800e980 <tcp_receive+0x318>)
 800e916:	893b      	ldrh	r3, [r7, #8]
 800e918:	8902      	ldrh	r2, [r0, #8]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	f67f aed3 	bls.w	800e6c6 <tcp_receive+0x5e>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e920:	f7fe fdce 	bl	800d4c0 <tcp_seg_copy>
                if (cseg != NULL) {
 800e924:	2800      	cmp	r0, #0
 800e926:	f43f aece 	beq.w	800e6c6 <tcp_receive+0x5e>
                  if (prev != NULL) {
 800e92a:	f1b8 0f00 	cmp.w	r8, #0
 800e92e:	f000 8315 	beq.w	800ef5c <tcp_receive+0x8f4>
                    prev->next = cseg;
 800e932:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800e936:	4639      	mov	r1, r7
 800e938:	f7ff fdb0 	bl	800e49c <tcp_oos_insert_segment>
 800e93c:	e6c3      	b.n	800e6c6 <tcp_receive+0x5e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e93e:	1a99      	subs	r1, r3, r2
 800e940:	2900      	cmp	r1, #0
 800e942:	dadc      	bge.n	800e8fe <tcp_receive+0x296>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e944:	480e      	ldr	r0, [pc, #56]	; (800e980 <tcp_receive+0x318>)
 800e946:	f7fe fdbb 	bl	800d4c0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800e94a:	2800      	cmp	r0, #0
 800e94c:	f43f aebb 	beq.w	800e6c6 <tcp_receive+0x5e>
                    pcb->ooseq = cseg;
 800e950:	6760      	str	r0, [r4, #116]	; 0x74
 800e952:	e7f0      	b.n	800e936 <tcp_receive+0x2ce>
 800e954:	24014030 	.word	0x24014030
 800e958:	24014050 	.word	0x24014050
 800e95c:	24014066 	.word	0x24014066
 800e960:	24014058 	.word	0x24014058
 800e964:	2401402c 	.word	0x2401402c
 800e968:	08015a50 	.word	0x08015a50
 800e96c:	08015abc 	.word	0x08015abc
 800e970:	0801487c 	.word	0x0801487c
 800e974:	24014044 	.word	0x24014044
 800e978:	2401bfc0 	.word	0x2401bfc0
 800e97c:	08015aa0 	.word	0x08015aa0
 800e980:	24014034 	.word	0x24014034
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e984:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800e986:	2b00      	cmp	r3, #0
 800e988:	f77f ae9d 	ble.w	800e6c6 <tcp_receive+0x5e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e98c:	8980      	ldrh	r0, [r0, #12]
 800e98e:	f7fc ffff 	bl	800b990 <lwip_htons>
 800e992:	07c2      	lsls	r2, r0, #31
 800e994:	f53f ae97 	bmi.w	800e6c6 <tcp_receive+0x5e>
                next->next = tcp_seg_copy(&inseg);
 800e998:	48b0      	ldr	r0, [pc, #704]	; (800ec5c <tcp_receive+0x5f4>)
 800e99a:	f7fe fd91 	bl	800d4c0 <tcp_seg_copy>
 800e99e:	6038      	str	r0, [r7, #0]
                if (next->next != NULL) {
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	f43f ae90 	beq.w	800e6c6 <tcp_receive+0x5e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	893a      	ldrh	r2, [r7, #8]
 800e9aa:	6859      	ldr	r1, [r3, #4]
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	440a      	add	r2, r1
 800e9b0:	1ad2      	subs	r2, r2, r3
 800e9b2:	2a00      	cmp	r2, #0
 800e9b4:	dd05      	ble.n	800e9c2 <tcp_receive+0x35a>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e9b6:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800e9b8:	6878      	ldr	r0, [r7, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e9ba:	b299      	uxth	r1, r3
 800e9bc:	8139      	strh	r1, [r7, #8]
                    pbuf_realloc(next->p, next->len);
 800e9be:	f7fe f99f 	bl	800cd00 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e9c2:	682a      	ldr	r2, [r5, #0]
 800e9c4:	8833      	ldrh	r3, [r6, #0]
 800e9c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e9c8:	4413      	add	r3, r2
 800e9ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e9cc:	1a5b      	subs	r3, r3, r1
 800e9ce:	1a9b      	subs	r3, r3, r2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f77f ae78 	ble.w	800e6c6 <tcp_receive+0x5e>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	8998      	ldrh	r0, [r3, #12]
 800e9dc:	f7fc ffd8 	bl	800b990 <lwip_htons>
 800e9e0:	07c3      	lsls	r3, r0, #31
 800e9e2:	f100 82bf 	bmi.w	800ef64 <tcp_receive+0x8fc>
 800e9e6:	683a      	ldr	r2, [r7, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e9e8:	6828      	ldr	r0, [r5, #0]
 800e9ea:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800e9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9ee:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 800e9f0:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e9f2:	4419      	add	r1, r3
 800e9f4:	b289      	uxth	r1, r1
 800e9f6:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e9f8:	f7fe f982 	bl	800cd00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	68da      	ldr	r2, [r3, #12]
 800ea00:	891f      	ldrh	r7, [r3, #8]
 800ea02:	8990      	ldrh	r0, [r2, #12]
 800ea04:	f7fc ffc4 	bl	800b990 <lwip_htons>
 800ea08:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea0c:	6829      	ldr	r1, [r5, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800ea0e:	bf18      	it	ne
 800ea10:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ea14:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800ea16:	443b      	add	r3, r7
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea18:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 800ea1a:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea1c:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800ea1e:	8033      	strh	r3, [r6, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea20:	4291      	cmp	r1, r2
 800ea22:	f43f ae50 	beq.w	800e6c6 <tcp_receive+0x5e>
 800ea26:	4b8e      	ldr	r3, [pc, #568]	; (800ec60 <tcp_receive+0x5f8>)
 800ea28:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ea2c:	498d      	ldr	r1, [pc, #564]	; (800ec64 <tcp_receive+0x5fc>)
 800ea2e:	488e      	ldr	r0, [pc, #568]	; (800ec68 <tcp_receive+0x600>)
 800ea30:	f004 fffc 	bl	8013a2c <iprintf>
 800ea34:	e647      	b.n	800e6c6 <tcp_receive+0x5e>
      struct pbuf *p = inseg.p;
 800ea36:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800ec5c <tcp_receive+0x5f4>
 800ea3a:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ea3e:	f1b8 0f00 	cmp.w	r8, #0
 800ea42:	f000 817b 	beq.w	800ed3c <tcp_receive+0x6d4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ea46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800ea4a:	429f      	cmp	r7, r3
 800ea4c:	f200 80c5 	bhi.w	800ebda <tcp_receive+0x572>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ea50:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800ea54:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ea56:	891a      	ldrh	r2, [r3, #8]
 800ea58:	42ba      	cmp	r2, r7
 800ea5a:	f0c0 80b3 	bcc.w	800ebc4 <tcp_receive+0x55c>
      inseg.len -= off;
 800ea5e:	f8b9 1008 	ldrh.w	r1, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ea62:	1bd2      	subs	r2, r2, r7
      while (p->len < off) {
 800ea64:	f8b8 300a 	ldrh.w	r3, [r8, #10]
      inseg.len -= off;
 800ea68:	1bc9      	subs	r1, r1, r7
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ea6a:	b292      	uxth	r2, r2
      while (p->len < off) {
 800ea6c:	429f      	cmp	r7, r3
      inseg.len -= off;
 800ea6e:	f8a9 1008 	strh.w	r1, [r9, #8]
      while (p->len < off) {
 800ea72:	d90c      	bls.n	800ea8e <tcp_receive+0x426>
        p->len = 0;
 800ea74:	2100      	movs	r1, #0
        off -= p->len;
 800ea76:	1afb      	subs	r3, r7, r3
        p->len = 0;
 800ea78:	f8a8 100a 	strh.w	r1, [r8, #10]
        p->tot_len = new_tot_len;
 800ea7c:	f8a8 2008 	strh.w	r2, [r8, #8]
        p = p->next;
 800ea80:	f8d8 8000 	ldr.w	r8, [r8]
        off -= p->len;
 800ea84:	b29f      	uxth	r7, r3
      while (p->len < off) {
 800ea86:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800ea8a:	42bb      	cmp	r3, r7
 800ea8c:	d3f3      	bcc.n	800ea76 <tcp_receive+0x40e>
      pbuf_remove_header(p, off);
 800ea8e:	4639      	mov	r1, r7
 800ea90:	4640      	mov	r0, r8
 800ea92:	f7fd ffe1 	bl	800ca58 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ea96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea98:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ea9e:	602b      	str	r3, [r5, #0]
 800eaa0:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eaa2:	2a00      	cmp	r2, #0
 800eaa4:	f43f ae0f 	beq.w	800e6c6 <tcp_receive+0x5e>
        tcplen = TCP_TCPLEN(&inseg);
 800eaa8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eaac:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 800eab0:	8998      	ldrh	r0, [r3, #12]
 800eab2:	f7fc ff6d 	bl	800b990 <lwip_htons>
 800eab6:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800eaba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800eabc:	bf18      	it	ne
 800eabe:	2301      	movne	r3, #1
 800eac0:	443b      	add	r3, r7
 800eac2:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800eac4:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800eac6:	8033      	strh	r3, [r6, #0]
        if (tcplen > pcb->rcv_wnd) {
 800eac8:	f0c0 81a9 	bcc.w	800ee1e <tcp_receive+0x7b6>
        if (pcb->ooseq != NULL) {
 800eacc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f000 8092 	beq.w	800ebf8 <tcp_receive+0x590>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ead4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ead8:	8998      	ldrh	r0, [r3, #12]
 800eada:	f7fc ff59 	bl	800b990 <lwip_htons>
 800eade:	07c0      	lsls	r0, r0, #31
 800eae0:	f100 8087 	bmi.w	800ebf2 <tcp_receive+0x58a>
 800eae4:	8833      	ldrh	r3, [r6, #0]
 800eae6:	f8d5 c000 	ldr.w	ip, [r5]
            struct tcp_seg *next = pcb->ooseq;
 800eaea:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
 800eaee:	eb03 020c 	add.w	r2, r3, ip
            while (next &&
 800eaf2:	f1b8 0f00 	cmp.w	r8, #0
 800eaf6:	f000 8233 	beq.w	800ef60 <tcp_receive+0x8f8>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eafa:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800eafe:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800eb02:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800eb06:	eba2 0e0a 	sub.w	lr, r2, sl
 800eb0a:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 800eb0e:	2900      	cmp	r1, #0
 800eb10:	da19      	bge.n	800eb46 <tcp_receive+0x4de>
 800eb12:	e1d8      	b.n	800eec6 <tcp_receive+0x85e>
              next = next->next;
 800eb14:	f8d8 7000 	ldr.w	r7, [r8]
              tcp_seg_free(tmp);
 800eb18:	4640      	mov	r0, r8
 800eb1a:	f7fe fcb9 	bl	800d490 <tcp_seg_free>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eb1e:	8833      	ldrh	r3, [r6, #0]
 800eb20:	46b8      	mov	r8, r7
            while (next &&
 800eb22:	2f00      	cmp	r7, #0
 800eb24:	f000 8207 	beq.w	800ef36 <tcp_receive+0x8ce>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eb28:	f8d5 c000 	ldr.w	ip, [r5]
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	eb03 020c 	add.w	r2, r3, ip
 800eb32:	8939      	ldrh	r1, [r7, #8]
 800eb34:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800eb38:	eba2 0e0a 	sub.w	lr, r2, sl
 800eb3c:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 800eb40:	2900      	cmp	r1, #0
 800eb42:	f2c0 81c1 	blt.w	800eec8 <tcp_receive+0x860>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb46:	8980      	ldrh	r0, [r0, #12]
 800eb48:	f7fc ff22 	bl	800b990 <lwip_htons>
 800eb4c:	07c1      	lsls	r1, r0, #31
 800eb4e:	d5e1      	bpl.n	800eb14 <tcp_receive+0x4ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800eb50:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb54:	8998      	ldrh	r0, [r3, #12]
 800eb56:	f7fc ff1b 	bl	800b990 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb5a:	0782      	lsls	r2, r0, #30
 800eb5c:	d4da      	bmi.n	800eb14 <tcp_receive+0x4ac>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eb5e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb62:	2001      	movs	r0, #1
 800eb64:	899f      	ldrh	r7, [r3, #12]
 800eb66:	f7fc ff13 	bl	800b990 <lwip_htons>
 800eb6a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb6e:	4338      	orrs	r0, r7
                tcplen = TCP_TCPLEN(&inseg);
 800eb70:	f8b9 7008 	ldrh.w	r7, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eb74:	b280      	uxth	r0, r0
 800eb76:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800eb78:	f7fc ff0a 	bl	800b990 <lwip_htons>
 800eb7c:	f010 0003 	ands.w	r0, r0, #3
 800eb80:	bf18      	it	ne
 800eb82:	2001      	movne	r0, #1
 800eb84:	4407      	add	r7, r0
 800eb86:	8037      	strh	r7, [r6, #0]
 800eb88:	e7c4      	b.n	800eb14 <tcp_receive+0x4ac>
        if (pcb->cwnd < pcb->ssthresh) {
 800eb8a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800eb8e:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800eb90:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800eb94:	4293      	cmp	r3, r2
 800eb96:	f240 80e0 	bls.w	800ed5a <tcp_receive+0x6f2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800eb9a:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800eb9c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800eb9e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800eba2:	bf0c      	ite	eq
 800eba4:	2002      	moveq	r0, #2
 800eba6:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800eba8:	fb13 f300 	smulbb	r3, r3, r0
 800ebac:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 800ebae:	428b      	cmp	r3, r1
 800ebb0:	bf94      	ite	ls
 800ebb2:	18d1      	addls	r1, r2, r3
 800ebb4:	1851      	addhi	r1, r2, r1
 800ebb6:	b289      	uxth	r1, r1
 800ebb8:	428a      	cmp	r2, r1
 800ebba:	f200 80f6 	bhi.w	800edaa <tcp_receive+0x742>
 800ebbe:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 800ebc2:	e61b      	b.n	800e7fc <tcp_receive+0x194>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ebc4:	4b26      	ldr	r3, [pc, #152]	; (800ec60 <tcp_receive+0x5f8>)
 800ebc6:	f240 5297 	movw	r2, #1431	; 0x597
 800ebca:	4928      	ldr	r1, [pc, #160]	; (800ec6c <tcp_receive+0x604>)
 800ebcc:	4826      	ldr	r0, [pc, #152]	; (800ec68 <tcp_receive+0x600>)
 800ebce:	f004 ff2d 	bl	8013a2c <iprintf>
 800ebd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ebd6:	891a      	ldrh	r2, [r3, #8]
 800ebd8:	e741      	b.n	800ea5e <tcp_receive+0x3f6>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ebda:	4b21      	ldr	r3, [pc, #132]	; (800ec60 <tcp_receive+0x5f8>)
 800ebdc:	f240 5295 	movw	r2, #1429	; 0x595
 800ebe0:	4923      	ldr	r1, [pc, #140]	; (800ec70 <tcp_receive+0x608>)
 800ebe2:	4821      	ldr	r0, [pc, #132]	; (800ec68 <tcp_receive+0x600>)
 800ebe4:	f004 ff22 	bl	8013a2c <iprintf>
 800ebe8:	e732      	b.n	800ea50 <tcp_receive+0x3e8>
              pcb->ooseq = pcb->ooseq->next;
 800ebea:	6803      	ldr	r3, [r0, #0]
 800ebec:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ebee:	f7fe fc4f 	bl	800d490 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ebf2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d1f8      	bne.n	800ebea <tcp_receive+0x582>
 800ebf8:	8833      	ldrh	r3, [r6, #0]
 800ebfa:	682a      	ldr	r2, [r5, #0]
 800ebfc:	441a      	add	r2, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ebfe:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800ec00:	6262      	str	r2, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ec02:	4299      	cmp	r1, r3
 800ec04:	f0c0 8146 	bcc.w	800ee94 <tcp_receive+0x82c>
        pcb->rcv_wnd -= tcplen;
 800ec08:	1acb      	subs	r3, r1, r3
        tcp_update_rcv_ann_wnd(pcb);
 800ec0a:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800ec0c:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ec0e:	f7fe fbc3 	bl	800d398 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ec12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ec16:	891a      	ldrh	r2, [r3, #8]
 800ec18:	b122      	cbz	r2, 800ec24 <tcp_receive+0x5bc>
          recv_data = inseg.p;
 800ec1a:	4916      	ldr	r1, [pc, #88]	; (800ec74 <tcp_receive+0x60c>)
          inseg.p = NULL;
 800ec1c:	2200      	movs	r2, #0
          recv_data = inseg.p;
 800ec1e:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 800ec20:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ec24:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ec28:	8998      	ldrh	r0, [r3, #12]
 800ec2a:	f7fc feb1 	bl	800b990 <lwip_htons>
 800ec2e:	07c6      	lsls	r6, r0, #31
 800ec30:	d504      	bpl.n	800ec3c <tcp_receive+0x5d4>
          recv_flags |= TF_GOT_FIN;
 800ec32:	4a11      	ldr	r2, [pc, #68]	; (800ec78 <tcp_receive+0x610>)
 800ec34:	7813      	ldrb	r3, [r2, #0]
 800ec36:	f043 0320 	orr.w	r3, r3, #32
 800ec3a:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800ec3c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800ec3e:	2e00      	cmp	r6, #0
 800ec40:	f000 80b8 	beq.w	800edb4 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ec44:	68f3      	ldr	r3, [r6, #12]
 800ec46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ec48:	6859      	ldr	r1, [r3, #4]
        while (pcb->ooseq != NULL &&
 800ec4a:	428a      	cmp	r2, r1
 800ec4c:	f040 80b2 	bne.w	800edb4 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ec50:	f8df 900c 	ldr.w	r9, [pc, #12]	; 800ec60 <tcp_receive+0x5f8>
 800ec54:	f8df 8024 	ldr.w	r8, [pc, #36]	; 800ec7c <tcp_receive+0x614>
 800ec58:	4f03      	ldr	r7, [pc, #12]	; (800ec68 <tcp_receive+0x600>)
 800ec5a:	e04a      	b.n	800ecf2 <tcp_receive+0x68a>
 800ec5c:	24014034 	.word	0x24014034
 800ec60:	08015a50 	.word	0x08015a50
 800ec64:	08015b08 	.word	0x08015b08
 800ec68:	0801487c 	.word	0x0801487c
 800ec6c:	08015af8 	.word	0x08015af8
 800ec70:	08015ae8 	.word	0x08015ae8
 800ec74:	24014048 	.word	0x24014048
 800ec78:	2401404c 	.word	0x2401404c
 800ec7c:	08015b9c 	.word	0x08015b9c
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ec80:	68f3      	ldr	r3, [r6, #12]
 800ec82:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 800ec86:	8998      	ldrh	r0, [r3, #12]
 800ec88:	f7fc fe82 	bl	800b990 <lwip_htons>
 800ec8c:	f010 0303 	ands.w	r3, r0, #3
 800ec90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800ec92:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ec94:	bf18      	it	ne
 800ec96:	2301      	movne	r3, #1
 800ec98:	4453      	add	r3, sl
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800ec9e:	f7fe fb7b 	bl	800d398 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800eca2:	6871      	ldr	r1, [r6, #4]
 800eca4:	890b      	ldrh	r3, [r1, #8]
 800eca6:	b13b      	cbz	r3, 800ecb8 <tcp_receive+0x650>
            if (recv_data) {
 800eca8:	4bba      	ldr	r3, [pc, #744]	; (800ef94 <tcp_receive+0x92c>)
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	2800      	cmp	r0, #0
 800ecae:	d06a      	beq.n	800ed86 <tcp_receive+0x71e>
              pbuf_cat(recv_data, cseg->p);
 800ecb0:	f7fe f8ac 	bl	800ce0c <pbuf_cat>
            cseg->p = NULL;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	6073      	str	r3, [r6, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ecb8:	68f3      	ldr	r3, [r6, #12]
 800ecba:	8998      	ldrh	r0, [r3, #12]
 800ecbc:	f7fc fe68 	bl	800b990 <lwip_htons>
 800ecc0:	07c0      	lsls	r0, r0, #31
 800ecc2:	d509      	bpl.n	800ecd8 <tcp_receive+0x670>
            recv_flags |= TF_GOT_FIN;
 800ecc4:	4ab4      	ldr	r2, [pc, #720]	; (800ef98 <tcp_receive+0x930>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ecc6:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800ecc8:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ecca:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800eccc:	f043 0320 	orr.w	r3, r3, #32
 800ecd0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ecd2:	d101      	bne.n	800ecd8 <tcp_receive+0x670>
              pcb->state = CLOSE_WAIT;
 800ecd4:	2307      	movs	r3, #7
 800ecd6:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800ecd8:	6833      	ldr	r3, [r6, #0]
          tcp_seg_free(cseg);
 800ecda:	4630      	mov	r0, r6
          pcb->ooseq = cseg->next;
 800ecdc:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800ecde:	f7fe fbd7 	bl	800d490 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ece2:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800ece4:	2e00      	cmp	r6, #0
 800ece6:	d065      	beq.n	800edb4 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ece8:	68f3      	ldr	r3, [r6, #12]
        while (pcb->ooseq != NULL &&
 800ecea:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ecec:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 800ecee:	428a      	cmp	r2, r1
 800ecf0:	d160      	bne.n	800edb4 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ecf2:	602a      	str	r2, [r5, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ecf4:	8998      	ldrh	r0, [r3, #12]
 800ecf6:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 800ecfa:	f7fc fe49 	bl	800b990 <lwip_htons>
 800ecfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed00:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed04:	68f2      	ldr	r2, [r6, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed06:	bf18      	it	ne
 800ed08:	2001      	movne	r0, #1
 800ed0a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed0c:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed10:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed12:	f8b6 a008 	ldrh.w	sl, [r6, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed16:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed18:	8990      	ldrh	r0, [r2, #12]
 800ed1a:	f7fc fe39 	bl	800b990 <lwip_htons>
 800ed1e:	f010 0003 	ands.w	r0, r0, #3
 800ed22:	bf18      	it	ne
 800ed24:	2001      	movne	r0, #1
 800ed26:	4450      	add	r0, sl
 800ed28:	4583      	cmp	fp, r0
 800ed2a:	d2a9      	bcs.n	800ec80 <tcp_receive+0x618>
 800ed2c:	464b      	mov	r3, r9
 800ed2e:	f240 622c 	movw	r2, #1580	; 0x62c
 800ed32:	4641      	mov	r1, r8
 800ed34:	4638      	mov	r0, r7
 800ed36:	f004 fe79 	bl	8013a2c <iprintf>
 800ed3a:	e7a1      	b.n	800ec80 <tcp_receive+0x618>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ed3c:	4b97      	ldr	r3, [pc, #604]	; (800ef9c <tcp_receive+0x934>)
 800ed3e:	f240 5294 	movw	r2, #1428	; 0x594
 800ed42:	4997      	ldr	r1, [pc, #604]	; (800efa0 <tcp_receive+0x938>)
 800ed44:	4897      	ldr	r0, [pc, #604]	; (800efa4 <tcp_receive+0x93c>)
 800ed46:	f004 fe71 	bl	8013a2c <iprintf>
 800ed4a:	e67c      	b.n	800ea46 <tcp_receive+0x3de>
        pcb->unsent_oversize = 0;
 800ed4c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 800ed50:	e56d      	b.n	800e82e <tcp_receive+0x1c6>
        pcb->rtime = -1;
 800ed52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed56:	8623      	strh	r3, [r4, #48]	; 0x30
 800ed58:	e564      	b.n	800e824 <tcp_receive+0x1bc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ed5a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ed5e:	4419      	add	r1, r3
 800ed60:	b289      	uxth	r1, r1
 800ed62:	428b      	cmp	r3, r1
 800ed64:	d82f      	bhi.n	800edc6 <tcp_receive+0x75e>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ed66:	428a      	cmp	r2, r1
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ed68:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ed6c:	f63f ad46 	bhi.w	800e7fc <tcp_receive+0x194>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ed72:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed74:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ed76:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d814      	bhi.n	800edaa <tcp_receive+0x742>
 800ed80:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800ed84:	e53a      	b.n	800e7fc <tcp_receive+0x194>
              recv_data = cseg->p;
 800ed86:	6019      	str	r1, [r3, #0]
 800ed88:	e794      	b.n	800ecb4 <tcp_receive+0x64c>
          if ((pcb->unsent == NULL) ||
 800ed8a:	b148      	cbz	r0, 800eda0 <tcp_receive+0x738>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ed8c:	68c3      	ldr	r3, [r0, #12]
 800ed8e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800ed90:	6858      	ldr	r0, [r3, #4]
 800ed92:	f7fc fe01 	bl	800b998 <lwip_htonl>
 800ed96:	1a30      	subs	r0, r6, r0
          if ((pcb->unsent == NULL) ||
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	f73f ad82 	bgt.w	800e8a2 <tcp_receive+0x23a>
 800ed9e:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 800eda0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800eda4:	4e80      	ldr	r6, [pc, #512]	; (800efa8 <tcp_receive+0x940>)
 800eda6:	8361      	strh	r1, [r4, #26]
 800eda8:	e4fd      	b.n	800e7a6 <tcp_receive+0x13e>
          TCP_WND_INC(pcb->cwnd, increase);
 800edaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800edb2:	e523      	b.n	800e7fc <tcp_receive+0x194>
        tcp_ack(pcb);
 800edb4:	8b63      	ldrh	r3, [r4, #26]
 800edb6:	07d9      	lsls	r1, r3, #31
 800edb8:	d50d      	bpl.n	800edd6 <tcp_receive+0x76e>
 800edba:	f023 0301 	bic.w	r3, r3, #1
 800edbe:	f043 0302 	orr.w	r3, r3, #2
 800edc2:	8363      	strh	r3, [r4, #26]
 800edc4:	e4c9      	b.n	800e75a <tcp_receive+0xf2>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800edc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800edca:	e7d1      	b.n	800ed70 <tcp_receive+0x708>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800edcc:	4877      	ldr	r0, [pc, #476]	; (800efac <tcp_receive+0x944>)
 800edce:	f7fe fb77 	bl	800d4c0 <tcp_seg_copy>
 800edd2:	6760      	str	r0, [r4, #116]	; 0x74
 800edd4:	e477      	b.n	800e6c6 <tcp_receive+0x5e>
        tcp_ack(pcb);
 800edd6:	f043 0301 	orr.w	r3, r3, #1
 800edda:	8363      	strh	r3, [r4, #26]
 800eddc:	e4bd      	b.n	800e75a <tcp_receive+0xf2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800edde:	4873      	ldr	r0, [pc, #460]	; (800efac <tcp_receive+0x944>)
 800ede0:	f7fe fb6e 	bl	800d4c0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800ede4:	4606      	mov	r6, r0
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f43f ac6d 	beq.w	800e6c6 <tcp_receive+0x5e>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800edec:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800edf0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800edf4:	6851      	ldr	r1, [r2, #4]
 800edf6:	682a      	ldr	r2, [r5, #0]
 800edf8:	440b      	add	r3, r1
 800edfa:	1a9b      	subs	r3, r3, r2
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	dd07      	ble.n	800ee10 <tcp_receive+0x7a8>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ee00:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800ee02:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ee06:	b291      	uxth	r1, r2
 800ee08:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ee0c:	f7fd ff78 	bl	800cd00 <pbuf_realloc>
                    prev->next = cseg;
 800ee10:	f8c8 6000 	str.w	r6, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800ee14:	4639      	mov	r1, r7
 800ee16:	4630      	mov	r0, r6
 800ee18:	f7ff fb40 	bl	800e49c <tcp_oos_insert_segment>
 800ee1c:	e453      	b.n	800e6c6 <tcp_receive+0x5e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee1e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ee22:	8998      	ldrh	r0, [r3, #12]
 800ee24:	f7fc fdb4 	bl	800b990 <lwip_htons>
 800ee28:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ee2a:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee2e:	f100 8085 	bmi.w	800ef3c <tcp_receive+0x8d4>
 800ee32:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ee34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ee36:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee3a:	f7fc fda9 	bl	800b990 <lwip_htons>
 800ee3e:	0787      	lsls	r7, r0, #30
            inseg.len -= 1;
 800ee40:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee44:	d503      	bpl.n	800ee4e <tcp_receive+0x7e6>
            inseg.len -= 1;
 800ee46:	3901      	subs	r1, #1
 800ee48:	b289      	uxth	r1, r1
 800ee4a:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800ee4e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ee52:	f7fd ff55 	bl	800cd00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ee56:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ee5a:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 800ee5e:	8998      	ldrh	r0, [r3, #12]
 800ee60:	f7fc fd96 	bl	800b990 <lwip_htons>
 800ee64:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee68:	682a      	ldr	r2, [r5, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800ee6a:	bf18      	it	ne
 800ee6c:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee6e:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800ee72:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800ee74:	443b      	add	r3, r7
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee76:	4461      	add	r1, ip
          tcplen = TCP_TCPLEN(&inseg);
 800ee78:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee7a:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 800ee7c:	8033      	strh	r3, [r6, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee7e:	428a      	cmp	r2, r1
 800ee80:	f43f ae24 	beq.w	800eacc <tcp_receive+0x464>
 800ee84:	4b45      	ldr	r3, [pc, #276]	; (800ef9c <tcp_receive+0x934>)
 800ee86:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ee8a:	4949      	ldr	r1, [pc, #292]	; (800efb0 <tcp_receive+0x948>)
 800ee8c:	4845      	ldr	r0, [pc, #276]	; (800efa4 <tcp_receive+0x93c>)
 800ee8e:	f004 fdcd 	bl	8013a2c <iprintf>
 800ee92:	e61b      	b.n	800eacc <tcp_receive+0x464>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ee94:	4b41      	ldr	r3, [pc, #260]	; (800ef9c <tcp_receive+0x934>)
 800ee96:	f240 6207 	movw	r2, #1543	; 0x607
 800ee9a:	4946      	ldr	r1, [pc, #280]	; (800efb4 <tcp_receive+0x94c>)
 800ee9c:	4841      	ldr	r0, [pc, #260]	; (800efa4 <tcp_receive+0x93c>)
 800ee9e:	f004 fdc5 	bl	8013a2c <iprintf>
 800eea2:	8833      	ldrh	r3, [r6, #0]
 800eea4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800eea6:	e6af      	b.n	800ec08 <tcp_receive+0x5a0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eea8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800eeac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800eeae:	4413      	add	r3, r2
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d901      	bls.n	800eeba <tcp_receive+0x852>
 800eeb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eeba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800eebe:	4620      	mov	r0, r4
 800eec0:	f001 faf8 	bl	80104b4 <tcp_rexmit_fast>
 800eec4:	e46f      	b.n	800e7a6 <tcp_receive+0x13e>
            while (next &&
 800eec6:	4647      	mov	r7, r8
            if (next &&
 800eec8:	f1be 0f00 	cmp.w	lr, #0
 800eecc:	dc01      	bgt.n	800eed2 <tcp_receive+0x86a>
            pcb->ooseq = next;
 800eece:	6767      	str	r7, [r4, #116]	; 0x74
 800eed0:	e695      	b.n	800ebfe <tcp_receive+0x596>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eed2:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800eed6:	ebaa 0c0c 	sub.w	ip, sl, ip
 800eeda:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eede:	8998      	ldrh	r0, [r3, #12]
 800eee0:	f7fc fd56 	bl	800b990 <lwip_htons>
 800eee4:	0783      	lsls	r3, r0, #30
 800eee6:	d504      	bpl.n	800eef2 <tcp_receive+0x88a>
                inseg.len -= 1;
 800eee8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800eeec:	3b01      	subs	r3, #1
 800eeee:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800eef2:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800eef6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800eefa:	f7fd ff01 	bl	800cd00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800eefe:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ef02:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800ef06:	8998      	ldrh	r0, [r3, #12]
 800ef08:	f7fc fd42 	bl	800b990 <lwip_htons>
 800ef0c:	f010 0303 	ands.w	r3, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ef10:	682a      	ldr	r2, [r5, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800ef12:	bf18      	it	ne
 800ef14:	2301      	movne	r3, #1
 800ef16:	4443      	add	r3, r8
 800ef18:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ef1a:	1899      	adds	r1, r3, r2
 800ef1c:	68fa      	ldr	r2, [r7, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800ef1e:	8033      	strh	r3, [r6, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ef20:	6852      	ldr	r2, [r2, #4]
 800ef22:	4291      	cmp	r1, r2
 800ef24:	d0d3      	beq.n	800eece <tcp_receive+0x866>
 800ef26:	4b1d      	ldr	r3, [pc, #116]	; (800ef9c <tcp_receive+0x934>)
 800ef28:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ef2c:	4922      	ldr	r1, [pc, #136]	; (800efb8 <tcp_receive+0x950>)
 800ef2e:	481d      	ldr	r0, [pc, #116]	; (800efa4 <tcp_receive+0x93c>)
 800ef30:	f004 fd7c 	bl	8013a2c <iprintf>
 800ef34:	8833      	ldrh	r3, [r6, #0]
 800ef36:	682a      	ldr	r2, [r5, #0]
 800ef38:	441a      	add	r2, r3
 800ef3a:	e7c8      	b.n	800eece <tcp_receive+0x866>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ef3c:	899f      	ldrh	r7, [r3, #12]
 800ef3e:	4638      	mov	r0, r7
 800ef40:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800ef44:	f7fc fd24 	bl	800b990 <lwip_htons>
 800ef48:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ef4c:	f7fc fd20 	bl	800b990 <lwip_htons>
 800ef50:	4338      	orrs	r0, r7
 800ef52:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ef56:	b280      	uxth	r0, r0
 800ef58:	8198      	strh	r0, [r3, #12]
 800ef5a:	e76b      	b.n	800ee34 <tcp_receive+0x7cc>
                    pcb->ooseq = cseg;
 800ef5c:	6760      	str	r0, [r4, #116]	; 0x74
 800ef5e:	e4ea      	b.n	800e936 <tcp_receive+0x2ce>
            while (next &&
 800ef60:	4647      	mov	r7, r8
 800ef62:	e7b4      	b.n	800eece <tcp_receive+0x866>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800ef72:	f7fc fd0d 	bl	800b990 <lwip_htons>
 800ef76:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ef7a:	f7fc fd09 	bl	800b990 <lwip_htons>
 800ef7e:	683a      	ldr	r2, [r7, #0]
 800ef80:	ea48 0800 	orr.w	r8, r8, r0
 800ef84:	68d3      	ldr	r3, [r2, #12]
 800ef86:	f8a3 800c 	strh.w	r8, [r3, #12]
 800ef8a:	e52d      	b.n	800e9e8 <tcp_receive+0x380>
 800ef8c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 800efac <tcp_receive+0x944>
 800ef90:	e58a      	b.n	800eaa8 <tcp_receive+0x440>
 800ef92:	bf00      	nop
 800ef94:	24014048 	.word	0x24014048
 800ef98:	2401404c 	.word	0x2401404c
 800ef9c:	08015a50 	.word	0x08015a50
 800efa0:	08015ad8 	.word	0x08015ad8
 800efa4:	0801487c 	.word	0x0801487c
 800efa8:	24014066 	.word	0x24014066
 800efac:	24014034 	.word	0x24014034
 800efb0:	08015b08 	.word	0x08015b08
 800efb4:	08015b7c 	.word	0x08015b7c
 800efb8:	08015b40 	.word	0x08015b40

0800efbc <tcp_input>:
{
 800efbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800efc0:	4605      	mov	r5, r0
{
 800efc2:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800efc4:	2800      	cmp	r0, #0
 800efc6:	f000 8109 	beq.w	800f1dc <tcp_input+0x220>
  TCP_STATS_INC(tcp.recv);
 800efca:	4c88      	ldr	r4, [pc, #544]	; (800f1ec <tcp_input+0x230>)
  if (p->len < TCP_HLEN) {
 800efcc:	8969      	ldrh	r1, [r5, #10]
  TCP_STATS_INC(tcp.recv);
 800efce:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 800efd2:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  if (p->len < TCP_HLEN) {
 800efd6:	2913      	cmp	r1, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800efd8:	6868      	ldr	r0, [r5, #4]
  TCP_STATS_INC(tcp.recv);
 800efda:	f102 0201 	add.w	r2, r2, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 800efde:	4e84      	ldr	r6, [pc, #528]	; (800f1f0 <tcp_input+0x234>)
  MIB2_STATS_INC(mib2.tcpinsegs);
 800efe0:	f103 0301 	add.w	r3, r3, #1
  TCP_STATS_INC(tcp.recv);
 800efe4:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 800efe8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  tcphdr = (struct tcp_hdr *)p->payload;
 800efec:	6030      	str	r0, [r6, #0]
  if (p->len < TCP_HLEN) {
 800efee:	d814      	bhi.n	800f01a <tcp_input+0x5e>
      TCP_STATS_INC(tcp.lenerr);
 800eff0:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 800eff4:	3301      	adds	r3, #1
 800eff6:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 800effa:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
  pbuf_free(p);
 800effe:	4628      	mov	r0, r5
  MIB2_STATS_INC(mib2.tcpinerrs);
 800f000:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
  TCP_STATS_INC(tcp.drop);
 800f004:	3201      	adds	r2, #1
  MIB2_STATS_INC(mib2.tcpinerrs);
 800f006:	3301      	adds	r3, #1
  TCP_STATS_INC(tcp.drop);
 800f008:	f8a4 2096 	strh.w	r2, [r4, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 800f00c:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
}
 800f010:	b007      	add	sp, #28
 800f012:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800f016:	f7fd bd5b 	b.w	800cad0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f01a:	4f76      	ldr	r7, [pc, #472]	; (800f1f4 <tcp_input+0x238>)
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	6978      	ldr	r0, [r7, #20]
 800f020:	f003 fb2c 	bl	801267c <ip4_addr_isbroadcast_u32>
 800f024:	4680      	mov	r8, r0
 800f026:	2800      	cmp	r0, #0
 800f028:	f040 80d2 	bne.w	800f1d0 <tcp_input+0x214>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f032:	2be0      	cmp	r3, #224	; 0xe0
 800f034:	f000 80cc 	beq.w	800f1d0 <tcp_input+0x214>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f038:	6833      	ldr	r3, [r6, #0]
 800f03a:	8998      	ldrh	r0, [r3, #12]
 800f03c:	f7fc fca8 	bl	800b990 <lwip_htons>
 800f040:	0a81      	lsrs	r1, r0, #10
 800f042:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f046:	2913      	cmp	r1, #19
 800f048:	d9d2      	bls.n	800eff0 <tcp_input+0x34>
 800f04a:	b28b      	uxth	r3, r1
 800f04c:	892a      	ldrh	r2, [r5, #8]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d3ce      	bcc.n	800eff0 <tcp_input+0x34>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f052:	f1a3 0214 	sub.w	r2, r3, #20
  if (p->len >= hdrlen_bytes) {
 800f056:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f058:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800f228 <tcp_input+0x26c>
  tcphdr_opt2 = NULL;
 800f05c:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 800f22c <tcp_input+0x270>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f060:	b292      	uxth	r2, r2
  if (p->len >= hdrlen_bytes) {
 800f062:	4298      	cmp	r0, r3
  tcphdr_opt2 = NULL;
 800f064:	f8ca 8000 	str.w	r8, [sl]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f068:	f8a9 2000 	strh.w	r2, [r9]
  if (p->len >= hdrlen_bytes) {
 800f06c:	f080 81d1 	bcs.w	800f412 <tcp_input+0x456>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f070:	682b      	ldr	r3, [r5, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	f000 82b5 	beq.w	800f5e2 <tcp_input+0x626>
    pbuf_remove_header(p, TCP_HLEN);
 800f078:	2114      	movs	r1, #20
 800f07a:	4628      	mov	r0, r5
 800f07c:	f7fd fcec 	bl	800ca58 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800f080:	896b      	ldrh	r3, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f082:	f8b9 8000 	ldrh.w	r8, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800f086:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 800f088:	4a5b      	ldr	r2, [pc, #364]	; (800f1f8 <tcp_input+0x23c>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800f08a:	4619      	mov	r1, r3
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f08c:	eba8 0803 	sub.w	r8, r8, r3
    tcphdr_opt1len = p->len;
 800f090:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800f092:	f7fd fce1 	bl	800ca58 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800f096:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f098:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
 800f09c:	8943      	ldrh	r3, [r0, #10]
 800f09e:	4543      	cmp	r3, r8
 800f0a0:	d3a6      	bcc.n	800eff0 <tcp_input+0x34>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f0a2:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800f0a4:	4641      	mov	r1, r8
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f0a6:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 800f0aa:	f7fd fcd5 	bl	800ca58 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f0ae:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f0b0:	896a      	ldrh	r2, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f0b2:	eba3 0308 	sub.w	r3, r3, r8
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	812b      	strh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f0ba:	b132      	cbz	r2, 800f0ca <tcp_input+0x10e>
 800f0bc:	4b4f      	ldr	r3, [pc, #316]	; (800f1fc <tcp_input+0x240>)
 800f0be:	22df      	movs	r2, #223	; 0xdf
 800f0c0:	494f      	ldr	r1, [pc, #316]	; (800f200 <tcp_input+0x244>)
 800f0c2:	4850      	ldr	r0, [pc, #320]	; (800f204 <tcp_input+0x248>)
 800f0c4:	f004 fcb2 	bl	8013a2c <iprintf>
 800f0c8:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f0ca:	682a      	ldr	r2, [r5, #0]
 800f0cc:	8912      	ldrh	r2, [r2, #8]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d005      	beq.n	800f0de <tcp_input+0x122>
 800f0d2:	4b4a      	ldr	r3, [pc, #296]	; (800f1fc <tcp_input+0x240>)
 800f0d4:	22e0      	movs	r2, #224	; 0xe0
 800f0d6:	494c      	ldr	r1, [pc, #304]	; (800f208 <tcp_input+0x24c>)
 800f0d8:	484a      	ldr	r0, [pc, #296]	; (800f204 <tcp_input+0x248>)
 800f0da:	f004 fca7 	bl	8013a2c <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f0de:	f8d6 8000 	ldr.w	r8, [r6]
 800f0e2:	f8b8 0000 	ldrh.w	r0, [r8]
 800f0e6:	f7fc fc53 	bl	800b990 <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f0ea:	f8d6 9000 	ldr.w	r9, [r6]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f0ee:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f0f2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800f0f6:	f7fc fc4b 	bl	800b990 <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f0fa:	f8d6 8000 	ldr.w	r8, [r6]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f0fe:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f102:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f106:	f7fc fc47 	bl	800b998 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f10a:	f8d6 9000 	ldr.w	r9, [r6]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f10e:	4b3f      	ldr	r3, [pc, #252]	; (800f20c <tcp_input+0x250>)
 800f110:	f8c8 0004 	str.w	r0, [r8, #4]
 800f114:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f116:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800f11a:	f7fc fc3d 	bl	800b998 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f11e:	f8d6 8000 	ldr.w	r8, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f122:	4b3b      	ldr	r3, [pc, #236]	; (800f210 <tcp_input+0x254>)
 800f124:	f8c9 0008 	str.w	r0, [r9, #8]
 800f128:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f12a:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 800f12e:	f7fc fc2f 	bl	800b990 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800f132:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f134:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
 800f138:	8998      	ldrh	r0, [r3, #12]
 800f13a:	f7fc fc29 	bl	800b990 <lwip_htons>
 800f13e:	4935      	ldr	r1, [pc, #212]	; (800f214 <tcp_input+0x258>)
 800f140:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len;
 800f142:	892b      	ldrh	r3, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 800f144:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800f148:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f14a:	0782      	lsls	r2, r0, #30
 800f14c:	f000 8167 	beq.w	800f41e <tcp_input+0x462>
    tcplen++;
 800f150:	1c5a      	adds	r2, r3, #1
 800f152:	4931      	ldr	r1, [pc, #196]	; (800f218 <tcp_input+0x25c>)
 800f154:	b292      	uxth	r2, r2
 800f156:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800f158:	4293      	cmp	r3, r2
    tcplen++;
 800f15a:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800f15c:	f63f af48 	bhi.w	800eff0 <tcp_input+0x34>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f160:	4b2e      	ldr	r3, [pc, #184]	; (800f21c <tcp_input+0x260>)
 800f162:	f8d3 8000 	ldr.w	r8, [r3]
 800f166:	f1b8 0f00 	cmp.w	r8, #0
 800f16a:	f000 80fe 	beq.w	800f36a <tcp_input+0x3ae>
  prev = NULL;
 800f16e:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f172:	f8df b088 	ldr.w	fp, [pc, #136]	; 800f1fc <tcp_input+0x240>
 800f176:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800f204 <tcp_input+0x248>
 800f17a:	e01c      	b.n	800f1b6 <tcp_input+0x1fa>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f17c:	2b0a      	cmp	r3, #10
 800f17e:	f000 80eb 	beq.w	800f358 <tcp_input+0x39c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f182:	2b01      	cmp	r3, #1
 800f184:	f000 80e1 	beq.w	800f34a <tcp_input+0x38e>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f188:	f898 2008 	ldrb.w	r2, [r8, #8]
 800f18c:	b132      	cbz	r2, 800f19c <tcp_input+0x1e0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f194:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f196:	b2db      	uxtb	r3, r3
 800f198:	429a      	cmp	r2, r3
 800f19a:	d105      	bne.n	800f1a8 <tcp_input+0x1ec>
    if (pcb->remote_port == tcphdr->src &&
 800f19c:	6833      	ldr	r3, [r6, #0]
 800f19e:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 800f1a2:	881a      	ldrh	r2, [r3, #0]
 800f1a4:	4291      	cmp	r1, r2
 800f1a6:	d043      	beq.n	800f230 <tcp_input+0x274>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1ac:	46c1      	mov	r9, r8
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 80db 	beq.w	800f36a <tcp_input+0x3ae>
 800f1b4:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f1b6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1de      	bne.n	800f17c <tcp_input+0x1c0>
 800f1be:	465b      	mov	r3, fp
 800f1c0:	22fb      	movs	r2, #251	; 0xfb
 800f1c2:	4917      	ldr	r1, [pc, #92]	; (800f220 <tcp_input+0x264>)
 800f1c4:	4650      	mov	r0, sl
 800f1c6:	f004 fc31 	bl	8013a2c <iprintf>
 800f1ca:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f1ce:	e7d5      	b.n	800f17c <tcp_input+0x1c0>
    TCP_STATS_INC(tcp.proterr);
 800f1d0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    goto dropped;
 800f1da:	e70e      	b.n	800effa <tcp_input+0x3e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f1dc:	4b07      	ldr	r3, [pc, #28]	; (800f1fc <tcp_input+0x240>)
 800f1de:	2283      	movs	r2, #131	; 0x83
 800f1e0:	4910      	ldr	r1, [pc, #64]	; (800f224 <tcp_input+0x268>)
 800f1e2:	4808      	ldr	r0, [pc, #32]	; (800f204 <tcp_input+0x248>)
 800f1e4:	f004 fc22 	bl	8013a2c <iprintf>
 800f1e8:	e6ef      	b.n	800efca <tcp_input+0xe>
 800f1ea:	bf00      	nop
 800f1ec:	2401bdf8 	.word	0x2401bdf8
 800f1f0:	24014058 	.word	0x24014058
 800f1f4:	24014fec 	.word	0x24014fec
 800f1f8:	2401405c 	.word	0x2401405c
 800f1fc:	08015a50 	.word	0x08015a50
 800f200:	08015848 	.word	0x08015848
 800f204:	0801487c 	.word	0x0801487c
 800f208:	08015854 	.word	0x08015854
 800f20c:	24014050 	.word	0x24014050
 800f210:	2401402c 	.word	0x2401402c
 800f214:	24014030 	.word	0x24014030
 800f218:	24014066 	.word	0x24014066
 800f21c:	2401bfbc 	.word	0x2401bfbc
 800f220:	08015874 	.word	0x08015874
 800f224:	08015820 	.word	0x08015820
 800f228:	24014064 	.word	0x24014064
 800f22c:	24014060 	.word	0x24014060
    if (pcb->remote_port == tcphdr->src &&
 800f230:	885b      	ldrh	r3, [r3, #2]
 800f232:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 800f236:	429a      	cmp	r2, r3
 800f238:	d1b6      	bne.n	800f1a8 <tcp_input+0x1ec>
        pcb->local_port == tcphdr->dest &&
 800f23a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	429a      	cmp	r2, r3
 800f242:	d1b1      	bne.n	800f1a8 <tcp_input+0x1ec>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f244:	f8d8 2000 	ldr.w	r2, [r8]
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d1ac      	bne.n	800f1a8 <tcp_input+0x1ec>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f24e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f252:	4543      	cmp	r3, r8
 800f254:	f000 8500 	beq.w	800fc58 <tcp_input+0xc9c>
      if (prev != NULL) {
 800f258:	f1b9 0f00 	cmp.w	r9, #0
 800f25c:	f000 8408 	beq.w	800fa70 <tcp_input+0xab4>
        pcb->next = tcp_active_pcbs;
 800f260:	4979      	ldr	r1, [pc, #484]	; (800f448 <tcp_input+0x48c>)
        prev->next = pcb->next;
 800f262:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800f266:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 800f268:	f8c1 8000 	str.w	r8, [r1]
 800f26c:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 800f26e:	f8c8 200c 	str.w	r2, [r8, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f272:	4543      	cmp	r3, r8
 800f274:	f000 8533 	beq.w	800fcde <tcp_input+0xd22>
    inseg.next = NULL;
 800f278:	4f74      	ldr	r7, [pc, #464]	; (800f44c <tcp_input+0x490>)
 800f27a:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 800f27c:	6832      	ldr	r2, [r6, #0]
    inseg.len = p->tot_len;
 800f27e:	8929      	ldrh	r1, [r5, #8]
    inseg.tcphdr = tcphdr;
 800f280:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800f282:	4a73      	ldr	r2, [pc, #460]	; (800f450 <tcp_input+0x494>)
    recv_data = NULL;
 800f284:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800f470 <tcp_input+0x4b4>
    recv_flags = 0;
 800f288:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 800f474 <tcp_input+0x4b8>
    recv_acked = 0;
 800f28c:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800f478 <tcp_input+0x4bc>
    if (flags & TCP_PSH) {
 800f290:	7812      	ldrb	r2, [r2, #0]
    inseg.next = NULL;
 800f292:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800f294:	f8ca 3000 	str.w	r3, [sl]
    recv_flags = 0;
 800f298:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800f29c:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800f2a0:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 800f2a2:	607d      	str	r5, [r7, #4]
    inseg.len = p->tot_len;
 800f2a4:	8139      	strh	r1, [r7, #8]
    if (flags & TCP_PSH) {
 800f2a6:	d503      	bpl.n	800f2b0 <tcp_input+0x2f4>
      p->flags |= PBUF_FLAG_PUSH;
 800f2a8:	7b6b      	ldrb	r3, [r5, #13]
 800f2aa:	f043 0301 	orr.w	r3, r3, #1
 800f2ae:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800f2b0:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800f2b4:	b17b      	cbz	r3, 800f2d6 <tcp_input+0x31a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f2b6:	4640      	mov	r0, r8
 800f2b8:	f7fe ff22 	bl	800e100 <tcp_process_refused_data>
 800f2bc:	300d      	adds	r0, #13
 800f2be:	f000 8197 	beq.w	800f5f0 <tcp_input+0x634>
 800f2c2:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800f2c6:	b123      	cbz	r3, 800f2d2 <tcp_input+0x316>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f2c8:	9b05      	ldr	r3, [sp, #20]
 800f2ca:	881b      	ldrh	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f040 818f 	bne.w	800f5f0 <tcp_input+0x634>
 800f2d2:	4b5f      	ldr	r3, [pc, #380]	; (800f450 <tcp_input+0x494>)
 800f2d4:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 800f2d6:	4d5f      	ldr	r5, [pc, #380]	; (800f454 <tcp_input+0x498>)
  if (flags & TCP_RST) {
 800f2d8:	0753      	lsls	r3, r2, #29
    tcp_input_pcb = pcb;
 800f2da:	f8c5 8000 	str.w	r8, [r5]
  if (flags & TCP_RST) {
 800f2de:	f140 81bc 	bpl.w	800f65a <tcp_input+0x69e>
    if (pcb->state == SYN_SENT) {
 800f2e2:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f2e6:	2902      	cmp	r1, #2
 800f2e8:	f000 8329 	beq.w	800f93e <tcp_input+0x982>
      if (seqno == pcb->rcv_nxt) {
 800f2ec:	4b5a      	ldr	r3, [pc, #360]	; (800f458 <tcp_input+0x49c>)
 800f2ee:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	f000 84a4 	beq.w	800fc42 <tcp_input+0xc86>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2fa:	1a9b      	subs	r3, r3, r2
 800f2fc:	d405      	bmi.n	800f30a <tcp_input+0x34e>
 800f2fe:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800f302:	1a9b      	subs	r3, r3, r2
 800f304:	2b00      	cmp	r3, #0
 800f306:	f340 83b0 	ble.w	800fa6a <tcp_input+0xaae>
      if (recv_flags & TF_RESET) {
 800f30a:	f899 3000 	ldrb.w	r3, [r9]
 800f30e:	0719      	lsls	r1, r3, #28
 800f310:	f140 81b1 	bpl.w	800f676 <tcp_input+0x6ba>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f314:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800f318:	b123      	cbz	r3, 800f324 <tcp_input+0x368>
 800f31a:	f06f 010d 	mvn.w	r1, #13
 800f31e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f322:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f324:	4848      	ldr	r0, [pc, #288]	; (800f448 <tcp_input+0x48c>)
 800f326:	4641      	mov	r1, r8
 800f328:	f7fe fba2 	bl	800da70 <tcp_pcb_remove>
        tcp_free(pcb);
 800f32c:	4640      	mov	r0, r8
 800f32e:	f7fd ff93 	bl	800d258 <tcp_free>
    tcp_input_pcb = NULL;
 800f332:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800f334:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800f336:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 800f338:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL) {
 800f33c:	b110      	cbz	r0, 800f344 <tcp_input+0x388>
      pbuf_free(inseg.p);
 800f33e:	f7fd fbc7 	bl	800cad0 <pbuf_free>
      inseg.p = NULL;
 800f342:	607c      	str	r4, [r7, #4]
}
 800f344:	b007      	add	sp, #28
 800f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f34a:	465b      	mov	r3, fp
 800f34c:	22fd      	movs	r2, #253	; 0xfd
 800f34e:	4943      	ldr	r1, [pc, #268]	; (800f45c <tcp_input+0x4a0>)
 800f350:	4650      	mov	r0, sl
 800f352:	f004 fb6b 	bl	8013a2c <iprintf>
 800f356:	e717      	b.n	800f188 <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f358:	465b      	mov	r3, fp
 800f35a:	22fc      	movs	r2, #252	; 0xfc
 800f35c:	4940      	ldr	r1, [pc, #256]	; (800f460 <tcp_input+0x4a4>)
 800f35e:	4650      	mov	r0, sl
 800f360:	f004 fb64 	bl	8013a2c <iprintf>
 800f364:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f368:	e70b      	b.n	800f182 <tcp_input+0x1c6>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f36a:	4b3e      	ldr	r3, [pc, #248]	; (800f464 <tcp_input+0x4a8>)
 800f36c:	f8d3 8000 	ldr.w	r8, [r3]
 800f370:	f1b8 0f00 	cmp.w	r8, #0
 800f374:	d058      	beq.n	800f428 <tcp_input+0x46c>
 800f376:	462b      	mov	r3, r5
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f378:	f8df b100 	ldr.w	fp, [pc, #256]	; 800f47c <tcp_input+0x4c0>
 800f37c:	4645      	mov	r5, r8
 800f37e:	f8df a100 	ldr.w	sl, [pc, #256]	; 800f480 <tcp_input+0x4c4>
 800f382:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800f484 <tcp_input+0x4c8>
 800f386:	4698      	mov	r8, r3
 800f388:	e002      	b.n	800f390 <tcp_input+0x3d4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f38a:	68ed      	ldr	r5, [r5, #12]
 800f38c:	2d00      	cmp	r5, #0
 800f38e:	d04a      	beq.n	800f426 <tcp_input+0x46a>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f390:	7d28      	ldrb	r0, [r5, #20]
 800f392:	465b      	mov	r3, fp
 800f394:	f240 121f 	movw	r2, #287	; 0x11f
 800f398:	4651      	mov	r1, sl
 800f39a:	280a      	cmp	r0, #10
 800f39c:	4648      	mov	r0, r9
 800f39e:	d001      	beq.n	800f3a4 <tcp_input+0x3e8>
 800f3a0:	f004 fb44 	bl	8013a2c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f3a4:	7a2a      	ldrb	r2, [r5, #8]
 800f3a6:	b132      	cbz	r2, 800f3b6 <tcp_input+0x3fa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f3ae:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d1e9      	bne.n	800f38a <tcp_input+0x3ce>
      if (pcb->remote_port == tcphdr->src &&
 800f3b6:	6833      	ldr	r3, [r6, #0]
 800f3b8:	8b2a      	ldrh	r2, [r5, #24]
 800f3ba:	8819      	ldrh	r1, [r3, #0]
 800f3bc:	4291      	cmp	r1, r2
 800f3be:	d1e4      	bne.n	800f38a <tcp_input+0x3ce>
 800f3c0:	885b      	ldrh	r3, [r3, #2]
          pcb->local_port == tcphdr->dest &&
 800f3c2:	8aea      	ldrh	r2, [r5, #22]
      if (pcb->remote_port == tcphdr->src &&
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d1e0      	bne.n	800f38a <tcp_input+0x3ce>
          pcb->local_port == tcphdr->dest &&
 800f3c8:	6868      	ldr	r0, [r5, #4]
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	4290      	cmp	r0, r2
 800f3ce:	d1dc      	bne.n	800f38a <tcp_input+0x3ce>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3d0:	6828      	ldr	r0, [r5, #0]
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	4290      	cmp	r0, r2
 800f3d6:	d1d8      	bne.n	800f38a <tcp_input+0x3ce>
 800f3d8:	4642      	mov	r2, r8
 800f3da:	46a8      	mov	r8, r5
 800f3dc:	4615      	mov	r5, r2
  if (flags & TCP_RST) {
 800f3de:	4a1c      	ldr	r2, [pc, #112]	; (800f450 <tcp_input+0x494>)
 800f3e0:	7810      	ldrb	r0, [r2, #0]
 800f3e2:	0747      	lsls	r7, r0, #29
 800f3e4:	d413      	bmi.n	800f40e <tcp_input+0x452>
 800f3e6:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800f3e8:	0786      	lsls	r6, r0, #30
 800f3ea:	8814      	ldrh	r4, [r2, #0]
 800f3ec:	f140 83c4 	bpl.w	800fb78 <tcp_input+0xbbc>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f3f0:	4a19      	ldr	r2, [pc, #100]	; (800f458 <tcp_input+0x49c>)
 800f3f2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 800f3f6:	6812      	ldr	r2, [r2, #0]
 800f3f8:	1a10      	subs	r0, r2, r0
 800f3fa:	d405      	bmi.n	800f408 <tcp_input+0x44c>
 800f3fc:	f8b8 6028 	ldrh.w	r6, [r8, #40]	; 0x28
 800f400:	1b80      	subs	r0, r0, r6
 800f402:	2800      	cmp	r0, #0
 800f404:	f340 845d 	ble.w	800fcc2 <tcp_input+0xd06>
  if ((tcplen > 0)) {
 800f408:	2c00      	cmp	r4, #0
 800f40a:	f040 8437 	bne.w	800fc7c <tcp_input+0xcc0>
        pbuf_free(p);
 800f40e:	4628      	mov	r0, r5
 800f410:	e5fe      	b.n	800f010 <tcp_input+0x54>
    tcphdr_opt1len = tcphdr_optlen;
 800f412:	4b15      	ldr	r3, [pc, #84]	; (800f468 <tcp_input+0x4ac>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f414:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800f416:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f418:	f7fd fb1e 	bl	800ca58 <pbuf_remove_header>
 800f41c:	e65f      	b.n	800f0de <tcp_input+0x122>
  tcplen = p->tot_len;
 800f41e:	4a13      	ldr	r2, [pc, #76]	; (800f46c <tcp_input+0x4b0>)
 800f420:	9205      	str	r2, [sp, #20]
 800f422:	8013      	strh	r3, [r2, #0]
 800f424:	e69c      	b.n	800f160 <tcp_input+0x1a4>
 800f426:	4645      	mov	r5, r8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f428:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800f488 <tcp_input+0x4cc>
 800f42c:	6830      	ldr	r0, [r6, #0]
 800f42e:	f8da 9000 	ldr.w	r9, [sl]
 800f432:	f1b9 0f00 	cmp.w	r9, #0
 800f436:	f000 80ec 	beq.w	800f612 <tcp_input+0x656>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f43a:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f43e:	46c8      	mov	r8, r9
 800f440:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800f444:	2100      	movs	r1, #0
 800f446:	e028      	b.n	800f49a <tcp_input+0x4de>
 800f448:	2401bfbc 	.word	0x2401bfbc
 800f44c:	24014034 	.word	0x24014034
 800f450:	24014030 	.word	0x24014030
 800f454:	2401bfd0 	.word	0x2401bfd0
 800f458:	24014050 	.word	0x24014050
 800f45c:	080158c8 	.word	0x080158c8
 800f460:	0801589c 	.word	0x0801589c
 800f464:	2401bfcc 	.word	0x2401bfcc
 800f468:	2401405c 	.word	0x2401405c
 800f46c:	24014066 	.word	0x24014066
 800f470:	24014048 	.word	0x24014048
 800f474:	2401404c 	.word	0x2401404c
 800f478:	24014044 	.word	0x24014044
 800f47c:	08015a50 	.word	0x08015a50
 800f480:	08015948 	.word	0x08015948
 800f484:	0801487c 	.word	0x0801487c
 800f488:	2401bfc4 	.word	0x2401bfc4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f48c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f490:	4641      	mov	r1, r8
 800f492:	4698      	mov	r8, r3
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 80bc 	beq.w	800f612 <tcp_input+0x656>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f49a:	f898 2008 	ldrb.w	r2, [r8, #8]
 800f49e:	b12a      	cbz	r2, 800f4ac <tcp_input+0x4f0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4a0:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
 800f4a4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d1ef      	bne.n	800f48c <tcp_input+0x4d0>
      if (lpcb->local_port == tcphdr->dest) {
 800f4ac:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 800f4b0:	8843      	ldrh	r3, [r0, #2]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d1ea      	bne.n	800f48c <tcp_input+0x4d0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f4b6:	f8d8 3000 	ldr.w	r3, [r8]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f4ba:	b10b      	cbz	r3, 800f4c0 <tcp_input+0x504>
 800f4bc:	4573      	cmp	r3, lr
 800f4be:	d1e5      	bne.n	800f48c <tcp_input+0x4d0>
      if (prev != NULL) {
 800f4c0:	2900      	cmp	r1, #0
 800f4c2:	f000 8250 	beq.w	800f966 <tcp_input+0x9aa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f4c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f4ca:	f8ca 8000 	str.w	r8, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f4ce:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f4d0:	f8c8 900c 	str.w	r9, [r8, #12]
  if (flags & TCP_RST) {
 800f4d4:	4bbf      	ldr	r3, [pc, #764]	; (800f7d4 <tcp_input+0x818>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	0759      	lsls	r1, r3, #29
 800f4da:	d498      	bmi.n	800f40e <tcp_input+0x452>
  if (flags & TCP_ACK) {
 800f4dc:	f013 0910 	ands.w	r9, r3, #16
 800f4e0:	f040 8247 	bne.w	800f972 <tcp_input+0x9b6>
  } else if (flags & TCP_SYN) {
 800f4e4:	079a      	lsls	r2, r3, #30
 800f4e6:	d592      	bpl.n	800f40e <tcp_input+0x452>
    if (pcb->accepts_pending >= pcb->backlog) {
 800f4e8:	f898 201d 	ldrb.w	r2, [r8, #29]
 800f4ec:	f898 301c 	ldrb.w	r3, [r8, #28]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d28c      	bcs.n	800f40e <tcp_input+0x452>
    npcb = tcp_alloc(pcb->prio);
 800f4f4:	f898 0015 	ldrb.w	r0, [r8, #21]
 800f4f8:	f7fe fc1c 	bl	800dd34 <tcp_alloc>
    if (npcb == NULL) {
 800f4fc:	4682      	mov	sl, r0
 800f4fe:	2800      	cmp	r0, #0
 800f500:	f000 82bd 	beq.w	800fa7e <tcp_input+0xac2>
    pcb->accepts_pending++;
 800f504:	f898 301d 	ldrb.w	r3, [r8, #29]
    npcb->state = SYN_RCVD;
 800f508:	f04f 0c03 	mov.w	ip, #3
    npcb->remote_port = tcphdr->src;
 800f50c:	6831      	ldr	r1, [r6, #0]
    pcb->accepts_pending++;
 800f50e:	3301      	adds	r3, #1
    npcb->rcv_nxt = seqno + 1;
 800f510:	4ab1      	ldr	r2, [pc, #708]	; (800f7d8 <tcp_input+0x81c>)
    pcb->accepts_pending++;
 800f512:	f888 301d 	strb.w	r3, [r8, #29]
    npcb->remote_port = tcphdr->src;
 800f516:	f891 e000 	ldrb.w	lr, [r1]
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 800f51a:	8b43      	ldrh	r3, [r0, #26]
    npcb->remote_port = tcphdr->src;
 800f51c:	7849      	ldrb	r1, [r1, #1]
    npcb->rcv_nxt = seqno + 1;
 800f51e:	6812      	ldr	r2, [r2, #0]
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 800f520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    npcb->remote_port = tcphdr->src;
 800f524:	ea4e 2101 	orr.w	r1, lr, r1, lsl #8
    npcb->rcv_nxt = seqno + 1;
 800f528:	3201      	adds	r2, #1
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 800f52a:	8343      	strh	r3, [r0, #26]
    npcb->local_port = pcb->local_port;
 800f52c:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    npcb->remote_port = tcphdr->src;
 800f530:	8301      	strh	r1, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 800f532:	6242      	str	r2, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f534:	62c2      	str	r2, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f536:	e9d7 7104 	ldrd	r7, r1, [r7, #16]
    npcb->state = SYN_RCVD;
 800f53a:	f880 c014 	strb.w	ip, [r0, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f53e:	6047      	str	r7, [r0, #4]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f540:	1d07      	adds	r7, r0, #4
    npcb->local_port = pcb->local_port;
 800f542:	82c3      	strh	r3, [r0, #22]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f544:	6001      	str	r1, [r0, #0]
    iss = tcp_next_iss(npcb);
 800f546:	f7fe fe79 	bl	800e23c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f54a:	4aa3      	ldr	r2, [pc, #652]	; (800f7d8 <tcp_input+0x81c>)
    npcb->callback_arg = pcb->callback_arg;
 800f54c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f550:	6812      	ldr	r2, [r2, #0]
    npcb->snd_wl2 = iss;
 800f552:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f556:	3a01      	subs	r2, #1
    npcb->lastack = iss;
 800f558:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f55c:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800f560:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 800f564:	f8ca 807c 	str.w	r8, [sl, #124]	; 0x7c
    TCP_REG_ACTIVE(npcb);
 800f568:	499c      	ldr	r1, [pc, #624]	; (800f7dc <tcp_input+0x820>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f56a:	e9ca 0214 	strd	r0, r2, [sl, #80]	; 0x50
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f56e:	f898 3009 	ldrb.w	r3, [r8, #9]
    TCP_REG_ACTIVE(npcb);
 800f572:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f574:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 800f578:	f8c1 a000 	str.w	sl, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f57c:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f580:	f898 3008 	ldrb.w	r3, [r8, #8]
    TCP_REG_ACTIVE(npcb);
 800f584:	f8ca 200c 	str.w	r2, [sl, #12]
    npcb->netif_idx = pcb->netif_idx;
 800f588:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800f58c:	f001 fb86 	bl	8010c9c <tcp_timer_needed>
 800f590:	2201      	movs	r2, #1
 800f592:	4b93      	ldr	r3, [pc, #588]	; (800f7e0 <tcp_input+0x824>)
    tcp_parseopt(npcb);
 800f594:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 800f596:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f598:	f7fe fec4 	bl	800e324 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f59c:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f59e:	4638      	mov	r0, r7
 800f5a0:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800f5a4:	89db      	ldrh	r3, [r3, #14]
 800f5a6:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f5aa:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f5ae:	f002 fe1d 	bl	80121ec <ip4_route>
 800f5b2:	463a      	mov	r2, r7
 800f5b4:	4601      	mov	r1, r0
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	f7fe fe5c 	bl	800e274 <tcp_eff_send_mss_netif>
    MIB2_STATS_INC(mib2.tcppassiveopens);
 800f5bc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f5c0:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f5c2:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 800f5c6:	3301      	adds	r3, #1
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f5c8:	4650      	mov	r0, sl
    MIB2_STATS_INC(mib2.tcppassiveopens);
 800f5ca:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f5ce:	f000 fe03 	bl	80101d8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	f040 834b 	bne.w	800fc6e <tcp_input+0xcb2>
    tcp_output(npcb);
 800f5d8:	4650      	mov	r0, sl
 800f5da:	f001 f829 	bl	8010630 <tcp_output>
        pbuf_free(p);
 800f5de:	4628      	mov	r0, r5
 800f5e0:	e516      	b.n	800f010 <tcp_input+0x54>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5e2:	4b80      	ldr	r3, [pc, #512]	; (800f7e4 <tcp_input+0x828>)
 800f5e4:	22c2      	movs	r2, #194	; 0xc2
 800f5e6:	4980      	ldr	r1, [pc, #512]	; (800f7e8 <tcp_input+0x82c>)
 800f5e8:	4880      	ldr	r0, [pc, #512]	; (800f7ec <tcp_input+0x830>)
 800f5ea:	f004 fa1f 	bl	8013a2c <iprintf>
 800f5ee:	e543      	b.n	800f078 <tcp_input+0xbc>
        if (pcb->rcv_ann_wnd == 0) {
 800f5f0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 819e 	beq.w	800f936 <tcp_input+0x97a>
        TCP_STATS_INC(tcp.drop);
 800f5fa:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 800f5fe:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
        TCP_STATS_INC(tcp.drop);
 800f602:	3201      	adds	r2, #1
 800f604:	4d7a      	ldr	r5, [pc, #488]	; (800f7f0 <tcp_input+0x834>)
        MIB2_STATS_INC(mib2.tcpinerrs);
 800f606:	3301      	adds	r3, #1
        TCP_STATS_INC(tcp.drop);
 800f608:	f8a4 2096 	strh.w	r2, [r4, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 800f60c:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
        goto aborted;
 800f610:	e68f      	b.n	800f332 <tcp_input+0x376>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f612:	8980      	ldrh	r0, [r0, #12]
 800f614:	f7fc f9bc 	bl	800b990 <lwip_htons>
 800f618:	f010 0004 	ands.w	r0, r0, #4
 800f61c:	f47f aef7 	bne.w	800f40e <tcp_input+0x452>
      TCP_STATS_INC(tcp.drop);
 800f620:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
      TCP_STATS_INC(tcp.proterr);
 800f624:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f628:	6836      	ldr	r6, [r6, #0]
      TCP_STATS_INC(tcp.drop);
 800f62a:	3301      	adds	r3, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f62c:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.proterr);
 800f62e:	3101      	adds	r1, #1
      TCP_STATS_INC(tcp.drop);
 800f630:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f634:	8817      	ldrh	r7, [r2, #0]
 800f636:	8833      	ldrh	r3, [r6, #0]
 800f638:	4a67      	ldr	r2, [pc, #412]	; (800f7d8 <tcp_input+0x81c>)
      TCP_STATS_INC(tcp.proterr);
 800f63a:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f63e:	6812      	ldr	r2, [r2, #0]
 800f640:	4c6c      	ldr	r4, [pc, #432]	; (800f7f4 <tcp_input+0x838>)
 800f642:	9302      	str	r3, [sp, #8]
 800f644:	443a      	add	r2, r7
 800f646:	8876      	ldrh	r6, [r6, #2]
 800f648:	1d23      	adds	r3, r4, #4
 800f64a:	496b      	ldr	r1, [pc, #428]	; (800f7f8 <tcp_input+0x83c>)
 800f64c:	6809      	ldr	r1, [r1, #0]
 800f64e:	e9cd 4600 	strd	r4, r6, [sp]
 800f652:	f000 ff69 	bl	8010528 <tcp_rst>
        pbuf_free(p);
 800f656:	4628      	mov	r0, r5
 800f658:	e4da      	b.n	800f010 <tcp_input+0x54>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f65a:	0794      	lsls	r4, r2, #30
 800f65c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800f660:	d55f      	bpl.n	800f722 <tcp_input+0x766>
 800f662:	f898 2014 	ldrb.w	r2, [r8, #20]
 800f666:	3a02      	subs	r2, #2
 800f668:	2a01      	cmp	r2, #1
 800f66a:	d95a      	bls.n	800f722 <tcp_input+0x766>
        tcp_ack_now(pcb);
 800f66c:	f043 0302 	orr.w	r3, r3, #2
 800f670:	f8a8 301a 	strh.w	r3, [r8, #26]
 800f674:	e649      	b.n	800f30a <tcp_input+0x34e>
        if (recv_acked > 0) {
 800f676:	f8bb 2000 	ldrh.w	r2, [fp]
 800f67a:	b162      	cbz	r2, 800f696 <tcp_input+0x6da>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f67c:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 800f680:	b133      	cbz	r3, 800f690 <tcp_input+0x6d4>
 800f682:	4641      	mov	r1, r8
 800f684:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f688:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800f68a:	300d      	adds	r0, #13
 800f68c:	f43f ae51 	beq.w	800f332 <tcp_input+0x376>
          recv_acked = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800f696:	4640      	mov	r0, r8
 800f698:	f7fe ff54 	bl	800e544 <tcp_input_delayed_close>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f47f ae48 	bne.w	800f332 <tcp_input+0x376>
        if (recv_data != NULL) {
 800f6a2:	f8da 3000 	ldr.w	r3, [sl]
 800f6a6:	b31b      	cbz	r3, 800f6f0 <tcp_input+0x734>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f6a8:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800f6ac:	b133      	cbz	r3, 800f6bc <tcp_input+0x700>
 800f6ae:	4b4d      	ldr	r3, [pc, #308]	; (800f7e4 <tcp_input+0x828>)
 800f6b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f6b4:	4951      	ldr	r1, [pc, #324]	; (800f7fc <tcp_input+0x840>)
 800f6b6:	484d      	ldr	r0, [pc, #308]	; (800f7ec <tcp_input+0x830>)
 800f6b8:	f004 f9b8 	bl	8013a2c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f6bc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800f6c0:	f8da 2000 	ldr.w	r2, [sl]
 800f6c4:	f013 0310 	ands.w	r3, r3, #16
 800f6c8:	f040 8204 	bne.w	800fad4 <tcp_input+0xb18>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f6cc:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 800f6d0:	2c00      	cmp	r4, #0
 800f6d2:	f000 830d 	beq.w	800fcf0 <tcp_input+0xd34>
 800f6d6:	4641      	mov	r1, r8
 800f6d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f6dc:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800f6de:	f110 0f0d 	cmn.w	r0, #13
 800f6e2:	f43f ae26 	beq.w	800f332 <tcp_input+0x376>
          if (err != ERR_OK) {
 800f6e6:	b118      	cbz	r0, 800f6f0 <tcp_input+0x734>
            pcb->refused_data = recv_data;
 800f6e8:	f8da 3000 	ldr.w	r3, [sl]
 800f6ec:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800f6f0:	f899 3000 	ldrb.w	r3, [r9]
 800f6f4:	069a      	lsls	r2, r3, #26
 800f6f6:	d508      	bpl.n	800f70a <tcp_input+0x74e>
          if (pcb->refused_data != NULL) {
 800f6f8:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f000 81d1 	beq.w	800faa4 <tcp_input+0xae8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f702:	7b5a      	ldrb	r2, [r3, #13]
 800f704:	f042 0220 	orr.w	r2, r2, #32
 800f708:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800f70a:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800f70c:	4640      	mov	r0, r8
        tcp_input_pcb = NULL;
 800f70e:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f710:	f7fe ff18 	bl	800e544 <tcp_input_delayed_close>
 800f714:	2800      	cmp	r0, #0
 800f716:	f47f ae0c 	bne.w	800f332 <tcp_input+0x376>
        tcp_output(pcb);
 800f71a:	4640      	mov	r0, r8
 800f71c:	f000 ff88 	bl	8010630 <tcp_output>
 800f720:	e607      	b.n	800f332 <tcp_input+0x376>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f722:	06d8      	lsls	r0, r3, #27
 800f724:	d403      	bmi.n	800f72e <tcp_input+0x772>
    pcb->tmr = tcp_ticks;
 800f726:	4b36      	ldr	r3, [pc, #216]	; (800f800 <tcp_input+0x844>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f8c8 3020 	str.w	r3, [r8, #32]
  pcb->persist_probe = 0;
 800f72e:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800f730:	4640      	mov	r0, r8
  pcb->persist_probe = 0;
 800f732:	f8a8 30a2 	strh.w	r3, [r8, #162]	; 0xa2
  tcp_parseopt(pcb);
 800f736:	f7fe fdf5 	bl	800e324 <tcp_parseopt>
  switch (pcb->state) {
 800f73a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f73e:	3b02      	subs	r3, #2
 800f740:	2b07      	cmp	r3, #7
 800f742:	f63f ade2 	bhi.w	800f30a <tcp_input+0x34e>
 800f746:	e8df f003 	tbb	[pc, r3]
 800f74a:	accf      	.short	0xaccf
 800f74c:	9a5d7c9a 	.word	0x9a5d7c9a
 800f750:	041f      	.short	0x041f
      tcp_receive(pcb);
 800f752:	4640      	mov	r0, r8
 800f754:	f7fe ff88 	bl	800e668 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f758:	4b1e      	ldr	r3, [pc, #120]	; (800f7d4 <tcp_input+0x818>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	06d8      	lsls	r0, r3, #27
 800f75e:	f57f add4 	bpl.w	800f30a <tcp_input+0x34e>
 800f762:	4b25      	ldr	r3, [pc, #148]	; (800f7f8 <tcp_input+0x83c>)
 800f764:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	f47f adcd 	bne.w	800f30a <tcp_input+0x34e>
 800f770:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800f774:	2b00      	cmp	r3, #0
 800f776:	f47f adc8 	bne.w	800f30a <tcp_input+0x34e>
        recv_flags |= TF_CLOSED;
 800f77a:	f899 3000 	ldrb.w	r3, [r9]
 800f77e:	f043 0310 	orr.w	r3, r3, #16
 800f782:	f889 3000 	strb.w	r3, [r9]
 800f786:	e5c0      	b.n	800f30a <tcp_input+0x34e>
      tcp_receive(pcb);
 800f788:	4640      	mov	r0, r8
 800f78a:	f7fe ff6d 	bl	800e668 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f78e:	4b11      	ldr	r3, [pc, #68]	; (800f7d4 <tcp_input+0x818>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	06dc      	lsls	r4, r3, #27
 800f794:	f57f adb9 	bpl.w	800f30a <tcp_input+0x34e>
 800f798:	4b17      	ldr	r3, [pc, #92]	; (800f7f8 <tcp_input+0x83c>)
 800f79a:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	f47f adb2 	bne.w	800f30a <tcp_input+0x34e>
 800f7a6:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f47f adad 	bne.w	800f30a <tcp_input+0x34e>
        tcp_pcb_purge(pcb);
 800f7b0:	4640      	mov	r0, r8
 800f7b2:	f7fd fea9 	bl	800d508 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f7b6:	4b09      	ldr	r3, [pc, #36]	; (800f7dc <tcp_input+0x820>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4543      	cmp	r3, r8
 800f7bc:	f000 81b4 	beq.w	800fb28 <tcp_input+0xb6c>
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f000 81b5 	beq.w	800fb30 <tcp_input+0xb74>
 800f7c6:	68da      	ldr	r2, [r3, #12]
 800f7c8:	4542      	cmp	r2, r8
 800f7ca:	f000 81ff 	beq.w	800fbcc <tcp_input+0xc10>
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	e7f6      	b.n	800f7c0 <tcp_input+0x804>
 800f7d2:	bf00      	nop
 800f7d4:	24014030 	.word	0x24014030
 800f7d8:	24014050 	.word	0x24014050
 800f7dc:	2401bfbc 	.word	0x2401bfbc
 800f7e0:	2401bfb8 	.word	0x2401bfb8
 800f7e4:	08015a50 	.word	0x08015a50
 800f7e8:	08015838 	.word	0x08015838
 800f7ec:	0801487c 	.word	0x0801487c
 800f7f0:	2401bfd0 	.word	0x2401bfd0
 800f7f4:	24014ffc 	.word	0x24014ffc
 800f7f8:	2401402c 	.word	0x2401402c
 800f7fc:	080159e4 	.word	0x080159e4
 800f800:	2401bfc0 	.word	0x2401bfc0
      tcp_receive(pcb);
 800f804:	4640      	mov	r0, r8
 800f806:	f7fe ff2f 	bl	800e668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f80a:	f899 3000 	ldrb.w	r3, [r9]
 800f80e:	069e      	lsls	r6, r3, #26
 800f810:	f57f ad7b 	bpl.w	800f30a <tcp_input+0x34e>
        tcp_ack_now(pcb);
 800f814:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 800f818:	4640      	mov	r0, r8
        tcp_ack_now(pcb);
 800f81a:	f043 0302 	orr.w	r3, r3, #2
 800f81e:	f8a8 301a 	strh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 800f822:	f7fd fe71 	bl	800d508 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f826:	4bca      	ldr	r3, [pc, #808]	; (800fb50 <tcp_input+0xb94>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4543      	cmp	r3, r8
 800f82c:	f000 817c 	beq.w	800fb28 <tcp_input+0xb6c>
 800f830:	2b00      	cmp	r3, #0
 800f832:	f000 817d 	beq.w	800fb30 <tcp_input+0xb74>
 800f836:	68da      	ldr	r2, [r3, #12]
 800f838:	4542      	cmp	r2, r8
 800f83a:	f000 81c7 	beq.w	800fbcc <tcp_input+0xc10>
 800f83e:	4613      	mov	r3, r2
 800f840:	e7f6      	b.n	800f830 <tcp_input+0x874>
      tcp_receive(pcb);
 800f842:	4640      	mov	r0, r8
 800f844:	f7fe ff10 	bl	800e668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f848:	f899 3000 	ldrb.w	r3, [r9]
 800f84c:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f850:	4bc0      	ldr	r3, [pc, #768]	; (800fb54 <tcp_input+0xb98>)
 800f852:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800f854:	f000 8154 	beq.w	800fb00 <tcp_input+0xb44>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f858:	06da      	lsls	r2, r3, #27
 800f85a:	d506      	bpl.n	800f86a <tcp_input+0x8ae>
 800f85c:	4bbe      	ldr	r3, [pc, #760]	; (800fb58 <tcp_input+0xb9c>)
 800f85e:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	429a      	cmp	r2, r3
 800f866:	f000 81b5 	beq.w	800fbd4 <tcp_input+0xc18>
          tcp_ack_now(pcb);
 800f86a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          pcb->state = CLOSING;
 800f86e:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 800f870:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 800f874:	f888 2014 	strb.w	r2, [r8, #20]
          tcp_ack_now(pcb);
 800f878:	f8a8 301a 	strh.w	r3, [r8, #26]
 800f87c:	e545      	b.n	800f30a <tcp_input+0x34e>
      tcp_receive(pcb);
 800f87e:	4640      	mov	r0, r8
 800f880:	f7fe fef2 	bl	800e668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f884:	f899 3000 	ldrb.w	r3, [r9]
 800f888:	0699      	lsls	r1, r3, #26
 800f88a:	f57f ad3e 	bpl.w	800f30a <tcp_input+0x34e>
        tcp_ack_now(pcb);
 800f88e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        pcb->state = CLOSE_WAIT;
 800f892:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 800f894:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 800f898:	f888 2014 	strb.w	r2, [r8, #20]
        tcp_ack_now(pcb);
 800f89c:	f8a8 301a 	strh.w	r3, [r8, #26]
 800f8a0:	e533      	b.n	800f30a <tcp_input+0x34e>
      if (flags & TCP_ACK) {
 800f8a2:	4bac      	ldr	r3, [pc, #688]	; (800fb54 <tcp_input+0xb98>)
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	06da      	lsls	r2, r3, #27
 800f8a8:	f140 811b 	bpl.w	800fae2 <tcp_input+0xb26>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8ac:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800f8b0:	4aa9      	ldr	r2, [pc, #676]	; (800fb58 <tcp_input+0xb9c>)
 800f8b2:	43db      	mvns	r3, r3
 800f8b4:	6811      	ldr	r1, [r2, #0]
 800f8b6:	42cb      	cmn	r3, r1
 800f8b8:	d405      	bmi.n	800f8c6 <tcp_input+0x90a>
 800f8ba:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800f8be:	1acb      	subs	r3, r1, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f340 8161 	ble.w	800fb88 <tcp_input+0xbcc>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8c6:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	9a05      	ldr	r2, [sp, #20]
 800f8cc:	881c      	ldrh	r4, [r3, #0]
 800f8ce:	8816      	ldrh	r6, [r2, #0]
 800f8d0:	4aa2      	ldr	r2, [pc, #648]	; (800fb5c <tcp_input+0xba0>)
 800f8d2:	6812      	ldr	r2, [r2, #0]
 800f8d4:	9402      	str	r4, [sp, #8]
 800f8d6:	885c      	ldrh	r4, [r3, #2]
 800f8d8:	4432      	add	r2, r6
 800f8da:	4ba1      	ldr	r3, [pc, #644]	; (800fb60 <tcp_input+0xba4>)
 800f8dc:	e9cd 3400 	strd	r3, r4, [sp]
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	f000 fe21 	bl	8010528 <tcp_rst>
 800f8e6:	e510      	b.n	800f30a <tcp_input+0x34e>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f8e8:	4b9a      	ldr	r3, [pc, #616]	; (800fb54 <tcp_input+0xb98>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	f003 0212 	and.w	r2, r3, #18
 800f8f0:	2a12      	cmp	r2, #18
 800f8f2:	d053      	beq.n	800f99c <tcp_input+0x9e0>
      else if (flags & TCP_ACK) {
 800f8f4:	06d9      	lsls	r1, r3, #27
 800f8f6:	f57f ad08 	bpl.w	800f30a <tcp_input+0x34e>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8fa:	9a05      	ldr	r2, [sp, #20]
 800f8fc:	4640      	mov	r0, r8
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8fe:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f900:	8811      	ldrh	r1, [r2, #0]
 800f902:	4a96      	ldr	r2, [pc, #600]	; (800fb5c <tcp_input+0xba0>)
 800f904:	881c      	ldrh	r4, [r3, #0]
 800f906:	6812      	ldr	r2, [r2, #0]
 800f908:	9402      	str	r4, [sp, #8]
 800f90a:	440a      	add	r2, r1
 800f90c:	885b      	ldrh	r3, [r3, #2]
 800f90e:	4c94      	ldr	r4, [pc, #592]	; (800fb60 <tcp_input+0xba4>)
 800f910:	4991      	ldr	r1, [pc, #580]	; (800fb58 <tcp_input+0xb9c>)
 800f912:	6809      	ldr	r1, [r1, #0]
 800f914:	9301      	str	r3, [sp, #4]
 800f916:	1d23      	adds	r3, r4, #4
 800f918:	9400      	str	r4, [sp, #0]
 800f91a:	f000 fe05 	bl	8010528 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f91e:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
 800f922:	2b05      	cmp	r3, #5
 800f924:	f63f acf1 	bhi.w	800f30a <tcp_input+0x34e>
          pcb->rtime = 0;
 800f928:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800f92a:	4640      	mov	r0, r8
          pcb->rtime = 0;
 800f92c:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f930:	f001 f894 	bl	8010a5c <tcp_rexmit_rto>
 800f934:	e4e9      	b.n	800f30a <tcp_input+0x34e>
          tcp_send_empty_ack(pcb);
 800f936:	4640      	mov	r0, r8
 800f938:	f000 fe46 	bl	80105c8 <tcp_send_empty_ack>
 800f93c:	e65d      	b.n	800f5fa <tcp_input+0x63e>
      if (ackno == pcb->snd_nxt) {
 800f93e:	4b86      	ldr	r3, [pc, #536]	; (800fb58 <tcp_input+0xb9c>)
 800f940:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	429a      	cmp	r2, r3
 800f948:	f47f acdf 	bne.w	800f30a <tcp_input+0x34e>
      recv_flags |= TF_RESET;
 800f94c:	f899 2000 	ldrb.w	r2, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f950:	f8b8 301a 	ldrh.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
 800f954:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f958:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 800f95c:	f889 2000 	strb.w	r2, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f960:	f8a8 301a 	strh.w	r3, [r8, #26]
 800f964:	e4d1      	b.n	800f30a <tcp_input+0x34e>
        TCP_STATS_INC(tcp.cachehit);
 800f966:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 800f96a:	3301      	adds	r3, #1
 800f96c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 800f970:	e5b0      	b.n	800f4d4 <tcp_input+0x518>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f972:	9a05      	ldr	r2, [sp, #20]
 800f974:	4640      	mov	r0, r8
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f976:	6833      	ldr	r3, [r6, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f978:	8811      	ldrh	r1, [r2, #0]
 800f97a:	4a78      	ldr	r2, [pc, #480]	; (800fb5c <tcp_input+0xba0>)
 800f97c:	881c      	ldrh	r4, [r3, #0]
 800f97e:	6812      	ldr	r2, [r2, #0]
 800f980:	9402      	str	r4, [sp, #8]
 800f982:	440a      	add	r2, r1
 800f984:	885b      	ldrh	r3, [r3, #2]
 800f986:	4c76      	ldr	r4, [pc, #472]	; (800fb60 <tcp_input+0xba4>)
 800f988:	4973      	ldr	r1, [pc, #460]	; (800fb58 <tcp_input+0xb9c>)
 800f98a:	6809      	ldr	r1, [r1, #0]
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	1d23      	adds	r3, r4, #4
 800f990:	9400      	str	r4, [sp, #0]
 800f992:	f000 fdc9 	bl	8010528 <tcp_rst>
        pbuf_free(p);
 800f996:	4628      	mov	r0, r5
 800f998:	f7ff bb3a 	b.w	800f010 <tcp_input+0x54>
          && (ackno == pcb->lastack + 1)) {
 800f99c:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800f9a0:	496d      	ldr	r1, [pc, #436]	; (800fb58 <tcp_input+0xb9c>)
 800f9a2:	3201      	adds	r2, #1
 800f9a4:	6809      	ldr	r1, [r1, #0]
 800f9a6:	428a      	cmp	r2, r1
 800f9a8:	d1a4      	bne.n	800f8f4 <tcp_input+0x938>
        pcb->rcv_nxt = seqno + 1;
 800f9aa:	4b6c      	ldr	r3, [pc, #432]	; (800fb5c <tcp_input+0xba0>)
        pcb->state = ESTABLISHED;
 800f9ac:	2104      	movs	r1, #4
        pcb->snd_wnd = tcphdr->wnd;
 800f9ae:	6836      	ldr	r6, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800f9b0:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9b2:	eb08 0401 	add.w	r4, r8, r1
        pcb->lastack = ackno;
 800f9b6:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800f9ba:	1c5a      	adds	r2, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f9bc:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9be:	4620      	mov	r0, r4
        pcb->rcv_nxt = seqno + 1;
 800f9c0:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f9c4:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800f9c8:	89f2      	ldrh	r2, [r6, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9ca:	f8b8 6032 	ldrh.w	r6, [r8, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f9ce:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 800f9d2:	f8a8 2060 	strh.w	r2, [r8, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9d6:	f8a8 2062 	strh.w	r2, [r8, #98]	; 0x62
        pcb->state = ESTABLISHED;
 800f9da:	f888 1014 	strb.w	r1, [r8, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9de:	f002 fc05 	bl	80121ec <ip4_route>
 800f9e2:	4622      	mov	r2, r4
 800f9e4:	4601      	mov	r1, r0
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f7fe fc44 	bl	800e274 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f9ec:	f241 131c 	movw	r3, #4380	; 0x111c
 800f9f0:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9f2:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f9f6:	0080      	lsls	r0, r0, #2
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	bf38      	it	cc
 800f9fe:	4619      	movcc	r1, r3
 800fa00:	4288      	cmp	r0, r1
 800fa02:	f080 8147 	bcs.w	800fc94 <tcp_input+0xcd8>
 800fa06:	b283      	uxth	r3, r0
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fa08:	f8b8 2066 	ldrh.w	r2, [r8, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fa0c:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fa10:	b932      	cbnz	r2, 800fa20 <tcp_input+0xa64>
 800fa12:	4b54      	ldr	r3, [pc, #336]	; (800fb64 <tcp_input+0xba8>)
 800fa14:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fa18:	4953      	ldr	r1, [pc, #332]	; (800fb68 <tcp_input+0xbac>)
 800fa1a:	4854      	ldr	r0, [pc, #336]	; (800fb6c <tcp_input+0xbb0>)
 800fa1c:	f004 f806 	bl	8013a2c <iprintf>
        --pcb->snd_queuelen;
 800fa20:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
        rseg = pcb->unacked;
 800fa24:	f8d8 4070 	ldr.w	r4, [r8, #112]	; 0x70
        --pcb->snd_queuelen;
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
        if (rseg == NULL) {
 800fa2e:	2c00      	cmp	r4, #0
 800fa30:	f000 8139 	beq.w	800fca6 <tcp_input+0xcea>
          pcb->unacked = rseg->next;
 800fa34:	6823      	ldr	r3, [r4, #0]
 800fa36:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
        tcp_seg_free(rseg);
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f7fd fd28 	bl	800d490 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800fa40:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f000 8129 	beq.w	800fc9c <tcp_input+0xce0>
          pcb->rtime = 0;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          pcb->nrtx = 0;
 800fa50:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fa54:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800fa58:	b13b      	cbz	r3, 800fa6a <tcp_input+0xaae>
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	4641      	mov	r1, r8
 800fa5e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fa62:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800fa64:	300d      	adds	r0, #13
 800fa66:	f43f ac64 	beq.w	800f332 <tcp_input+0x376>
        tcp_ack_now(pcb);
 800fa6a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800fa6e:	e5fd      	b.n	800f66c <tcp_input+0x6b0>
        TCP_STATS_INC(tcp.cachehit);
 800fa70:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 800fa74:	3201      	adds	r2, #1
 800fa76:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 800fa7a:	f7ff bbfa 	b.w	800f272 <tcp_input+0x2b6>
      TCP_STATS_INC(tcp.memerr);
 800fa7e:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fa82:	f8d8 6018 	ldr.w	r6, [r8, #24]
      TCP_STATS_INC(tcp.memerr);
 800fa86:	3301      	adds	r3, #1
 800fa88:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fa8c:	2e00      	cmp	r6, #0
 800fa8e:	f43f acbe 	beq.w	800f40e <tcp_input+0x452>
 800fa92:	4601      	mov	r1, r0
 800fa94:	f04f 32ff 	mov.w	r2, #4294967295
 800fa98:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fa9c:	47b0      	blx	r6
        pbuf_free(p);
 800fa9e:	4628      	mov	r0, r5
 800faa0:	f7ff bab6 	b.w	800f010 <tcp_input+0x54>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800faa4:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 800faa8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800faac:	4293      	cmp	r3, r2
 800faae:	d002      	beq.n	800fab6 <tcp_input+0xafa>
              pcb->rcv_wnd++;
 800fab0:	3301      	adds	r3, #1
 800fab2:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800fab6:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 800faba:	2c00      	cmp	r4, #0
 800fabc:	f43f ae25 	beq.w	800f70a <tcp_input+0x74e>
 800fac0:	2300      	movs	r3, #0
 800fac2:	4641      	mov	r1, r8
 800fac4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fac8:	461a      	mov	r2, r3
 800faca:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800facc:	300d      	adds	r0, #13
 800face:	f47f ae1c 	bne.w	800f70a <tcp_input+0x74e>
aborted:
 800fad2:	e42e      	b.n	800f332 <tcp_input+0x376>
            pbuf_free(recv_data);
 800fad4:	4610      	mov	r0, r2
 800fad6:	f7fc fffb 	bl	800cad0 <pbuf_free>
            tcp_abort(pcb);
 800fada:	4640      	mov	r0, r8
 800fadc:	f7fe f8e0 	bl	800dca0 <tcp_abort>
            goto aborted;
 800fae0:	e427      	b.n	800f332 <tcp_input+0x376>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fae2:	0798      	lsls	r0, r3, #30
 800fae4:	f57f ac11 	bpl.w	800f30a <tcp_input+0x34e>
 800fae8:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800faec:	4a1b      	ldr	r2, [pc, #108]	; (800fb5c <tcp_input+0xba0>)
 800faee:	3b01      	subs	r3, #1
 800faf0:	6812      	ldr	r2, [r2, #0]
 800faf2:	4293      	cmp	r3, r2
 800faf4:	f47f ac09 	bne.w	800f30a <tcp_input+0x34e>
        tcp_rexmit(pcb);
 800faf8:	4640      	mov	r0, r8
 800fafa:	f000 fc8d 	bl	8010418 <tcp_rexmit>
 800fafe:	e404      	b.n	800f30a <tcp_input+0x34e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb00:	06db      	lsls	r3, r3, #27
 800fb02:	f57f ac02 	bpl.w	800f30a <tcp_input+0x34e>
 800fb06:	4b14      	ldr	r3, [pc, #80]	; (800fb58 <tcp_input+0xb9c>)
 800fb08:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	f47f abfb 	bne.w	800f30a <tcp_input+0x34e>
 800fb14:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f47f abf6 	bne.w	800f30a <tcp_input+0x34e>
        pcb->state = FIN_WAIT_2;
 800fb1e:	2306      	movs	r3, #6
 800fb20:	f888 3014 	strb.w	r3, [r8, #20]
 800fb24:	f7ff bbf1 	b.w	800f30a <tcp_input+0x34e>
        TCP_RMV_ACTIVE(pcb);
 800fb28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb2c:	4a08      	ldr	r2, [pc, #32]	; (800fb50 <tcp_input+0xb94>)
 800fb2e:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fb30:	4b0f      	ldr	r3, [pc, #60]	; (800fb70 <tcp_input+0xbb4>)
        pcb->state = TIME_WAIT;
 800fb32:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 800fb34:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fb36:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fb38:	f888 0014 	strb.w	r0, [r8, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fb3c:	f8c8 200c 	str.w	r2, [r8, #12]
        TCP_RMV_ACTIVE(pcb);
 800fb40:	4a0c      	ldr	r2, [pc, #48]	; (800fb74 <tcp_input+0xbb8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fb42:	f8c3 8000 	str.w	r8, [r3]
        TCP_RMV_ACTIVE(pcb);
 800fb46:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fb48:	f001 f8a8 	bl	8010c9c <tcp_timer_needed>
 800fb4c:	f7ff bbdd 	b.w	800f30a <tcp_input+0x34e>
 800fb50:	2401bfbc 	.word	0x2401bfbc
 800fb54:	24014030 	.word	0x24014030
 800fb58:	2401402c 	.word	0x2401402c
 800fb5c:	24014050 	.word	0x24014050
 800fb60:	24014ffc 	.word	0x24014ffc
 800fb64:	08015a50 	.word	0x08015a50
 800fb68:	08015998 	.word	0x08015998
 800fb6c:	0801487c 	.word	0x0801487c
 800fb70:	2401bfcc 	.word	0x2401bfcc
 800fb74:	2401bfb8 	.word	0x2401bfb8
  } else if (flags & TCP_FIN) {
 800fb78:	07c0      	lsls	r0, r0, #31
 800fb7a:	f57f ac45 	bpl.w	800f408 <tcp_input+0x44c>
    pcb->tmr = tcp_ticks;
 800fb7e:	4b61      	ldr	r3, [pc, #388]	; (800fd04 <tcp_input+0xd48>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f8c8 3020 	str.w	r3, [r8, #32]
 800fb86:	e43f      	b.n	800f408 <tcp_input+0x44c>
          pcb->state = ESTABLISHED;
 800fb88:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 800fb8a:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 800fb8e:	f888 2014 	strb.w	r2, [r8, #20]
          if (pcb->listener == NULL) {
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d0a1      	beq.n	800fada <tcp_input+0xb1e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fb96:	699b      	ldr	r3, [r3, #24]
 800fb98:	b933      	cbnz	r3, 800fba8 <tcp_input+0xbec>
 800fb9a:	4b5b      	ldr	r3, [pc, #364]	; (800fd08 <tcp_input+0xd4c>)
 800fb9c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fba0:	495a      	ldr	r1, [pc, #360]	; (800fd0c <tcp_input+0xd50>)
 800fba2:	485b      	ldr	r0, [pc, #364]	; (800fd10 <tcp_input+0xd54>)
 800fba4:	f003 ff42 	bl	8013a2c <iprintf>
            tcp_backlog_accepted(pcb);
 800fba8:	4640      	mov	r0, r8
 800fbaa:	f7fd fb73 	bl	800d294 <tcp_backlog_accepted>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fbae:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800fbb2:	699b      	ldr	r3, [r3, #24]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d090      	beq.n	800fada <tcp_input+0xb1e>
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4641      	mov	r1, r8
 800fbbc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fbc0:	4798      	blx	r3
          if (err != ERR_OK) {
 800fbc2:	b300      	cbz	r0, 800fc06 <tcp_input+0xc4a>
            if (err != ERR_ABRT) {
 800fbc4:	300d      	adds	r0, #13
 800fbc6:	f43f abb4 	beq.w	800f332 <tcp_input+0x376>
 800fbca:	e786      	b.n	800fada <tcp_input+0xb1e>
        TCP_RMV_ACTIVE(pcb);
 800fbcc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800fbd0:	60da      	str	r2, [r3, #12]
 800fbd2:	e7ad      	b.n	800fb30 <tcp_input+0xb74>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fbd4:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f47f ae46 	bne.w	800f86a <tcp_input+0x8ae>
          tcp_ack_now(pcb);
 800fbde:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 800fbe2:	4640      	mov	r0, r8
          tcp_ack_now(pcb);
 800fbe4:	f043 0302 	orr.w	r3, r3, #2
 800fbe8:	f8a8 301a 	strh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 800fbec:	f7fd fc8c 	bl	800d508 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fbf0:	4b48      	ldr	r3, [pc, #288]	; (800fd14 <tcp_input+0xd58>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4543      	cmp	r3, r8
 800fbf6:	d097      	beq.n	800fb28 <tcp_input+0xb6c>
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d099      	beq.n	800fb30 <tcp_input+0xb74>
 800fbfc:	68da      	ldr	r2, [r3, #12]
 800fbfe:	4542      	cmp	r2, r8
 800fc00:	d0e4      	beq.n	800fbcc <tcp_input+0xc10>
 800fc02:	4613      	mov	r3, r2
 800fc04:	e7f8      	b.n	800fbf8 <tcp_input+0xc3c>
          tcp_receive(pcb);
 800fc06:	4640      	mov	r0, r8
 800fc08:	f7fe fd2e 	bl	800e668 <tcp_receive>
          if (recv_acked != 0) {
 800fc0c:	f8bb 3000 	ldrh.w	r3, [fp]
 800fc10:	b113      	cbz	r3, 800fc18 <tcp_input+0xc5c>
            recv_acked--;
 800fc12:	3b01      	subs	r3, #1
 800fc14:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc18:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
 800fc1c:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc20:	0051      	lsls	r1, r2, #1
 800fc22:	0092      	lsls	r2, r2, #2
 800fc24:	4299      	cmp	r1, r3
 800fc26:	4608      	mov	r0, r1
 800fc28:	bf38      	it	cc
 800fc2a:	4618      	movcc	r0, r3
 800fc2c:	4282      	cmp	r2, r0
 800fc2e:	d265      	bcs.n	800fcfc <tcp_input+0xd40>
 800fc30:	b293      	uxth	r3, r2
          if (recv_flags & TF_GOT_FIN) {
 800fc32:	f899 2000 	ldrb.w	r2, [r9]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc36:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800fc3a:	0694      	lsls	r4, r2, #26
 800fc3c:	f57f ab65 	bpl.w	800f30a <tcp_input+0x34e>
 800fc40:	e625      	b.n	800f88e <tcp_input+0x8d2>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fc42:	2900      	cmp	r1, #0
 800fc44:	f47f ae82 	bne.w	800f94c <tcp_input+0x990>
 800fc48:	4b2f      	ldr	r3, [pc, #188]	; (800fd08 <tcp_input+0xd4c>)
 800fc4a:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fc4e:	4932      	ldr	r1, [pc, #200]	; (800fd18 <tcp_input+0xd5c>)
 800fc50:	482f      	ldr	r0, [pc, #188]	; (800fd10 <tcp_input+0xd54>)
 800fc52:	f003 feeb 	bl	8013a2c <iprintf>
 800fc56:	e679      	b.n	800f94c <tcp_input+0x990>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fc58:	4b2b      	ldr	r3, [pc, #172]	; (800fd08 <tcp_input+0xd4c>)
 800fc5a:	f240 120d 	movw	r2, #269	; 0x10d
 800fc5e:	492f      	ldr	r1, [pc, #188]	; (800fd1c <tcp_input+0xd60>)
 800fc60:	482b      	ldr	r0, [pc, #172]	; (800fd10 <tcp_input+0xd54>)
 800fc62:	f003 fee3 	bl	8013a2c <iprintf>
 800fc66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc6a:	f7ff baf5 	b.w	800f258 <tcp_input+0x29c>
      tcp_abandon(npcb, 0);
 800fc6e:	4650      	mov	r0, sl
 800fc70:	4649      	mov	r1, r9
 800fc72:	f7fd ff71 	bl	800db58 <tcp_abandon>
        pbuf_free(p);
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7ff b9ca 	b.w	800f010 <tcp_input+0x54>
    tcp_ack_now(pcb);
 800fc7c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    tcp_output(pcb);
 800fc80:	4640      	mov	r0, r8
    tcp_ack_now(pcb);
 800fc82:	f043 0302 	orr.w	r3, r3, #2
 800fc86:	f8a8 301a 	strh.w	r3, [r8, #26]
    tcp_output(pcb);
 800fc8a:	f000 fcd1 	bl	8010630 <tcp_output>
        pbuf_free(p);
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f7ff b9be 	b.w	800f010 <tcp_input+0x54>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc94:	429a      	cmp	r2, r3
 800fc96:	bf88      	it	hi
 800fc98:	b293      	uxthhi	r3, r2
 800fc9a:	e6b5      	b.n	800fa08 <tcp_input+0xa4c>
          pcb->rtime = -1;
 800fc9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fca0:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 800fca4:	e6d6      	b.n	800fa54 <tcp_input+0xa98>
          rseg = pcb->unsent;
 800fca6:	f8d8 406c 	ldr.w	r4, [r8, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcaa:	b934      	cbnz	r4, 800fcba <tcp_input+0xcfe>
 800fcac:	4b16      	ldr	r3, [pc, #88]	; (800fd08 <tcp_input+0xd4c>)
 800fcae:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fcb2:	491b      	ldr	r1, [pc, #108]	; (800fd20 <tcp_input+0xd64>)
 800fcb4:	4816      	ldr	r0, [pc, #88]	; (800fd10 <tcp_input+0xd54>)
 800fcb6:	f003 feb9 	bl	8013a2c <iprintf>
          pcb->unsent = rseg->next;
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
 800fcc0:	e6bb      	b.n	800fa3a <tcp_input+0xa7e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcc2:	9102      	str	r1, [sp, #8]
 800fcc4:	4640      	mov	r0, r8
 800fcc6:	4e17      	ldr	r6, [pc, #92]	; (800fd24 <tcp_input+0xd68>)
 800fcc8:	4422      	add	r2, r4
 800fcca:	4917      	ldr	r1, [pc, #92]	; (800fd28 <tcp_input+0xd6c>)
 800fccc:	9301      	str	r3, [sp, #4]
 800fcce:	1d33      	adds	r3, r6, #4
 800fcd0:	6809      	ldr	r1, [r1, #0]
 800fcd2:	9600      	str	r6, [sp, #0]
 800fcd4:	f000 fc28 	bl	8010528 <tcp_rst>
        pbuf_free(p);
 800fcd8:	4628      	mov	r0, r5
 800fcda:	f7ff b999 	b.w	800f010 <tcp_input+0x54>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fcde:	4b0a      	ldr	r3, [pc, #40]	; (800fd08 <tcp_input+0xd4c>)
 800fce0:	f240 1215 	movw	r2, #277	; 0x115
 800fce4:	4911      	ldr	r1, [pc, #68]	; (800fd2c <tcp_input+0xd70>)
 800fce6:	480a      	ldr	r0, [pc, #40]	; (800fd10 <tcp_input+0xd54>)
 800fce8:	f003 fea0 	bl	8013a2c <iprintf>
 800fcec:	f7ff bac4 	b.w	800f278 <tcp_input+0x2bc>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fcf0:	4623      	mov	r3, r4
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	4641      	mov	r1, r8
 800fcf6:	f7fe f9dd 	bl	800e0b4 <tcp_recv_null>
 800fcfa:	e4f0      	b.n	800f6de <tcp_input+0x722>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fcfc:	4299      	cmp	r1, r3
 800fcfe:	bf88      	it	hi
 800fd00:	b28b      	uxthhi	r3, r1
 800fd02:	e796      	b.n	800fc32 <tcp_input+0xc76>
 800fd04:	2401bfc0 	.word	0x2401bfc0
 800fd08:	08015a50 	.word	0x08015a50
 800fd0c:	080159c4 	.word	0x080159c4
 800fd10:	0801487c 	.word	0x0801487c
 800fd14:	2401bfbc 	.word	0x2401bfbc
 800fd18:	08015978 	.word	0x08015978
 800fd1c:	080158f0 	.word	0x080158f0
 800fd20:	080159b0 	.word	0x080159b0
 800fd24:	24014ffc 	.word	0x24014ffc
 800fd28:	2401402c 	.word	0x2401402c
 800fd2c:	0801591c 	.word	0x0801591c

0800fd30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800fd30:	4a02      	ldr	r2, [pc, #8]	; (800fd3c <tcp_trigger_input_pcb_close+0xc>)
 800fd32:	7813      	ldrb	r3, [r2, #0]
 800fd34:	f043 0310 	orr.w	r3, r3, #16
 800fd38:	7013      	strb	r3, [r2, #0]
}
 800fd3a:	4770      	bx	lr
 800fd3c:	2401404c 	.word	0x2401404c

0800fd40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fd40:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fd42:	4604      	mov	r4, r0
 800fd44:	b130      	cbz	r0, 800fd54 <tcp_output_segment_busy+0x14>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fd46:	6863      	ldr	r3, [r4, #4]
 800fd48:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800fd4a:	f110 30ff 	adds.w	r0, r0, #4294967295
 800fd4e:	bf18      	it	ne
 800fd50:	2001      	movne	r0, #1
 800fd52:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fd54:	4b03      	ldr	r3, [pc, #12]	; (800fd64 <tcp_output_segment_busy+0x24>)
 800fd56:	f240 529a 	movw	r2, #1434	; 0x59a
 800fd5a:	4903      	ldr	r1, [pc, #12]	; (800fd68 <tcp_output_segment_busy+0x28>)
 800fd5c:	4803      	ldr	r0, [pc, #12]	; (800fd6c <tcp_output_segment_busy+0x2c>)
 800fd5e:	f003 fe65 	bl	8013a2c <iprintf>
 800fd62:	e7f0      	b.n	800fd46 <tcp_output_segment_busy+0x6>
 800fd64:	08015e74 	.word	0x08015e74
 800fd68:	08015ea8 	.word	0x08015ea8
 800fd6c:	0801487c 	.word	0x0801487c

0800fd70 <tcp_create_segment>:
{
 800fd70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	460e      	mov	r6, r1
 800fd76:	4617      	mov	r7, r2
 800fd78:	4699      	mov	r9, r3
 800fd7a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fd7e:	4680      	mov	r8, r0
 800fd80:	2800      	cmp	r0, #0
 800fd82:	d051      	beq.n	800fe28 <tcp_create_segment+0xb8>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fd84:	2e00      	cmp	r6, #0
 800fd86:	d057      	beq.n	800fe38 <tcp_create_segment+0xc8>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd88:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd8c:	2003      	movs	r0, #3
 800fd8e:	f7fc fb89 	bl	800c4a4 <memp_malloc>
 800fd92:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd94:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d05f      	beq.n	800fe5c <tcp_create_segment+0xec>
  seg->flags = optflags;
 800fd9c:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fda0:	fa1f fa85 	uxth.w	sl, r5
 800fda4:	8933      	ldrh	r3, [r6, #8]
  seg->next = NULL;
 800fda6:	2200      	movs	r2, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fda8:	4553      	cmp	r3, sl
  seg->next = NULL;
 800fdaa:	e9c0 2600 	strd	r2, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fdae:	d333      	bcc.n	800fe18 <tcp_create_segment+0xa8>
  seg->len = p->tot_len - optlen;
 800fdb0:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800fdb8:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fdba:	f7fc fe49 	bl	800ca50 <pbuf_add_header>
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	d140      	bne.n	800fe46 <tcp_create_segment+0xd6>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fdc4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdc6:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fdc8:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fdcc:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdd0:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fdd2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fdd6:	f7fb fddb 	bl	800b990 <lwip_htons>
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fdda:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fdde:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fde2:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800fde6:	f7fb fdd3 	bl	800b990 <lwip_htons>
 800fdea:	f8ab 0002 	strh.w	r0, [fp, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fdee:	4648      	mov	r0, r9
 800fdf0:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800fdf4:	f7fb fdd0 	bl	800b998 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdf8:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fdfc:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fe00:	ea47 3005 	orr.w	r0, r7, r5, lsl #12
 800fe04:	f7fb fdc4 	bl	800b990 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800fe08:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fe0a:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800fe0e:	749e      	strb	r6, [r3, #18]
 800fe10:	74de      	strb	r6, [r3, #19]
}
 800fe12:	4620      	mov	r0, r4
 800fe14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe18:	4b12      	ldr	r3, [pc, #72]	; (800fe64 <tcp_create_segment+0xf4>)
 800fe1a:	22b0      	movs	r2, #176	; 0xb0
 800fe1c:	4912      	ldr	r1, [pc, #72]	; (800fe68 <tcp_create_segment+0xf8>)
 800fe1e:	4813      	ldr	r0, [pc, #76]	; (800fe6c <tcp_create_segment+0xfc>)
 800fe20:	f003 fe04 	bl	8013a2c <iprintf>
 800fe24:	8933      	ldrh	r3, [r6, #8]
 800fe26:	e7c3      	b.n	800fdb0 <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fe28:	4b0e      	ldr	r3, [pc, #56]	; (800fe64 <tcp_create_segment+0xf4>)
 800fe2a:	22a3      	movs	r2, #163	; 0xa3
 800fe2c:	4910      	ldr	r1, [pc, #64]	; (800fe70 <tcp_create_segment+0x100>)
 800fe2e:	480f      	ldr	r0, [pc, #60]	; (800fe6c <tcp_create_segment+0xfc>)
 800fe30:	f003 fdfc 	bl	8013a2c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fe34:	2e00      	cmp	r6, #0
 800fe36:	d1a7      	bne.n	800fd88 <tcp_create_segment+0x18>
 800fe38:	4b0a      	ldr	r3, [pc, #40]	; (800fe64 <tcp_create_segment+0xf4>)
 800fe3a:	22a4      	movs	r2, #164	; 0xa4
 800fe3c:	490d      	ldr	r1, [pc, #52]	; (800fe74 <tcp_create_segment+0x104>)
 800fe3e:	480b      	ldr	r0, [pc, #44]	; (800fe6c <tcp_create_segment+0xfc>)
 800fe40:	f003 fdf4 	bl	8013a2c <iprintf>
 800fe44:	e7a0      	b.n	800fd88 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 800fe46:	4a0c      	ldr	r2, [pc, #48]	; (800fe78 <tcp_create_segment+0x108>)
    tcp_seg_free(seg);
 800fe48:	4620      	mov	r0, r4
    return NULL;
 800fe4a:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 800fe4c:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 800fe50:	3301      	adds	r3, #1
 800fe52:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 800fe56:	f7fd fb1b 	bl	800d490 <tcp_seg_free>
    return NULL;
 800fe5a:	e7da      	b.n	800fe12 <tcp_create_segment+0xa2>
    pbuf_free(p);
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f7fc fe37 	bl	800cad0 <pbuf_free>
    return NULL;
 800fe62:	e7d6      	b.n	800fe12 <tcp_create_segment+0xa2>
 800fe64:	08015e74 	.word	0x08015e74
 800fe68:	08015c08 	.word	0x08015c08
 800fe6c:	0801487c 	.word	0x0801487c
 800fe70:	08015bc4 	.word	0x08015bc4
 800fe74:	08015be4 	.word	0x08015be4
 800fe78:	2401bdf8 	.word	0x2401bdf8

0800fe7c <tcp_output_alloc_header_common.constprop.4>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fe7c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800fe7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fe82:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800fe84:	4680      	mov	r8, r0
 800fe86:	4691      	mov	r9, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fe88:	2022      	movs	r0, #34	; 0x22
 800fe8a:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800fe8e:	469b      	mov	fp, r3
 800fe90:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
 800fe94:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 800fe98:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fe9c:	f7fc fe8c 	bl	800cbb8 <pbuf_alloc>
  if (p != NULL) {
 800fea0:	4605      	mov	r5, r0
 800fea2:	b1f8      	cbz	r0, 800fee4 <tcp_output_alloc_header_common.constprop.4+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fea4:	8943      	ldrh	r3, [r0, #10]
 800fea6:	2b13      	cmp	r3, #19
 800fea8:	d91f      	bls.n	800feea <tcp_output_alloc_header_common.constprop.4+0x6e>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800feaa:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800feac:	4658      	mov	r0, fp
 800feae:	f7fb fd6f 	bl	800b990 <lwip_htons>
 800feb2:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800feb4:	4650      	mov	r0, sl
 800feb6:	f7fb fd6b 	bl	800b990 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800feba:	f8c4 9004 	str.w	r9, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800febe:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800fec0:	4640      	mov	r0, r8
 800fec2:	f7fb fd69 	bl	800b998 <lwip_htonl>
 800fec6:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fec8:	f447 40a0 	orr.w	r0, r7, #20480	; 0x5000
 800fecc:	f7fb fd60 	bl	800b990 <lwip_htons>
 800fed0:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fed2:	4630      	mov	r0, r6
 800fed4:	f7fb fd5c 	bl	800b990 <lwip_htons>
    tcphdr->chksum = 0;
 800fed8:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800feda:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800fedc:	7423      	strb	r3, [r4, #16]
 800fede:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800fee0:	74a3      	strb	r3, [r4, #18]
 800fee2:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800fee4:	4628      	mov	r0, r5
 800fee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800feea:	4b04      	ldr	r3, [pc, #16]	; (800fefc <tcp_output_alloc_header_common.constprop.4+0x80>)
 800feec:	f240 7224 	movw	r2, #1828	; 0x724
 800fef0:	4903      	ldr	r1, [pc, #12]	; (800ff00 <tcp_output_alloc_header_common.constprop.4+0x84>)
 800fef2:	4804      	ldr	r0, [pc, #16]	; (800ff04 <tcp_output_alloc_header_common.constprop.4+0x88>)
 800fef4:	f003 fd9a 	bl	8013a2c <iprintf>
 800fef8:	e7d7      	b.n	800feaa <tcp_output_alloc_header_common.constprop.4+0x2e>
 800fefa:	bf00      	nop
 800fefc:	08015e74 	.word	0x08015e74
 800ff00:	08015df0 	.word	0x08015df0
 800ff04:	0801487c 	.word	0x0801487c

0800ff08 <tcp_output_alloc_header.constprop.3>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	460f      	mov	r7, r1
 800ff0e:	b084      	sub	sp, #16
 800ff10:	4690      	mov	r8, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ff12:	4604      	mov	r4, r0
 800ff14:	b198      	cbz	r0, 800ff3e <tcp_output_alloc_header.constprop.3+0x36>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ff16:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
 800ff18:	2510      	movs	r5, #16
 800ff1a:	8ae3      	ldrh	r3, [r4, #22]
 800ff1c:	4642      	mov	r2, r8
 800ff1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff20:	4639      	mov	r1, r7
 800ff22:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800ff26:	8b25      	ldrh	r5, [r4, #24]
 800ff28:	9500      	str	r5, [sp, #0]
 800ff2a:	f7ff ffa7 	bl	800fe7c <tcp_output_alloc_header_common.constprop.4>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ff2e:	b118      	cbz	r0, 800ff38 <tcp_output_alloc_header.constprop.3+0x30>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ff32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff34:	4413      	add	r3, r2
 800ff36:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800ff38:	b004      	add	sp, #16
 800ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ff3e:	4b04      	ldr	r3, [pc, #16]	; (800ff50 <tcp_output_alloc_header.constprop.3+0x48>)
 800ff40:	f240 7242 	movw	r2, #1858	; 0x742
 800ff44:	4903      	ldr	r1, [pc, #12]	; (800ff54 <tcp_output_alloc_header.constprop.3+0x4c>)
 800ff46:	4804      	ldr	r0, [pc, #16]	; (800ff58 <tcp_output_alloc_header.constprop.3+0x50>)
 800ff48:	f003 fd70 	bl	8013a2c <iprintf>
 800ff4c:	e7e3      	b.n	800ff16 <tcp_output_alloc_header.constprop.3+0xe>
 800ff4e:	bf00      	nop
 800ff50:	08015e74 	.word	0x08015e74
 800ff54:	08015dc8 	.word	0x08015dc8
 800ff58:	0801487c 	.word	0x0801487c

0800ff5c <tcp_output_fill_options.isra.0.constprop.5>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ff5c:	b100      	cbz	r0, 800ff60 <tcp_output_fill_options.isra.0.constprop.5+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ff5e:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ff60:	4b03      	ldr	r3, [pc, #12]	; (800ff70 <tcp_output_fill_options.isra.0.constprop.5+0x14>)
 800ff62:	f240 7256 	movw	r2, #1878	; 0x756
 800ff66:	4903      	ldr	r1, [pc, #12]	; (800ff74 <tcp_output_fill_options.isra.0.constprop.5+0x18>)
 800ff68:	4803      	ldr	r0, [pc, #12]	; (800ff78 <tcp_output_fill_options.isra.0.constprop.5+0x1c>)
 800ff6a:	f003 bd5f 	b.w	8013a2c <iprintf>
 800ff6e:	bf00      	nop
 800ff70:	08015e74 	.word	0x08015e74
 800ff74:	08015e4c 	.word	0x08015e4c
 800ff78:	0801487c 	.word	0x0801487c

0800ff7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff80:	4604      	mov	r4, r0
 800ff82:	b084      	sub	sp, #16
 800ff84:	4690      	mov	r8, r2
 800ff86:	461f      	mov	r7, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ff88:	460d      	mov	r5, r1
 800ff8a:	b379      	cbz	r1, 800ffec <tcp_output_control_segment+0x70>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff8c:	2c00      	cmp	r4, #0
 800ff8e:	d036      	beq.n	800fffe <tcp_output_control_segment+0x82>
 800ff90:	7a20      	ldrb	r0, [r4, #8]
 800ff92:	b9f0      	cbnz	r0, 800ffd2 <tcp_output_control_segment+0x56>
    return ip_route(src, dst);
 800ff94:	4638      	mov	r0, r7
 800ff96:	f002 f929 	bl	80121ec <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800ff9a:	b1f0      	cbz	r0, 800ffda <tcp_output_control_segment+0x5e>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ff9c:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800ff9e:	7aa4      	ldrb	r4, [r4, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 800ffa0:	4e1a      	ldr	r6, [pc, #104]	; (801000c <tcp_output_control_segment+0x90>)
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ffa2:	f04f 0c06 	mov.w	ip, #6
 800ffa6:	9002      	str	r0, [sp, #8]
 800ffa8:	463a      	mov	r2, r7
    TCP_STATS_INC(tcp.xmit);
 800ffaa:	f8b6 0090 	ldrh.w	r0, [r6, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ffae:	4641      	mov	r1, r8
 800ffb0:	9400      	str	r4, [sp, #0]
    TCP_STATS_INC(tcp.xmit);
 800ffb2:	1c44      	adds	r4, r0, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ffb4:	f8cd c004 	str.w	ip, [sp, #4]
 800ffb8:	4628      	mov	r0, r5
    TCP_STATS_INC(tcp.xmit);
 800ffba:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ffbe:	f002 fb4b 	bl	8012658 <ip4_output_if>
 800ffc2:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	f7fc fd83 	bl	800cad0 <pbuf_free>
  return err;
}
 800ffca:	4620      	mov	r0, r4
 800ffcc:	b004      	add	sp, #16
 800ffce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return netif_get_by_index(pcb->netif_idx);
 800ffd2:	f7fc fc93 	bl	800c8fc <netif_get_by_index>
  if (netif == NULL) {
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d1e0      	bne.n	800ff9c <tcp_output_control_segment+0x20>
    err = ERR_RTE;
 800ffda:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f7fc fd76 	bl	800cad0 <pbuf_free>
}
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	b004      	add	sp, #16
 800ffe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ffec:	4b08      	ldr	r3, [pc, #32]	; (8010010 <tcp_output_control_segment+0x94>)
 800ffee:	f240 7287 	movw	r2, #1927	; 0x787
 800fff2:	4908      	ldr	r1, [pc, #32]	; (8010014 <tcp_output_control_segment+0x98>)
 800fff4:	4808      	ldr	r0, [pc, #32]	; (8010018 <tcp_output_control_segment+0x9c>)
 800fff6:	f003 fd19 	bl	8013a2c <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fffa:	2c00      	cmp	r4, #0
 800fffc:	d1c8      	bne.n	800ff90 <tcp_output_control_segment+0x14>
    return ip_route(src, dst);
 800fffe:	4638      	mov	r0, r7
 8010000:	f002 f8f4 	bl	80121ec <ip4_route>
  if (netif == NULL) {
 8010004:	2800      	cmp	r0, #0
 8010006:	d0e8      	beq.n	800ffda <tcp_output_control_segment+0x5e>
      ttl = TCP_TTL;
 8010008:	23ff      	movs	r3, #255	; 0xff
 801000a:	e7c9      	b.n	800ffa0 <tcp_output_control_segment+0x24>
 801000c:	2401bdf8 	.word	0x2401bdf8
 8010010:	08015e74 	.word	0x08015e74
 8010014:	08015e20 	.word	0x08015e20
 8010018:	0801487c 	.word	0x0801487c

0801001c <tcp_split_unsent_seg>:
{
 801001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010020:	460e      	mov	r6, r1
 8010022:	b083      	sub	sp, #12
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010024:	4607      	mov	r7, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	d05d      	beq.n	80100e6 <tcp_split_unsent_seg+0xca>
  useg = pcb->unsent;
 801002a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 801002c:	b39d      	cbz	r5, 8010096 <tcp_split_unsent_seg+0x7a>
  if (split == 0) {
 801002e:	2e00      	cmp	r6, #0
 8010030:	f000 80b9 	beq.w	80101a6 <tcp_split_unsent_seg+0x18a>
  if (useg->len <= split) {
 8010034:	892c      	ldrh	r4, [r5, #8]
 8010036:	42b4      	cmp	r4, r6
 8010038:	d93d      	bls.n	80100b6 <tcp_split_unsent_seg+0x9a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801003a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801003c:	42b3      	cmp	r3, r6
 801003e:	d347      	bcc.n	80100d0 <tcp_split_unsent_seg+0xb4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010040:	2c00      	cmp	r4, #0
 8010042:	d03c      	beq.n	80100be <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 8010044:	f895 900a 	ldrb.w	r9, [r5, #10]
  remainder = useg->len - split;
 8010048:	1ba4      	subs	r4, r4, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801004a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801004e:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010050:	ea4f 0889 	mov.w	r8, r9, lsl #2
  remainder = useg->len - split;
 8010054:	b2a4      	uxth	r4, r4
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010056:	f008 0804 	and.w	r8, r8, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801005a:	eb04 0108 	add.w	r1, r4, r8
 801005e:	b289      	uxth	r1, r1
 8010060:	f7fc fdaa 	bl	800cbb8 <pbuf_alloc>
  if (p == NULL) {
 8010064:	4682      	mov	sl, r0
 8010066:	b1d8      	cbz	r0, 80100a0 <tcp_split_unsent_seg+0x84>
  offset = useg->p->tot_len - useg->len + split;
 8010068:	6868      	ldr	r0, [r5, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801006a:	4622      	mov	r2, r4
  offset = useg->p->tot_len - useg->len + split;
 801006c:	8929      	ldrh	r1, [r5, #8]
 801006e:	8903      	ldrh	r3, [r0, #8]
 8010070:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010072:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 8010076:	4433      	add	r3, r6
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010078:	4441      	add	r1, r8
 801007a:	b29b      	uxth	r3, r3
 801007c:	f7fc ffbe 	bl	800cffc <pbuf_copy_partial>
 8010080:	42a0      	cmp	r0, r4
 8010082:	d038      	beq.n	80100f6 <tcp_split_unsent_seg+0xda>
  TCP_STATS_INC(tcp.memerr);
 8010084:	4a4d      	ldr	r2, [pc, #308]	; (80101bc <tcp_split_unsent_seg+0x1a0>)
    pbuf_free(p);
 8010086:	4650      	mov	r0, sl
  TCP_STATS_INC(tcp.memerr);
 8010088:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801008c:	3301      	adds	r3, #1
 801008e:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 8010092:	f7fc fd1d 	bl	800cad0 <pbuf_free>
  return ERR_MEM;
 8010096:	f04f 30ff 	mov.w	r0, #4294967295
}
 801009a:	b003      	add	sp, #12
 801009c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TCP_STATS_INC(tcp.memerr);
 80100a0:	4a46      	ldr	r2, [pc, #280]	; (80101bc <tcp_split_unsent_seg+0x1a0>)
  return ERR_MEM;
 80100a2:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 80100a6:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 80100aa:	3301      	adds	r3, #1
 80100ac:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 80100b0:	b003      	add	sp, #12
 80100b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
 80100b6:	2000      	movs	r0, #0
}
 80100b8:	b003      	add	sp, #12
 80100ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80100be:	4b40      	ldr	r3, [pc, #256]	; (80101c0 <tcp_split_unsent_seg+0x1a4>)
 80100c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80100c4:	493f      	ldr	r1, [pc, #252]	; (80101c4 <tcp_split_unsent_seg+0x1a8>)
 80100c6:	4840      	ldr	r0, [pc, #256]	; (80101c8 <tcp_split_unsent_seg+0x1ac>)
 80100c8:	f003 fcb0 	bl	8013a2c <iprintf>
 80100cc:	892c      	ldrh	r4, [r5, #8]
 80100ce:	e7b9      	b.n	8010044 <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80100d0:	4b3b      	ldr	r3, [pc, #236]	; (80101c0 <tcp_split_unsent_seg+0x1a4>)
 80100d2:	f240 325b 	movw	r2, #859	; 0x35b
 80100d6:	493d      	ldr	r1, [pc, #244]	; (80101cc <tcp_split_unsent_seg+0x1b0>)
 80100d8:	483b      	ldr	r0, [pc, #236]	; (80101c8 <tcp_split_unsent_seg+0x1ac>)
 80100da:	f003 fca7 	bl	8013a2c <iprintf>
 80100de:	892c      	ldrh	r4, [r5, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80100e0:	2c00      	cmp	r4, #0
 80100e2:	d1af      	bne.n	8010044 <tcp_split_unsent_seg+0x28>
 80100e4:	e7eb      	b.n	80100be <tcp_split_unsent_seg+0xa2>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80100e6:	4b36      	ldr	r3, [pc, #216]	; (80101c0 <tcp_split_unsent_seg+0x1a4>)
 80100e8:	f240 324b 	movw	r2, #843	; 0x34b
 80100ec:	4938      	ldr	r1, [pc, #224]	; (80101d0 <tcp_split_unsent_seg+0x1b4>)
 80100ee:	4836      	ldr	r0, [pc, #216]	; (80101c8 <tcp_split_unsent_seg+0x1ac>)
 80100f0:	f003 fc9c 	bl	8013a2c <iprintf>
 80100f4:	e799      	b.n	801002a <tcp_split_unsent_seg+0xe>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80100f6:	68eb      	ldr	r3, [r5, #12]
 80100f8:	8998      	ldrh	r0, [r3, #12]
 80100fa:	f7fb fc49 	bl	800b990 <lwip_htons>
 80100fe:	b2c0      	uxtb	r0, r0
  if (split_flags & TCP_PSH) {
 8010100:	f010 0b08 	ands.w	fp, r0, #8
 8010104:	d14a      	bne.n	801019c <tcp_split_unsent_seg+0x180>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010106:	f000 083f 	and.w	r8, r0, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801010a:	f018 0f01 	tst.w	r8, #1
 801010e:	d003      	beq.n	8010118 <tcp_split_unsent_seg+0xfc>
    split_flags &= ~TCP_FIN;
 8010110:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8010114:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010118:	68eb      	ldr	r3, [r5, #12]
 801011a:	6858      	ldr	r0, [r3, #4]
 801011c:	f7fb fc3c 	bl	800b998 <lwip_htonl>
 8010120:	f8cd 9000 	str.w	r9, [sp]
 8010124:	1833      	adds	r3, r6, r0
 8010126:	465a      	mov	r2, fp
 8010128:	4651      	mov	r1, sl
 801012a:	4638      	mov	r0, r7
 801012c:	f7ff fe20 	bl	800fd70 <tcp_create_segment>
  if (seg == NULL) {
 8010130:	4606      	mov	r6, r0
 8010132:	2800      	cmp	r0, #0
 8010134:	d0a6      	beq.n	8010084 <tcp_split_unsent_seg+0x68>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010136:	6868      	ldr	r0, [r5, #4]
 8010138:	f7fc fe3e 	bl	800cdb8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801013c:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801013e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010142:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010144:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010146:	4610      	mov	r0, r2
 8010148:	1b09      	subs	r1, r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801014a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801014e:	b289      	uxth	r1, r1
 8010150:	f7fc fdd6 	bl	800cd00 <pbuf_realloc>
  useg->len -= remainder;
 8010154:	892a      	ldrh	r2, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010156:	68eb      	ldr	r3, [r5, #12]
 8010158:	4640      	mov	r0, r8
  useg->len -= remainder;
 801015a:	1b14      	subs	r4, r2, r4
 801015c:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801015e:	899c      	ldrh	r4, [r3, #12]
 8010160:	f7fb fc16 	bl	800b990 <lwip_htons>
 8010164:	68eb      	ldr	r3, [r5, #12]
 8010166:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010168:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801016a:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801016c:	f7fc fe24 	bl	800cdb8 <pbuf_clen>
 8010170:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010174:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010176:	6870      	ldr	r0, [r6, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010178:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801017c:	f7fc fe1c 	bl	800cdb8 <pbuf_clen>
 8010180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  seg->next = useg->next;
 8010184:	682a      	ldr	r2, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010186:	4418      	add	r0, r3
 8010188:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 801018c:	6032      	str	r2, [r6, #0]
  useg->next = seg;
 801018e:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 8010190:	6830      	ldr	r0, [r6, #0]
 8010192:	2800      	cmp	r0, #0
 8010194:	d18f      	bne.n	80100b6 <tcp_split_unsent_seg+0x9a>
    pcb->unsent_oversize = 0;
 8010196:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 801019a:	e77e      	b.n	801009a <tcp_split_unsent_seg+0x7e>
    split_flags &= ~TCP_PSH;
 801019c:	f000 0837 	and.w	r8, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 80101a0:	f04f 0b08 	mov.w	fp, #8
 80101a4:	e7b1      	b.n	801010a <tcp_split_unsent_seg+0xee>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80101a6:	4b06      	ldr	r3, [pc, #24]	; (80101c0 <tcp_split_unsent_seg+0x1a4>)
 80101a8:	f240 3253 	movw	r2, #851	; 0x353
 80101ac:	4909      	ldr	r1, [pc, #36]	; (80101d4 <tcp_split_unsent_seg+0x1b8>)
 80101ae:	4806      	ldr	r0, [pc, #24]	; (80101c8 <tcp_split_unsent_seg+0x1ac>)
 80101b0:	f003 fc3c 	bl	8013a2c <iprintf>
    return ERR_VAL;
 80101b4:	f06f 0005 	mvn.w	r0, #5
 80101b8:	e76f      	b.n	801009a <tcp_split_unsent_seg+0x7e>
 80101ba:	bf00      	nop
 80101bc:	2401bdf8 	.word	0x2401bdf8
 80101c0:	08015e74 	.word	0x08015e74
 80101c4:	08016038 	.word	0x08016038
 80101c8:	0801487c 	.word	0x0801487c
 80101cc:	08016028 	.word	0x08016028
 80101d0:	08015fe0 	.word	0x08015fe0
 80101d4:	08016004 	.word	0x08016004

080101d8 <tcp_enqueue_flags>:
{
 80101d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80101dc:	f011 0803 	ands.w	r8, r1, #3
{
 80101e0:	b083      	sub	sp, #12
 80101e2:	460d      	mov	r5, r1
 80101e4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80101e6:	d04a      	beq.n	801027e <tcp_enqueue_flags+0xa6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80101e8:	2c00      	cmp	r4, #0
 80101ea:	d051      	beq.n	8010290 <tcp_enqueue_flags+0xb8>
  if (flags & TCP_SYN) {
 80101ec:	f3c5 0740 	ubfx	r7, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80101f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101f4:	2036      	movs	r0, #54	; 0x36
 80101f6:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80101fa:	4649      	mov	r1, r9
 80101fc:	f7fc fcdc 	bl	800cbb8 <pbuf_alloc>
 8010200:	4606      	mov	r6, r0
 8010202:	2800      	cmp	r0, #0
 8010204:	d074      	beq.n	80102f0 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010206:	8943      	ldrh	r3, [r0, #10]
 8010208:	454b      	cmp	r3, r9
 801020a:	d349      	bcc.n	80102a0 <tcp_enqueue_flags+0xc8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801020c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801020e:	4631      	mov	r1, r6
 8010210:	9700      	str	r7, [sp, #0]
 8010212:	462a      	mov	r2, r5
 8010214:	4620      	mov	r0, r4
 8010216:	f7ff fdab 	bl	800fd70 <tcp_create_segment>
 801021a:	4606      	mov	r6, r0
 801021c:	2800      	cmp	r0, #0
 801021e:	d067      	beq.n	80102f0 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010220:	68c3      	ldr	r3, [r0, #12]
 8010222:	079a      	lsls	r2, r3, #30
 8010224:	d150      	bne.n	80102c8 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010226:	8933      	ldrh	r3, [r6, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d141      	bne.n	80102b0 <tcp_enqueue_flags+0xd8>
  if (pcb->unsent == NULL) {
 801022c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801022e:	b90a      	cbnz	r2, 8010234 <tcp_enqueue_flags+0x5c>
 8010230:	e048      	b.n	80102c4 <tcp_enqueue_flags+0xec>
 8010232:	461a      	mov	r2, r3
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010234:	6813      	ldr	r3, [r2, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1fb      	bne.n	8010232 <tcp_enqueue_flags+0x5a>
    useg->next = seg;
 801023a:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010242:	f1b8 0f00 	cmp.w	r8, #0
 8010246:	d002      	beq.n	801024e <tcp_enqueue_flags+0x76>
    pcb->snd_lbb++;
 8010248:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801024a:	3301      	adds	r3, #1
 801024c:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801024e:	07eb      	lsls	r3, r5, #31
 8010250:	d410      	bmi.n	8010274 <tcp_enqueue_flags+0x9c>
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010252:	6870      	ldr	r0, [r6, #4]
 8010254:	f7fc fdb0 	bl	800cdb8 <pbuf_clen>
 8010258:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801025c:	4418      	add	r0, r3
 801025e:	b280      	uxth	r0, r0
 8010260:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8010264:	b118      	cbz	r0, 801026e <tcp_enqueue_flags+0x96>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010266:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010268:	2800      	cmp	r0, #0
 801026a:	d035      	beq.n	80102d8 <tcp_enqueue_flags+0x100>
  return ERR_OK;
 801026c:	2000      	movs	r0, #0
}
 801026e:	b003      	add	sp, #12
 8010270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_set_flags(pcb, TF_FIN);
 8010274:	8b63      	ldrh	r3, [r4, #26]
 8010276:	f043 0320 	orr.w	r3, r3, #32
 801027a:	8363      	strh	r3, [r4, #26]
 801027c:	e7e9      	b.n	8010252 <tcp_enqueue_flags+0x7a>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801027e:	4b23      	ldr	r3, [pc, #140]	; (801030c <tcp_enqueue_flags+0x134>)
 8010280:	f240 4212 	movw	r2, #1042	; 0x412
 8010284:	4922      	ldr	r1, [pc, #136]	; (8010310 <tcp_enqueue_flags+0x138>)
 8010286:	4823      	ldr	r0, [pc, #140]	; (8010314 <tcp_enqueue_flags+0x13c>)
 8010288:	f003 fbd0 	bl	8013a2c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801028c:	2c00      	cmp	r4, #0
 801028e:	d1ad      	bne.n	80101ec <tcp_enqueue_flags+0x14>
 8010290:	4b1e      	ldr	r3, [pc, #120]	; (801030c <tcp_enqueue_flags+0x134>)
 8010292:	f240 4213 	movw	r2, #1043	; 0x413
 8010296:	4920      	ldr	r1, [pc, #128]	; (8010318 <tcp_enqueue_flags+0x140>)
 8010298:	481e      	ldr	r0, [pc, #120]	; (8010314 <tcp_enqueue_flags+0x13c>)
 801029a:	f003 fbc7 	bl	8013a2c <iprintf>
 801029e:	e7a5      	b.n	80101ec <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80102a0:	4b1a      	ldr	r3, [pc, #104]	; (801030c <tcp_enqueue_flags+0x134>)
 80102a2:	f240 423a 	movw	r2, #1082	; 0x43a
 80102a6:	491d      	ldr	r1, [pc, #116]	; (801031c <tcp_enqueue_flags+0x144>)
 80102a8:	481a      	ldr	r0, [pc, #104]	; (8010314 <tcp_enqueue_flags+0x13c>)
 80102aa:	f003 fbbf 	bl	8013a2c <iprintf>
 80102ae:	e7ad      	b.n	801020c <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80102b0:	f240 4243 	movw	r2, #1091	; 0x443
 80102b4:	4b15      	ldr	r3, [pc, #84]	; (801030c <tcp_enqueue_flags+0x134>)
 80102b6:	491a      	ldr	r1, [pc, #104]	; (8010320 <tcp_enqueue_flags+0x148>)
 80102b8:	4816      	ldr	r0, [pc, #88]	; (8010314 <tcp_enqueue_flags+0x13c>)
 80102ba:	f003 fbb7 	bl	8013a2c <iprintf>
  if (pcb->unsent == NULL) {
 80102be:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80102c0:	2a00      	cmp	r2, #0
 80102c2:	d1b7      	bne.n	8010234 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 80102c4:	66e6      	str	r6, [r4, #108]	; 0x6c
 80102c6:	e7b9      	b.n	801023c <tcp_enqueue_flags+0x64>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80102c8:	4b10      	ldr	r3, [pc, #64]	; (801030c <tcp_enqueue_flags+0x134>)
 80102ca:	f240 4242 	movw	r2, #1090	; 0x442
 80102ce:	4915      	ldr	r1, [pc, #84]	; (8010324 <tcp_enqueue_flags+0x14c>)
 80102d0:	4810      	ldr	r0, [pc, #64]	; (8010314 <tcp_enqueue_flags+0x13c>)
 80102d2:	f003 fbab 	bl	8013a2c <iprintf>
 80102d6:	e7a6      	b.n	8010226 <tcp_enqueue_flags+0x4e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80102d8:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 80102da:	2c00      	cmp	r4, #0
 80102dc:	d1c7      	bne.n	801026e <tcp_enqueue_flags+0x96>
 80102de:	4b0b      	ldr	r3, [pc, #44]	; (801030c <tcp_enqueue_flags+0x134>)
 80102e0:	f240 4266 	movw	r2, #1126	; 0x466
 80102e4:	4910      	ldr	r1, [pc, #64]	; (8010328 <tcp_enqueue_flags+0x150>)
 80102e6:	480b      	ldr	r0, [pc, #44]	; (8010314 <tcp_enqueue_flags+0x13c>)
 80102e8:	f003 fba0 	bl	8013a2c <iprintf>
  return ERR_OK;
 80102ec:	4620      	mov	r0, r4
 80102ee:	e7be      	b.n	801026e <tcp_enqueue_flags+0x96>
    TCP_STATS_INC(tcp.memerr);
 80102f0:	490e      	ldr	r1, [pc, #56]	; (801032c <tcp_enqueue_flags+0x154>)
    return ERR_MEM;
 80102f2:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102f6:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 80102f8:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 8010300:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010302:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 8010304:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 8010308:	e7b1      	b.n	801026e <tcp_enqueue_flags+0x96>
 801030a:	bf00      	nop
 801030c:	08015e74 	.word	0x08015e74
 8010310:	08015c20 	.word	0x08015c20
 8010314:	0801487c 	.word	0x0801487c
 8010318:	08015c78 	.word	0x08015c78
 801031c:	08015c98 	.word	0x08015c98
 8010320:	08015cec 	.word	0x08015cec
 8010324:	08015cd4 	.word	0x08015cd4
 8010328:	08015d18 	.word	0x08015d18
 801032c:	2401bdf8 	.word	0x2401bdf8

08010330 <tcp_send_fin>:
{
 8010330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010332:	4605      	mov	r5, r0
 8010334:	b308      	cbz	r0, 801037a <tcp_send_fin+0x4a>
  if (pcb->unsent != NULL) {
 8010336:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8010338:	b90c      	cbnz	r4, 801033e <tcp_send_fin+0xe>
 801033a:	e00a      	b.n	8010352 <tcp_send_fin+0x22>
 801033c:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1fb      	bne.n	801033c <tcp_send_fin+0xc>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010344:	68e3      	ldr	r3, [r4, #12]
 8010346:	8998      	ldrh	r0, [r3, #12]
 8010348:	f7fb fb22 	bl	800b990 <lwip_htons>
 801034c:	f010 0607 	ands.w	r6, r0, #7
 8010350:	d005      	beq.n	801035e <tcp_send_fin+0x2e>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010352:	4628      	mov	r0, r5
 8010354:	2101      	movs	r1, #1
}
 8010356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801035a:	f7ff bf3d 	b.w	80101d8 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801035e:	68e3      	ldr	r3, [r4, #12]
 8010360:	2001      	movs	r0, #1
 8010362:	899f      	ldrh	r7, [r3, #12]
 8010364:	f7fb fb14 	bl	800b990 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8010368:	8b6b      	ldrh	r3, [r5, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801036a:	4338      	orrs	r0, r7
 801036c:	68e2      	ldr	r2, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 801036e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010372:	8190      	strh	r0, [r2, #12]
}
 8010374:	4630      	mov	r0, r6
      tcp_set_flags(pcb, TF_FIN);
 8010376:	836b      	strh	r3, [r5, #26]
}
 8010378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801037a:	4b04      	ldr	r3, [pc, #16]	; (801038c <tcp_send_fin+0x5c>)
 801037c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010380:	4903      	ldr	r1, [pc, #12]	; (8010390 <tcp_send_fin+0x60>)
 8010382:	4804      	ldr	r0, [pc, #16]	; (8010394 <tcp_send_fin+0x64>)
 8010384:	f003 fb52 	bl	8013a2c <iprintf>
 8010388:	e7d5      	b.n	8010336 <tcp_send_fin+0x6>
 801038a:	bf00      	nop
 801038c:	08015e74 	.word	0x08015e74
 8010390:	08015fc4 	.word	0x08015fc4
 8010394:	0801487c 	.word	0x0801487c

08010398 <tcp_rexmit_rto_prepare>:
{
 8010398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801039a:	4605      	mov	r5, r0
 801039c:	b370      	cbz	r0, 80103fc <tcp_rexmit_rto_prepare+0x64>
  if (pcb->unacked == NULL) {
 801039e:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 80103a0:	b924      	cbnz	r4, 80103ac <tcp_rexmit_rto_prepare+0x14>
 80103a2:	e028      	b.n	80103f6 <tcp_rexmit_rto_prepare+0x5e>
    if (tcp_output_segment_busy(seg)) {
 80103a4:	f7ff fccc 	bl	800fd40 <tcp_output_segment_busy>
 80103a8:	bb28      	cbnz	r0, 80103f6 <tcp_rexmit_rto_prepare+0x5e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80103aa:	6824      	ldr	r4, [r4, #0]
 80103ac:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 80103ae:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1f7      	bne.n	80103a4 <tcp_rexmit_rto_prepare+0xc>
  if (tcp_output_segment_busy(seg)) {
 80103b4:	f7ff fcc4 	bl	800fd40 <tcp_output_segment_busy>
 80103b8:	4606      	mov	r6, r0
 80103ba:	b9e0      	cbnz	r0, 80103f6 <tcp_rexmit_rto_prepare+0x5e>
  tcp_set_flags(pcb, TF_RTO);
 80103bc:	8b6b      	ldrh	r3, [r5, #26]
  seg->next = pcb->unsent;
 80103be:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  pcb->unsent = pcb->unacked;
 80103c0:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 80103c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 80103c6:	6022      	str	r2, [r4, #0]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80103c8:	68e2      	ldr	r2, [r4, #12]
  tcp_set_flags(pcb, TF_RTO);
 80103ca:	836b      	strh	r3, [r5, #26]
  pcb->unacked = NULL;
 80103cc:	e9c5 101b 	strd	r1, r0, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80103d0:	6850      	ldr	r0, [r2, #4]
 80103d2:	f7fb fae1 	bl	800b998 <lwip_htonl>
 80103d6:	68e3      	ldr	r3, [r4, #12]
 80103d8:	4607      	mov	r7, r0
 80103da:	8924      	ldrh	r4, [r4, #8]
 80103dc:	8998      	ldrh	r0, [r3, #12]
 80103de:	f7fb fad7 	bl	800b990 <lwip_htons>
 80103e2:	f010 0303 	ands.w	r3, r0, #3
 80103e6:	4427      	add	r7, r4
  return ERR_OK;
 80103e8:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80103ea:	bf18      	it	ne
 80103ec:	2301      	movne	r3, #1
  pcb->rttest = 0;
 80103ee:	636e      	str	r6, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80103f0:	443b      	add	r3, r7
 80103f2:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 80103f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 80103f6:	f06f 0005 	mvn.w	r0, #5
}
 80103fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80103fc:	4b03      	ldr	r3, [pc, #12]	; (801040c <tcp_rexmit_rto_prepare+0x74>)
 80103fe:	f240 6263 	movw	r2, #1635	; 0x663
 8010402:	4903      	ldr	r1, [pc, #12]	; (8010410 <tcp_rexmit_rto_prepare+0x78>)
 8010404:	4803      	ldr	r0, [pc, #12]	; (8010414 <tcp_rexmit_rto_prepare+0x7c>)
 8010406:	f003 fb11 	bl	8013a2c <iprintf>
 801040a:	e7c8      	b.n	801039e <tcp_rexmit_rto_prepare+0x6>
 801040c:	08015e74 	.word	0x08015e74
 8010410:	08015f48 	.word	0x08015f48
 8010414:	0801487c 	.word	0x0801487c

08010418 <tcp_rexmit>:
{
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801041a:	4607      	mov	r7, r0
 801041c:	2800      	cmp	r0, #0
 801041e:	d036      	beq.n	801048e <tcp_rexmit+0x76>
  if (pcb->unacked == NULL) {
 8010420:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8010422:	2e00      	cmp	r6, #0
 8010424:	d03b      	beq.n	801049e <tcp_rexmit+0x86>
  if (tcp_output_segment_busy(seg)) {
 8010426:	4630      	mov	r0, r6
 8010428:	f7ff fc8a 	bl	800fd40 <tcp_output_segment_busy>
 801042c:	2800      	cmp	r0, #0
 801042e:	d136      	bne.n	801049e <tcp_rexmit+0x86>
  pcb->unacked = seg->next;
 8010430:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 8010432:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 8010436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 8010438:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801043a:	b91b      	cbnz	r3, 8010444 <tcp_rexmit+0x2c>
 801043c:	e00f      	b.n	801045e <tcp_rexmit+0x46>
    cur_seg = &((*cur_seg)->next );
 801043e:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8010440:	682b      	ldr	r3, [r5, #0]
 8010442:	b163      	cbz	r3, 801045e <tcp_rexmit+0x46>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	6858      	ldr	r0, [r3, #4]
 8010448:	f7fb faa6 	bl	800b998 <lwip_htonl>
 801044c:	68f3      	ldr	r3, [r6, #12]
 801044e:	4604      	mov	r4, r0
 8010450:	6858      	ldr	r0, [r3, #4]
 8010452:	f7fb faa1 	bl	800b998 <lwip_htonl>
 8010456:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 8010458:	2800      	cmp	r0, #0
 801045a:	dbf0      	blt.n	801043e <tcp_rexmit+0x26>
 801045c:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801045e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8010460:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 8010462:	6833      	ldr	r3, [r6, #0]
 8010464:	b183      	cbz	r3, 8010488 <tcp_rexmit+0x70>
  if (pcb->nrtx < 0xFF) {
 8010466:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801046a:	2bff      	cmp	r3, #255	; 0xff
 801046c:	d002      	beq.n	8010474 <tcp_rexmit+0x5c>
    ++pcb->nrtx;
 801046e:	3301      	adds	r3, #1
 8010470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  MIB2_STATS_INC(mib2.tcpretranssegs);
 8010474:	4a0b      	ldr	r2, [pc, #44]	; (80104a4 <tcp_rexmit+0x8c>)
  pcb->rttest = 0;
 8010476:	2100      	movs	r1, #0
  MIB2_STATS_INC(mib2.tcpretranssegs);
 8010478:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
  return ERR_OK;
 801047c:	4608      	mov	r0, r1
  pcb->rttest = 0;
 801047e:	6379      	str	r1, [r7, #52]	; 0x34
  MIB2_STATS_INC(mib2.tcpretranssegs);
 8010480:	3301      	adds	r3, #1
 8010482:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8010488:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801048c:	e7eb      	b.n	8010466 <tcp_rexmit+0x4e>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801048e:	4b06      	ldr	r3, [pc, #24]	; (80104a8 <tcp_rexmit+0x90>)
 8010490:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010494:	4905      	ldr	r1, [pc, #20]	; (80104ac <tcp_rexmit+0x94>)
 8010496:	4806      	ldr	r0, [pc, #24]	; (80104b0 <tcp_rexmit+0x98>)
 8010498:	f003 fac8 	bl	8013a2c <iprintf>
 801049c:	e7c0      	b.n	8010420 <tcp_rexmit+0x8>
    return ERR_VAL;
 801049e:	f06f 0005 	mvn.w	r0, #5
}
 80104a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a4:	2401bdf8 	.word	0x2401bdf8
 80104a8:	08015e74 	.word	0x08015e74
 80104ac:	08015ed0 	.word	0x08015ed0
 80104b0:	0801487c 	.word	0x0801487c

080104b4 <tcp_rexmit_fast>:
{
 80104b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80104b6:	4604      	mov	r4, r0
 80104b8:	b338      	cbz	r0, 801050a <tcp_rexmit_fast+0x56>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80104ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104bc:	b113      	cbz	r3, 80104c4 <tcp_rexmit_fast+0x10>
 80104be:	8b63      	ldrh	r3, [r4, #26]
 80104c0:	075b      	lsls	r3, r3, #29
 80104c2:	d500      	bpl.n	80104c6 <tcp_rexmit_fast+0x12>
}
 80104c4:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 80104c6:	4620      	mov	r0, r4
 80104c8:	f7ff ffa6 	bl	8010418 <tcp_rexmit>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d1f9      	bne.n	80104c4 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80104d0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80104d4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80104d8:	429a      	cmp	r2, r3
 80104da:	bf38      	it	cc
 80104dc:	0853      	lsrcc	r3, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80104de:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80104e0:	bf28      	it	cs
 80104e2:	085b      	lsrcs	r3, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80104e4:	0051      	lsls	r1, r2, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80104e6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80104ea:	428b      	cmp	r3, r1
 80104ec:	d202      	bcs.n	80104f4 <tcp_rexmit_fast+0x40>
        pcb->ssthresh = 2 * pcb->mss;
 80104ee:	b28b      	uxth	r3, r1
 80104f0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80104f4:	440a      	add	r2, r1
      tcp_set_flags(pcb, TF_INFR);
 80104f6:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 80104f8:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80104fa:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 80104fc:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 8010500:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010502:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010506:	8362      	strh	r2, [r4, #26]
}
 8010508:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801050a:	4b04      	ldr	r3, [pc, #16]	; (801051c <tcp_rexmit_fast+0x68>)
 801050c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010510:	4903      	ldr	r1, [pc, #12]	; (8010520 <tcp_rexmit_fast+0x6c>)
 8010512:	4804      	ldr	r0, [pc, #16]	; (8010524 <tcp_rexmit_fast+0x70>)
 8010514:	f003 fa8a 	bl	8013a2c <iprintf>
 8010518:	e7cf      	b.n	80104ba <tcp_rexmit_fast+0x6>
 801051a:	bf00      	nop
 801051c:	08015e74 	.word	0x08015e74
 8010520:	08015ee8 	.word	0x08015ee8
 8010524:	0801487c 	.word	0x0801487c

08010528 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801052c:	b084      	sub	sp, #16
 801052e:	4681      	mov	r9, r0
 8010530:	460e      	mov	r6, r1
 8010532:	4617      	mov	r7, r2
 8010534:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010536:	461c      	mov	r4, r3
{
 8010538:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801053c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010540:	b333      	cbz	r3, 8010590 <tcp_rst+0x68>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010542:	b375      	cbz	r5, 80105a2 <tcp_rst+0x7a>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010544:	4630      	mov	r0, r6
 8010546:	f24d 0616 	movw	r6, #53270	; 0xd016
 801054a:	f7fb fa25 	bl	800b998 <lwip_htonl>
 801054e:	2114      	movs	r1, #20
 8010550:	4602      	mov	r2, r0
 8010552:	f8cd a000 	str.w	sl, [sp]
 8010556:	4638      	mov	r0, r7
 8010558:	4643      	mov	r3, r8
 801055a:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801055e:	2100      	movs	r1, #0
 8010560:	f7ff fc8c 	bl	800fe7c <tcp_output_alloc_header_common.constprop.4>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010564:	4607      	mov	r7, r0
 8010566:	b180      	cbz	r0, 801058a <tcp_rst+0x62>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);
 8010568:	4e12      	ldr	r6, [pc, #72]	; (80105b4 <tcp_rst+0x8c>)
  tcp_output_fill_options(pcb, p, 0, optlen);
 801056a:	f7ff fcf7 	bl	800ff5c <tcp_output_fill_options.isra.0.constprop.5>

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801056e:	4622      	mov	r2, r4
 8010570:	462b      	mov	r3, r5
  MIB2_STATS_INC(mib2.tcpoutrsts);
 8010572:	f8d6 4160 	ldr.w	r4, [r6, #352]	; 0x160
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010576:	4639      	mov	r1, r7
 8010578:	4648      	mov	r0, r9
  MIB2_STATS_INC(mib2.tcpoutrsts);
 801057a:	3401      	adds	r4, #1
 801057c:	f8c6 4160 	str.w	r4, [r6, #352]	; 0x160
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010580:	b004      	add	sp, #16
 8010582:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010586:	f7ff bcf9 	b.w	800ff7c <tcp_output_control_segment>
}
 801058a:	b004      	add	sp, #16
 801058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010590:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <tcp_rst+0x90>)
 8010592:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010596:	4909      	ldr	r1, [pc, #36]	; (80105bc <tcp_rst+0x94>)
 8010598:	4809      	ldr	r0, [pc, #36]	; (80105c0 <tcp_rst+0x98>)
 801059a:	f003 fa47 	bl	8013a2c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801059e:	2d00      	cmp	r5, #0
 80105a0:	d1d0      	bne.n	8010544 <tcp_rst+0x1c>
 80105a2:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <tcp_rst+0x90>)
 80105a4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80105a8:	4906      	ldr	r1, [pc, #24]	; (80105c4 <tcp_rst+0x9c>)
 80105aa:	4805      	ldr	r0, [pc, #20]	; (80105c0 <tcp_rst+0x98>)
 80105ac:	f003 fa3e 	bl	8013a2c <iprintf>
 80105b0:	e7c8      	b.n	8010544 <tcp_rst+0x1c>
 80105b2:	bf00      	nop
 80105b4:	2401bdf8 	.word	0x2401bdf8
 80105b8:	08015e74 	.word	0x08015e74
 80105bc:	08015f6c 	.word	0x08015f6c
 80105c0:	0801487c 	.word	0x0801487c
 80105c4:	08015f88 	.word	0x08015f88

080105c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80105c8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80105ca:	4604      	mov	r4, r0
 80105cc:	b1d8      	cbz	r0, 8010606 <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80105ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80105d0:	f7fb f9e2 	bl	800b998 <lwip_htonl>
 80105d4:	2100      	movs	r1, #0
 80105d6:	4602      	mov	r2, r0
 80105d8:	4620      	mov	r0, r4
 80105da:	f7ff fc95 	bl	800ff08 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 80105de:	4605      	mov	r5, r0
 80105e0:	b1c8      	cbz	r0, 8010616 <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80105e2:	f7ff fcbb 	bl	800ff5c <tcp_output_fill_options.isra.0.constprop.5>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80105e6:	1d23      	adds	r3, r4, #4
 80105e8:	4629      	mov	r1, r5
 80105ea:	4622      	mov	r2, r4
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff fcc5 	bl	800ff7c <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105f2:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80105f4:	b918      	cbnz	r0, 80105fe <tcp_send_empty_ack+0x36>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105f6:	f023 0303 	bic.w	r3, r3, #3
 80105fa:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 80105fc:	bd38      	pop	{r3, r4, r5, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105fe:	f043 0303 	orr.w	r3, r3, #3
 8010602:	8363      	strh	r3, [r4, #26]
}
 8010604:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010606:	4b07      	ldr	r3, [pc, #28]	; (8010624 <tcp_send_empty_ack+0x5c>)
 8010608:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801060c:	4906      	ldr	r1, [pc, #24]	; (8010628 <tcp_send_empty_ack+0x60>)
 801060e:	4807      	ldr	r0, [pc, #28]	; (801062c <tcp_send_empty_ack+0x64>)
 8010610:	f003 fa0c 	bl	8013a2c <iprintf>
 8010614:	e7db      	b.n	80105ce <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010616:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 8010618:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801061c:	f043 0303 	orr.w	r3, r3, #3
 8010620:	8363      	strh	r3, [r4, #26]
}
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	08015e74 	.word	0x08015e74
 8010628:	08015fa4 	.word	0x08015fa4
 801062c:	0801487c 	.word	0x0801487c

08010630 <tcp_output>:
{
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010634:	4604      	mov	r4, r0
{
 8010636:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010638:	2800      	cmp	r0, #0
 801063a:	f000 81b3 	beq.w	80109a4 <tcp_output+0x374>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801063e:	7d23      	ldrb	r3, [r4, #20]
 8010640:	2b01      	cmp	r3, #1
 8010642:	f000 8132 	beq.w	80108aa <tcp_output+0x27a>
  if (tcp_input_pcb == pcb) {
 8010646:	4bc0      	ldr	r3, [pc, #768]	; (8010948 <tcp_output+0x318>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	42a3      	cmp	r3, r4
 801064c:	f000 8129 	beq.w	80108a2 <tcp_output+0x272>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010650:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 8010654:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 8010658:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801065a:	429f      	cmp	r7, r3
 801065c:	bf28      	it	cs
 801065e:	461f      	movcs	r7, r3
  if (seg == NULL) {
 8010660:	b955      	cbnz	r5, 8010678 <tcp_output+0x48>
    if (pcb->flags & TF_ACK_NOW) {
 8010662:	8b63      	ldrh	r3, [r4, #26]
 8010664:	0799      	lsls	r1, r3, #30
 8010666:	f100 813d 	bmi.w	80108e4 <tcp_output+0x2b4>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801066a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  return ERR_OK;
 801066e:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010670:	8363      	strh	r3, [r4, #26]
}
 8010672:	b007      	add	sp, #28
 8010674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010678:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801067a:	f104 0b04 	add.w	fp, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801067e:	2800      	cmp	r0, #0
 8010680:	f040 81b5 	bne.w	80109ee <tcp_output+0x3be>
    return ip_route(src, dst);
 8010684:	4658      	mov	r0, fp
 8010686:	f001 fdb1 	bl	80121ec <ip4_route>
 801068a:	4682      	mov	sl, r0
  if (netif == NULL) {
 801068c:	f1ba 0f00 	cmp.w	sl, #0
 8010690:	f000 81ba 	beq.w	8010a08 <tcp_output+0x3d8>
  if (ip_addr_isany(&pcb->local_ip)) {
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	b913      	cbnz	r3, 801069e <tcp_output+0x6e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010698:	f8da 3004 	ldr.w	r3, [sl, #4]
 801069c:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801069e:	68eb      	ldr	r3, [r5, #12]
 80106a0:	6858      	ldr	r0, [r3, #4]
 80106a2:	f7fb f979 	bl	800b998 <lwip_htonl>
 80106a6:	892b      	ldrh	r3, [r5, #8]
 80106a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80106aa:	1a9b      	subs	r3, r3, r2
 80106ac:	4418      	add	r0, r3
 80106ae:	42b8      	cmp	r0, r7
 80106b0:	f200 8103 	bhi.w	80108ba <tcp_output+0x28a>
  pcb->persist_backoff = 0;
 80106b4:	2300      	movs	r3, #0
  useg = pcb->unacked;
 80106b6:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 80106ba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  if (useg != NULL) {
 80106be:	f1b8 0f00 	cmp.w	r8, #0
 80106c2:	d101      	bne.n	80106c8 <tcp_output+0x98>
 80106c4:	e004      	b.n	80106d0 <tcp_output+0xa0>
 80106c6:	4698      	mov	r8, r3
    for (; useg->next != NULL; useg = useg->next);
 80106c8:	f8d8 3000 	ldr.w	r3, [r8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1fa      	bne.n	80106c6 <tcp_output+0x96>
    LWIP_ASSERT("RST not expected here!",
 80106d0:	4656      	mov	r6, sl
 80106d2:	e048      	b.n	8010766 <tcp_output+0x136>
    if (pcb->state != SYN_SENT) {
 80106d4:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
 80106d6:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 80106d8:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 80106da:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80106dc:	d003      	beq.n	80106e6 <tcp_output+0xb6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106de:	8b63      	ldrh	r3, [r4, #26]
 80106e0:	f023 0303 	bic.w	r3, r3, #3
 80106e4:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80106e6:	68eb      	ldr	r3, [r5, #12]
 80106e8:	6858      	ldr	r0, [r3, #4]
 80106ea:	f7fb f955 	bl	800b998 <lwip_htonl>
 80106ee:	68eb      	ldr	r3, [r5, #12]
 80106f0:	4681      	mov	r9, r0
 80106f2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80106f6:	8998      	ldrh	r0, [r3, #12]
 80106f8:	f7fb f94a 	bl	800b990 <lwip_htons>
 80106fc:	f010 0003 	ands.w	r0, r0, #3
 8010700:	44d1      	add	r9, sl
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010702:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010704:	bf18      	it	ne
 8010706:	2001      	movne	r0, #1
 8010708:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801070a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801070e:	1a1b      	subs	r3, r3, r0
 8010710:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8010712:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 8010714:	bfb8      	it	lt
 8010716:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8010718:	8998      	ldrh	r0, [r3, #12]
 801071a:	f7fb f939 	bl	800b990 <lwip_htons>
 801071e:	f010 0003 	ands.w	r0, r0, #3
 8010722:	bf18      	it	ne
 8010724:	2001      	movne	r0, #1
 8010726:	eb10 0f09 	cmn.w	r0, r9
 801072a:	f000 80e9 	beq.w	8010900 <tcp_output+0x2d0>
      seg->next = NULL;
 801072e:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 8010730:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 8010732:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 8010734:	2b00      	cmp	r3, #0
 8010736:	f000 80e7 	beq.w	8010908 <tcp_output+0x2d8>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801073a:	68eb      	ldr	r3, [r5, #12]
 801073c:	6858      	ldr	r0, [r3, #4]
 801073e:	f7fb f92b 	bl	800b998 <lwip_htonl>
 8010742:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010746:	4681      	mov	r9, r0
 8010748:	6858      	ldr	r0, [r3, #4]
 801074a:	f7fb f925 	bl	800b998 <lwip_htonl>
 801074e:	eba9 0000 	sub.w	r0, r9, r0
 8010752:	2800      	cmp	r0, #0
 8010754:	f2c0 812e 	blt.w	80109b4 <tcp_output+0x384>
          useg->next = seg;
 8010758:	f8c8 5000 	str.w	r5, [r8]
 801075c:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801075e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 8010760:	2d00      	cmp	r5, #0
 8010762:	f000 8148 	beq.w	80109f6 <tcp_output+0x3c6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010766:	68eb      	ldr	r3, [r5, #12]
 8010768:	6858      	ldr	r0, [r3, #4]
 801076a:	f7fb f915 	bl	800b998 <lwip_htonl>
 801076e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010770:	892a      	ldrh	r2, [r5, #8]
 8010772:	1ac0      	subs	r0, r0, r3
 8010774:	4410      	add	r0, r2
  while (seg != NULL &&
 8010776:	42b8      	cmp	r0, r7
 8010778:	f200 813f 	bhi.w	80109fa <tcp_output+0x3ca>
    LWIP_ASSERT("RST not expected here!",
 801077c:	68eb      	ldr	r3, [r5, #12]
 801077e:	8998      	ldrh	r0, [r3, #12]
 8010780:	f7fb f906 	bl	800b990 <lwip_htons>
 8010784:	0742      	lsls	r2, r0, #29
 8010786:	f100 80b3 	bmi.w	80108f0 <tcp_output+0x2c0>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801078a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801078c:	b163      	cbz	r3, 80107a8 <tcp_output+0x178>
 801078e:	8b62      	ldrh	r2, [r4, #26]
 8010790:	f012 0f44 	tst.w	r2, #68	; 0x44
 8010794:	4613      	mov	r3, r2
 8010796:	d107      	bne.n	80107a8 <tcp_output+0x178>
 8010798:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801079a:	2900      	cmp	r1, #0
 801079c:	f000 80bd 	beq.w	801091a <tcp_output+0x2ea>
 80107a0:	6808      	ldr	r0, [r1, #0]
 80107a2:	2800      	cmp	r0, #0
 80107a4:	f000 80b3 	beq.w	801090e <tcp_output+0x2de>
    if (pcb->state != SYN_SENT) {
 80107a8:	7d23      	ldrb	r3, [r4, #20]
 80107aa:	2b02      	cmp	r3, #2
 80107ac:	d009      	beq.n	80107c2 <tcp_output+0x192>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80107ae:	68eb      	ldr	r3, [r5, #12]
 80107b0:	2010      	movs	r0, #16
 80107b2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80107b6:	f7fb f8eb 	bl	800b990 <lwip_htons>
 80107ba:	68eb      	ldr	r3, [r5, #12]
 80107bc:	ea49 0000 	orr.w	r0, r9, r0
 80107c0:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 80107c2:	4628      	mov	r0, r5
 80107c4:	f7ff fabc 	bl	800fd40 <tcp_output_segment_busy>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d183      	bne.n	80106d4 <tcp_output+0xa4>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80107cc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80107d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80107d2:	f7fb f8e1 	bl	800b998 <lwip_htonl>
 80107d6:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80107da:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80107dc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80107e0:	f7fb f8d6 	bl	800b990 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80107e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80107e8:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107ec:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80107ee:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107f2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80107f4:	7aab      	ldrb	r3, [r5, #10]
 80107f6:	07db      	lsls	r3, r3, #31
 80107f8:	f100 80c1 	bmi.w	801097e <tcp_output+0x34e>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80107fc:	f109 0314 	add.w	r3, r9, #20
  if (pcb->rtime < 0) {
 8010800:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8010804:	2a00      	cmp	r2, #0
 8010806:	da01      	bge.n	801080c <tcp_output+0x1dc>
    pcb->rtime = 0;
 8010808:	2200      	movs	r2, #0
 801080a:	8622      	strh	r2, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801080c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801080e:	2a00      	cmp	r2, #0
 8010810:	f000 80a8 	beq.w	8010964 <tcp_output+0x334>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010814:	6868      	ldr	r0, [r5, #4]
    MIB2_STATS_INC(mib2.tcpoutsegs);
 8010816:	f8df a148 	ldr.w	sl, [pc, #328]	; 8010960 <tcp_output+0x330>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801081a:	6842      	ldr	r2, [r0, #4]
 801081c:	eba9 0202 	sub.w	r2, r9, r2
 8010820:	b292      	uxth	r2, r2
  if (len == 0) {
 8010822:	b922      	cbnz	r2, 801082e <tcp_output+0x1fe>
    MIB2_STATS_INC(mib2.tcpoutsegs);
 8010824:	f8da 1150 	ldr.w	r1, [sl, #336]	; 0x150
 8010828:	3101      	adds	r1, #1
 801082a:	f8ca 1150 	str.w	r1, [sl, #336]	; 0x150
  seg->p->len -= len;
 801082e:	8941      	ldrh	r1, [r0, #10]
  seg->tcphdr->chksum = 0;
 8010830:	f04f 0c00 	mov.w	ip, #0
  seg->p->tot_len -= len;
 8010834:	f8b0 e008 	ldrh.w	lr, [r0, #8]
  seg->p->len -= len;
 8010838:	1a89      	subs	r1, r1, r2
  seg->p->payload = seg->tcphdr;
 801083a:	f8c0 9004 	str.w	r9, [r0, #4]
  seg->p->tot_len -= len;
 801083e:	ebae 0202 	sub.w	r2, lr, r2
  seg->p->len -= len;
 8010842:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8010844:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 8010846:	f889 c010 	strb.w	ip, [r9, #16]
 801084a:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801084e:	7aaa      	ldrb	r2, [r5, #10]
 8010850:	0092      	lsls	r2, r2, #2
 8010852:	f002 0204 	and.w	r2, r2, #4
 8010856:	3214      	adds	r2, #20
 8010858:	4491      	add	r9, r2
 801085a:	454b      	cmp	r3, r9
 801085c:	d007      	beq.n	801086e <tcp_output+0x23e>
 801085e:	4b3b      	ldr	r3, [pc, #236]	; (801094c <tcp_output+0x31c>)
 8010860:	f240 621c 	movw	r2, #1564	; 0x61c
 8010864:	493a      	ldr	r1, [pc, #232]	; (8010950 <tcp_output+0x320>)
 8010866:	483b      	ldr	r0, [pc, #236]	; (8010954 <tcp_output+0x324>)
 8010868:	f003 f8e0 	bl	8013a2c <iprintf>
 801086c:	6868      	ldr	r0, [r5, #4]
  TCP_STATS_INC(tcp.xmit);
 801086e:	f8ba 3090 	ldrh.w	r3, [sl, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010872:	f04f 0c06 	mov.w	ip, #6
 8010876:	465a      	mov	r2, fp
 8010878:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801087a:	3301      	adds	r3, #1
 801087c:	f8aa 3090 	strh.w	r3, [sl, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010880:	7ae3      	ldrb	r3, [r4, #11]
 8010882:	e9cd c601 	strd	ip, r6, [sp, #4]
 8010886:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801088a:	f8cd c000 	str.w	ip, [sp]
 801088e:	f001 fee3 	bl	8012658 <ip4_output_if>
    if (err != ERR_OK) {
 8010892:	2800      	cmp	r0, #0
 8010894:	f43f af1e 	beq.w	80106d4 <tcp_output+0xa4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010898:	8b63      	ldrh	r3, [r4, #26]
 801089a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801089e:	8363      	strh	r3, [r4, #26]
      return err;
 80108a0:	e6e7      	b.n	8010672 <tcp_output+0x42>
    return ERR_OK;
 80108a2:	2000      	movs	r0, #0
}
 80108a4:	b007      	add	sp, #28
 80108a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80108aa:	4b28      	ldr	r3, [pc, #160]	; (801094c <tcp_output+0x31c>)
 80108ac:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80108b0:	4929      	ldr	r1, [pc, #164]	; (8010958 <tcp_output+0x328>)
 80108b2:	4828      	ldr	r0, [pc, #160]	; (8010954 <tcp_output+0x324>)
 80108b4:	f003 f8ba 	bl	8013a2c <iprintf>
 80108b8:	e6c5      	b.n	8010646 <tcp_output+0x16>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80108ba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80108be:	42bb      	cmp	r3, r7
 80108c0:	f47f aecf 	bne.w	8010662 <tcp_output+0x32>
 80108c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f47f aecb 	bne.w	8010662 <tcp_output+0x32>
 80108cc:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f47f aec6 	bne.w	8010662 <tcp_output+0x32>
      pcb->persist_cnt = 0;
 80108d6:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_backoff = 1;
 80108da:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
      pcb->persist_cnt = 0;
 80108de:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80108e2:	e6be      	b.n	8010662 <tcp_output+0x32>
      return tcp_send_empty_ack(pcb);
 80108e4:	4620      	mov	r0, r4
}
 80108e6:	b007      	add	sp, #28
 80108e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 80108ec:	f7ff be6c 	b.w	80105c8 <tcp_send_empty_ack>
    LWIP_ASSERT("RST not expected here!",
 80108f0:	4b16      	ldr	r3, [pc, #88]	; (801094c <tcp_output+0x31c>)
 80108f2:	f240 5237 	movw	r2, #1335	; 0x537
 80108f6:	4919      	ldr	r1, [pc, #100]	; (801095c <tcp_output+0x32c>)
 80108f8:	4816      	ldr	r0, [pc, #88]	; (8010954 <tcp_output+0x324>)
 80108fa:	f003 f897 	bl	8013a2c <iprintf>
 80108fe:	e744      	b.n	801078a <tcp_output+0x15a>
      tcp_seg_free(seg);
 8010900:	4628      	mov	r0, r5
 8010902:	f7fc fdc5 	bl	800d490 <tcp_seg_free>
 8010906:	e72a      	b.n	801075e <tcp_output+0x12e>
        pcb->unacked = seg;
 8010908:	6725      	str	r5, [r4, #112]	; 0x70
 801090a:	46a8      	mov	r8, r5
 801090c:	e727      	b.n	801075e <tcp_output+0x12e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801090e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8010912:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8010914:	4584      	cmp	ip, r0
 8010916:	f4bf af47 	bcs.w	80107a8 <tcp_output+0x178>
 801091a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801091e:	2800      	cmp	r0, #0
 8010920:	f43f af42 	beq.w	80107a8 <tcp_output+0x178>
 8010924:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 8010928:	2808      	cmp	r0, #8
 801092a:	f63f af3d 	bhi.w	80107a8 <tcp_output+0x178>
 801092e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8010932:	f47f af39 	bne.w	80107a8 <tcp_output+0x178>
  if (pcb->unsent == NULL) {
 8010936:	2900      	cmp	r1, #0
 8010938:	f47f ae97 	bne.w	801066a <tcp_output+0x3a>
    pcb->unsent_oversize = 0;
 801093c:	2100      	movs	r1, #0
 801093e:	4613      	mov	r3, r2
 8010940:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8010944:	e691      	b.n	801066a <tcp_output+0x3a>
 8010946:	bf00      	nop
 8010948:	2401bfd0 	.word	0x2401bfd0
 801094c:	08015e74 	.word	0x08015e74
 8010950:	08015db4 	.word	0x08015db4
 8010954:	0801487c 	.word	0x0801487c
 8010958:	08015d74 	.word	0x08015d74
 801095c:	08015d9c 	.word	0x08015d9c
 8010960:	2401bdf8 	.word	0x2401bdf8
    pcb->rttest = tcp_ticks;
 8010964:	4a2a      	ldr	r2, [pc, #168]	; (8010a10 <tcp_output+0x3e0>)
 8010966:	9305      	str	r3, [sp, #20]
 8010968:	6812      	ldr	r2, [r2, #0]
 801096a:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801096c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010970:	f7fb f812 	bl	800b998 <lwip_htonl>
 8010974:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8010978:	9b05      	ldr	r3, [sp, #20]
 801097a:	63a0      	str	r0, [r4, #56]	; 0x38
 801097c:	e74a      	b.n	8010814 <tcp_output+0x1e4>
    opts += 1;
 801097e:	f109 0318 	add.w	r3, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010982:	465a      	mov	r2, fp
 8010984:	4631      	mov	r1, r6
 8010986:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 801098a:	9305      	str	r3, [sp, #20]
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801098c:	f7fd fc72 	bl	800e274 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010990:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8010994:	f7fb f800 	bl	800b998 <lwip_htonl>
 8010998:	9b05      	ldr	r3, [sp, #20]
 801099a:	f8c9 0014 	str.w	r0, [r9, #20]
 801099e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80109a2:	e72d      	b.n	8010800 <tcp_output+0x1d0>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80109a4:	4b1b      	ldr	r3, [pc, #108]	; (8010a14 <tcp_output+0x3e4>)
 80109a6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80109aa:	491b      	ldr	r1, [pc, #108]	; (8010a18 <tcp_output+0x3e8>)
 80109ac:	481b      	ldr	r0, [pc, #108]	; (8010a1c <tcp_output+0x3ec>)
 80109ae:	f003 f83d 	bl	8013a2c <iprintf>
 80109b2:	e644      	b.n	801063e <tcp_output+0xe>
          while (*cur_seg &&
 80109b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80109b6:	f104 0a70 	add.w	sl, r4, #112	; 0x70
          while (*cur_seg &&
 80109ba:	b92b      	cbnz	r3, 80109c8 <tcp_output+0x398>
 80109bc:	e013      	b.n	80109e6 <tcp_output+0x3b6>
            cur_seg = &((*cur_seg)->next );
 80109be:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 80109c2:	f8da 3000 	ldr.w	r3, [sl]
 80109c6:	b173      	cbz	r3, 80109e6 <tcp_output+0x3b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	6858      	ldr	r0, [r3, #4]
 80109cc:	f7fa ffe4 	bl	800b998 <lwip_htonl>
 80109d0:	68eb      	ldr	r3, [r5, #12]
 80109d2:	4681      	mov	r9, r0
 80109d4:	6858      	ldr	r0, [r3, #4]
 80109d6:	f7fa ffdf 	bl	800b998 <lwip_htonl>
 80109da:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 80109de:	2800      	cmp	r0, #0
 80109e0:	dbed      	blt.n	80109be <tcp_output+0x38e>
 80109e2:	f8da 3000 	ldr.w	r3, [sl]
          seg->next = (*cur_seg);
 80109e6:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 80109e8:	f8ca 5000 	str.w	r5, [sl]
 80109ec:	e6b7      	b.n	801075e <tcp_output+0x12e>
    return netif_get_by_index(pcb->netif_idx);
 80109ee:	f7fb ff85 	bl	800c8fc <netif_get_by_index>
 80109f2:	4682      	mov	sl, r0
 80109f4:	e64a      	b.n	801068c <tcp_output+0x5c>
 80109f6:	8b62      	ldrh	r2, [r4, #26]
 80109f8:	e7a0      	b.n	801093c <tcp_output+0x30c>
 80109fa:	8b62      	ldrh	r2, [r4, #26]
 80109fc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80109fe:	4613      	mov	r3, r2
  if (pcb->unsent == NULL) {
 8010a00:	2900      	cmp	r1, #0
 8010a02:	f47f ae32 	bne.w	801066a <tcp_output+0x3a>
 8010a06:	e799      	b.n	801093c <tcp_output+0x30c>
    return ERR_RTE;
 8010a08:	f06f 0003 	mvn.w	r0, #3
 8010a0c:	e631      	b.n	8010672 <tcp_output+0x42>
 8010a0e:	bf00      	nop
 8010a10:	2401bfc0 	.word	0x2401bfc0
 8010a14:	08015e74 	.word	0x08015e74
 8010a18:	08015d5c 	.word	0x08015d5c
 8010a1c:	0801487c 	.word	0x0801487c

08010a20 <tcp_rexmit_rto_commit>:
{
 8010a20:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010a22:	4604      	mov	r4, r0
 8010a24:	b158      	cbz	r0, 8010a3e <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8010a26:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8010a2a:	2bff      	cmp	r3, #255	; 0xff
 8010a2c:	d002      	beq.n	8010a34 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8010a2e:	3301      	adds	r3, #1
 8010a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8010a34:	4620      	mov	r0, r4
}
 8010a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8010a3a:	f7ff bdf9 	b.w	8010630 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010a3e:	4b04      	ldr	r3, [pc, #16]	; (8010a50 <tcp_rexmit_rto_commit+0x30>)
 8010a40:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010a44:	4903      	ldr	r1, [pc, #12]	; (8010a54 <tcp_rexmit_rto_commit+0x34>)
 8010a46:	4804      	ldr	r0, [pc, #16]	; (8010a58 <tcp_rexmit_rto_commit+0x38>)
 8010a48:	f002 fff0 	bl	8013a2c <iprintf>
 8010a4c:	e7eb      	b.n	8010a26 <tcp_rexmit_rto_commit+0x6>
 8010a4e:	bf00      	nop
 8010a50:	08015e74 	.word	0x08015e74
 8010a54:	08015f24 	.word	0x08015f24
 8010a58:	0801487c 	.word	0x0801487c

08010a5c <tcp_rexmit_rto>:
{
 8010a5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a5e:	4604      	mov	r4, r0
 8010a60:	b148      	cbz	r0, 8010a76 <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010a62:	4620      	mov	r0, r4
 8010a64:	f7ff fc98 	bl	8010398 <tcp_rexmit_rto_prepare>
 8010a68:	b100      	cbz	r0, 8010a6c <tcp_rexmit_rto+0x10>
}
 8010a6a:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 8010a6c:	4620      	mov	r0, r4
}
 8010a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 8010a72:	f7ff bfd5 	b.w	8010a20 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a76:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <tcp_rexmit_rto+0x2c>)
 8010a78:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010a7c:	4903      	ldr	r1, [pc, #12]	; (8010a8c <tcp_rexmit_rto+0x30>)
 8010a7e:	4804      	ldr	r0, [pc, #16]	; (8010a90 <tcp_rexmit_rto+0x34>)
 8010a80:	f002 ffd4 	bl	8013a2c <iprintf>
 8010a84:	e7ed      	b.n	8010a62 <tcp_rexmit_rto+0x6>
 8010a86:	bf00      	nop
 8010a88:	08015e74 	.word	0x08015e74
 8010a8c:	08015f08 	.word	0x08015f08
 8010a90:	0801487c 	.word	0x0801487c

08010a94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010a94:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010a96:	4604      	mov	r4, r0
 8010a98:	b1a0      	cbz	r0, 8010ac4 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010a9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010a9c:	3801      	subs	r0, #1
 8010a9e:	f7fa ff7b 	bl	800b998 <lwip_htonl>
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f7ff fa2e 	bl	800ff08 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 8010aac:	4605      	mov	r5, r0
 8010aae:	b188      	cbz	r0, 8010ad4 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ab0:	f7ff fa54 	bl	800ff5c <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	1d23      	adds	r3, r4, #4
 8010ab8:	4622      	mov	r2, r4
 8010aba:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ac0:	f7ff ba5c 	b.w	800ff7c <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010ac4:	4b05      	ldr	r3, [pc, #20]	; (8010adc <tcp_keepalive+0x48>)
 8010ac6:	f640 0224 	movw	r2, #2084	; 0x824
 8010aca:	4905      	ldr	r1, [pc, #20]	; (8010ae0 <tcp_keepalive+0x4c>)
 8010acc:	4805      	ldr	r0, [pc, #20]	; (8010ae4 <tcp_keepalive+0x50>)
 8010ace:	f002 ffad 	bl	8013a2c <iprintf>
 8010ad2:	e7e2      	b.n	8010a9a <tcp_keepalive+0x6>
}
 8010ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad8:	bd70      	pop	{r4, r5, r6, pc}
 8010ada:	bf00      	nop
 8010adc:	08015e74 	.word	0x08015e74
 8010ae0:	08015d40 	.word	0x08015d40
 8010ae4:	0801487c 	.word	0x0801487c

08010ae8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010aec:	4604      	mov	r4, r0
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d054      	beq.n	8010b9c <tcp_zero_window_probe+0xb4>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010af2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8010af4:	2d00      	cmp	r5, #0
 8010af6:	d04a      	beq.n	8010b8e <tcp_zero_window_probe+0xa6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010af8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8010afc:	2bff      	cmp	r3, #255	; 0xff
 8010afe:	d002      	beq.n	8010b06 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8010b00:	3301      	adds	r3, #1
 8010b02:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010b06:	68eb      	ldr	r3, [r5, #12]
 8010b08:	8998      	ldrh	r0, [r3, #12]
 8010b0a:	f7fa ff41 	bl	800b990 <lwip_htons>
 8010b0e:	07c2      	lsls	r2, r0, #31
 8010b10:	68eb      	ldr	r3, [r5, #12]
 8010b12:	d426      	bmi.n	8010b62 <tcp_zero_window_probe+0x7a>
 8010b14:	685a      	ldr	r2, [r3, #4]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010b16:	2101      	movs	r1, #1
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f7ff f9f5 	bl	800ff08 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 8010b1e:	4606      	mov	r6, r0
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d037      	beq.n	8010b94 <tcp_zero_window_probe+0xac>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010b24:	6868      	ldr	r0, [r5, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	892f      	ldrh	r7, [r5, #8]
 8010b2a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 8010b2c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010b2e:	1bdb      	subs	r3, r3, r7
 8010b30:	3114      	adds	r1, #20
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	f7fc fa62 	bl	800cffc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010b38:	68eb      	ldr	r3, [r5, #12]
 8010b3a:	6858      	ldr	r0, [r3, #4]
 8010b3c:	f7fa ff2c 	bl	800b998 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010b40:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010b42:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010b44:	1a1b      	subs	r3, r3, r0
 8010b46:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8010b48:	bfb8      	it	lt
 8010b4a:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	f7ff fa05 	bl	800ff5c <tcp_output_fill_options.isra.0.constprop.5>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b52:	4631      	mov	r1, r6
 8010b54:	1d23      	adds	r3, r4, #4
 8010b56:	4622      	mov	r2, r4
 8010b58:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b5e:	f7ff ba0d 	b.w	800ff7c <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010b62:	8929      	ldrh	r1, [r5, #8]
 8010b64:	685a      	ldr	r2, [r3, #4]
 8010b66:	2900      	cmp	r1, #0
 8010b68:	d1d5      	bne.n	8010b16 <tcp_zero_window_probe+0x2e>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f7ff f9cc 	bl	800ff08 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 8010b70:	4606      	mov	r6, r0
 8010b72:	b178      	cbz	r0, 8010b94 <tcp_zero_window_probe+0xac>
  tcphdr = (struct tcp_hdr *)p->payload;
 8010b74:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010b78:	2011      	movs	r0, #17
 8010b7a:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8010b7e:	f7fa ff07 	bl	800b990 <lwip_htons>
 8010b82:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8010b86:	4338      	orrs	r0, r7
 8010b88:	f8a8 000c 	strh.w	r0, [r8, #12]
 8010b8c:	e7d4      	b.n	8010b38 <tcp_zero_window_probe+0x50>
    return ERR_OK;
 8010b8e:	4628      	mov	r0, r5
}
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8010b94:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010b9c:	4b03      	ldr	r3, [pc, #12]	; (8010bac <tcp_zero_window_probe+0xc4>)
 8010b9e:	f640 024f 	movw	r2, #2127	; 0x84f
 8010ba2:	4903      	ldr	r1, [pc, #12]	; (8010bb0 <tcp_zero_window_probe+0xc8>)
 8010ba4:	4803      	ldr	r0, [pc, #12]	; (8010bb4 <tcp_zero_window_probe+0xcc>)
 8010ba6:	f002 ff41 	bl	8013a2c <iprintf>
 8010baa:	e7a2      	b.n	8010af2 <tcp_zero_window_probe+0xa>
 8010bac:	08015e74 	.word	0x08015e74
 8010bb0:	08016048 	.word	0x08016048
 8010bb4:	0801487c 	.word	0x0801487c

08010bb8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bbc:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010bbe:	200a      	movs	r0, #10
{
 8010bc0:	460f      	mov	r7, r1
 8010bc2:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010bc4:	f7fb fc6e 	bl	800c4a4 <memp_malloc>
  if (timeout == NULL) {
 8010bc8:	b1d8      	cbz	r0, 8010c02 <sys_timeout_abs+0x4a>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010bca:	4d12      	ldr	r5, [pc, #72]	; (8010c14 <sys_timeout_abs+0x5c>)
  timeout->next = NULL;
 8010bcc:	2300      	movs	r3, #0
  timeout->h = handler;
 8010bce:	6087      	str	r7, [r0, #8]
  if (next_timeout == NULL) {
 8010bd0:	6829      	ldr	r1, [r5, #0]
  timeout->arg = arg;
 8010bd2:	60c6      	str	r6, [r0, #12]
  timeout->next = NULL;
 8010bd4:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8010bd8:	b121      	cbz	r1, 8010be4 <sys_timeout_abs+0x2c>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010bda:	684b      	ldr	r3, [r1, #4]
 8010bdc:	1ae3      	subs	r3, r4, r3
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da08      	bge.n	8010bf4 <sys_timeout_abs+0x3c>
    timeout->next = next_timeout;
 8010be2:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
 8010be4:	6028      	str	r0, [r5, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 8010be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	1aa2      	subs	r2, r4, r2
 8010bee:	2a00      	cmp	r2, #0
 8010bf0:	db03      	blt.n	8010bfa <sys_timeout_abs+0x42>
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	680b      	ldr	r3, [r1, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1f7      	bne.n	8010bea <sys_timeout_abs+0x32>
        timeout->next = t->next;
 8010bfa:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8010bfc:	6008      	str	r0, [r1, #0]
}
 8010bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010c02:	4b05      	ldr	r3, [pc, #20]	; (8010c18 <sys_timeout_abs+0x60>)
 8010c04:	22be      	movs	r2, #190	; 0xbe
 8010c06:	4905      	ldr	r1, [pc, #20]	; (8010c1c <sys_timeout_abs+0x64>)
 8010c08:	4805      	ldr	r0, [pc, #20]	; (8010c20 <sys_timeout_abs+0x68>)
}
 8010c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010c0e:	f002 bf0d 	b.w	8013a2c <iprintf>
 8010c12:	bf00      	nop
 8010c14:	2401406c 	.word	0x2401406c
 8010c18:	080160c4 	.word	0x080160c4
 8010c1c:	080160f8 	.word	0x080160f8
 8010c20:	0801487c 	.word	0x0801487c

08010c24 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010c24:	b510      	push	{r4, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010c26:	6843      	ldr	r3, [r0, #4]
{
 8010c28:	4604      	mov	r4, r0
  cyclic->handler();
 8010c2a:	4798      	blx	r3

  now = sys_now();
 8010c2c:	f7f7 fbb6 	bl	800839c <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010c30:	4b09      	ldr	r3, [pc, #36]	; (8010c58 <lwip_cyclic_timer+0x34>)
 8010c32:	6821      	ldr	r1, [r4, #0]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010c38:	1a1a      	subs	r2, r3, r0
 8010c3a:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010c3c:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010c3e:	db05      	blt.n	8010c4c <lwip_cyclic_timer+0x28>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010c40:	4618      	mov	r0, r3
 8010c42:	4906      	ldr	r1, [pc, #24]	; (8010c5c <lwip_cyclic_timer+0x38>)
#endif
  }
}
 8010c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010c48:	f7ff bfb6 	b.w	8010bb8 <sys_timeout_abs>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010c4c:	4408      	add	r0, r1
 8010c4e:	4903      	ldr	r1, [pc, #12]	; (8010c5c <lwip_cyclic_timer+0x38>)
}
 8010c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010c54:	f7ff bfb0 	b.w	8010bb8 <sys_timeout_abs>
 8010c58:	24014068 	.word	0x24014068
 8010c5c:	08010c25 	.word	0x08010c25

08010c60 <tcpip_tcp_timer>:
{
 8010c60:	b508      	push	{r3, lr}
  tcp_tmr();
 8010c62:	f7fd fad9 	bl	800e218 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010c66:	4b09      	ldr	r3, [pc, #36]	; (8010c8c <tcpip_tcp_timer+0x2c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	b913      	cbnz	r3, 8010c72 <tcpip_tcp_timer+0x12>
 8010c6c:	4b08      	ldr	r3, [pc, #32]	; (8010c90 <tcpip_tcp_timer+0x30>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	b143      	cbz	r3, 8010c84 <tcpip_tcp_timer+0x24>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010c72:	f7f7 fb93 	bl	800839c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010c76:	2200      	movs	r2, #0
 8010c78:	30fa      	adds	r0, #250	; 0xfa
 8010c7a:	4906      	ldr	r1, [pc, #24]	; (8010c94 <tcpip_tcp_timer+0x34>)
}
 8010c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010c80:	f7ff bf9a 	b.w	8010bb8 <sys_timeout_abs>
    tcpip_tcp_timer_active = 0;
 8010c84:	4a04      	ldr	r2, [pc, #16]	; (8010c98 <tcpip_tcp_timer+0x38>)
 8010c86:	6013      	str	r3, [r2, #0]
}
 8010c88:	bd08      	pop	{r3, pc}
 8010c8a:	bf00      	nop
 8010c8c:	2401bfbc 	.word	0x2401bfbc
 8010c90:	2401bfcc 	.word	0x2401bfcc
 8010c94:	08010c61 	.word	0x08010c61
 8010c98:	24014070 	.word	0x24014070

08010c9c <tcp_timer_needed>:
{
 8010c9c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010c9e:	4b0b      	ldr	r3, [pc, #44]	; (8010ccc <tcp_timer_needed+0x30>)
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	b98a      	cbnz	r2, 8010cc8 <tcp_timer_needed+0x2c>
 8010ca4:	4a0a      	ldr	r2, [pc, #40]	; (8010cd0 <tcp_timer_needed+0x34>)
 8010ca6:	6812      	ldr	r2, [r2, #0]
 8010ca8:	b152      	cbz	r2, 8010cc0 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 8010caa:	2201      	movs	r2, #1
 8010cac:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010cae:	f7f7 fb75 	bl	800839c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	30fa      	adds	r0, #250	; 0xfa
 8010cb6:	4907      	ldr	r1, [pc, #28]	; (8010cd4 <tcp_timer_needed+0x38>)
}
 8010cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010cbc:	f7ff bf7c 	b.w	8010bb8 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010cc0:	4a05      	ldr	r2, [pc, #20]	; (8010cd8 <tcp_timer_needed+0x3c>)
 8010cc2:	6812      	ldr	r2, [r2, #0]
 8010cc4:	2a00      	cmp	r2, #0
 8010cc6:	d1f0      	bne.n	8010caa <tcp_timer_needed+0xe>
}
 8010cc8:	bd08      	pop	{r3, pc}
 8010cca:	bf00      	nop
 8010ccc:	24014070 	.word	0x24014070
 8010cd0:	2401bfbc 	.word	0x2401bfbc
 8010cd4:	08010c61 	.word	0x08010c61
 8010cd8:	2401bfcc 	.word	0x2401bfcc

08010cdc <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010cdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8010ce0:	b570      	push	{r4, r5, r6, lr}
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010ce8:	d306      	bcc.n	8010cf8 <sys_timeout+0x1c>
 8010cea:	4b08      	ldr	r3, [pc, #32]	; (8010d0c <sys_timeout+0x30>)
 8010cec:	f240 1229 	movw	r2, #297	; 0x129
 8010cf0:	4907      	ldr	r1, [pc, #28]	; (8010d10 <sys_timeout+0x34>)
 8010cf2:	4808      	ldr	r0, [pc, #32]	; (8010d14 <sys_timeout+0x38>)
 8010cf4:	f002 fe9a 	bl	8013a2c <iprintf>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010cf8:	f7f7 fb50 	bl	800839c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010cfc:	4632      	mov	r2, r6
 8010cfe:	4629      	mov	r1, r5
 8010d00:	4420      	add	r0, r4
#endif
}
 8010d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010d06:	f7ff bf57 	b.w	8010bb8 <sys_timeout_abs>
 8010d0a:	bf00      	nop
 8010d0c:	080160c4 	.word	0x080160c4
 8010d10:	0801608c 	.word	0x0801608c
 8010d14:	0801487c 	.word	0x0801487c

08010d18 <sys_timeouts_init>:
{
 8010d18:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010d1a:	4d0c      	ldr	r5, [pc, #48]	; (8010d4c <sys_timeouts_init+0x34>)
 8010d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d20:	4c0b      	ldr	r4, [pc, #44]	; (8010d50 <sys_timeouts_init+0x38>)
 8010d22:	f105 0208 	add.w	r2, r5, #8
 8010d26:	4621      	mov	r1, r4
 8010d28:	f7ff ffd8 	bl	8010cdc <sys_timeout>
 8010d2c:	f105 0210 	add.w	r2, r5, #16
 8010d30:	4621      	mov	r1, r4
 8010d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d36:	f7ff ffd1 	bl	8010cdc <sys_timeout>
 8010d3a:	f105 0218 	add.w	r2, r5, #24
 8010d3e:	4621      	mov	r1, r4
 8010d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8010d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010d48:	f7ff bfc8 	b.w	8010cdc <sys_timeout>
 8010d4c:	0801606c 	.word	0x0801606c
 8010d50:	08010c25 	.word	0x08010c25

08010d54 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8010d54:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010d56:	4d0d      	ldr	r5, [pc, #52]	; (8010d8c <sys_untimeout+0x38>)
 8010d58:	682b      	ldr	r3, [r5, #0]
 8010d5a:	b19b      	cbz	r3, 8010d84 <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8010d5c:	2400      	movs	r4, #0
 8010d5e:	e003      	b.n	8010d68 <sys_untimeout+0x14>
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	461c      	mov	r4, r3
 8010d64:	4613      	mov	r3, r2
 8010d66:	b16a      	cbz	r2, 8010d84 <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 8010d68:	689a      	ldr	r2, [r3, #8]
 8010d6a:	4282      	cmp	r2, r0
 8010d6c:	d1f8      	bne.n	8010d60 <sys_untimeout+0xc>
 8010d6e:	68da      	ldr	r2, [r3, #12]
 8010d70:	428a      	cmp	r2, r1
 8010d72:	d1f5      	bne.n	8010d60 <sys_untimeout+0xc>
 8010d74:	681a      	ldr	r2, [r3, #0]
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8010d76:	b13c      	cbz	r4, 8010d88 <sys_untimeout+0x34>
        next_timeout = t->next;
      } else {
        prev_t->next = t->next;
 8010d78:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	200a      	movs	r0, #10
      return;
    }
  }
  return;
}
 8010d7e:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 8010d80:	f7fb bbc4 	b.w	800c50c <memp_free>
}
 8010d84:	bc30      	pop	{r4, r5}
 8010d86:	4770      	bx	lr
        next_timeout = t->next;
 8010d88:	602a      	str	r2, [r5, #0]
 8010d8a:	e7f6      	b.n	8010d7a <sys_untimeout+0x26>
 8010d8c:	2401406c 	.word	0x2401406c

08010d90 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010d94:	f7f7 fb02 	bl	800839c <sys_now>
 8010d98:	4c0d      	ldr	r4, [pc, #52]	; (8010dd0 <sys_check_timeouts+0x40>)
 8010d9a:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8010d9c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8010dd4 <sys_check_timeouts+0x44>
 8010da0:	e00c      	b.n	8010dbc <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010da2:	685a      	ldr	r2, [r3, #4]
 8010da4:	1abd      	subs	r5, r7, r2
 8010da6:	2d00      	cmp	r5, #0
 8010da8:	db0d      	blt.n	8010dc6 <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 8010daa:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 8010dac:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 8010dae:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 8010db0:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 8010db4:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010db6:	f7fb fba9 	bl	800c50c <memp_free>
    if (handler != NULL) {
 8010dba:	b935      	cbnz	r5, 8010dca <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 8010dbc:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010dbe:	200a      	movs	r0, #10
 8010dc0:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1ed      	bne.n	8010da2 <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 8010dca:	4630      	mov	r0, r6
 8010dcc:	47a8      	blx	r5
 8010dce:	e7f5      	b.n	8010dbc <sys_check_timeouts+0x2c>
 8010dd0:	2401406c 	.word	0x2401406c
 8010dd4:	24014068 	.word	0x24014068

08010dd8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010dd8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010dda:	4c07      	ldr	r4, [pc, #28]	; (8010df8 <sys_timeouts_sleeptime+0x20>)
 8010ddc:	6823      	ldr	r3, [r4, #0]
 8010dde:	b13b      	cbz	r3, 8010df0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8010de0:	f7f7 fadc 	bl	800839c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010de4:	6823      	ldr	r3, [r4, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	1a18      	subs	r0, r3, r0
    return 0;
 8010dea:	bf48      	it	mi
 8010dec:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8010dee:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010df0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010df4:	bd10      	pop	{r4, pc}
 8010df6:	bf00      	nop
 8010df8:	2401406c 	.word	0x2401406c

08010dfc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010dfc:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010dfe:	f002 fe2d 	bl	8013a5c <rand>
 8010e02:	4b02      	ldr	r3, [pc, #8]	; (8010e0c <udp_init+0x10>)
 8010e04:	4a02      	ldr	r2, [pc, #8]	; (8010e10 <udp_init+0x14>)
 8010e06:	4303      	orrs	r3, r0
 8010e08:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8010e0a:	bd08      	pop	{r3, pc}
 8010e0c:	ffffc000 	.word	0xffffc000
 8010e10:	2400013e 	.word	0x2400013e

08010e14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e18:	4689      	mov	r9, r1
 8010e1a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010e1c:	4680      	mov	r8, r0
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f000 80eb 	beq.w	8010ffa <udp_input+0x1e6>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010e24:	f1b9 0f00 	cmp.w	r9, #0
 8010e28:	f000 80f1 	beq.w	801100e <udp_input+0x1fa>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8010e2c:	4f8f      	ldr	r7, [pc, #572]	; (801106c <udp_input+0x258>)

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010e2e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 8010e32:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 8010e36:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 8010e38:	f103 0301 	add.w	r3, r3, #1
 8010e3c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 8010e40:	f240 80bf 	bls.w	8010fc2 <udp_input+0x1ae>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010e44:	f8df a248 	ldr.w	sl, [pc, #584]	; 8011090 <udp_input+0x27c>
  udphdr = (struct udp_hdr *)p->payload;
 8010e48:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010e4c:	f8da 1000 	ldr.w	r1, [sl]
 8010e50:	f8da 0014 	ldr.w	r0, [sl, #20]
 8010e54:	f001 fc12 	bl	801267c <ip4_addr_isbroadcast_u32>
 8010e58:	9002      	str	r0, [sp, #8]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010e5a:	8820      	ldrh	r0, [r4, #0]
 8010e5c:	f7fa fd98 	bl	800b990 <lwip_htons>
 8010e60:	9003      	str	r0, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8010e62:	8860      	ldrh	r0, [r4, #2]
 8010e64:	f7fa fd94 	bl	800b990 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e68:	4b81      	ldr	r3, [pc, #516]	; (8011070 <udp_input+0x25c>)
  dest = lwip_ntohs(udphdr->dest);
 8010e6a:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e6c:	681c      	ldr	r4, [r3, #0]
 8010e6e:	2c00      	cmp	r4, #0
 8010e70:	d077      	beq.n	8010f62 <udp_input+0x14e>
  uncon_pcb = NULL;
 8010e72:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8010e76:	465e      	mov	r6, fp
 8010e78:	e004      	b.n	8010e84 <udp_input+0x70>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e7a:	68e3      	ldr	r3, [r4, #12]
 8010e7c:	4626      	mov	r6, r4
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d06b      	beq.n	8010f5a <udp_input+0x146>
 8010e82:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010e84:	8a63      	ldrh	r3, [r4, #18]
 8010e86:	42ab      	cmp	r3, r5
 8010e88:	d1f7      	bne.n	8010e7a <udp_input+0x66>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010e8a:	f1b9 0f00 	cmp.w	r9, #0
 8010e8e:	f000 80ad 	beq.w	8010fec <udp_input+0x1d8>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e92:	7a22      	ldrb	r2, [r4, #8]
 8010e94:	b13a      	cbz	r2, 8010ea6 <udp_input+0x92>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e96:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e9e:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d1e9      	bne.n	8010e7a <udp_input+0x66>
    if (broadcast != 0) {
 8010ea6:	9a02      	ldr	r2, [sp, #8]
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	d04b      	beq.n	8010f46 <udp_input+0x132>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010eae:	b143      	cbz	r3, 8010ec2 <udp_input+0xae>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010eb0:	f8da 2014 	ldr.w	r2, [sl, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010eb4:	1c51      	adds	r1, r2, #1
 8010eb6:	d004      	beq.n	8010ec2 <udp_input+0xae>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010eb8:	405a      	eors	r2, r3
 8010eba:	f8d9 1008 	ldr.w	r1, [r9, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ebe:	420a      	tst	r2, r1
 8010ec0:	d1db      	bne.n	8010e7a <udp_input+0x66>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010ec2:	7c22      	ldrb	r2, [r4, #16]
 8010ec4:	0752      	lsls	r2, r2, #29
 8010ec6:	d412      	bmi.n	8010eee <udp_input+0xda>
        if (uncon_pcb == NULL) {
 8010ec8:	f1bb 0f00 	cmp.w	fp, #0
 8010ecc:	f000 80a8 	beq.w	8011020 <udp_input+0x20c>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010ed0:	9a02      	ldr	r2, [sp, #8]
 8010ed2:	b162      	cbz	r2, 8010eee <udp_input+0xda>
 8010ed4:	f8da 2014 	ldr.w	r2, [sl, #20]
 8010ed8:	3201      	adds	r2, #1
 8010eda:	d108      	bne.n	8010eee <udp_input+0xda>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010edc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010ee0:	f8db 1000 	ldr.w	r1, [fp]
 8010ee4:	4291      	cmp	r1, r2
 8010ee6:	d002      	beq.n	8010eee <udp_input+0xda>
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	bf08      	it	eq
 8010eec:	46a3      	moveq	fp, r4
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010eee:	8aa3      	ldrh	r3, [r4, #20]
 8010ef0:	9a03      	ldr	r2, [sp, #12]
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d1c1      	bne.n	8010e7a <udp_input+0x66>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010ef6:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8010ef8:	b11b      	cbz	r3, 8010f02 <udp_input+0xee>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010efa:	f8da 2010 	ldr.w	r2, [sl, #16]
 8010efe:	4293      	cmp	r3, r2
 8010f00:	d1bb      	bne.n	8010e7a <udp_input+0x66>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010f02:	2e00      	cmp	r6, #0
 8010f04:	f000 80aa 	beq.w	801105c <udp_input+0x248>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 8010f08:	4959      	ldr	r1, [pc, #356]	; (8011070 <udp_input+0x25c>)
          prev->next = pcb->next;
 8010f0a:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 8010f0c:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 8010f0e:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 8010f10:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 8010f12:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010f14:	2108      	movs	r1, #8
 8010f16:	4640      	mov	r0, r8
 8010f18:	f7fb fd9e 	bl	800ca58 <pbuf_remove_header>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	f040 8086 	bne.w	801102e <udp_input+0x21a>
      pbuf_free(p);
      goto end;
    }

    if (pcb != NULL) {
      MIB2_STATS_INC(mib2.udpindatagrams);
 8010f22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010f26:	69a5      	ldr	r5, [r4, #24]
      MIB2_STATS_INC(mib2.udpindatagrams);
 8010f28:	3301      	adds	r3, #1
 8010f2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
      if (pcb->recv != NULL) {
 8010f2e:	2d00      	cmp	r5, #0
 8010f30:	d074      	beq.n	801101c <udp_input+0x208>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010f32:	9b03      	ldr	r3, [sp, #12]
 8010f34:	4642      	mov	r2, r8
 8010f36:	69e0      	ldr	r0, [r4, #28]
 8010f38:	4621      	mov	r1, r4
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	4b4d      	ldr	r3, [pc, #308]	; (8011074 <udp_input+0x260>)
 8010f3e:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010f40:	b005      	add	sp, #20
 8010f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0bb      	beq.n	8010ec2 <udp_input+0xae>
 8010f4a:	f8da 2014 	ldr.w	r2, [sl, #20]
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d0b7      	beq.n	8010ec2 <udp_input+0xae>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f52:	68e3      	ldr	r3, [r4, #12]
 8010f54:	4626      	mov	r6, r4
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d193      	bne.n	8010e82 <udp_input+0x6e>
  if (pcb != NULL) {
 8010f5a:	f1bb 0f00 	cmp.w	fp, #0
 8010f5e:	f040 8083 	bne.w	8011068 <udp_input+0x254>
  if (for_us) {
 8010f62:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010f66:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d156      	bne.n	801101c <udp_input+0x208>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010f6e:	2108      	movs	r1, #8
 8010f70:	4640      	mov	r0, r8
 8010f72:	f7fb fd71 	bl	800ca58 <pbuf_remove_header>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d159      	bne.n	801102e <udp_input+0x21a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f7a:	9b02      	ldr	r3, [sp, #8]
 8010f7c:	b983      	cbnz	r3, 8010fa0 <udp_input+0x18c>
 8010f7e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f86:	2be0      	cmp	r3, #224	; 0xe0
 8010f88:	d00a      	beq.n	8010fa0 <udp_input+0x18c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010f8a:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8010f8e:	4640      	mov	r0, r8
 8010f90:	3108      	adds	r1, #8
 8010f92:	b209      	sxth	r1, r1
 8010f94:	f7fb fd94 	bl	800cac0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010f98:	2103      	movs	r1, #3
 8010f9a:	4640      	mov	r0, r8
 8010f9c:	f001 f8f0 	bl	8012180 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 8010fa0:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
      pbuf_free(p);
 8010fa4:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 8010fa6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 8010faa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      UDP_STATS_INC(udp.proterr);
 8010fae:	3101      	adds	r1, #1
      UDP_STATS_INC(udp.drop);
 8010fb0:	3201      	adds	r2, #1
      MIB2_STATS_INC(mib2.udpnoports);
 8010fb2:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 8010fb4:	f8a7 1088 	strh.w	r1, [r7, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 8010fb8:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 8010fbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8010fc0:	e00f      	b.n	8010fe2 <udp_input+0x1ce>
    UDP_STATS_INC(udp.lenerr);
 8010fc2:	f8b7 1082 	ldrh.w	r1, [r7, #130]	; 0x82
    pbuf_free(p);
 8010fc6:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 8010fc8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 8010fcc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
    UDP_STATS_INC(udp.lenerr);
 8010fd0:	3101      	adds	r1, #1
    UDP_STATS_INC(udp.drop);
 8010fd2:	3201      	adds	r2, #1
    MIB2_STATS_INC(mib2.udpinerrors);
 8010fd4:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 8010fd6:	f8a7 1082 	strh.w	r1, [r7, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 8010fda:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 8010fde:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
}
 8010fe2:	b005      	add	sp, #20
 8010fe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8010fe8:	f7fb bd72 	b.w	800cad0 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010fec:	4b22      	ldr	r3, [pc, #136]	; (8011078 <udp_input+0x264>)
 8010fee:	2288      	movs	r2, #136	; 0x88
 8010ff0:	4922      	ldr	r1, [pc, #136]	; (801107c <udp_input+0x268>)
 8010ff2:	4823      	ldr	r0, [pc, #140]	; (8011080 <udp_input+0x26c>)
 8010ff4:	f002 fd1a 	bl	8013a2c <iprintf>
 8010ff8:	e74b      	b.n	8010e92 <udp_input+0x7e>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010ffa:	4b1f      	ldr	r3, [pc, #124]	; (8011078 <udp_input+0x264>)
 8010ffc:	22cf      	movs	r2, #207	; 0xcf
 8010ffe:	4921      	ldr	r1, [pc, #132]	; (8011084 <udp_input+0x270>)
 8011000:	481f      	ldr	r0, [pc, #124]	; (8011080 <udp_input+0x26c>)
 8011002:	f002 fd13 	bl	8013a2c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011006:	f1b9 0f00 	cmp.w	r9, #0
 801100a:	f47f af0f 	bne.w	8010e2c <udp_input+0x18>
 801100e:	4b1a      	ldr	r3, [pc, #104]	; (8011078 <udp_input+0x264>)
 8011010:	22d0      	movs	r2, #208	; 0xd0
 8011012:	491d      	ldr	r1, [pc, #116]	; (8011088 <udp_input+0x274>)
 8011014:	481a      	ldr	r0, [pc, #104]	; (8011080 <udp_input+0x26c>)
 8011016:	f002 fd09 	bl	8013a2c <iprintf>
 801101a:	e707      	b.n	8010e2c <udp_input+0x18>
        pbuf_free(p);
 801101c:	4640      	mov	r0, r8
 801101e:	e7e0      	b.n	8010fe2 <udp_input+0x1ce>
      if ((pcb->remote_port == src) &&
 8011020:	8aa3      	ldrh	r3, [r4, #20]
 8011022:	46a3      	mov	fp, r4
 8011024:	9a03      	ldr	r2, [sp, #12]
 8011026:	4293      	cmp	r3, r2
 8011028:	f47f af27 	bne.w	8010e7a <udp_input+0x66>
 801102c:	e763      	b.n	8010ef6 <udp_input+0xe2>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801102e:	4b12      	ldr	r3, [pc, #72]	; (8011078 <udp_input+0x264>)
 8011030:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011034:	4915      	ldr	r1, [pc, #84]	; (801108c <udp_input+0x278>)
 8011036:	4812      	ldr	r0, [pc, #72]	; (8011080 <udp_input+0x26c>)
 8011038:	f002 fcf8 	bl	8013a2c <iprintf>
      UDP_STATS_INC(udp.drop);
 801103c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 8011040:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
      pbuf_free(p);
 8011044:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 8011046:	3201      	adds	r2, #1
      MIB2_STATS_INC(mib2.udpinerrors);
 8011048:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.drop);
 801104a:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 801104e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
}
 8011052:	b005      	add	sp, #20
 8011054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8011058:	f7fb bd3a 	b.w	800cad0 <pbuf_free>
          UDP_STATS_INC(udp.cachehit);
 801105c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011060:	3301      	adds	r3, #1
 8011062:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8011066:	e755      	b.n	8010f14 <udp_input+0x100>
 8011068:	465c      	mov	r4, fp
 801106a:	e753      	b.n	8010f14 <udp_input+0x100>
 801106c:	2401bdf8 	.word	0x2401bdf8
 8011070:	2401bfd4 	.word	0x2401bfd4
 8011074:	24014ffc 	.word	0x24014ffc
 8011078:	08016150 	.word	0x08016150
 801107c:	080161b4 	.word	0x080161b4
 8011080:	0801487c 	.word	0x0801487c
 8011084:	08016180 	.word	0x08016180
 8011088:	08016198 	.word	0x08016198
 801108c:	080161dc 	.word	0x080161dc
 8011090:	24014fec 	.word	0x24014fec

08011094 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8011094:	4b39      	ldr	r3, [pc, #228]	; (801117c <udp_bind+0xe8>)
{
 8011096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801109a:	2900      	cmp	r1, #0
 801109c:	bf08      	it	eq
 801109e:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d060      	beq.n	8011166 <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80110a4:	4f36      	ldr	r7, [pc, #216]	; (8011180 <udp_bind+0xec>)
 80110a6:	683e      	ldr	r6, [r7, #0]
 80110a8:	b1fe      	cbz	r6, 80110ea <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80110aa:	42b0      	cmp	r0, r6
 80110ac:	d048      	beq.n	8011140 <udp_bind+0xac>
 80110ae:	4634      	mov	r4, r6
 80110b0:	e001      	b.n	80110b6 <udp_bind+0x22>
 80110b2:	42a0      	cmp	r0, r4
 80110b4:	d044      	beq.n	8011140 <udp_bind+0xac>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80110b6:	68e4      	ldr	r4, [r4, #12]
 80110b8:	2c00      	cmp	r4, #0
 80110ba:	d1fa      	bne.n	80110b2 <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80110bc:	b1c2      	cbz	r2, 80110f0 <udp_bind+0x5c>
 80110be:	680d      	ldr	r5, [r1, #0]
 80110c0:	4633      	mov	r3, r6
 80110c2:	e001      	b.n	80110c8 <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	b373      	cbz	r3, 8011126 <udp_bind+0x92>
      if (pcb != ipcb) {
 80110c8:	4298      	cmp	r0, r3
 80110ca:	d0fb      	beq.n	80110c4 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80110cc:	8a59      	ldrh	r1, [r3, #18]
 80110ce:	4291      	cmp	r1, r2
 80110d0:	d1f8      	bne.n	80110c4 <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80110d2:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 80110d4:	42a9      	cmp	r1, r5
 80110d6:	bf18      	it	ne
 80110d8:	2900      	cmpne	r1, #0
 80110da:	d001      	beq.n	80110e0 <udp_bind+0x4c>
 80110dc:	2d00      	cmp	r5, #0
 80110de:	d1f1      	bne.n	80110c4 <udp_bind+0x30>
      return ERR_USE;
 80110e0:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 80110ea:	2a00      	cmp	r2, #0
 80110ec:	d137      	bne.n	801115e <udp_bind+0xca>
  rebind = 0;
 80110ee:	4634      	mov	r4, r6
 80110f0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8011190 <udp_bind+0xfc>
again:
 80110f4:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80110f8:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80110fc:	f8b8 2000 	ldrh.w	r2, [r8]
 8011100:	4572      	cmp	r2, lr
 8011102:	d029      	beq.n	8011158 <udp_bind+0xc4>
 8011104:	3201      	adds	r2, #1
 8011106:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011108:	b156      	cbz	r6, 8011120 <udp_bind+0x8c>
    if (pcb->local_port == udp_port) {
 801110a:	8a73      	ldrh	r3, [r6, #18]
 801110c:	4293      	cmp	r3, r2
 801110e:	d019      	beq.n	8011144 <udp_bind+0xb0>
 8011110:	4633      	mov	r3, r6
 8011112:	e002      	b.n	801111a <udp_bind+0x86>
 8011114:	8a5d      	ldrh	r5, [r3, #18]
 8011116:	4295      	cmp	r5, r2
 8011118:	d014      	beq.n	8011144 <udp_bind+0xb0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1f9      	bne.n	8011114 <udp_bind+0x80>
 8011120:	680d      	ldr	r5, [r1, #0]
 8011122:	f8a8 2000 	strh.w	r2, [r8]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011126:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 8011128:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801112a:	b92c      	cbnz	r4, 8011138 <udp_bind+0xa4>
  return ERR_OK;
 801112c:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801112e:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8011130:	6038      	str	r0, [r7, #0]
}
 8011132:	4618      	mov	r0, r3
 8011134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 8011140:	2401      	movs	r4, #1
 8011142:	e7bb      	b.n	80110bc <udp_bind+0x28>
 8011144:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011148:	fa1f fc8c 	uxth.w	ip, ip
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801114c:	f1bc 0f00 	cmp.w	ip, #0
 8011150:	d1d6      	bne.n	8011100 <udp_bind+0x6c>
 8011152:	f8a8 2000 	strh.w	r2, [r8]
 8011156:	e7c3      	b.n	80110e0 <udp_bind+0x4c>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011158:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801115c:	e7d4      	b.n	8011108 <udp_bind+0x74>
 801115e:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 8011160:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011162:	6003      	str	r3, [r0, #0]
 8011164:	e7e2      	b.n	801112c <udp_bind+0x98>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011166:	4b07      	ldr	r3, [pc, #28]	; (8011184 <udp_bind+0xf0>)
 8011168:	f240 32b7 	movw	r2, #951	; 0x3b7
 801116c:	4906      	ldr	r1, [pc, #24]	; (8011188 <udp_bind+0xf4>)
 801116e:	4807      	ldr	r0, [pc, #28]	; (801118c <udp_bind+0xf8>)
 8011170:	f002 fc5c 	bl	8013a2c <iprintf>
 8011174:	f06f 030f 	mvn.w	r3, #15
 8011178:	e7db      	b.n	8011132 <udp_bind+0x9e>
 801117a:	bf00      	nop
 801117c:	08016694 	.word	0x08016694
 8011180:	2401bfd4 	.word	0x2401bfd4
 8011184:	08016150 	.word	0x08016150
 8011188:	08016138 	.word	0x08016138
 801118c:	0801487c 	.word	0x0801487c
 8011190:	2400013e 	.word	0x2400013e

08011194 <udp_sendto_if_src>:
{
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	b085      	sub	sp, #20
 801119a:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801119e:	2800      	cmp	r0, #0
 80111a0:	f000 808b 	beq.w	80112ba <udp_sendto_if_src+0x126>
 80111a4:	460c      	mov	r4, r1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80111a6:	2900      	cmp	r1, #0
 80111a8:	d07d      	beq.n	80112a6 <udp_sendto_if_src+0x112>
 80111aa:	4690      	mov	r8, r2
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80111ac:	2a00      	cmp	r2, #0
 80111ae:	f000 808e 	beq.w	80112ce <udp_sendto_if_src+0x13a>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80111b2:	f1b9 0f00 	cmp.w	r9, #0
 80111b6:	f000 809e 	beq.w	80112f6 <udp_sendto_if_src+0x162>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80111ba:	f1ba 0f00 	cmp.w	sl, #0
 80111be:	f000 8090 	beq.w	80112e2 <udp_sendto_if_src+0x14e>
  if (pcb->local_port == 0) {
 80111c2:	8a42      	ldrh	r2, [r0, #18]
 80111c4:	461f      	mov	r7, r3
 80111c6:	4606      	mov	r6, r0
 80111c8:	2a00      	cmp	r2, #0
 80111ca:	d048      	beq.n	801125e <udp_sendto_if_src+0xca>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80111cc:	8922      	ldrh	r2, [r4, #8]
 80111ce:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d864      	bhi.n	80112a0 <udp_sendto_if_src+0x10c>
  if (pbuf_add_header(p, UDP_HLEN)) {
 80111d6:	2108      	movs	r1, #8
 80111d8:	4620      	mov	r0, r4
 80111da:	f7fb fc39 	bl	800ca50 <pbuf_add_header>
 80111de:	2800      	cmp	r0, #0
 80111e0:	d147      	bne.n	8011272 <udp_sendto_if_src+0xde>
 80111e2:	4625      	mov	r5, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80111e4:	896b      	ldrh	r3, [r5, #10]
 80111e6:	2b07      	cmp	r3, #7
 80111e8:	d952      	bls.n	8011290 <udp_sendto_if_src+0xfc>
  udphdr = (struct udp_hdr *)q->payload;
 80111ea:	f8d5 b004 	ldr.w	fp, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80111ee:	8a70      	ldrh	r0, [r6, #18]
 80111f0:	f7fa fbce 	bl	800b990 <lwip_htons>
 80111f4:	f8ab 0000 	strh.w	r0, [fp]
  udphdr->dest = lwip_htons(dst_port);
 80111f8:	4638      	mov	r0, r7
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 80111fa:	4f44      	ldr	r7, [pc, #272]	; (801130c <udp_sendto_if_src+0x178>)
  udphdr->dest = lwip_htons(dst_port);
 80111fc:	f7fa fbc8 	bl	800b990 <lwip_htons>
  udphdr->chksum = 0x0000;
 8011200:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8011202:	f8ab 0002 	strh.w	r0, [fp, #2]
  udphdr->chksum = 0x0000;
 8011206:	f88b 3006 	strb.w	r3, [fp, #6]
 801120a:	f88b 3007 	strb.w	r3, [fp, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801120e:	8928      	ldrh	r0, [r5, #8]
 8011210:	f7fa fbbe 	bl	800b990 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011214:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 8011218:	f8ab 0004 	strh.w	r0, [fp, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801121c:	4642      	mov	r2, r8
 801121e:	7af3      	ldrb	r3, [r6, #11]
 8011220:	4649      	mov	r1, r9
 8011222:	f8cd a008 	str.w	sl, [sp, #8]
 8011226:	4628      	mov	r0, r5
 8011228:	f8cd c004 	str.w	ip, [sp, #4]
 801122c:	7ab6      	ldrb	r6, [r6, #10]
 801122e:	9600      	str	r6, [sp, #0]
 8011230:	f001 f978 	bl	8012524 <ip4_output_if_src>
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 8011234:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
  if (q != p) {
 8011238:	42a5      	cmp	r5, r4
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801123a:	4683      	mov	fp, r0
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 801123c:	f103 0301 	add.w	r3, r3, #1
 8011240:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  if (q != p) {
 8011244:	d002      	beq.n	801124c <udp_sendto_if_src+0xb8>
    pbuf_free(q);
 8011246:	4628      	mov	r0, r5
 8011248:	f7fb fc42 	bl	800cad0 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801124c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011250:	3301      	adds	r3, #1
 8011252:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
}
 8011256:	4658      	mov	r0, fp
 8011258:	b005      	add	sp, #20
 801125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801125e:	4601      	mov	r1, r0
 8011260:	f7ff ff18 	bl	8011094 <udp_bind>
    if (err != ERR_OK) {
 8011264:	4683      	mov	fp, r0
 8011266:	2800      	cmp	r0, #0
 8011268:	d0b0      	beq.n	80111cc <udp_sendto_if_src+0x38>
}
 801126a:	4658      	mov	r0, fp
 801126c:	b005      	add	sp, #20
 801126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011272:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011276:	2108      	movs	r1, #8
 8011278:	2022      	movs	r0, #34	; 0x22
 801127a:	f7fb fc9d 	bl	800cbb8 <pbuf_alloc>
    if (q == NULL) {
 801127e:	4605      	mov	r5, r0
 8011280:	b170      	cbz	r0, 80112a0 <udp_sendto_if_src+0x10c>
    if (p->tot_len != 0) {
 8011282:	8923      	ldrh	r3, [r4, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d0ad      	beq.n	80111e4 <udp_sendto_if_src+0x50>
      pbuf_chain(q, p);
 8011288:	4621      	mov	r1, r4
 801128a:	f7fb fe03 	bl	800ce94 <pbuf_chain>
 801128e:	e7a9      	b.n	80111e4 <udp_sendto_if_src+0x50>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011290:	4b1f      	ldr	r3, [pc, #124]	; (8011310 <udp_sendto_if_src+0x17c>)
 8011292:	f240 320e 	movw	r2, #782	; 0x30e
 8011296:	491f      	ldr	r1, [pc, #124]	; (8011314 <udp_sendto_if_src+0x180>)
 8011298:	481f      	ldr	r0, [pc, #124]	; (8011318 <udp_sendto_if_src+0x184>)
 801129a:	f002 fbc7 	bl	8013a2c <iprintf>
 801129e:	e7a4      	b.n	80111ea <udp_sendto_if_src+0x56>
    return ERR_MEM;
 80112a0:	f04f 3bff 	mov.w	fp, #4294967295
 80112a4:	e7d7      	b.n	8011256 <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80112a6:	4b1a      	ldr	r3, [pc, #104]	; (8011310 <udp_sendto_if_src+0x17c>)
 80112a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80112ac:	491b      	ldr	r1, [pc, #108]	; (801131c <udp_sendto_if_src+0x188>)
 80112ae:	f06f 0b0f 	mvn.w	fp, #15
 80112b2:	4819      	ldr	r0, [pc, #100]	; (8011318 <udp_sendto_if_src+0x184>)
 80112b4:	f002 fbba 	bl	8013a2c <iprintf>
 80112b8:	e7cd      	b.n	8011256 <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80112ba:	4b15      	ldr	r3, [pc, #84]	; (8011310 <udp_sendto_if_src+0x17c>)
 80112bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80112c0:	4917      	ldr	r1, [pc, #92]	; (8011320 <udp_sendto_if_src+0x18c>)
 80112c2:	f06f 0b0f 	mvn.w	fp, #15
 80112c6:	4814      	ldr	r0, [pc, #80]	; (8011318 <udp_sendto_if_src+0x184>)
 80112c8:	f002 fbb0 	bl	8013a2c <iprintf>
 80112cc:	e7c3      	b.n	8011256 <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80112ce:	4b10      	ldr	r3, [pc, #64]	; (8011310 <udp_sendto_if_src+0x17c>)
 80112d0:	f240 22d3 	movw	r2, #723	; 0x2d3
 80112d4:	4913      	ldr	r1, [pc, #76]	; (8011324 <udp_sendto_if_src+0x190>)
 80112d6:	f06f 0b0f 	mvn.w	fp, #15
 80112da:	480f      	ldr	r0, [pc, #60]	; (8011318 <udp_sendto_if_src+0x184>)
 80112dc:	f002 fba6 	bl	8013a2c <iprintf>
 80112e0:	e7b9      	b.n	8011256 <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80112e2:	4b0b      	ldr	r3, [pc, #44]	; (8011310 <udp_sendto_if_src+0x17c>)
 80112e4:	f240 22d5 	movw	r2, #725	; 0x2d5
 80112e8:	490f      	ldr	r1, [pc, #60]	; (8011328 <udp_sendto_if_src+0x194>)
 80112ea:	f06f 0b0f 	mvn.w	fp, #15
 80112ee:	480a      	ldr	r0, [pc, #40]	; (8011318 <udp_sendto_if_src+0x184>)
 80112f0:	f002 fb9c 	bl	8013a2c <iprintf>
 80112f4:	e7af      	b.n	8011256 <udp_sendto_if_src+0xc2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80112f6:	4b06      	ldr	r3, [pc, #24]	; (8011310 <udp_sendto_if_src+0x17c>)
 80112f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80112fc:	490b      	ldr	r1, [pc, #44]	; (801132c <udp_sendto_if_src+0x198>)
 80112fe:	f06f 0b0f 	mvn.w	fp, #15
 8011302:	4805      	ldr	r0, [pc, #20]	; (8011318 <udp_sendto_if_src+0x184>)
 8011304:	f002 fb92 	bl	8013a2c <iprintf>
 8011308:	e7a5      	b.n	8011256 <udp_sendto_if_src+0xc2>
 801130a:	bf00      	nop
 801130c:	2401bdf8 	.word	0x2401bdf8
 8011310:	08016150 	.word	0x08016150
 8011314:	08016384 	.word	0x08016384
 8011318:	0801487c 	.word	0x0801487c
 801131c:	080162f8 	.word	0x080162f8
 8011320:	080162d8 	.word	0x080162d8
 8011324:	08016318 	.word	0x08016318
 8011328:	08016360 	.word	0x08016360
 801132c:	0801633c 	.word	0x0801633c

08011330 <udp_sendto_if>:
{
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011336:	b358      	cbz	r0, 8011390 <udp_sendto_if+0x60>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011338:	b301      	cbz	r1, 801137c <udp_sendto_if+0x4c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801133a:	b1aa      	cbz	r2, 8011368 <udp_sendto_if+0x38>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801133c:	b394      	cbz	r4, 80113a4 <udp_sendto_if+0x74>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801133e:	6805      	ldr	r5, [r0, #0]
 8011340:	b935      	cbnz	r5, 8011350 <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 8011342:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011344:	e9cd 4500 	strd	r4, r5, [sp]
 8011348:	f7ff ff24 	bl	8011194 <udp_sendto_if_src>
}
 801134c:	b002      	add	sp, #8
 801134e:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011350:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011354:	2ee0      	cmp	r6, #224	; 0xe0
 8011356:	d0f4      	beq.n	8011342 <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011358:	6866      	ldr	r6, [r4, #4]
 801135a:	42b5      	cmp	r5, r6
 801135c:	d101      	bne.n	8011362 <udp_sendto_if+0x32>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801135e:	4605      	mov	r5, r0
 8011360:	e7f0      	b.n	8011344 <udp_sendto_if+0x14>
        return ERR_RTE;
 8011362:	f06f 0003 	mvn.w	r0, #3
 8011366:	e7f1      	b.n	801134c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011368:	4b13      	ldr	r3, [pc, #76]	; (80113b8 <udp_sendto_if+0x88>)
 801136a:	f240 2282 	movw	r2, #642	; 0x282
 801136e:	4913      	ldr	r1, [pc, #76]	; (80113bc <udp_sendto_if+0x8c>)
 8011370:	4813      	ldr	r0, [pc, #76]	; (80113c0 <udp_sendto_if+0x90>)
 8011372:	f002 fb5b 	bl	8013a2c <iprintf>
 8011376:	f06f 000f 	mvn.w	r0, #15
 801137a:	e7e7      	b.n	801134c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801137c:	4b0e      	ldr	r3, [pc, #56]	; (80113b8 <udp_sendto_if+0x88>)
 801137e:	f240 2281 	movw	r2, #641	; 0x281
 8011382:	4910      	ldr	r1, [pc, #64]	; (80113c4 <udp_sendto_if+0x94>)
 8011384:	480e      	ldr	r0, [pc, #56]	; (80113c0 <udp_sendto_if+0x90>)
 8011386:	f002 fb51 	bl	8013a2c <iprintf>
 801138a:	f06f 000f 	mvn.w	r0, #15
 801138e:	e7dd      	b.n	801134c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011390:	4b09      	ldr	r3, [pc, #36]	; (80113b8 <udp_sendto_if+0x88>)
 8011392:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011396:	490c      	ldr	r1, [pc, #48]	; (80113c8 <udp_sendto_if+0x98>)
 8011398:	4809      	ldr	r0, [pc, #36]	; (80113c0 <udp_sendto_if+0x90>)
 801139a:	f002 fb47 	bl	8013a2c <iprintf>
 801139e:	f06f 000f 	mvn.w	r0, #15
 80113a2:	e7d3      	b.n	801134c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80113a4:	4b04      	ldr	r3, [pc, #16]	; (80113b8 <udp_sendto_if+0x88>)
 80113a6:	f240 2283 	movw	r2, #643	; 0x283
 80113aa:	4908      	ldr	r1, [pc, #32]	; (80113cc <udp_sendto_if+0x9c>)
 80113ac:	4804      	ldr	r0, [pc, #16]	; (80113c0 <udp_sendto_if+0x90>)
 80113ae:	f002 fb3d 	bl	8013a2c <iprintf>
 80113b2:	f06f 000f 	mvn.w	r0, #15
 80113b6:	e7c9      	b.n	801134c <udp_sendto_if+0x1c>
 80113b8:	08016150 	.word	0x08016150
 80113bc:	08016298 	.word	0x08016298
 80113c0:	0801487c 	.word	0x0801487c
 80113c4:	0801627c 	.word	0x0801627c
 80113c8:	08016260 	.word	0x08016260
 80113cc:	080162b8 	.word	0x080162b8

080113d0 <udp_sendto>:
{
 80113d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113d2:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80113d4:	b3a0      	cbz	r0, 8011440 <udp_sendto+0x70>
 80113d6:	460e      	mov	r6, r1
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80113d8:	b341      	cbz	r1, 801142c <udp_sendto+0x5c>
 80113da:	4615      	mov	r5, r2
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80113dc:	b1e2      	cbz	r2, 8011418 <udp_sendto+0x48>
 80113de:	4604      	mov	r4, r0
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80113e0:	7a00      	ldrb	r0, [r0, #8]
 80113e2:	461f      	mov	r7, r3
 80113e4:	b158      	cbz	r0, 80113fe <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 80113e6:	f7fb fa89 	bl	800c8fc <netif_get_by_index>
  if (netif == NULL) {
 80113ea:	b160      	cbz	r0, 8011406 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80113ec:	9000      	str	r0, [sp, #0]
 80113ee:	463b      	mov	r3, r7
 80113f0:	462a      	mov	r2, r5
 80113f2:	4631      	mov	r1, r6
 80113f4:	4620      	mov	r0, r4
 80113f6:	f7ff ff9b 	bl	8011330 <udp_sendto_if>
}
 80113fa:	b003      	add	sp, #12
 80113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 80113fe:	4610      	mov	r0, r2
 8011400:	f000 fef4 	bl	80121ec <ip4_route>
 8011404:	e7f1      	b.n	80113ea <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 8011406:	4a13      	ldr	r2, [pc, #76]	; (8011454 <udp_sendto+0x84>)
    return ERR_RTE;
 8011408:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801140c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8011410:	3301      	adds	r3, #1
 8011412:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 8011416:	e7f0      	b.n	80113fa <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011418:	4b0f      	ldr	r3, [pc, #60]	; (8011458 <udp_sendto+0x88>)
 801141a:	f240 221a 	movw	r2, #538	; 0x21a
 801141e:	490f      	ldr	r1, [pc, #60]	; (801145c <udp_sendto+0x8c>)
 8011420:	480f      	ldr	r0, [pc, #60]	; (8011460 <udp_sendto+0x90>)
 8011422:	f002 fb03 	bl	8013a2c <iprintf>
 8011426:	f06f 000f 	mvn.w	r0, #15
 801142a:	e7e6      	b.n	80113fa <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801142c:	4b0a      	ldr	r3, [pc, #40]	; (8011458 <udp_sendto+0x88>)
 801142e:	f240 2219 	movw	r2, #537	; 0x219
 8011432:	490c      	ldr	r1, [pc, #48]	; (8011464 <udp_sendto+0x94>)
 8011434:	480a      	ldr	r0, [pc, #40]	; (8011460 <udp_sendto+0x90>)
 8011436:	f002 faf9 	bl	8013a2c <iprintf>
 801143a:	f06f 000f 	mvn.w	r0, #15
 801143e:	e7dc      	b.n	80113fa <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011440:	4b05      	ldr	r3, [pc, #20]	; (8011458 <udp_sendto+0x88>)
 8011442:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011446:	4908      	ldr	r1, [pc, #32]	; (8011468 <udp_sendto+0x98>)
 8011448:	4805      	ldr	r0, [pc, #20]	; (8011460 <udp_sendto+0x90>)
 801144a:	f002 faef 	bl	8013a2c <iprintf>
 801144e:	f06f 000f 	mvn.w	r0, #15
 8011452:	e7d2      	b.n	80113fa <udp_sendto+0x2a>
 8011454:	2401bdf8 	.word	0x2401bdf8
 8011458:	08016150 	.word	0x08016150
 801145c:	08016244 	.word	0x08016244
 8011460:	0801487c 	.word	0x0801487c
 8011464:	08016228 	.word	0x08016228
 8011468:	08016210 	.word	0x08016210

0801146c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801146c:	b1d8      	cbz	r0, 80114a6 <udp_remove+0x3a>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801146e:	4b11      	ldr	r3, [pc, #68]	; (80114b4 <udp_remove+0x48>)
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	4282      	cmp	r2, r0
 8011474:	d00b      	beq.n	801148e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011476:	b132      	cbz	r2, 8011486 <udp_remove+0x1a>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011478:	68d3      	ldr	r3, [r2, #12]
 801147a:	b123      	cbz	r3, 8011486 <udp_remove+0x1a>
 801147c:	4298      	cmp	r0, r3
 801147e:	d00c      	beq.n	801149a <udp_remove+0x2e>
 8011480:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011482:	2a00      	cmp	r2, #0
 8011484:	d1f8      	bne.n	8011478 <udp_remove+0xc>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011486:	4601      	mov	r1, r0
 8011488:	2000      	movs	r0, #0
 801148a:	f7fb b83f 	b.w	800c50c <memp_free>
    udp_pcbs = udp_pcbs->next;
 801148e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8011490:	4601      	mov	r1, r0
 8011492:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 8011494:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8011496:	f7fb b839 	b.w	800c50c <memp_free>
        pcb2->next = pcb->next;
 801149a:	68c3      	ldr	r3, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801149c:	4601      	mov	r1, r0
 801149e:	2000      	movs	r0, #0
        pcb2->next = pcb->next;
 80114a0:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80114a2:	f7fb b833 	b.w	800c50c <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80114a6:	4b04      	ldr	r3, [pc, #16]	; (80114b8 <udp_remove+0x4c>)
 80114a8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80114ac:	4903      	ldr	r1, [pc, #12]	; (80114bc <udp_remove+0x50>)
 80114ae:	4804      	ldr	r0, [pc, #16]	; (80114c0 <udp_remove+0x54>)
 80114b0:	f002 babc 	b.w	8013a2c <iprintf>
 80114b4:	2401bfd4 	.word	0x2401bfd4
 80114b8:	08016150 	.word	0x08016150
 80114bc:	080161f8 	.word	0x080161f8
 80114c0:	0801487c 	.word	0x0801487c

080114c4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80114c4:	b1a8      	cbz	r0, 80114f2 <udp_netif_ip_addr_changed+0x2e>
 80114c6:	6802      	ldr	r2, [r0, #0]
 80114c8:	b199      	cbz	r1, 80114f2 <udp_netif_ip_addr_changed+0x2e>
 80114ca:	b192      	cbz	r2, 80114f2 <udp_netif_ip_addr_changed+0x2e>
 80114cc:	680b      	ldr	r3, [r1, #0]
 80114ce:	b183      	cbz	r3, 80114f2 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80114d0:	4b08      	ldr	r3, [pc, #32]	; (80114f4 <udp_netif_ip_addr_changed+0x30>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	b16b      	cbz	r3, 80114f2 <udp_netif_ip_addr_changed+0x2e>
{
 80114d6:	b410      	push	{r4}
 80114d8:	e000      	b.n	80114dc <udp_netif_ip_addr_changed+0x18>
 80114da:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80114dc:	681c      	ldr	r4, [r3, #0]
 80114de:	4294      	cmp	r4, r2
 80114e0:	d101      	bne.n	80114e6 <udp_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80114e2:	680a      	ldr	r2, [r1, #0]
 80114e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d1f6      	bne.n	80114da <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 80114ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	4770      	bx	lr
 80114f4:	2401bfd4 	.word	0x2401bfd4

080114f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80114f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fc:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80114fe:	f04f 0c0a 	mov.w	ip, #10
{
 8011502:	b085      	sub	sp, #20
 8011504:	468a      	mov	sl, r1
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011506:	4698      	mov	r8, r3
 8011508:	4952      	ldr	r1, [pc, #328]	; (8011654 <etharp_find_entry+0x15c>)
 801150a:	9303      	str	r3, [sp, #12]
 801150c:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 801150e:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011510:	46e6      	mov	lr, ip
 8011512:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8011516:	e005      	b.n	8011524 <etharp_find_entry+0x2c>
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011518:	b947      	cbnz	r7, 801152c <etharp_find_entry+0x34>
 801151a:	462c      	mov	r4, r5
 801151c:	3301      	adds	r3, #1
 801151e:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011520:	2b0a      	cmp	r3, #10
 8011522:	d017      	beq.n	8011554 <etharp_find_entry+0x5c>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011524:	2c0a      	cmp	r4, #10
 8011526:	b21d      	sxth	r5, r3
    u8_t state = arp_table[i].state;
 8011528:	7d0f      	ldrb	r7, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801152a:	d0f5      	beq.n	8011518 <etharp_find_entry+0x20>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 801152c:	2f00      	cmp	r7, #0
 801152e:	d0f5      	beq.n	801151c <etharp_find_entry+0x24>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011530:	b120      	cbz	r0, 801153c <etharp_find_entry+0x44>
 8011532:	6802      	ldr	r2, [r0, #0]
 8011534:	4693      	mov	fp, r2
 8011536:	684a      	ldr	r2, [r1, #4]
 8011538:	4593      	cmp	fp, r2
 801153a:	d040      	beq.n	80115be <etharp_find_entry+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801153c:	2f01      	cmp	r7, #1
 801153e:	f8b1 b012 	ldrh.w	fp, [r1, #18]
 8011542:	d034      	beq.n	80115ae <etharp_find_entry+0xb6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011544:	45c3      	cmp	fp, r8
 8011546:	d3e9      	bcc.n	801151c <etharp_find_entry+0x24>
 8011548:	3301      	adds	r3, #1
 801154a:	46d8      	mov	r8, fp
 801154c:	46ae      	mov	lr, r5
 801154e:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011550:	2b0a      	cmp	r3, #10
 8011552:	d1e7      	bne.n	8011524 <etharp_find_entry+0x2c>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011554:	f1ba 0f01 	cmp.w	sl, #1
 8011558:	9a01      	ldr	r2, [sp, #4]
 801155a:	d178      	bne.n	801164e <etharp_find_entry+0x156>
 801155c:	2c0a      	cmp	r4, #10
 801155e:	4617      	mov	r7, r2
 8011560:	4680      	mov	r8, r0
 8011562:	d033      	beq.n	80115cc <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011564:	0065      	lsls	r5, r4, #1
 8011566:	4a3b      	ldr	r2, [pc, #236]	; (8011654 <etharp_find_entry+0x15c>)
 8011568:	46a1      	mov	r9, r4
 801156a:	192b      	adds	r3, r5, r4
 801156c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011570:	7d1b      	ldrb	r3, [r3, #20]
 8011572:	b133      	cbz	r3, 8011582 <etharp_find_entry+0x8a>
 8011574:	4b38      	ldr	r3, [pc, #224]	; (8011658 <etharp_find_entry+0x160>)
 8011576:	f240 1285 	movw	r2, #389	; 0x185
 801157a:	4938      	ldr	r1, [pc, #224]	; (801165c <etharp_find_entry+0x164>)
 801157c:	4838      	ldr	r0, [pc, #224]	; (8011660 <etharp_find_entry+0x168>)
 801157e:	f002 fa55 	bl	8013a2c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011582:	f1b8 0f00 	cmp.w	r8, #0
 8011586:	d007      	beq.n	8011598 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011588:	eb05 0309 	add.w	r3, r5, r9
 801158c:	4931      	ldr	r1, [pc, #196]	; (8011654 <etharp_find_entry+0x15c>)
 801158e:	f8d8 2000 	ldr.w	r2, [r8]
 8011592:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011596:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8011598:	444d      	add	r5, r9
 801159a:	4a2e      	ldr	r2, [pc, #184]	; (8011654 <etharp_find_entry+0x15c>)
 801159c:	2300      	movs	r3, #0
 801159e:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80115a2:	60b7      	str	r7, [r6, #8]
  arp_table[i].ctime = 0;
 80115a4:	8273      	strh	r3, [r6, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 80115a6:	4620      	mov	r0, r4
 80115a8:	b005      	add	sp, #20
 80115aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 80115ae:	680f      	ldr	r7, [r1, #0]
 80115b0:	2f00      	cmp	r7, #0
 80115b2:	d037      	beq.n	8011624 <etharp_find_entry+0x12c>
          if (arp_table[i].ctime >= age_queue) {
 80115b4:	45cb      	cmp	fp, r9
 80115b6:	d3b1      	bcc.n	801151c <etharp_find_entry+0x24>
 80115b8:	46d9      	mov	r9, fp
 80115ba:	46ac      	mov	ip, r5
 80115bc:	e7ae      	b.n	801151c <etharp_find_entry+0x24>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80115be:	9e01      	ldr	r6, [sp, #4]
 80115c0:	b116      	cbz	r6, 80115c8 <etharp_find_entry+0xd0>
 80115c2:	688a      	ldr	r2, [r1, #8]
 80115c4:	42b2      	cmp	r2, r6
 80115c6:	d1b9      	bne.n	801153c <etharp_find_entry+0x44>
 80115c8:	462c      	mov	r4, r5
 80115ca:	e7ec      	b.n	80115a6 <etharp_find_entry+0xae>
    if (old_stable < ARP_TABLE_SIZE) {
 80115cc:	f1be 0f0a 	cmp.w	lr, #10
 80115d0:	d02f      	beq.n	8011632 <etharp_find_entry+0x13a>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80115d2:	ea4f 054e 	mov.w	r5, lr, lsl #1
 80115d6:	4a1f      	ldr	r2, [pc, #124]	; (8011654 <etharp_find_entry+0x15c>)
 80115d8:	46f1      	mov	r9, lr
 80115da:	eb05 030e 	add.w	r3, r5, lr
 80115de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80115e2:	b393      	cbz	r3, 801164a <etharp_find_entry+0x152>
 80115e4:	4b1c      	ldr	r3, [pc, #112]	; (8011658 <etharp_find_entry+0x160>)
 80115e6:	f240 126d 	movw	r2, #365	; 0x16d
 80115ea:	491e      	ldr	r1, [pc, #120]	; (8011664 <etharp_find_entry+0x16c>)
 80115ec:	4674      	mov	r4, lr
 80115ee:	481c      	ldr	r0, [pc, #112]	; (8011660 <etharp_find_entry+0x168>)
 80115f0:	f002 fa1c 	bl	8013a2c <iprintf>
  if (arp_table[i].q != NULL) {
 80115f4:	ea4f 0549 	mov.w	r5, r9, lsl #1
 80115f8:	4b16      	ldr	r3, [pc, #88]	; (8011654 <etharp_find_entry+0x15c>)
 80115fa:	eb05 0a09 	add.w	sl, r5, r9
 80115fe:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011602:	f853 000a 	ldr.w	r0, [r3, sl]
 8011606:	b128      	cbz	r0, 8011614 <etharp_find_entry+0x11c>
    free_etharp_q(arp_table[i].q);
 8011608:	f7fb fa62 	bl	800cad0 <pbuf_free>
    arp_table[i].q = NULL;
 801160c:	2300      	movs	r3, #0
 801160e:	4a11      	ldr	r2, [pc, #68]	; (8011654 <etharp_find_entry+0x15c>)
 8011610:	f842 300a 	str.w	r3, [r2, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011614:	eb05 0309 	add.w	r3, r5, r9
 8011618:	490e      	ldr	r1, [pc, #56]	; (8011654 <etharp_find_entry+0x15c>)
 801161a:	2200      	movs	r2, #0
 801161c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011620:	751a      	strb	r2, [r3, #20]
 8011622:	e7ae      	b.n	8011582 <etharp_find_entry+0x8a>
          if (arp_table[i].ctime >= age_pending) {
 8011624:	9a03      	ldr	r2, [sp, #12]
 8011626:	4593      	cmp	fp, r2
 8011628:	f4ff af78 	bcc.w	801151c <etharp_find_entry+0x24>
 801162c:	e9cd 5b02 	strd	r5, fp, [sp, #8]
 8011630:	e774      	b.n	801151c <etharp_find_entry+0x24>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011632:	9b02      	ldr	r3, [sp, #8]
 8011634:	2b0a      	cmp	r3, #10
 8011636:	d105      	bne.n	8011644 <etharp_find_entry+0x14c>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011638:	f1bc 0f0a 	cmp.w	ip, #10
 801163c:	d007      	beq.n	801164e <etharp_find_entry+0x156>
 801163e:	4664      	mov	r4, ip
 8011640:	46e1      	mov	r9, ip
 8011642:	e7d7      	b.n	80115f4 <etharp_find_entry+0xfc>
 8011644:	9c02      	ldr	r4, [sp, #8]
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011646:	46a1      	mov	r9, r4
 8011648:	e7d4      	b.n	80115f4 <etharp_find_entry+0xfc>
 801164a:	4674      	mov	r4, lr
 801164c:	e7e2      	b.n	8011614 <etharp_find_entry+0x11c>
    return (s16_t)ERR_MEM;
 801164e:	f04f 34ff 	mov.w	r4, #4294967295
 8011652:	e7a8      	b.n	80115a6 <etharp_find_entry+0xae>
 8011654:	24014074 	.word	0x24014074
 8011658:	080163b4 	.word	0x080163b4
 801165c:	08016404 	.word	0x08016404
 8011660:	0801487c 	.word	0x0801487c
 8011664:	080163ec 	.word	0x080163ec

08011668 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	b083      	sub	sp, #12
 801166e:	4689      	mov	r9, r1
 8011670:	4692      	mov	sl, r2
 8011672:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011674:	4606      	mov	r6, r0
{
 8011676:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011678:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801167c:	2800      	cmp	r0, #0
 801167e:	d05a      	beq.n	8011736 <etharp_raw+0xce>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011680:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011684:	211c      	movs	r1, #28
 8011686:	200e      	movs	r0, #14
 8011688:	f7fb fa96 	bl	800cbb8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801168c:	4605      	mov	r5, r0
 801168e:	2800      	cmp	r0, #0
 8011690:	d059      	beq.n	8011746 <etharp_raw+0xde>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011692:	8943      	ldrh	r3, [r0, #10]
 8011694:	2b1b      	cmp	r3, #27
 8011696:	d946      	bls.n	8011726 <etharp_raw+0xbe>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011698:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801169a:	4658      	mov	r0, fp
 801169c:	f7fa f978 	bl	800b990 <lwip_htons>
 80116a0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80116a2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80116a6:	2b06      	cmp	r3, #6
 80116a8:	d006      	beq.n	80116b8 <etharp_raw+0x50>
 80116aa:	4b2a      	ldr	r3, [pc, #168]	; (8011754 <etharp_raw+0xec>)
 80116ac:	f240 426a 	movw	r2, #1130	; 0x46a
 80116b0:	4929      	ldr	r1, [pc, #164]	; (8011758 <etharp_raw+0xf0>)
 80116b2:	482a      	ldr	r0, [pc, #168]	; (801175c <etharp_raw+0xf4>)
 80116b4:	f002 f9ba 	bl	8013a2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80116b8:	f8d8 1000 	ldr.w	r1, [r8]
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80116bc:	f04f 0e08 	mov.w	lr, #8
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 80116c0:	f04f 0c04 	mov.w	ip, #4
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80116c4:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80116c6:	60a1      	str	r1, [r4, #8]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80116c8:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80116ca:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80116ce:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80116d2:	4653      	mov	r3, sl
 80116d4:	464a      	mov	r2, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80116d6:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 80116de:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80116e0:	88bf      	ldrh	r7, [r7, #4]
 80116e2:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80116e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80116e6:	683f      	ldr	r7, [r7, #0]
 80116e8:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80116ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80116ee:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80116f0:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80116f4:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80116f6:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 80116fa:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80116fc:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 80116fe:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011702:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011704:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011706:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801170a:	9700      	str	r7, [sp, #0]
 801170c:	f001 fcf0 	bl	80130f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8011710:	4a13      	ldr	r2, [pc, #76]	; (8011760 <etharp_raw+0xf8>)
  /* free ARP query packet */
  pbuf_free(p);
 8011712:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 8011714:	8b13      	ldrh	r3, [r2, #24]
 8011716:	4443      	add	r3, r8
 8011718:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801171a:	f7fb f9d9 	bl	800cad0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801171e:	4630      	mov	r0, r6
}
 8011720:	b003      	add	sp, #12
 8011722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011726:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <etharp_raw+0xec>)
 8011728:	f240 4263 	movw	r2, #1123	; 0x463
 801172c:	490d      	ldr	r1, [pc, #52]	; (8011764 <etharp_raw+0xfc>)
 801172e:	480b      	ldr	r0, [pc, #44]	; (801175c <etharp_raw+0xf4>)
 8011730:	f002 f97c 	bl	8013a2c <iprintf>
 8011734:	e7b0      	b.n	8011698 <etharp_raw+0x30>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011736:	4b07      	ldr	r3, [pc, #28]	; (8011754 <etharp_raw+0xec>)
 8011738:	f240 4257 	movw	r2, #1111	; 0x457
 801173c:	490a      	ldr	r1, [pc, #40]	; (8011768 <etharp_raw+0x100>)
 801173e:	4807      	ldr	r0, [pc, #28]	; (801175c <etharp_raw+0xf4>)
 8011740:	f002 f974 	bl	8013a2c <iprintf>
 8011744:	e79c      	b.n	8011680 <etharp_raw+0x18>
    ETHARP_STATS_INC(etharp.memerr);
 8011746:	4a06      	ldr	r2, [pc, #24]	; (8011760 <etharp_raw+0xf8>)
    return ERR_MEM;
 8011748:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801174c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801174e:	3301      	adds	r3, #1
 8011750:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 8011752:	e7e5      	b.n	8011720 <etharp_raw+0xb8>
 8011754:	080163b4 	.word	0x080163b4
 8011758:	08016510 	.word	0x08016510
 801175c:	0801487c 	.word	0x0801487c
 8011760:	2401bdf8 	.word	0x2401bdf8
 8011764:	080164dc 	.word	0x080164dc
 8011768:	0801486c 	.word	0x0801486c

0801176c <etharp_output_to_arp_index>:
{
 801176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011770:	0055      	lsls	r5, r2, #1
 8011772:	4e2f      	ldr	r6, [pc, #188]	; (8011830 <etharp_output_to_arp_index+0xc4>)
{
 8011774:	b084      	sub	sp, #16
 8011776:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011778:	eb05 0802 	add.w	r8, r5, r2
{
 801177c:	4607      	mov	r7, r0
 801177e:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011780:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 8011784:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011788:	2b01      	cmp	r3, #1
 801178a:	d934      	bls.n	80117f6 <etharp_output_to_arp_index+0x8a>
 801178c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011790:	2b02      	cmp	r3, #2
 8011792:	f107 082a 	add.w	r8, r7, #42	; 0x2a
 8011796:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801179a:	f101 0a0c 	add.w	sl, r1, #12
 801179e:	44b2      	add	sl, r6
 80117a0:	d00b      	beq.n	80117ba <etharp_output_to_arp_index+0x4e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80117a2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80117a6:	4653      	mov	r3, sl
 80117a8:	4642      	mov	r2, r8
 80117aa:	4649      	mov	r1, r9
 80117ac:	4638      	mov	r0, r7
 80117ae:	9400      	str	r4, [sp, #0]
 80117b0:	f001 fc9e 	bl	80130f0 <ethernet_output>
}
 80117b4:	b004      	add	sp, #16
 80117b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80117ba:	442c      	add	r4, r5
 80117bc:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80117c0:	8a63      	ldrh	r3, [r4, #18]
 80117c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80117c6:	d820      	bhi.n	801180a <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80117c8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80117cc:	d3e9      	bcc.n	80117a2 <etharp_output_to_arp_index+0x36>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80117ce:	3104      	adds	r1, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80117d0:	2201      	movs	r2, #1
 80117d2:	4b18      	ldr	r3, [pc, #96]	; (8011834 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80117d4:	1d38      	adds	r0, r7, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80117d6:	4431      	add	r1, r6
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80117d8:	9203      	str	r2, [sp, #12]
 80117da:	9301      	str	r3, [sp, #4]
 80117dc:	4652      	mov	r2, sl
 80117de:	9102      	str	r1, [sp, #8]
 80117e0:	4643      	mov	r3, r8
 80117e2:	9000      	str	r0, [sp, #0]
 80117e4:	4641      	mov	r1, r8
 80117e6:	4638      	mov	r0, r7
 80117e8:	f7ff ff3e 	bl	8011668 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d1d8      	bne.n	80117a2 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80117f0:	2303      	movs	r3, #3
 80117f2:	7523      	strb	r3, [r4, #20]
 80117f4:	e7d5      	b.n	80117a2 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80117f6:	4b10      	ldr	r3, [pc, #64]	; (8011838 <etharp_output_to_arp_index+0xcc>)
 80117f8:	f240 22ef 	movw	r2, #751	; 0x2ef
 80117fc:	490f      	ldr	r1, [pc, #60]	; (801183c <etharp_output_to_arp_index+0xd0>)
 80117fe:	4810      	ldr	r0, [pc, #64]	; (8011840 <etharp_output_to_arp_index+0xd4>)
 8011800:	f002 f914 	bl	8013a2c <iprintf>
 8011804:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011808:	e7c0      	b.n	801178c <etharp_output_to_arp_index+0x20>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801180a:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801180c:	2001      	movs	r0, #1
 801180e:	4b09      	ldr	r3, [pc, #36]	; (8011834 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011810:	1d3a      	adds	r2, r7, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011812:	440e      	add	r6, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011814:	9003      	str	r0, [sp, #12]
 8011816:	9301      	str	r3, [sp, #4]
 8011818:	4641      	mov	r1, r8
 801181a:	9200      	str	r2, [sp, #0]
 801181c:	4643      	mov	r3, r8
 801181e:	9602      	str	r6, [sp, #8]
 8011820:	4638      	mov	r0, r7
 8011822:	4a08      	ldr	r2, [pc, #32]	; (8011844 <etharp_output_to_arp_index+0xd8>)
 8011824:	f7ff ff20 	bl	8011668 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011828:	2800      	cmp	r0, #0
 801182a:	d1ba      	bne.n	80117a2 <etharp_output_to_arp_index+0x36>
 801182c:	e7e0      	b.n	80117f0 <etharp_output_to_arp_index+0x84>
 801182e:	bf00      	nop
 8011830:	24014074 	.word	0x24014074
 8011834:	080168b0 	.word	0x080168b0
 8011838:	080163b4 	.word	0x080163b4
 801183c:	08016480 	.word	0x08016480
 8011840:	0801487c 	.word	0x0801487c
 8011844:	0801683c 	.word	0x0801683c

08011848 <etharp_tmr>:
{
 8011848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801184c:	4c25      	ldr	r4, [pc, #148]	; (80118e4 <etharp_tmr+0x9c>)
 801184e:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011850:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011852:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80118ec <etharp_tmr+0xa4>
 8011856:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 801185a:	4f23      	ldr	r7, [pc, #140]	; (80118e8 <etharp_tmr+0xa0>)
    u8_t state = arp_table[i].state;
 801185c:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 801185e:	b162      	cbz	r2, 801187a <etharp_tmr+0x32>
      arp_table[i].ctime++;
 8011860:	8a63      	ldrh	r3, [r4, #18]
 8011862:	3301      	adds	r3, #1
 8011864:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011866:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801186a:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801186c:	d20d      	bcs.n	801188a <etharp_tmr+0x42>
 801186e:	2a01      	cmp	r2, #1
 8011870:	d009      	beq.n	8011886 <etharp_tmr+0x3e>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011872:	2a03      	cmp	r2, #3
 8011874:	d013      	beq.n	801189e <etharp_tmr+0x56>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011876:	2a04      	cmp	r2, #4
 8011878:	d018      	beq.n	80118ac <etharp_tmr+0x64>
 801187a:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801187c:	42ac      	cmp	r4, r5
 801187e:	d1ed      	bne.n	801185c <etharp_tmr+0x14>
}
 8011880:	b004      	add	sp, #16
 8011882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011886:	2b04      	cmp	r3, #4
 8011888:	d917      	bls.n	80118ba <etharp_tmr+0x72>
  if (arp_table[i].q != NULL) {
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	b110      	cbz	r0, 8011894 <etharp_tmr+0x4c>
    free_etharp_q(arp_table[i].q);
 801188e:	f7fb f91f 	bl	800cad0 <pbuf_free>
    arp_table[i].q = NULL;
 8011892:	6026      	str	r6, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011894:	7526      	strb	r6, [r4, #20]
 8011896:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011898:	42ac      	cmp	r4, r5
 801189a:	d1df      	bne.n	801185c <etharp_tmr+0x14>
 801189c:	e7f0      	b.n	8011880 <etharp_tmr+0x38>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801189e:	2304      	movs	r3, #4
 80118a0:	3418      	adds	r4, #24
 80118a2:	f804 3c04 	strb.w	r3, [r4, #-4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118a6:	42ac      	cmp	r4, r5
 80118a8:	d1d8      	bne.n	801185c <etharp_tmr+0x14>
 80118aa:	e7e9      	b.n	8011880 <etharp_tmr+0x38>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80118ac:	2302      	movs	r3, #2
 80118ae:	3418      	adds	r4, #24
 80118b0:	f804 3c04 	strb.w	r3, [r4, #-4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118b4:	42ac      	cmp	r4, r5
 80118b6:	d1d1      	bne.n	801185c <etharp_tmr+0x14>
 80118b8:	e7e2      	b.n	8011880 <etharp_tmr+0x38>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80118ba:	68a0      	ldr	r0, [r4, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118bc:	f104 0c04 	add.w	ip, r4, #4
 80118c0:	9203      	str	r2, [sp, #12]
 80118c2:	3418      	adds	r4, #24
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80118c4:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118c6:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 80118ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80118ce:	9200      	str	r2, [sp, #0]
 80118d0:	4619      	mov	r1, r3
 80118d2:	463a      	mov	r2, r7
 80118d4:	f8cd c008 	str.w	ip, [sp, #8]
 80118d8:	f7ff fec6 	bl	8011668 <etharp_raw>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118dc:	42ac      	cmp	r4, r5
 80118de:	d1bd      	bne.n	801185c <etharp_tmr+0x14>
 80118e0:	e7ce      	b.n	8011880 <etharp_tmr+0x38>
 80118e2:	bf00      	nop
 80118e4:	24014074 	.word	0x24014074
 80118e8:	0801683c 	.word	0x0801683c
 80118ec:	080168b0 	.word	0x080168b0

080118f0 <etharp_cleanup_netif>:
{
 80118f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f2:	4c0d      	ldr	r4, [pc, #52]	; (8011928 <etharp_cleanup_netif+0x38>)
 80118f4:	4606      	mov	r6, r0
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80118f6:	2700      	movs	r7, #0
 80118f8:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 80118fc:	e002      	b.n	8011904 <etharp_cleanup_netif+0x14>
 80118fe:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011900:	42ac      	cmp	r4, r5
 8011902:	d00f      	beq.n	8011924 <etharp_cleanup_netif+0x34>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011904:	7d23      	ldrb	r3, [r4, #20]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d0f9      	beq.n	80118fe <etharp_cleanup_netif+0xe>
 801190a:	68a3      	ldr	r3, [r4, #8]
 801190c:	42b3      	cmp	r3, r6
 801190e:	d1f6      	bne.n	80118fe <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 8011910:	6823      	ldr	r3, [r4, #0]
    free_etharp_q(arp_table[i].q);
 8011912:	4618      	mov	r0, r3
  if (arp_table[i].q != NULL) {
 8011914:	b113      	cbz	r3, 801191c <etharp_cleanup_netif+0x2c>
    free_etharp_q(arp_table[i].q);
 8011916:	f7fb f8db 	bl	800cad0 <pbuf_free>
    arp_table[i].q = NULL;
 801191a:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801191c:	7527      	strb	r7, [r4, #20]
 801191e:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011920:	42ac      	cmp	r4, r5
 8011922:	d1ef      	bne.n	8011904 <etharp_cleanup_netif+0x14>
}
 8011924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011926:	bf00      	nop
 8011928:	24014074 	.word	0x24014074

0801192c <etharp_input>:
{
 801192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011930:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011932:	2900      	cmp	r1, #0
 8011934:	f000 8093 	beq.w	8011a5e <etharp_input+0x132>
  hdr = (struct etharp_hdr *)p->payload;
 8011938:	6845      	ldr	r5, [r0, #4]
 801193a:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801193c:	882b      	ldrh	r3, [r5, #0]
 801193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011942:	d102      	bne.n	801194a <etharp_input+0x1e>
 8011944:	792b      	ldrb	r3, [r5, #4]
 8011946:	2b06      	cmp	r3, #6
 8011948:	d00c      	beq.n	8011964 <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801194a:	4b56      	ldr	r3, [pc, #344]	; (8011aa4 <etharp_input+0x178>)
    pbuf_free(p);
 801194c:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801194e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011950:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 8011952:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 8011954:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 8011956:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011958:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801195a:	f7fb f8b9 	bl	800cad0 <pbuf_free>
}
 801195e:	b007      	add	sp, #28
 8011960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011964:	796b      	ldrb	r3, [r5, #5]
 8011966:	2b04      	cmp	r3, #4
 8011968:	d1ef      	bne.n	801194a <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801196a:	886b      	ldrh	r3, [r5, #2]
 801196c:	2b08      	cmp	r3, #8
 801196e:	d1ec      	bne.n	801194a <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 8011970:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8011aa4 <etharp_input+0x178>
 8011974:	460e      	mov	r6, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011976:	684f      	ldr	r7, [r1, #4]
 8011978:	f105 0908 	add.w	r9, r5, #8
  ETHARP_STATS_INC(etharp.recv);
 801197c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8011980:	3301      	adds	r3, #1
 8011982:	f8a8 301a 	strh.w	r3, [r8, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011986:	f8d5 000e 	ldr.w	r0, [r5, #14]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801198a:	69ab      	ldr	r3, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801198c:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801198e:	2f00      	cmp	r7, #0
 8011990:	d06f      	beq.n	8011a72 <etharp_input+0x146>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011992:	429f      	cmp	r7, r3
 8011994:	f000 8082 	beq.w	8011a9c <etharp_input+0x170>
    for_us = 0;
 8011998:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801199a:	f04f 0a02 	mov.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801199e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80119a2:	2b06      	cmp	r3, #6
 80119a4:	d007      	beq.n	80119b6 <etharp_input+0x8a>
 80119a6:	4b40      	ldr	r3, [pc, #256]	; (8011aa8 <etharp_input+0x17c>)
 80119a8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80119ac:	493f      	ldr	r1, [pc, #252]	; (8011aac <etharp_input+0x180>)
 80119ae:	4840      	ldr	r0, [pc, #256]	; (8011ab0 <etharp_input+0x184>)
 80119b0:	f002 f83c 	bl	8013a2c <iprintf>
 80119b4:	9805      	ldr	r0, [sp, #20]
  if (ip4_addr_isany(ipaddr) ||
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d041      	beq.n	8011a3e <etharp_input+0x112>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80119ba:	4631      	mov	r1, r6
 80119bc:	f000 fe5e 	bl	801267c <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80119c0:	4683      	mov	fp, r0
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d13b      	bne.n	8011a3e <etharp_input+0x112>
      ip4_addr_ismulticast(ipaddr)) {
 80119c6:	9b05      	ldr	r3, [sp, #20]
 80119c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80119cc:	2be0      	cmp	r3, #224	; 0xe0
 80119ce:	d036      	beq.n	8011a3e <etharp_input+0x112>
  i = etharp_find_entry(ipaddr, flags, netif);
 80119d0:	4651      	mov	r1, sl
 80119d2:	4632      	mov	r2, r6
 80119d4:	a805      	add	r0, sp, #20
 80119d6:	f7ff fd8f 	bl	80114f8 <etharp_find_entry>
  if (i < 0) {
 80119da:	2800      	cmp	r0, #0
 80119dc:	db2f      	blt.n	8011a3e <etharp_input+0x112>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80119de:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80119e2:	4934      	ldr	r1, [pc, #208]	; (8011ab4 <etharp_input+0x188>)
 80119e4:	f04f 0e02 	mov.w	lr, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80119e8:	f04f 0a18 	mov.w	sl, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 80119ec:	00d2      	lsls	r2, r2, #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80119ee:	230c      	movs	r3, #12
 80119f0:	fb10 330a 	smlabb	r3, r0, sl, r3
    arp_table[i].state = ETHARP_STATE_STABLE;
 80119f4:	eb01 0c02 	add.w	ip, r1, r2
 80119f8:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80119fc:	eb01 0e03 	add.w	lr, r1, r3
  arp_table[i].netif = netif;
 8011a00:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011a04:	f8d9 0000 	ldr.w	r0, [r9]
 8011a08:	50c8      	str	r0, [r1, r3]
 8011a0a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8011a0e:	f8ae 3004 	strh.w	r3, [lr, #4]
  if (arp_table[i].q != NULL) {
 8011a12:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 8011a16:	f8ac b012 	strh.w	fp, [ip, #18]
  if (arp_table[i].q != NULL) {
 8011a1a:	f1ba 0f00 	cmp.w	sl, #0
 8011a1e:	d00e      	beq.n	8011a3e <etharp_input+0x112>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011a20:	f44f 6000 	mov.w	r0, #2048	; 0x800
    arp_table[i].q = NULL;
 8011a24:	f841 b002 	str.w	fp, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011a28:	464b      	mov	r3, r9
 8011a2a:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 8011a2e:	9000      	str	r0, [sp, #0]
 8011a30:	4651      	mov	r1, sl
 8011a32:	4630      	mov	r0, r6
 8011a34:	f001 fb5c 	bl	80130f0 <ethernet_output>
    pbuf_free(p);
 8011a38:	4650      	mov	r0, sl
 8011a3a:	f7fb f849 	bl	800cad0 <pbuf_free>
  switch (hdr->opcode) {
 8011a3e:	88eb      	ldrh	r3, [r5, #6]
 8011a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a44:	d018      	beq.n	8011a78 <etharp_input+0x14c>
 8011a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a4a:	d004      	beq.n	8011a56 <etharp_input+0x12a>
      ETHARP_STATS_INC(etharp.err);
 8011a4c:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8011a50:	3301      	adds	r3, #1
 8011a52:	f8a8 302c 	strh.w	r3, [r8, #44]	; 0x2c
  pbuf_free(p);
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7fb f83a 	bl	800cad0 <pbuf_free>
 8011a5c:	e77f      	b.n	801195e <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011a5e:	4b12      	ldr	r3, [pc, #72]	; (8011aa8 <etharp_input+0x17c>)
 8011a60:	f240 228a 	movw	r2, #650	; 0x28a
 8011a64:	4914      	ldr	r1, [pc, #80]	; (8011ab8 <etharp_input+0x18c>)
 8011a66:	4812      	ldr	r0, [pc, #72]	; (8011ab0 <etharp_input+0x184>)
 8011a68:	f001 ffe0 	bl	8013a2c <iprintf>
}
 8011a6c:	b007      	add	sp, #28
 8011a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011a72:	f04f 0a02 	mov.w	sl, #2
 8011a76:	e792      	b.n	801199e <etharp_input+0x72>
      if (for_us) {
 8011a78:	2f00      	cmp	r7, #0
 8011a7a:	d0ec      	beq.n	8011a56 <etharp_input+0x12a>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011a7c:	f106 032a 	add.w	r3, r6, #42	; 0x2a
        etharp_raw(netif,
 8011a80:	2002      	movs	r0, #2
 8011a82:	af05      	add	r7, sp, #20
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011a84:	1d35      	adds	r5, r6, #4
        etharp_raw(netif,
 8011a86:	9003      	str	r0, [sp, #12]
 8011a88:	464a      	mov	r2, r9
 8011a8a:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a8e:	4619      	mov	r1, r3
 8011a90:	4630      	mov	r0, r6
 8011a92:	9702      	str	r7, [sp, #8]
 8011a94:	9500      	str	r5, [sp, #0]
 8011a96:	f7ff fde7 	bl	8011668 <etharp_raw>
 8011a9a:	e7dc      	b.n	8011a56 <etharp_input+0x12a>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011a9c:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011a9e:	46ba      	mov	sl, r7
 8011aa0:	e77d      	b.n	801199e <etharp_input+0x72>
 8011aa2:	bf00      	nop
 8011aa4:	2401bdf8 	.word	0x2401bdf8
 8011aa8:	080163b4 	.word	0x080163b4
 8011aac:	08016450 	.word	0x08016450
 8011ab0:	0801487c 	.word	0x0801487c
 8011ab4:	24014074 	.word	0x24014074
 8011ab8:	0801486c 	.word	0x0801486c

08011abc <etharp_query>:
{
 8011abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac0:	460f      	mov	r7, r1
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	4604      	mov	r4, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	6838      	ldr	r0, [r7, #0]
{
 8011aca:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011acc:	f000 fdd6 	bl	801267c <ip4_addr_isbroadcast_u32>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	f040 80a0 	bne.w	8011c16 <etharp_query+0x15a>
      ip4_addr_ismulticast(ipaddr) ||
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8011adc:	2ae0      	cmp	r2, #224	; 0xe0
 8011ade:	f000 809a 	beq.w	8011c16 <etharp_query+0x15a>
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f000 8097 	beq.w	8011c16 <etharp_query+0x15a>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011ae8:	4622      	mov	r2, r4
 8011aea:	2101      	movs	r1, #1
 8011aec:	4638      	mov	r0, r7
 8011aee:	f7ff fd03 	bl	80114f8 <etharp_find_entry>
  if (i_err < 0) {
 8011af2:	1e05      	subs	r5, r0, #0
 8011af4:	db4c      	blt.n	8011b90 <etharp_query+0xd4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011af6:	2d7e      	cmp	r5, #126	; 0x7e
 8011af8:	dc53      	bgt.n	8011ba2 <etharp_query+0xe6>
  i = (netif_addr_idx_t)i_err;
 8011afa:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011afc:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8011c6c <etharp_query+0x1b0>
 8011b00:	ea4f 0945 	mov.w	r9, r5, lsl #1
 8011b04:	eb09 0205 	add.w	r2, r9, r5
 8011b08:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8011b0c:	7d13      	ldrb	r3, [r2, #20]
 8011b0e:	b18b      	cbz	r3, 8011b34 <etharp_query+0x78>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011b10:	f104 0a2a 	add.w	sl, r4, #42	; 0x2a
  if (is_new_entry || (q == NULL)) {
 8011b14:	2e00      	cmp	r6, #0
 8011b16:	f000 8085 	beq.w	8011c24 <etharp_query+0x168>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011b1a:	eb09 0305 	add.w	r3, r9, r5
  err_t result = ERR_MEM;
 8011b1e:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011b22:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011b26:	7d1b      	ldrb	r3, [r3, #20]
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d820      	bhi.n	8011b6e <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011b2c:	d041      	beq.n	8011bb2 <etharp_query+0xf6>
}
 8011b2e:	b005      	add	sp, #20
 8011b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011b34:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011b38:	f104 0a2a 	add.w	sl, r4, #42	; 0x2a
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b3c:	4944      	ldr	r1, [pc, #272]	; (8011c50 <etharp_query+0x194>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011b3e:	1d20      	adds	r0, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b40:	9702      	str	r7, [sp, #8]
 8011b42:	4653      	mov	r3, sl
 8011b44:	9101      	str	r1, [sp, #4]
 8011b46:	4651      	mov	r1, sl
 8011b48:	9000      	str	r0, [sp, #0]
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 8011b50:	6094      	str	r4, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011b52:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b56:	4a3f      	ldr	r2, [pc, #252]	; (8011c54 <etharp_query+0x198>)
 8011b58:	f7ff fd86 	bl	8011668 <etharp_raw>
    if (q == NULL) {
 8011b5c:	2e00      	cmp	r6, #0
 8011b5e:	d0e6      	beq.n	8011b2e <etharp_query+0x72>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011b60:	eb09 0305 	add.w	r3, r9, r5
 8011b64:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011b68:	7d1b      	ldrb	r3, [r3, #20]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d9de      	bls.n	8011b2c <etharp_query+0x70>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011b6e:	2318      	movs	r3, #24
 8011b70:	4631      	mov	r1, r6
 8011b72:	f44f 6700 	mov.w	r7, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 8011b76:	4e38      	ldr	r6, [pc, #224]	; (8011c58 <etharp_query+0x19c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011b78:	fb03 8305 	mla	r3, r3, r5, r8
 8011b7c:	4652      	mov	r2, sl
 8011b7e:	9700      	str	r7, [sp, #0]
 8011b80:	4620      	mov	r0, r4
 8011b82:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8011b84:	7035      	strb	r5, [r6, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011b86:	f001 fab3 	bl	80130f0 <ethernet_output>
}
 8011b8a:	b005      	add	sp, #20
 8011b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (q) {
 8011b90:	b11e      	cbz	r6, 8011b9a <etharp_query+0xde>
      ETHARP_STATS_INC(etharp.memerr);
 8011b92:	4a32      	ldr	r2, [pc, #200]	; (8011c5c <etharp_query+0x1a0>)
 8011b94:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8011b96:	3301      	adds	r3, #1
 8011b98:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 8011b9a:	b268      	sxtb	r0, r5
}
 8011b9c:	b005      	add	sp, #20
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011ba2:	4b2f      	ldr	r3, [pc, #188]	; (8011c60 <etharp_query+0x1a4>)
 8011ba4:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011ba8:	492e      	ldr	r1, [pc, #184]	; (8011c64 <etharp_query+0x1a8>)
 8011baa:	482f      	ldr	r0, [pc, #188]	; (8011c68 <etharp_query+0x1ac>)
 8011bac:	f001 ff3e 	bl	8013a2c <iprintf>
 8011bb0:	e7a3      	b.n	8011afa <etharp_query+0x3e>
 8011bb2:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011bb4:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8011c60 <etharp_query+0x1a4>
 8011bb8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8011c70 <etharp_query+0x1b4>
 8011bbc:	e004      	b.n	8011bc8 <etharp_query+0x10c>
      if (PBUF_NEEDS_COPY(p)) {
 8011bbe:	7b23      	ldrb	r3, [r4, #12]
 8011bc0:	065a      	lsls	r2, r3, #25
 8011bc2:	d412      	bmi.n	8011bea <etharp_query+0x12e>
      p = p->next;
 8011bc4:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8011bc6:	b34c      	cbz	r4, 8011c1c <etharp_query+0x160>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011bc8:	8962      	ldrh	r2, [r4, #10]
 8011bca:	8923      	ldrh	r3, [r4, #8]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d1f6      	bne.n	8011bbe <etharp_query+0x102>
 8011bd0:	6827      	ldr	r7, [r4, #0]
 8011bd2:	465b      	mov	r3, fp
 8011bd4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011bd8:	4651      	mov	r1, sl
 8011bda:	4823      	ldr	r0, [pc, #140]	; (8011c68 <etharp_query+0x1ac>)
 8011bdc:	b117      	cbz	r7, 8011be4 <etharp_query+0x128>
 8011bde:	f001 ff25 	bl	8013a2c <iprintf>
 8011be2:	e7ec      	b.n	8011bbe <etharp_query+0x102>
      if (PBUF_NEEDS_COPY(p)) {
 8011be4:	7b23      	ldrb	r3, [r4, #12]
 8011be6:	065b      	lsls	r3, r3, #25
 8011be8:	d518      	bpl.n	8011c1c <etharp_query+0x160>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011bea:	4632      	mov	r2, r6
 8011bec:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011bf0:	200e      	movs	r0, #14
 8011bf2:	f7fb faf5 	bl	800d1e0 <pbuf_clone>
    if (p != NULL) {
 8011bf6:	4606      	mov	r6, r0
 8011bf8:	b310      	cbz	r0, 8011c40 <etharp_query+0x184>
      if (arp_table[i].q != NULL) {
 8011bfa:	eb09 0305 	add.w	r3, r9, r5
 8011bfe:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 8011c02:	b108      	cbz	r0, 8011c08 <etharp_query+0x14c>
        pbuf_free(arp_table[i].q);
 8011c04:	f7fa ff64 	bl	800cad0 <pbuf_free>
      arp_table[i].q = p;
 8011c08:	444d      	add	r5, r9
      result = ERR_OK;
 8011c0a:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8011c0c:	f848 6035 	str.w	r6, [r8, r5, lsl #3]
}
 8011c10:	b005      	add	sp, #20
 8011c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_ARG;
 8011c16:	f06f 000f 	mvn.w	r0, #15
 8011c1a:	e788      	b.n	8011b2e <etharp_query+0x72>
      pbuf_ref(p);
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	f7fb f8d7 	bl	800cdd0 <pbuf_ref>
 8011c22:	e7ea      	b.n	8011bfa <etharp_query+0x13e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011c24:	1d22      	adds	r2, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011c26:	2101      	movs	r1, #1
 8011c28:	4b09      	ldr	r3, [pc, #36]	; (8011c50 <etharp_query+0x194>)
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	9200      	str	r2, [sp, #0]
 8011c2e:	9301      	str	r3, [sp, #4]
 8011c30:	4653      	mov	r3, sl
 8011c32:	4a08      	ldr	r2, [pc, #32]	; (8011c54 <etharp_query+0x198>)
 8011c34:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8011c38:	4651      	mov	r1, sl
 8011c3a:	f7ff fd15 	bl	8011668 <etharp_raw>
 8011c3e:	e776      	b.n	8011b2e <etharp_query+0x72>
      ETHARP_STATS_INC(etharp.memerr);
 8011c40:	4a06      	ldr	r2, [pc, #24]	; (8011c5c <etharp_query+0x1a0>)
      result = ERR_MEM;
 8011c42:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 8011c46:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8011c48:	3301      	adds	r3, #1
 8011c4a:	8493      	strh	r3, [r2, #36]	; 0x24
 8011c4c:	e76f      	b.n	8011b2e <etharp_query+0x72>
 8011c4e:	bf00      	nop
 8011c50:	080168b0 	.word	0x080168b0
 8011c54:	0801683c 	.word	0x0801683c
 8011c58:	24014164 	.word	0x24014164
 8011c5c:	2401bdf8 	.word	0x2401bdf8
 8011c60:	080163b4 	.word	0x080163b4
 8011c64:	080164b0 	.word	0x080164b0
 8011c68:	0801487c 	.word	0x0801487c
 8011c6c:	24014074 	.word	0x24014074
 8011c70:	080164c0 	.word	0x080164c0

08011c74 <etharp_output>:
{
 8011c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c76:	460f      	mov	r7, r1
 8011c78:	b085      	sub	sp, #20
 8011c7a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d07e      	beq.n	8011d80 <etharp_output+0x10c>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011c82:	2f00      	cmp	r7, #0
 8011c84:	d06b      	beq.n	8011d5e <etharp_output+0xea>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011c86:	2d00      	cmp	r5, #0
 8011c88:	d072      	beq.n	8011d70 <etharp_output+0xfc>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	6828      	ldr	r0, [r5, #0]
 8011c8e:	f000 fcf5 	bl	801267c <ip4_addr_isbroadcast_u32>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d161      	bne.n	8011d5a <etharp_output+0xe6>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011c96:	682b      	ldr	r3, [r5, #0]
 8011c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011c9c:	2ae0      	cmp	r2, #224	; 0xe0
 8011c9e:	d038      	beq.n	8011d12 <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ca0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011ca4:	405a      	eors	r2, r3
 8011ca6:	420a      	tst	r2, r1
 8011ca8:	d009      	beq.n	8011cbe <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8011caa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011cac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d004      	beq.n	8011cbe <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011cb4:	68e3      	ldr	r3, [r4, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d07a      	beq.n	8011db0 <etharp_output+0x13c>
            dst_addr = netif_ip4_gw(netif);
 8011cba:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011cbe:	f8df c118 	ldr.w	ip, [pc, #280]	; 8011dd8 <etharp_output+0x164>
 8011cc2:	4b3d      	ldr	r3, [pc, #244]	; (8011db8 <etharp_output+0x144>)
 8011cc4:	f89c 2000 	ldrb.w	r2, [ip]
 8011cc8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8011ccc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011cd0:	7d19      	ldrb	r1, [r3, #20]
 8011cd2:	2901      	cmp	r1, #1
 8011cd4:	d902      	bls.n	8011cdc <etharp_output+0x68>
 8011cd6:	6899      	ldr	r1, [r3, #8]
 8011cd8:	42a1      	cmp	r1, r4
 8011cda:	d05c      	beq.n	8011d96 <etharp_output+0x122>
 8011cdc:	4a36      	ldr	r2, [pc, #216]	; (8011db8 <etharp_output+0x144>)
{
 8011cde:	2300      	movs	r3, #0
 8011ce0:	e003      	b.n	8011cea <etharp_output+0x76>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011ce2:	2b0a      	cmp	r3, #10
 8011ce4:	f102 0218 	add.w	r2, r2, #24
 8011ce8:	d030      	beq.n	8011d4c <etharp_output+0xd8>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011cea:	7d11      	ldrb	r1, [r2, #20]
 8011cec:	b2de      	uxtb	r6, r3
 8011cee:	3301      	adds	r3, #1
 8011cf0:	2901      	cmp	r1, #1
 8011cf2:	d9f6      	bls.n	8011ce2 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 8011cf4:	6891      	ldr	r1, [r2, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011cf6:	42a1      	cmp	r1, r4
 8011cf8:	d1f3      	bne.n	8011ce2 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 8011cfa:	6828      	ldr	r0, [r5, #0]
 8011cfc:	6851      	ldr	r1, [r2, #4]
 8011cfe:	4288      	cmp	r0, r1
 8011d00:	d1ef      	bne.n	8011ce2 <etharp_output+0x6e>
        return etharp_output_to_arp_index(netif, q, i);
 8011d02:	4639      	mov	r1, r7
 8011d04:	4620      	mov	r0, r4
 8011d06:	4632      	mov	r2, r6
        ETHARP_SET_ADDRHINT(netif, i);
 8011d08:	f88c 6000 	strb.w	r6, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 8011d0c:	f7ff fd2e 	bl	801176c <etharp_output_to_arp_index>
 8011d10:	e01a      	b.n	8011d48 <etharp_output+0xd4>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011d12:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011d14:	2601      	movs	r6, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011d16:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011d18:	78a9      	ldrb	r1, [r5, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011d1e:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011d20:	f8ad 6008 	strh.w	r6, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011d24:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 8011d28:	ab02      	add	r3, sp, #8
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011d2a:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011d2e:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011d32:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011d36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011d3a:	4639      	mov	r1, r7
 8011d3c:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8011d40:	9000      	str	r0, [sp, #0]
 8011d42:	4620      	mov	r0, r4
 8011d44:	f001 f9d4 	bl	80130f0 <ethernet_output>
}
 8011d48:	b005      	add	sp, #20
 8011d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 8011d4c:	463a      	mov	r2, r7
 8011d4e:	4629      	mov	r1, r5
 8011d50:	4620      	mov	r0, r4
 8011d52:	f7ff feb3 	bl	8011abc <etharp_query>
}
 8011d56:	b005      	add	sp, #20
 8011d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8011d5a:	4b18      	ldr	r3, [pc, #96]	; (8011dbc <etharp_output+0x148>)
 8011d5c:	e7eb      	b.n	8011d36 <etharp_output+0xc2>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011d5e:	4b18      	ldr	r3, [pc, #96]	; (8011dc0 <etharp_output+0x14c>)
 8011d60:	f240 321f 	movw	r2, #799	; 0x31f
 8011d64:	4917      	ldr	r1, [pc, #92]	; (8011dc4 <etharp_output+0x150>)
 8011d66:	4818      	ldr	r0, [pc, #96]	; (8011dc8 <etharp_output+0x154>)
 8011d68:	f001 fe60 	bl	8013a2c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011d6c:	2d00      	cmp	r5, #0
 8011d6e:	d18c      	bne.n	8011c8a <etharp_output+0x16>
 8011d70:	4b13      	ldr	r3, [pc, #76]	; (8011dc0 <etharp_output+0x14c>)
 8011d72:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011d76:	4915      	ldr	r1, [pc, #84]	; (8011dcc <etharp_output+0x158>)
 8011d78:	4813      	ldr	r0, [pc, #76]	; (8011dc8 <etharp_output+0x154>)
 8011d7a:	f001 fe57 	bl	8013a2c <iprintf>
 8011d7e:	e784      	b.n	8011c8a <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011d80:	4b0f      	ldr	r3, [pc, #60]	; (8011dc0 <etharp_output+0x14c>)
 8011d82:	f240 321e 	movw	r2, #798	; 0x31e
 8011d86:	4912      	ldr	r1, [pc, #72]	; (8011dd0 <etharp_output+0x15c>)
 8011d88:	480f      	ldr	r0, [pc, #60]	; (8011dc8 <etharp_output+0x154>)
 8011d8a:	f001 fe4f 	bl	8013a2c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011d8e:	2f00      	cmp	r7, #0
 8011d90:	f47f af79 	bne.w	8011c86 <etharp_output+0x12>
 8011d94:	e7e3      	b.n	8011d5e <etharp_output+0xea>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	6829      	ldr	r1, [r5, #0]
 8011d9a:	4299      	cmp	r1, r3
 8011d9c:	d19e      	bne.n	8011cdc <etharp_output+0x68>
          ETHARP_STATS_INC(etharp.cachehit);
 8011d9e:	4d0d      	ldr	r5, [pc, #52]	; (8011dd4 <etharp_output+0x160>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011da0:	4639      	mov	r1, r7
 8011da2:	4620      	mov	r0, r4
          ETHARP_STATS_INC(etharp.cachehit);
 8011da4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 8011da6:	3301      	adds	r3, #1
 8011da8:	85eb      	strh	r3, [r5, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011daa:	f7ff fcdf 	bl	801176c <etharp_output_to_arp_index>
 8011dae:	e7cb      	b.n	8011d48 <etharp_output+0xd4>
            return ERR_RTE;
 8011db0:	f06f 0003 	mvn.w	r0, #3
 8011db4:	e7c8      	b.n	8011d48 <etharp_output+0xd4>
 8011db6:	bf00      	nop
 8011db8:	24014074 	.word	0x24014074
 8011dbc:	0801683c 	.word	0x0801683c
 8011dc0:	080163b4 	.word	0x080163b4
 8011dc4:	08016474 	.word	0x08016474
 8011dc8:	0801487c 	.word	0x0801487c
 8011dcc:	08016430 	.word	0x08016430
 8011dd0:	0801486c 	.word	0x0801486c
 8011dd4:	2401bdf8 	.word	0x2401bdf8
 8011dd8:	24014164 	.word	0x24014164

08011ddc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011ddc:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011dde:	f100 032a 	add.w	r3, r0, #42	; 0x2a
{
 8011de2:	b530      	push	{r4, r5, lr}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011de4:	3204      	adds	r2, #4
{
 8011de6:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011de8:	2501      	movs	r5, #1
 8011dea:	4c05      	ldr	r4, [pc, #20]	; (8011e00 <etharp_request+0x24>)
 8011dec:	9102      	str	r1, [sp, #8]
 8011dee:	4619      	mov	r1, r3
 8011df0:	9200      	str	r2, [sp, #0]
 8011df2:	4a04      	ldr	r2, [pc, #16]	; (8011e04 <etharp_request+0x28>)
 8011df4:	9503      	str	r5, [sp, #12]
 8011df6:	9401      	str	r4, [sp, #4]
 8011df8:	f7ff fc36 	bl	8011668 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8011dfc:	b005      	add	sp, #20
 8011dfe:	bd30      	pop	{r4, r5, pc}
 8011e00:	080168b0 	.word	0x080168b0
 8011e04:	0801683c 	.word	0x0801683c

08011e08 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8011e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 8011e0c:	4f33      	ldr	r7, [pc, #204]	; (8011edc <icmp_send_response.isra.0+0xd4>)
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8011e0e:	b086      	sub	sp, #24
 8011e10:	4604      	mov	r4, r0
 8011e12:	4689      	mov	r9, r1
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 8011e14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8011e18:	4690      	mov	r8, r2

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e1a:	2124      	movs	r1, #36	; 0x24
 8011e1c:	f44f 7220 	mov.w	r2, #640	; 0x280
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 8011e20:	3301      	adds	r3, #1
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e22:	2022      	movs	r0, #34	; 0x22
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 8011e24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e28:	f7fa fec6 	bl	800cbb8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d04c      	beq.n	8011eca <icmp_send_response.isra.0+0xc2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011e30:	8943      	ldrh	r3, [r0, #10]
 8011e32:	4606      	mov	r6, r0
 8011e34:	2b23      	cmp	r3, #35	; 0x23
 8011e36:	d940      	bls.n	8011eba <icmp_send_response.isra.0+0xb2>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011e38:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8011e3a:	2500      	movs	r5, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011e3c:	6874      	ldr	r4, [r6, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011e3e:	f10d 0a18 	add.w	sl, sp, #24
  icmphdr->type = type;
 8011e42:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
 8011e46:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->id = 0;
 8011e4a:	7125      	strb	r5, [r4, #4]
 8011e4c:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
 8011e4e:	71a5      	strb	r5, [r4, #6]
 8011e50:	71e5      	strb	r5, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011e52:	f8d3 c000 	ldr.w	ip, [r3]
 8011e56:	6858      	ldr	r0, [r3, #4]
 8011e58:	689a      	ldr	r2, [r3, #8]
 8011e5a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8011e5e:	f8c4 c008 	str.w	ip, [r4, #8]
 8011e62:	60e0      	str	r0, [r4, #12]
 8011e64:	6122      	str	r2, [r4, #16]
 8011e66:	f8c4 e014 	str.w	lr, [r4, #20]
 8011e6a:	6958      	ldr	r0, [r3, #20]
 8011e6c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8011e70:	699a      	ldr	r2, [r3, #24]
 8011e72:	61e0      	str	r0, [r4, #28]
 8011e74:	f8c4 c018 	str.w	ip, [r4, #24]
 8011e78:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	f84a 3d04 	str.w	r3, [sl, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011e80:	4650      	mov	r0, sl
 8011e82:	f000 f9b3 	bl	80121ec <ip4_route>
#endif
  if (netif != NULL) {
 8011e86:	b190      	cbz	r0, 8011eae <icmp_send_response.isra.0+0xa6>
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8011e88:	f8b7 c060 	ldrh.w	ip, [r7, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011e8c:	f04f 0e01 	mov.w	lr, #1
    icmphdr->chksum = 0;
 8011e90:	70a5      	strb	r5, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011e92:	4652      	mov	r2, sl
    ICMP_STATS_INC(icmp.xmit);
 8011e94:	44f4      	add	ip, lr
    icmphdr->chksum = 0;
 8011e96:	70e5      	strb	r5, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011e98:	4629      	mov	r1, r5
 8011e9a:	9002      	str	r0, [sp, #8]
 8011e9c:	9500      	str	r5, [sp, #0]
 8011e9e:	23ff      	movs	r3, #255	; 0xff
 8011ea0:	f8cd e004 	str.w	lr, [sp, #4]
 8011ea4:	4630      	mov	r0, r6
    ICMP_STATS_INC(icmp.xmit);
 8011ea6:	f8a7 c060 	strh.w	ip, [r7, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011eaa:	f000 fbd5 	bl	8012658 <ip4_output_if>
  }
  pbuf_free(q);
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f7fa fe0e 	bl	800cad0 <pbuf_free>
}
 8011eb4:	b006      	add	sp, #24
 8011eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011eba:	4b09      	ldr	r3, [pc, #36]	; (8011ee0 <icmp_send_response.isra.0+0xd8>)
 8011ebc:	f240 1269 	movw	r2, #361	; 0x169
 8011ec0:	4908      	ldr	r1, [pc, #32]	; (8011ee4 <icmp_send_response.isra.0+0xdc>)
 8011ec2:	4809      	ldr	r0, [pc, #36]	; (8011ee8 <icmp_send_response.isra.0+0xe0>)
 8011ec4:	f001 fdb2 	bl	8013a2c <iprintf>
 8011ec8:	e7b6      	b.n	8011e38 <icmp_send_response.isra.0+0x30>
    MIB2_STATS_INC(mib2.icmpouterrors);
 8011eca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8011ece:	3301      	adds	r3, #1
 8011ed0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
}
 8011ed4:	b006      	add	sp, #24
 8011ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eda:	bf00      	nop
 8011edc:	2401bdf8 	.word	0x2401bdf8
 8011ee0:	080165c0 	.word	0x080165c0
 8011ee4:	080165f8 	.word	0x080165f8
 8011ee8:	0801487c 	.word	0x0801487c

08011eec <icmp_input>:
{
 8011eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 8011ef0:	4c9d      	ldr	r4, [pc, #628]	; (8012168 <icmp_input+0x27c>)
{
 8011ef2:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 8011ef4:	4f9d      	ldr	r7, [pc, #628]	; (801216c <icmp_input+0x280>)
{
 8011ef6:	4606      	mov	r6, r0
  ICMP_STATS_INC(icmp.recv);
 8011ef8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 8011efc:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
  ICMP_STATS_INC(icmp.recv);
 8011f00:	3201      	adds	r2, #1
  iphdr_in = ip4_current_header();
 8011f02:	f8d7 9008 	ldr.w	r9, [r7, #8]
  MIB2_STATS_INC(mib2.icmpinmsgs);
 8011f06:	3301      	adds	r3, #1
  ICMP_STATS_INC(icmp.recv);
 8011f08:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 8011f0c:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
  hlen = IPH_HL_BYTES(iphdr_in);
 8011f10:	f899 5000 	ldrb.w	r5, [r9]
 8011f14:	f005 050f 	and.w	r5, r5, #15
 8011f18:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8011f1a:	2d13      	cmp	r5, #19
 8011f1c:	d921      	bls.n	8011f62 <icmp_input+0x76>
  if (p->len < sizeof(u16_t) * 2) {
 8011f1e:	8943      	ldrh	r3, [r0, #10]
 8011f20:	2b03      	cmp	r3, #3
 8011f22:	d91e      	bls.n	8011f62 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8011f24:	6843      	ldr	r3, [r0, #4]
 8011f26:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d056      	beq.n	8011fda <icmp_input+0xee>
 8011f2c:	2b08      	cmp	r3, #8
 8011f2e:	d128      	bne.n	8011f82 <icmp_input+0x96>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f30:	6978      	ldr	r0, [r7, #20]
 8011f32:	4688      	mov	r8, r1
      MIB2_STATS_INC(mib2.icmpinechos);
 8011f34:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f38:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
      MIB2_STATS_INC(mib2.icmpinechos);
 8011f3c:	3301      	adds	r3, #1
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f3e:	2ae0      	cmp	r2, #224	; 0xe0
      MIB2_STATS_INC(mib2.icmpinechos);
 8011f40:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
        src = netif_ip4_addr(inp);
 8011f44:	bf08      	it	eq
 8011f46:	f101 0a04 	addeq.w	sl, r1, #4
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011f4a:	6839      	ldr	r1, [r7, #0]
      src = ip4_current_dest_addr();
 8011f4c:	bf18      	it	ne
 8011f4e:	f107 0a14 	addne.w	sl, r7, #20
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011f52:	f000 fb93 	bl	801267c <ip4_addr_isbroadcast_u32>
 8011f56:	b108      	cbz	r0, 8011f5c <icmp_input+0x70>
        src = netif_ip4_addr(inp);
 8011f58:	f108 0a04 	add.w	sl, r8, #4
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011f5c:	8933      	ldrh	r3, [r6, #8]
 8011f5e:	2b07      	cmp	r3, #7
 8011f60:	d846      	bhi.n	8011ff0 <icmp_input+0x104>
  pbuf_free(p);
 8011f62:	4630      	mov	r0, r6
 8011f64:	f7fa fdb4 	bl	800cad0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8011f68:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 8011f6c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
  ICMP_STATS_INC(icmp.lenerr);
 8011f70:	3201      	adds	r2, #1
  MIB2_STATS_INC(mib2.icmpinerrors);
 8011f72:	3301      	adds	r3, #1
  ICMP_STATS_INC(icmp.lenerr);
 8011f74:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 8011f78:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
}
 8011f7c:	b005      	add	sp, #20
 8011f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (type == ICMP_DUR) {
 8011f82:	2b03      	cmp	r3, #3
 8011f84:	d054      	beq.n	8012030 <icmp_input+0x144>
      } else if (type == ICMP_TE) {
 8011f86:	2b0b      	cmp	r3, #11
 8011f88:	d058      	beq.n	801203c <icmp_input+0x150>
      } else if (type == ICMP_PP) {
 8011f8a:	2b0c      	cmp	r3, #12
 8011f8c:	d04a      	beq.n	8012024 <icmp_input+0x138>
      } else if (type == ICMP_SQ) {
 8011f8e:	2b04      	cmp	r3, #4
 8011f90:	f000 8096 	beq.w	80120c0 <icmp_input+0x1d4>
      } else if (type == ICMP_RD) {
 8011f94:	2b05      	cmp	r3, #5
 8011f96:	f000 80ba 	beq.w	801210e <icmp_input+0x222>
      } else if (type == ICMP_TS) {
 8011f9a:	2b0d      	cmp	r3, #13
 8011f9c:	f000 80bd 	beq.w	801211a <icmp_input+0x22e>
      } else if (type == ICMP_TSR) {
 8011fa0:	2b0e      	cmp	r3, #14
 8011fa2:	f000 80d0 	beq.w	8012146 <icmp_input+0x25a>
      } else if (type == ICMP_AM) {
 8011fa6:	2b11      	cmp	r3, #17
 8011fa8:	f000 80d3 	beq.w	8012152 <icmp_input+0x266>
      } else if (type == ICMP_AMR) {
 8011fac:	2b12      	cmp	r3, #18
 8011fae:	d104      	bne.n	8011fba <icmp_input+0xce>
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 8011fb0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
      ICMP_STATS_INC(icmp.proterr);
 8011fba:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
  pbuf_free(p);
 8011fbe:	4630      	mov	r0, r6
      ICMP_STATS_INC(icmp.drop);
 8011fc0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 8011fc4:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 8011fc6:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 8011fc8:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8011fcc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
}
 8011fd0:	b005      	add	sp, #20
 8011fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011fd6:	f7fa bd7b 	b.w	800cad0 <pbuf_free>
      MIB2_STATS_INC(mib2.icmpinechoreps);
 8011fda:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8011fde:	3301      	adds	r3, #1
 8011fe0:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  pbuf_free(p);
 8011fe4:	4630      	mov	r0, r6
}
 8011fe6:	b005      	add	sp, #20
 8011fe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011fec:	f7fa bd70 	b.w	800cad0 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011ff0:	f105 0b0e 	add.w	fp, r5, #14
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	4659      	mov	r1, fp
 8011ff8:	f7fa fd2a 	bl	800ca50 <pbuf_add_header>
 8011ffc:	b320      	cbz	r0, 8012048 <icmp_input+0x15c>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011ffe:	8933      	ldrh	r3, [r6, #8]
 8012000:	1959      	adds	r1, r3, r5
 8012002:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8012004:	428b      	cmp	r3, r1
 8012006:	d961      	bls.n	80120cc <icmp_input+0x1e0>
  pbuf_free(p);
 8012008:	4630      	mov	r0, r6
 801200a:	f7fa fd61 	bl	800cad0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801200e:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 8012012:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
  ICMP_STATS_INC(icmp.err);
 8012016:	3201      	adds	r2, #1
  MIB2_STATS_INC(mib2.icmpinerrors);
 8012018:	3301      	adds	r3, #1
  ICMP_STATS_INC(icmp.err);
 801201a:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 801201e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  return;
 8012022:	e7ab      	b.n	8011f7c <icmp_input+0x90>
        MIB2_STATS_INC(mib2.icmpinparmprobs);
 8012024:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
 8012028:	3301      	adds	r3, #1
 801202a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 801202e:	e7c4      	b.n	8011fba <icmp_input+0xce>
        MIB2_STATS_INC(mib2.icmpindestunreachs);
 8012030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012034:	3301      	adds	r3, #1
 8012036:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 801203a:	e7be      	b.n	8011fba <icmp_input+0xce>
        MIB2_STATS_INC(mib2.icmpintimeexcds);
 801203c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012040:	3301      	adds	r3, #1
 8012042:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
 8012046:	e7b8      	b.n	8011fba <icmp_input+0xce>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012048:	4659      	mov	r1, fp
 801204a:	4630      	mov	r0, r6
 801204c:	f7fa fd04 	bl	800ca58 <pbuf_remove_header>
 8012050:	2800      	cmp	r0, #0
 8012052:	d168      	bne.n	8012126 <icmp_input+0x23a>
      if (pbuf_add_header(p, hlen)) {
 8012054:	4629      	mov	r1, r5
 8012056:	4630      	mov	r0, r6
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012058:	f8d6 9004 	ldr.w	r9, [r6, #4]
      if (pbuf_add_header(p, hlen)) {
 801205c:	f7fa fcf8 	bl	800ca50 <pbuf_add_header>
 8012060:	4605      	mov	r5, r0
 8012062:	2800      	cmp	r0, #0
 8012064:	d1be      	bne.n	8011fe4 <icmp_input+0xf8>
        ip4_addr_copy(iphdr->src, *src);
 8012066:	f8da 3000 	ldr.w	r3, [sl]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801206a:	20ff      	movs	r0, #255	; 0xff
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801206c:	693a      	ldr	r2, [r7, #16]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801206e:	f04f 0e01 	mov.w	lr, #1
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012072:	6877      	ldr	r7, [r6, #4]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012074:	4651      	mov	r1, sl
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012076:	613a      	str	r2, [r7, #16]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012078:	462a      	mov	r2, r5
        ip4_addr_copy(iphdr->src, *src);
 801207a:	60fb      	str	r3, [r7, #12]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801207c:	4603      	mov	r3, r0
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801207e:	f889 5000 	strb.w	r5, [r9]
        iecho->chksum = 0;
 8012082:	f889 5002 	strb.w	r5, [r9, #2]
 8012086:	f889 5003 	strb.w	r5, [r9, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801208a:	7238      	strb	r0, [r7, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801208c:	4630      	mov	r0, r6
        ICMP_STATS_INC(icmp.xmit);
 801208e:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
 8012092:	f8d4 c1a8 	ldr.w	ip, [r4, #424]	; 0x1a8
        IPH_CHKSUM_SET(iphdr, 0);
 8012096:	72bd      	strb	r5, [r7, #10]
        ICMP_STATS_INC(icmp.xmit);
 8012098:	44f1      	add	r9, lr
        IPH_CHKSUM_SET(iphdr, 0);
 801209a:	72fd      	strb	r5, [r7, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
 801209c:	44f4      	add	ip, lr
        MIB2_STATS_INC(mib2.icmpoutechoreps);
 801209e:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80120a2:	f8cd 8008 	str.w	r8, [sp, #8]
        MIB2_STATS_INC(mib2.icmpoutechoreps);
 80120a6:	4477      	add	r7, lr
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80120a8:	9500      	str	r5, [sp, #0]
 80120aa:	f8cd e004 	str.w	lr, [sp, #4]
        ICMP_STATS_INC(icmp.xmit);
 80120ae:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
 80120b2:	f8c4 c1a8 	str.w	ip, [r4, #424]	; 0x1a8
        MIB2_STATS_INC(mib2.icmpoutechoreps);
 80120b6:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80120ba:	f000 facd 	bl	8012658 <ip4_output_if>
 80120be:	e791      	b.n	8011fe4 <icmp_input+0xf8>
        MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 80120c0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80120c4:	3301      	adds	r3, #1
 80120c6:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80120ca:	e776      	b.n	8011fba <icmp_input+0xce>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80120cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120d0:	200e      	movs	r0, #14
 80120d2:	f7fa fd71 	bl	800cbb8 <pbuf_alloc>
        if (r == NULL) {
 80120d6:	4683      	mov	fp, r0
 80120d8:	2800      	cmp	r0, #0
 80120da:	d095      	beq.n	8012008 <icmp_input+0x11c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80120dc:	8942      	ldrh	r2, [r0, #10]
 80120de:	f105 0308 	add.w	r3, r5, #8
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d32c      	bcc.n	8012140 <icmp_input+0x254>
        MEMCPY(r->payload, iphdr_in, hlen);
 80120e6:	4649      	mov	r1, r9
 80120e8:	462a      	mov	r2, r5
 80120ea:	6840      	ldr	r0, [r0, #4]
 80120ec:	f001 fbe3 	bl	80138b6 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80120f0:	4629      	mov	r1, r5
 80120f2:	4658      	mov	r0, fp
 80120f4:	f7fa fcb0 	bl	800ca58 <pbuf_remove_header>
 80120f8:	b1e0      	cbz	r0, 8012134 <icmp_input+0x248>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80120fa:	4b1d      	ldr	r3, [pc, #116]	; (8012170 <icmp_input+0x284>)
 80120fc:	22b6      	movs	r2, #182	; 0xb6
 80120fe:	491d      	ldr	r1, [pc, #116]	; (8012174 <icmp_input+0x288>)
 8012100:	481d      	ldr	r0, [pc, #116]	; (8012178 <icmp_input+0x28c>)
 8012102:	f001 fc93 	bl	8013a2c <iprintf>
          pbuf_free(r);
 8012106:	4658      	mov	r0, fp
 8012108:	f7fa fce2 	bl	800cad0 <pbuf_free>
          goto icmperr;
 801210c:	e77c      	b.n	8012008 <icmp_input+0x11c>
        MIB2_STATS_INC(mib2.icmpinredirects);
 801210e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8012112:	3301      	adds	r3, #1
 8012114:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8012118:	e74f      	b.n	8011fba <icmp_input+0xce>
        MIB2_STATS_INC(mib2.icmpintimestamps);
 801211a:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 801211e:	3301      	adds	r3, #1
 8012120:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
 8012124:	e749      	b.n	8011fba <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012126:	4b12      	ldr	r3, [pc, #72]	; (8012170 <icmp_input+0x284>)
 8012128:	22c7      	movs	r2, #199	; 0xc7
 801212a:	4914      	ldr	r1, [pc, #80]	; (801217c <icmp_input+0x290>)
 801212c:	4812      	ldr	r0, [pc, #72]	; (8012178 <icmp_input+0x28c>)
 801212e:	f001 fc7d 	bl	8013a2c <iprintf>
          goto icmperr;
 8012132:	e769      	b.n	8012008 <icmp_input+0x11c>
        if (pbuf_copy(r, p) != ERR_OK) {
 8012134:	4631      	mov	r1, r6
 8012136:	4658      	mov	r0, fp
 8012138:	f7fa feb6 	bl	800cea8 <pbuf_copy>
 801213c:	b178      	cbz	r0, 801215e <icmp_input+0x272>
          pbuf_free(r);
 801213e:	4658      	mov	r0, fp
 8012140:	f7fa fcc6 	bl	800cad0 <pbuf_free>
          goto icmperr;
 8012144:	e760      	b.n	8012008 <icmp_input+0x11c>
        MIB2_STATS_INC(mib2.icmpintimestampreps);
 8012146:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 801214a:	3301      	adds	r3, #1
 801214c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
 8012150:	e733      	b.n	8011fba <icmp_input+0xce>
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
 8012152:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8012156:	3301      	adds	r3, #1
 8012158:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 801215c:	e72d      	b.n	8011fba <icmp_input+0xce>
        pbuf_free(p);
 801215e:	4630      	mov	r0, r6
 8012160:	465e      	mov	r6, fp
 8012162:	f7fa fcb5 	bl	800cad0 <pbuf_free>
 8012166:	e775      	b.n	8012054 <icmp_input+0x168>
 8012168:	2401bdf8 	.word	0x2401bdf8
 801216c:	24014fec 	.word	0x24014fec
 8012170:	080165c0 	.word	0x080165c0
 8012174:	08016554 	.word	0x08016554
 8012178:	0801487c 	.word	0x0801487c
 801217c:	0801658c 	.word	0x0801658c

08012180 <icmp_dest_unreach>:
{
 8012180:	b410      	push	{r4}
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 8012182:	4c06      	ldr	r4, [pc, #24]	; (801219c <icmp_dest_unreach+0x1c>)
  icmp_send_response(p, ICMP_DUR, t);
 8012184:	460a      	mov	r2, r1
 8012186:	3004      	adds	r0, #4
 8012188:	2103      	movs	r1, #3
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 801218a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 801218e:	3301      	adds	r3, #1
 8012190:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
}
 8012194:	f85d 4b04 	ldr.w	r4, [sp], #4
  icmp_send_response(p, ICMP_DUR, t);
 8012198:	f7ff be36 	b.w	8011e08 <icmp_send_response.isra.0>
 801219c:	2401bdf8 	.word	0x2401bdf8

080121a0 <icmp_time_exceeded>:
{
 80121a0:	b410      	push	{r4}
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 80121a2:	4c06      	ldr	r4, [pc, #24]	; (80121bc <icmp_time_exceeded+0x1c>)
  icmp_send_response(p, ICMP_TE, t);
 80121a4:	460a      	mov	r2, r1
 80121a6:	3004      	adds	r0, #4
 80121a8:	210b      	movs	r1, #11
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 80121aa:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 80121ae:	3301      	adds	r3, #1
 80121b0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 80121b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  icmp_send_response(p, ICMP_TE, t);
 80121b8:	f7ff be26 	b.w	8011e08 <icmp_send_response.isra.0>
 80121bc:	2401bdf8 	.word	0x2401bdf8

080121c0 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 80121c0:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80121c2:	6843      	ldr	r3, [r0, #4]
 80121c4:	b16b      	cbz	r3, 80121e2 <ip4_input_accept.part.0+0x22>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80121c6:	4a08      	ldr	r2, [pc, #32]	; (80121e8 <ip4_input_accept.part.0+0x28>)
 80121c8:	6952      	ldr	r2, [r2, #20]
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d007      	beq.n	80121de <ip4_input_accept.part.0+0x1e>
 80121ce:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80121d0:	4610      	mov	r0, r2
 80121d2:	f000 fa53 	bl	801267c <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80121d6:	3000      	adds	r0, #0
 80121d8:	bf18      	it	ne
 80121da:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 80121dc:	bd08      	pop	{r3, pc}
      return 1;
 80121de:	2001      	movs	r0, #1
}
 80121e0:	bd08      	pop	{r3, pc}
  return 0;
 80121e2:	4618      	mov	r0, r3
}
 80121e4:	bd08      	pop	{r3, pc}
 80121e6:	bf00      	nop
 80121e8:	24014fec 	.word	0x24014fec

080121ec <ip4_route>:
  NETIF_FOREACH(netif) {
 80121ec:	4b1b      	ldr	r3, [pc, #108]	; (801225c <ip4_route+0x70>)
{
 80121ee:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	b1ab      	cbz	r3, 8012220 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80121f4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80121f8:	07d4      	lsls	r4, r2, #31
 80121fa:	d5f9      	bpl.n	80121f0 <ip4_route+0x4>
 80121fc:	0751      	lsls	r1, r2, #29
 80121fe:	d5f7      	bpl.n	80121f0 <ip4_route+0x4>
 8012200:	6859      	ldr	r1, [r3, #4]
 8012202:	2900      	cmp	r1, #0
 8012204:	d0f4      	beq.n	80121f0 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012206:	6804      	ldr	r4, [r0, #0]
 8012208:	689d      	ldr	r5, [r3, #8]
 801220a:	4061      	eors	r1, r4
 801220c:	4229      	tst	r1, r5
 801220e:	d004      	beq.n	801221a <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012210:	0792      	lsls	r2, r2, #30
 8012212:	d4ed      	bmi.n	80121f0 <ip4_route+0x4>
 8012214:	68da      	ldr	r2, [r3, #12]
 8012216:	4294      	cmp	r4, r2
 8012218:	d1ea      	bne.n	80121f0 <ip4_route+0x4>
}
 801221a:	4618      	mov	r0, r3
 801221c:	bc30      	pop	{r4, r5}
 801221e:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012220:	4b0f      	ldr	r3, [pc, #60]	; (8012260 <ip4_route+0x74>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	b153      	cbz	r3, 801223c <ip4_route+0x50>
 8012226:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801222a:	f002 0205 	and.w	r2, r2, #5
 801222e:	2a05      	cmp	r2, #5
 8012230:	d104      	bne.n	801223c <ip4_route+0x50>
 8012232:	685a      	ldr	r2, [r3, #4]
 8012234:	b112      	cbz	r2, 801223c <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012236:	7802      	ldrb	r2, [r0, #0]
 8012238:	2a7f      	cmp	r2, #127	; 0x7f
 801223a:	d1ee      	bne.n	801221a <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801223c:	4a09      	ldr	r2, [pc, #36]	; (8012264 <ip4_route+0x78>)
    return NULL;
 801223e:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 8012240:	f8b2 0056 	ldrh.w	r0, [r2, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 8012244:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
    IP_STATS_INC(ip.rterr);
 8012248:	3001      	adds	r0, #1
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 801224a:	3101      	adds	r1, #1
    IP_STATS_INC(ip.rterr);
 801224c:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
}
 8012250:	4618      	mov	r0, r3
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 8012252:	f8c2 111c 	str.w	r1, [r2, #284]	; 0x11c
}
 8012256:	bc30      	pop	{r4, r5}
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	2401bdec 	.word	0x2401bdec
 8012260:	2401bdf0 	.word	0x2401bdf0
 8012264:	2401bdf8 	.word	0x2401bdf8

08012268 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801226c:	4caa      	ldr	r4, [pc, #680]	; (8012518 <ip4_input+0x2b0>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801226e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 8012272:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 8012276:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
  IP_STATS_INC(ip.recv);
 801227a:	3201      	adds	r2, #1
  MIB2_STATS_INC(mib2.ipinreceives);
 801227c:	3301      	adds	r3, #1
  IP_STATS_INC(ip.recv);
 801227e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 8012282:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
  if (IPH_V(iphdr) != 4) {
 8012286:	f898 3000 	ldrb.w	r3, [r8]
 801228a:	091a      	lsrs	r2, r3, #4
 801228c:	2a04      	cmp	r2, #4
 801228e:	d013      	beq.n	80122b8 <ip4_input+0x50>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012290:	f7fa fc1e 	bl	800cad0 <pbuf_free>
    IP_STATS_INC(ip.err);
 8012294:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8012298:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801229c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    IP_STATS_INC(ip.err);
 80122a0:	3101      	adds	r1, #1
    IP_STATS_INC(ip.drop);
 80122a2:	3201      	adds	r2, #1
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 80122a4:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 80122a6:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 80122aa:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 80122ae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80122b2:	2000      	movs	r0, #0
 80122b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80122b8:	f003 030f 	and.w	r3, r3, #15
 80122bc:	4606      	mov	r6, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80122be:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80122c2:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80122c4:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80122c6:	f7f9 fb63 	bl	800b990 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80122ca:	8933      	ldrh	r3, [r6, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80122cc:	4681      	mov	r9, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80122ce:	fa1f fa85 	uxth.w	sl, r5
  if (iphdr_len < p->tot_len) {
 80122d2:	4283      	cmp	r3, r0
 80122d4:	f200 80bc 	bhi.w	8012450 <ip4_input+0x1e8>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80122d8:	8973      	ldrh	r3, [r6, #10]
 80122da:	4553      	cmp	r3, sl
 80122dc:	f0c0 80a3 	bcc.w	8012426 <ip4_input+0x1be>
 80122e0:	8933      	ldrh	r3, [r6, #8]
 80122e2:	454b      	cmp	r3, r9
 80122e4:	f0c0 809f 	bcc.w	8012426 <ip4_input+0x1be>
 80122e8:	f1ba 0f13 	cmp.w	sl, #19
 80122ec:	f240 809b 	bls.w	8012426 <ip4_input+0x1be>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80122f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80122f4:	f8df a228 	ldr.w	sl, [pc, #552]	; 8012520 <ip4_input+0x2b8>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80122f8:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80122fc:	f897 9031 	ldrb.w	r9, [r7, #49]	; 0x31
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012300:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012304:	29e0      	cmp	r1, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012306:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801230a:	f009 0201 	and.w	r2, r9, #1
 801230e:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012312:	f000 80bd 	beq.w	8012490 <ip4_input+0x228>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012316:	2a00      	cmp	r2, #0
 8012318:	f040 809f 	bne.w	801245a <ip4_input+0x1f2>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801231c:	b2db      	uxtb	r3, r3
 801231e:	2b7f      	cmp	r3, #127	; 0x7f
 8012320:	f000 80be 	beq.w	80124a0 <ip4_input+0x238>
        NETIF_FOREACH(netif) {
 8012324:	4b7d      	ldr	r3, [pc, #500]	; (801251c <ip4_input+0x2b4>)
 8012326:	f8d3 9000 	ldr.w	r9, [r3]
 801232a:	f1b9 0f00 	cmp.w	r9, #0
 801232e:	d105      	bne.n	801233c <ip4_input+0xd4>
 8012330:	e0b6      	b.n	80124a0 <ip4_input+0x238>
 8012332:	f8d9 9000 	ldr.w	r9, [r9]
 8012336:	f1b9 0f00 	cmp.w	r9, #0
 801233a:	d00a      	beq.n	8012352 <ip4_input+0xea>
          if (netif == inp) {
 801233c:	454f      	cmp	r7, r9
 801233e:	d0f8      	beq.n	8012332 <ip4_input+0xca>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012340:	f899 3031 	ldrb.w	r3, [r9, #49]	; 0x31
 8012344:	07db      	lsls	r3, r3, #31
 8012346:	d5f4      	bpl.n	8012332 <ip4_input+0xca>
 8012348:	4648      	mov	r0, r9
 801234a:	f7ff ff39 	bl	80121c0 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 801234e:	2800      	cmp	r0, #0
 8012350:	d0ef      	beq.n	8012332 <ip4_input+0xca>
 8012352:	f8da 0010 	ldr.w	r0, [sl, #16]
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012356:	4639      	mov	r1, r7
 8012358:	f000 f990 	bl	801267c <ip4_addr_isbroadcast_u32>
 801235c:	2800      	cmp	r0, #0
 801235e:	f040 8084 	bne.w	801246a <ip4_input+0x202>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012362:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801236a:	2be0      	cmp	r3, #224	; 0xe0
 801236c:	d07d      	beq.n	801246a <ip4_input+0x202>
  if (netif == NULL) {
 801236e:	f1b9 0f00 	cmp.w	r9, #0
 8012372:	f000 80bd 	beq.w	80124f0 <ip4_input+0x288>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012376:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801237a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801237e:	b13b      	cbz	r3, 8012390 <ip4_input+0x128>
    p = ip4_reass(p);
 8012380:	4630      	mov	r0, r6
 8012382:	f000 fad5 	bl	8012930 <ip4_reass>
    if (p == NULL) {
 8012386:	4606      	mov	r6, r0
 8012388:	2800      	cmp	r0, #0
 801238a:	d092      	beq.n	80122b2 <ip4_input+0x4a>
    iphdr = (const struct ip_hdr *)p->payload;
 801238c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8012390:	f8ca 9000 	str.w	r9, [sl]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012394:	4629      	mov	r1, r5
  ip_data.current_input_netif = inp;
 8012396:	f8ca 7004 	str.w	r7, [sl, #4]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801239a:	4630      	mov	r0, r6
  ip_data.current_ip4_header = iphdr;
 801239c:	f8ca 8008 	str.w	r8, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80123a0:	f898 3000 	ldrb.w	r3, [r8]
 80123a4:	f003 030f 	and.w	r3, r3, #15
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	f8aa 300c 	strh.w	r3, [sl, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80123ae:	f7fa fb53 	bl	800ca58 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80123b2:	f898 3009 	ldrb.w	r3, [r8, #9]
 80123b6:	2b06      	cmp	r3, #6
 80123b8:	f000 8090 	beq.w	80124dc <ip4_input+0x274>
 80123bc:	2b11      	cmp	r3, #17
 80123be:	f000 8083 	beq.w	80124c8 <ip4_input+0x260>
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d076      	beq.n	80124b4 <ip4_input+0x24c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80123c6:	4649      	mov	r1, r9
 80123c8:	f8da 0014 	ldr.w	r0, [sl, #20]
 80123cc:	f000 f956 	bl	801267c <ip4_addr_isbroadcast_u32>
 80123d0:	b968      	cbnz	r0, 80123ee <ip4_input+0x186>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123d2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80123d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80123da:	2be0      	cmp	r3, #224	; 0xe0
 80123dc:	d007      	beq.n	80123ee <ip4_input+0x186>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80123de:	4629      	mov	r1, r5
 80123e0:	4630      	mov	r0, r6
 80123e2:	f7fa fb6d 	bl	800cac0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80123e6:	2102      	movs	r1, #2
 80123e8:	4630      	mov	r0, r6
 80123ea:	f7ff fec9 	bl	8012180 <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 80123ee:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        pbuf_free(p);
 80123f2:	4630      	mov	r0, r6
          IP_STATS_INC(ip.drop);
 80123f4:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
 80123f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
          IP_STATS_INC(ip.proterr);
 80123fc:	3101      	adds	r1, #1
          IP_STATS_INC(ip.drop);
 80123fe:	3201      	adds	r2, #1
          MIB2_STATS_INC(mib2.ipinunknownprotos);
 8012400:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 8012402:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8012406:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
 801240a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        pbuf_free(p);
 801240e:	f7fa fb5f 	bl	800cad0 <pbuf_free>
  ip_data.current_netif = NULL;
 8012412:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8012414:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 8012418:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 801241c:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012420:	e9ca 3304 	strd	r3, r3, [sl, #16]
  return ERR_OK;
 8012424:	e745      	b.n	80122b2 <ip4_input+0x4a>
    pbuf_free(p);
 8012426:	4630      	mov	r0, r6
 8012428:	f7fa fb52 	bl	800cad0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801242c:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8012430:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
}
 8012434:	2000      	movs	r0, #0
    MIB2_STATS_INC(mib2.ipindiscards);
 8012436:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    IP_STATS_INC(ip.lenerr);
 801243a:	3101      	adds	r1, #1
    IP_STATS_INC(ip.drop);
 801243c:	3201      	adds	r2, #1
    MIB2_STATS_INC(mib2.ipindiscards);
 801243e:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 8012440:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8012444:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 8012448:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
 801244c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8012450:	4601      	mov	r1, r0
 8012452:	4630      	mov	r0, r6
 8012454:	f7fa fc54 	bl	800cd00 <pbuf_realloc>
 8012458:	e73e      	b.n	80122d8 <ip4_input+0x70>
 801245a:	4638      	mov	r0, r7
 801245c:	f7ff feb0 	bl	80121c0 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 8012460:	b328      	cbz	r0, 80124ae <ip4_input+0x246>
 8012462:	f8da 0010 	ldr.w	r0, [sl, #16]
 8012466:	46b9      	mov	r9, r7
 8012468:	e775      	b.n	8012356 <ip4_input+0xee>
      pbuf_free(p);
 801246a:	4630      	mov	r0, r6
 801246c:	f7fa fb30 	bl	800cad0 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8012470:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 8012474:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
      MIB2_STATS_INC(mib2.ipindiscards);
 8012478:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
      IP_STATS_INC(ip.drop);
 801247c:	3101      	adds	r1, #1
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801247e:	3201      	adds	r2, #1
      MIB2_STATS_INC(mib2.ipindiscards);
 8012480:	3301      	adds	r3, #1
      IP_STATS_INC(ip.drop);
 8012482:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 8012486:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
      MIB2_STATS_INC(mib2.ipindiscards);
 801248a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
      return ERR_OK;
 801248e:	e710      	b.n	80122b2 <ip4_input+0x4a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012490:	b15a      	cbz	r2, 80124aa <ip4_input+0x242>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	bf14      	ite	ne
 8012498:	46b9      	movne	r9, r7
 801249a:	f04f 0900 	moveq.w	r9, #0
 801249e:	e75a      	b.n	8012356 <ip4_input+0xee>
 80124a0:	f8da 0010 	ldr.w	r0, [sl, #16]
      netif = NULL;
 80124a4:	f04f 0900 	mov.w	r9, #0
 80124a8:	e755      	b.n	8012356 <ip4_input+0xee>
      netif = NULL;
 80124aa:	4691      	mov	r9, r2
 80124ac:	e753      	b.n	8012356 <ip4_input+0xee>
 80124ae:	f8da 3014 	ldr.w	r3, [sl, #20]
 80124b2:	e733      	b.n	801231c <ip4_input+0xb4>
        MIB2_STATS_INC(mib2.ipindelivers);
 80124b4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
        icmp_input(p, inp);
 80124b8:	4639      	mov	r1, r7
 80124ba:	4630      	mov	r0, r6
        MIB2_STATS_INC(mib2.ipindelivers);
 80124bc:	3301      	adds	r3, #1
 80124be:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        icmp_input(p, inp);
 80124c2:	f7ff fd13 	bl	8011eec <icmp_input>
        break;
 80124c6:	e7a4      	b.n	8012412 <ip4_input+0x1aa>
        MIB2_STATS_INC(mib2.ipindelivers);
 80124c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
        udp_input(p, inp);
 80124cc:	4639      	mov	r1, r7
 80124ce:	4630      	mov	r0, r6
        MIB2_STATS_INC(mib2.ipindelivers);
 80124d0:	3301      	adds	r3, #1
 80124d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        udp_input(p, inp);
 80124d6:	f7fe fc9d 	bl	8010e14 <udp_input>
        break;
 80124da:	e79a      	b.n	8012412 <ip4_input+0x1aa>
        MIB2_STATS_INC(mib2.ipindelivers);
 80124dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
        tcp_input(p, inp);
 80124e0:	4639      	mov	r1, r7
 80124e2:	4630      	mov	r0, r6
        MIB2_STATS_INC(mib2.ipindelivers);
 80124e4:	3301      	adds	r3, #1
 80124e6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        tcp_input(p, inp);
 80124ea:	f7fc fd67 	bl	800efbc <tcp_input>
        break;
 80124ee:	e790      	b.n	8012412 <ip4_input+0x1aa>
      IP_STATS_INC(ip.drop);
 80124f0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    pbuf_free(p);
 80124f4:	4630      	mov	r0, r6
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 80124f6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
      MIB2_STATS_INC(mib2.ipindiscards);
 80124fa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
      IP_STATS_INC(ip.drop);
 80124fe:	3101      	adds	r1, #1
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 8012500:	3201      	adds	r2, #1
      MIB2_STATS_INC(mib2.ipindiscards);
 8012502:	3301      	adds	r3, #1
      IP_STATS_INC(ip.drop);
 8012504:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 8012508:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
      MIB2_STATS_INC(mib2.ipindiscards);
 801250c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    pbuf_free(p);
 8012510:	f7fa fade 	bl	800cad0 <pbuf_free>
    return ERR_OK;
 8012514:	e6cd      	b.n	80122b2 <ip4_input+0x4a>
 8012516:	bf00      	nop
 8012518:	2401bdf8 	.word	0x2401bdf8
 801251c:	2401bdec 	.word	0x2401bdec
 8012520:	24014fec 	.word	0x24014fec

08012524 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012528:	469b      	mov	fp, r3
 801252a:	b085      	sub	sp, #20
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801252c:	7b83      	ldrb	r3, [r0, #14]
{
 801252e:	4617      	mov	r7, r2
 8012530:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8012534:	4605      	mov	r5, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012536:	2b01      	cmp	r3, #1
{
 8012538:	4689      	mov	r9, r1
 801253a:	9201      	str	r2, [sp, #4]
 801253c:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 8012540:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012544:	d006      	beq.n	8012554 <ip4_output_if_src+0x30>
 8012546:	4b3d      	ldr	r3, [pc, #244]	; (801263c <ip4_output_if_src+0x118>)
 8012548:	f44f 7255 	mov.w	r2, #852	; 0x354
 801254c:	493c      	ldr	r1, [pc, #240]	; (8012640 <ip4_output_if_src+0x11c>)
 801254e:	483d      	ldr	r0, [pc, #244]	; (8012644 <ip4_output_if_src+0x120>)
 8012550:	f001 fa6c 	bl	8013a2c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 8012554:	4e3c      	ldr	r6, [pc, #240]	; (8012648 <ip4_output_if_src+0x124>)
 8012556:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 801255a:	3301      	adds	r3, #1
 801255c:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012560:	2f00      	cmp	r7, #0
 8012562:	d040      	beq.n	80125e6 <ip4_output_if_src+0xc2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012564:	2114      	movs	r1, #20
 8012566:	4628      	mov	r0, r5
 8012568:	f7fa fa72 	bl	800ca50 <pbuf_add_header>
 801256c:	2800      	cmp	r0, #0
 801256e:	d158      	bne.n	8012622 <ip4_output_if_src+0xfe>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012570:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8012572:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012574:	2b13      	cmp	r3, #19
 8012576:	d93f      	bls.n	80125f8 <ip4_output_if_src+0xd4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8012578:	f884 a009 	strb.w	sl, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801257c:	2345      	movs	r3, #69	; 0x45
    IPH_TTL_SET(iphdr, ttl);
 801257e:	f884 b008 	strb.w	fp, [r4, #8]
    ip4_addr_copy(iphdr->dest, *dest);
 8012582:	683a      	ldr	r2, [r7, #0]
    IPH_TOS_SET(iphdr, tos);
 8012584:	9901      	ldr	r1, [sp, #4]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012586:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8012588:	7061      	strb	r1, [r4, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 801258a:	6122      	str	r2, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801258c:	8928      	ldrh	r0, [r5, #8]
 801258e:	f7f9 f9ff 	bl	800b990 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012592:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8012654 <ip4_output_if_src+0x130>
    IPH_OFFSET_SET(iphdr, 0);
 8012596:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012598:	8060      	strh	r0, [r4, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801259a:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 801259e:	71a3      	strb	r3, [r4, #6]
 80125a0:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80125a2:	f7f9 f9f5 	bl	800b990 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80125a6:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80125aa:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80125ac:	3301      	adds	r3, #1
 80125ae:	f8aa 3000 	strh.w	r3, [sl]

    if (src == NULL) {
 80125b2:	f1b9 0f00 	cmp.w	r9, #0
 80125b6:	d027      	beq.n	8012608 <ip4_output_if_src+0xe4>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80125b8:	f8d9 3000 	ldr.w	r3, [r9]
 80125bc:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80125be:	2300      	movs	r3, #0
 80125c0:	72a3      	strb	r3, [r4, #10]
 80125c2:	72e3      	strb	r3, [r4, #11]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 80125c4:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80125c8:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
  IP_STATS_INC(ip.xmit);
 80125cc:	3301      	adds	r3, #1
 80125ce:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80125d2:	b9ea      	cbnz	r2, 8012610 <ip4_output_if_src+0xec>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80125d4:	463a      	mov	r2, r7
 80125d6:	4629      	mov	r1, r5
 80125d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80125dc:	4640      	mov	r0, r8
 80125de:	4798      	blx	r3
}
 80125e0:	b005      	add	sp, #20
 80125e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p->len < IP_HLEN) {
 80125e6:	896b      	ldrh	r3, [r5, #10]
 80125e8:	2b13      	cmp	r3, #19
 80125ea:	d91a      	bls.n	8012622 <ip4_output_if_src+0xfe>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80125ec:	686b      	ldr	r3, [r5, #4]
 80125ee:	af04      	add	r7, sp, #16
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	f847 3d04 	str.w	r3, [r7, #-4]!
 80125f6:	e7e5      	b.n	80125c4 <ip4_output_if_src+0xa0>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80125f8:	4b10      	ldr	r3, [pc, #64]	; (801263c <ip4_output_if_src+0x118>)
 80125fa:	f240 3289 	movw	r2, #905	; 0x389
 80125fe:	4913      	ldr	r1, [pc, #76]	; (801264c <ip4_output_if_src+0x128>)
 8012600:	4810      	ldr	r0, [pc, #64]	; (8012644 <ip4_output_if_src+0x120>)
 8012602:	f001 fa13 	bl	8013a2c <iprintf>
 8012606:	e7b7      	b.n	8012578 <ip4_output_if_src+0x54>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012608:	4b11      	ldr	r3, [pc, #68]	; (8012650 <ip4_output_if_src+0x12c>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	60e3      	str	r3, [r4, #12]
 801260e:	e7d6      	b.n	80125be <ip4_output_if_src+0x9a>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012610:	892b      	ldrh	r3, [r5, #8]
 8012612:	4293      	cmp	r3, r2
 8012614:	d9de      	bls.n	80125d4 <ip4_output_if_src+0xb0>
    return ip4_frag(p, netif, dest);
 8012616:	463a      	mov	r2, r7
 8012618:	4641      	mov	r1, r8
 801261a:	4628      	mov	r0, r5
 801261c:	f000 fbda 	bl	8012dd4 <ip4_frag>
 8012620:	e7de      	b.n	80125e0 <ip4_output_if_src+0xbc>
      IP_STATS_INC(ip.err);
 8012622:	f8b6 205c 	ldrh.w	r2, [r6, #92]	; 0x5c
      return ERR_BUF;
 8012626:	f06f 0001 	mvn.w	r0, #1
      MIB2_STATS_INC(mib2.ipoutdiscards);
 801262a:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
      IP_STATS_INC(ip.err);
 801262e:	3201      	adds	r2, #1
      MIB2_STATS_INC(mib2.ipoutdiscards);
 8012630:	3301      	adds	r3, #1
      IP_STATS_INC(ip.err);
 8012632:	f8a6 205c 	strh.w	r2, [r6, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 8012636:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
      return ERR_BUF;
 801263a:	e7d1      	b.n	80125e0 <ip4_output_if_src+0xbc>
 801263c:	08016624 	.word	0x08016624
 8012640:	08016658 	.word	0x08016658
 8012644:	0801487c 	.word	0x0801487c
 8012648:	2401bdf8 	.word	0x2401bdf8
 801264c:	08016664 	.word	0x08016664
 8012650:	08016694 	.word	0x08016694
 8012654:	24014166 	.word	0x24014166

08012658 <ip4_output_if>:
{
 8012658:	b4f0      	push	{r4, r5, r6, r7}
 801265a:	9c06      	ldr	r4, [sp, #24]
 801265c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8012660:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012664:	b11a      	cbz	r2, 801266e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8012666:	b109      	cbz	r1, 801266c <ip4_output_if+0x14>
 8012668:	680f      	ldr	r7, [r1, #0]
 801266a:	b907      	cbnz	r7, 801266e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801266c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801266e:	9504      	str	r5, [sp, #16]
 8012670:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8012674:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012676:	f7ff bf55 	b.w	8012524 <ip4_output_if_src>
 801267a:	bf00      	nop

0801267c <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801267c:	1e43      	subs	r3, r0, #1
 801267e:	3303      	adds	r3, #3
 8012680:	d814      	bhi.n	80126ac <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012682:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8012686:	f013 0302 	ands.w	r3, r3, #2
 801268a:	d00d      	beq.n	80126a8 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801268c:	684b      	ldr	r3, [r1, #4]
 801268e:	4283      	cmp	r3, r0
 8012690:	d00a      	beq.n	80126a8 <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012692:	688a      	ldr	r2, [r1, #8]
 8012694:	4043      	eors	r3, r0
 8012696:	4213      	tst	r3, r2
 8012698:	d106      	bne.n	80126a8 <ip4_addr_isbroadcast_u32+0x2c>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801269a:	43d2      	mvns	r2, r2
 801269c:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 80126a0:	bf0c      	ite	eq
 80126a2:	2001      	moveq	r0, #1
 80126a4:	2000      	movne	r0, #0
 80126a6:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80126a8:	2000      	movs	r0, #0
  }
}
 80126aa:	4770      	bx	lr
    return 1;
 80126ac:	2001      	movs	r0, #1
 80126ae:	4770      	bx	lr

080126b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80126b0:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80126b2:	4b0f      	ldr	r3, [pc, #60]	; (80126f0 <ip_reass_dequeue_datagram+0x40>)
{
 80126b4:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	4282      	cmp	r2, r0
 80126ba:	d009      	beq.n	80126d0 <ip_reass_dequeue_datagram+0x20>
 80126bc:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80126be:	b179      	cbz	r1, 80126e0 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 80126c0:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80126c2:	4621      	mov	r1, r4
 80126c4:	2004      	movs	r0, #4
    prev->next = ipr->next;
 80126c6:	602b      	str	r3, [r5, #0]
}
 80126c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80126cc:	f7f9 bf1e 	b.w	800c50c <memp_free>
    reassdatagrams = ipr->next;
 80126d0:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80126d2:	4621      	mov	r1, r4
 80126d4:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 80126d6:	601a      	str	r2, [r3, #0]
}
 80126d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80126dc:	f7f9 bf16 	b.w	800c50c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80126e0:	4b04      	ldr	r3, [pc, #16]	; (80126f4 <ip_reass_dequeue_datagram+0x44>)
 80126e2:	f240 1245 	movw	r2, #325	; 0x145
 80126e6:	4904      	ldr	r1, [pc, #16]	; (80126f8 <ip_reass_dequeue_datagram+0x48>)
 80126e8:	4804      	ldr	r0, [pc, #16]	; (80126fc <ip_reass_dequeue_datagram+0x4c>)
 80126ea:	f001 f99f 	bl	8013a2c <iprintf>
 80126ee:	e7e7      	b.n	80126c0 <ip_reass_dequeue_datagram+0x10>
 80126f0:	2401416c 	.word	0x2401416c
 80126f4:	08016774 	.word	0x08016774
 80126f8:	080167b0 	.word	0x080167b0
 80126fc:	0801487c 	.word	0x0801487c

08012700 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012700:	4281      	cmp	r1, r0
{
 8012702:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012706:	4606      	mov	r6, r0
 8012708:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801270a:	d071      	beq.n	80127f0 <ip_reass_free_complete_datagram+0xf0>
  if (prev != NULL) {
 801270c:	b147      	cbz	r7, 8012720 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	42b3      	cmp	r3, r6
 8012712:	d005      	beq.n	8012720 <ip_reass_free_complete_datagram+0x20>
 8012714:	4b3a      	ldr	r3, [pc, #232]	; (8012800 <ip_reass_free_complete_datagram+0x100>)
 8012716:	22ad      	movs	r2, #173	; 0xad
 8012718:	493a      	ldr	r1, [pc, #232]	; (8012804 <ip_reass_free_complete_datagram+0x104>)
 801271a:	483b      	ldr	r0, [pc, #236]	; (8012808 <ip_reass_free_complete_datagram+0x108>)
 801271c:	f001 f986 	bl	8013a2c <iprintf>
  MIB2_STATS_INC(mib2.ipreasmfails);
 8012720:	493a      	ldr	r1, [pc, #232]	; (801280c <ip_reass_free_complete_datagram+0x10c>)
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012722:	6874      	ldr	r4, [r6, #4]
  MIB2_STATS_INC(mib2.ipreasmfails);
 8012724:	f8d1 3124 	ldr.w	r3, [r1, #292]	; 0x124
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012728:	6862      	ldr	r2, [r4, #4]
  MIB2_STATS_INC(mib2.ipreasmfails);
 801272a:	3301      	adds	r3, #1
 801272c:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
  if (iprh->start == 0) {
 8012730:	8893      	ldrh	r3, [r2, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d039      	beq.n	80127aa <ip_reass_free_complete_datagram+0xaa>
  u16_t pbufs_freed = 0;
 8012736:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801273a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012800 <ip_reass_free_complete_datagram+0x100>
 801273e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801281c <ip_reass_free_complete_datagram+0x11c>
 8012742:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8012808 <ip_reass_free_complete_datagram+0x108>
 8012746:	e004      	b.n	8012752 <ip_reass_free_complete_datagram+0x52>
    pbuf_free(pcur);
 8012748:	4620      	mov	r0, r4
  while (p != NULL) {
 801274a:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801274c:	f7fa f9c0 	bl	800cad0 <pbuf_free>
  while (p != NULL) {
 8012750:	b1b5      	cbz	r5, 8012780 <ip_reass_free_complete_datagram+0x80>
    iprh = (struct ip_reass_helper *)p->payload;
 8012752:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8012754:	4620      	mov	r0, r4
    p = iprh->next_pbuf;
 8012756:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 8012758:	f7fa fb2e 	bl	800cdb8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801275c:	4483      	add	fp, r0
 801275e:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012762:	fa1f fb8b 	uxth.w	fp, fp
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012766:	dbef      	blt.n	8012748 <ip_reass_free_complete_datagram+0x48>
 8012768:	4653      	mov	r3, sl
 801276a:	22cc      	movs	r2, #204	; 0xcc
 801276c:	4649      	mov	r1, r9
 801276e:	4640      	mov	r0, r8
 8012770:	f001 f95c 	bl	8013a2c <iprintf>
    pbuf_free(pcur);
 8012774:	4620      	mov	r0, r4
  while (p != NULL) {
 8012776:	462c      	mov	r4, r5
    pbuf_free(pcur);
 8012778:	f7fa f9aa 	bl	800cad0 <pbuf_free>
  while (p != NULL) {
 801277c:	2d00      	cmp	r5, #0
 801277e:	d1e8      	bne.n	8012752 <ip_reass_free_complete_datagram+0x52>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012780:	4c23      	ldr	r4, [pc, #140]	; (8012810 <ip_reass_free_complete_datagram+0x110>)
  ip_reass_dequeue_datagram(ipr, prev);
 8012782:	4639      	mov	r1, r7
 8012784:	4630      	mov	r0, r6
 8012786:	f7ff ff93 	bl	80126b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801278a:	8823      	ldrh	r3, [r4, #0]
 801278c:	455b      	cmp	r3, fp
 801278e:	d206      	bcs.n	801279e <ip_reass_free_complete_datagram+0x9e>
 8012790:	4b1b      	ldr	r3, [pc, #108]	; (8012800 <ip_reass_free_complete_datagram+0x100>)
 8012792:	22d2      	movs	r2, #210	; 0xd2
 8012794:	491f      	ldr	r1, [pc, #124]	; (8012814 <ip_reass_free_complete_datagram+0x114>)
 8012796:	481c      	ldr	r0, [pc, #112]	; (8012808 <ip_reass_free_complete_datagram+0x108>)
 8012798:	f001 f948 	bl	8013a2c <iprintf>
 801279c:	8823      	ldrh	r3, [r4, #0]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801279e:	eba3 030b 	sub.w	r3, r3, fp
}
 80127a2:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80127a4:	8023      	strh	r3, [r4, #0]
}
 80127a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80127aa:	4633      	mov	r3, r6
    ipr->p = iprh->next_pbuf;
 80127ac:	6810      	ldr	r0, [r2, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80127ae:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 80127b0:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80127b2:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80127b4:	f853 5f08 	ldr.w	r5, [r3, #8]!
 80127b8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80127bc:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80127c0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80127c4:	6015      	str	r5, [r2, #0]
 80127c6:	f8c2 8004 	str.w	r8, [r2, #4]
 80127ca:	f8c2 e008 	str.w	lr, [r2, #8]
 80127ce:	f8c2 c00c 	str.w	ip, [r2, #12]
 80127d2:	691d      	ldr	r5, [r3, #16]
 80127d4:	6115      	str	r5, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80127d6:	f7ff fce3 	bl	80121a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80127da:	4620      	mov	r0, r4
 80127dc:	f7fa faec 	bl	800cdb8 <pbuf_clen>
 80127e0:	4683      	mov	fp, r0
    pbuf_free(p);
 80127e2:	4620      	mov	r0, r4
 80127e4:	f7fa f974 	bl	800cad0 <pbuf_free>
 80127e8:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 80127ea:	2c00      	cmp	r4, #0
 80127ec:	d1a5      	bne.n	801273a <ip_reass_free_complete_datagram+0x3a>
 80127ee:	e7c7      	b.n	8012780 <ip_reass_free_complete_datagram+0x80>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80127f0:	4b03      	ldr	r3, [pc, #12]	; (8012800 <ip_reass_free_complete_datagram+0x100>)
 80127f2:	22ab      	movs	r2, #171	; 0xab
 80127f4:	4908      	ldr	r1, [pc, #32]	; (8012818 <ip_reass_free_complete_datagram+0x118>)
 80127f6:	4804      	ldr	r0, [pc, #16]	; (8012808 <ip_reass_free_complete_datagram+0x108>)
 80127f8:	f001 f918 	bl	8013a2c <iprintf>
 80127fc:	e786      	b.n	801270c <ip_reass_free_complete_datagram+0xc>
 80127fe:	bf00      	nop
 8012800:	08016774 	.word	0x08016774
 8012804:	080167d8 	.word	0x080167d8
 8012808:	0801487c 	.word	0x0801487c
 801280c:	2401bdf8 	.word	0x2401bdf8
 8012810:	24014168 	.word	0x24014168
 8012814:	0801680c 	.word	0x0801680c
 8012818:	080167cc 	.word	0x080167cc
 801281c:	080167ec 	.word	0x080167ec

08012820 <ip_reass_remove_oldest_datagram>:
{
 8012820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012824:	4605      	mov	r5, r0
 8012826:	460e      	mov	r6, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8012828:	2700      	movs	r7, #0
 801282a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8012890 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801282e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8012832:	b1f3      	cbz	r3, 8012872 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8012834:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012836:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801283a:	4621      	mov	r1, r4
    prev = NULL;
 801283c:	46a4      	mov	ip, r4
    oldest = NULL;
 801283e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012840:	695a      	ldr	r2, [r3, #20]
 8012842:	4572      	cmp	r2, lr
 8012844:	d018      	beq.n	8012878 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8012846:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8012848:	b120      	cbz	r0, 8012854 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801284a:	f893 901f 	ldrb.w	r9, [r3, #31]
 801284e:	7fc2      	ldrb	r2, [r0, #31]
 8012850:	4591      	cmp	r9, r2
 8012852:	d801      	bhi.n	8012858 <ip_reass_remove_oldest_datagram+0x38>
 8012854:	4661      	mov	r1, ip
 8012856:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	469c      	mov	ip, r3
 801285c:	4613      	mov	r3, r2
 801285e:	2a00      	cmp	r2, #0
 8012860:	d1ee      	bne.n	8012840 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8012862:	b110      	cbz	r0, 801286a <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012864:	f7ff ff4c 	bl	8012700 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8012868:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801286a:	42b7      	cmp	r7, r6
 801286c:	da01      	bge.n	8012872 <ip_reass_remove_oldest_datagram+0x52>
 801286e:	2c01      	cmp	r4, #1
 8012870:	dcdd      	bgt.n	801282e <ip_reass_remove_oldest_datagram+0xe>
}
 8012872:	4638      	mov	r0, r7
 8012874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012878:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801287c:	699a      	ldr	r2, [r3, #24]
 801287e:	454a      	cmp	r2, r9
 8012880:	d1e1      	bne.n	8012846 <ip_reass_remove_oldest_datagram+0x26>
 8012882:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8012886:	88aa      	ldrh	r2, [r5, #4]
 8012888:	4591      	cmp	r9, r2
 801288a:	d1dc      	bne.n	8012846 <ip_reass_remove_oldest_datagram+0x26>
 801288c:	e7e4      	b.n	8012858 <ip_reass_remove_oldest_datagram+0x38>
 801288e:	bf00      	nop
 8012890:	2401416c 	.word	0x2401416c

08012894 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012894:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8012896:	4604      	mov	r4, r0
 8012898:	b128      	cbz	r0, 80128a6 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801289a:	4621      	mov	r1, r4
 801289c:	2005      	movs	r0, #5
}
 801289e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80128a2:	f7f9 be33 	b.w	800c50c <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 80128a6:	4906      	ldr	r1, [pc, #24]	; (80128c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80128a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80128ac:	4b05      	ldr	r3, [pc, #20]	; (80128c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80128ae:	4806      	ldr	r0, [pc, #24]	; (80128c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80128b0:	f001 f8bc 	bl	8013a2c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80128b4:	4621      	mov	r1, r4
 80128b6:	2005      	movs	r0, #5
}
 80128b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80128bc:	f7f9 be26 	b.w	800c50c <memp_free>
 80128c0:	08014fc0 	.word	0x08014fc0
 80128c4:	08016774 	.word	0x08016774
 80128c8:	0801487c 	.word	0x0801487c

080128cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80128cc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80128ce:	4604      	mov	r4, r0
 80128d0:	b140      	cbz	r0, 80128e4 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80128d2:	6960      	ldr	r0, [r4, #20]
 80128d4:	b108      	cbz	r0, 80128da <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80128d6:	f7fa f8fb 	bl	800cad0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80128da:	4620      	mov	r0, r4
}
 80128dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80128e0:	f7ff bfd8 	b.w	8012894 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80128e4:	4b03      	ldr	r3, [pc, #12]	; (80128f4 <ipfrag_free_pbuf_custom+0x28>)
 80128e6:	f240 22ce 	movw	r2, #718	; 0x2ce
 80128ea:	4903      	ldr	r1, [pc, #12]	; (80128f8 <ipfrag_free_pbuf_custom+0x2c>)
 80128ec:	4803      	ldr	r0, [pc, #12]	; (80128fc <ipfrag_free_pbuf_custom+0x30>)
 80128ee:	f001 f89d 	bl	8013a2c <iprintf>
 80128f2:	e7ee      	b.n	80128d2 <ipfrag_free_pbuf_custom+0x6>
 80128f4:	08016774 	.word	0x08016774
 80128f8:	08016830 	.word	0x08016830
 80128fc:	0801487c 	.word	0x0801487c

08012900 <ip_reass_tmr>:
{
 8012900:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8012902:	4b0a      	ldr	r3, [pc, #40]	; (801292c <ip_reass_tmr+0x2c>)
 8012904:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8012906:	b180      	cbz	r0, 801292a <ip_reass_tmr+0x2a>
  struct ip_reassdata *r, *prev = NULL;
 8012908:	2500      	movs	r5, #0
 801290a:	e003      	b.n	8012914 <ip_reass_tmr+0x14>
 801290c:	4605      	mov	r5, r0
      r->timer--;
 801290e:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 8012910:	4620      	mov	r0, r4
 8012912:	b154      	cbz	r4, 801292a <ip_reass_tmr+0x2a>
    if (r->timer > 0) {
 8012914:	7fc3      	ldrb	r3, [r0, #31]
 8012916:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 8012918:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1f6      	bne.n	801290c <ip_reass_tmr+0xc>
      ip_reass_free_complete_datagram(tmp, prev);
 801291e:	4629      	mov	r1, r5
 8012920:	f7ff feee 	bl	8012700 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012924:	4620      	mov	r0, r4
 8012926:	2c00      	cmp	r4, #0
 8012928:	d1f4      	bne.n	8012914 <ip_reass_tmr+0x14>
}
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	2401416c 	.word	0x2401416c

08012930 <ip4_reass>:
{
 8012930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 8012934:	4eb6      	ldr	r6, [pc, #728]	; (8012c10 <ip4_reass+0x2e0>)
{
 8012936:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 8012938:	6845      	ldr	r5, [r0, #4]
{
 801293a:	4680      	mov	r8, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801293c:	8e72      	ldrh	r2, [r6, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 801293e:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
  IPFRAG_STATS_INC(ip_frag.recv);
 8012942:	3201      	adds	r2, #1
  MIB2_STATS_INC(mib2.ipreasmreqds);
 8012944:	3301      	adds	r3, #1
  IPFRAG_STATS_INC(ip_frag.recv);
 8012946:	8672      	strh	r2, [r6, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 8012948:	f8c6 3134 	str.w	r3, [r6, #308]	; 0x134
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801294c:	782b      	ldrb	r3, [r5, #0]
 801294e:	f003 030f 	and.w	r3, r3, #15
 8012952:	2b05      	cmp	r3, #5
 8012954:	f040 80f4 	bne.w	8012b40 <ip4_reass+0x210>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012958:	88e8      	ldrh	r0, [r5, #6]
 801295a:	f7f9 f819 	bl	800b990 <lwip_htons>
 801295e:	f3c0 030c 	ubfx	r3, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012962:	8868      	ldrh	r0, [r5, #2]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012964:	00db      	lsls	r3, r3, #3
 8012966:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012968:	f7f9 f812 	bl	800b990 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801296c:	782b      	ldrb	r3, [r5, #0]
 801296e:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4283      	cmp	r3, r0
 8012976:	f200 80d8 	bhi.w	8012b2a <ip4_reass+0x1fa>
  len = (u16_t)(len - hlen);
 801297a:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801297c:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8012c24 <ip4_reass+0x2f4>
  clen = pbuf_clen(p);
 8012980:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8012982:	b29b      	uxth	r3, r3
 8012984:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 8012986:	f7fa fa17 	bl	800cdb8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801298a:	f8ba 3000 	ldrh.w	r3, [sl]
  clen = pbuf_clen(p);
 801298e:	4683      	mov	fp, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012990:	4403      	add	r3, r0
 8012992:	2b0a      	cmp	r3, #10
 8012994:	f300 80da 	bgt.w	8012b4c <ip4_reass+0x21c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012998:	4b9e      	ldr	r3, [pc, #632]	; (8012c14 <ip4_reass+0x2e4>)
 801299a:	681c      	ldr	r4, [r3, #0]
 801299c:	2c00      	cmp	r4, #0
 801299e:	f000 8093 	beq.w	8012ac8 <ip4_reass+0x198>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80129a2:	68ea      	ldr	r2, [r5, #12]
 80129a4:	e003      	b.n	80129ae <ip4_reass+0x7e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80129a6:	6824      	ldr	r4, [r4, #0]
 80129a8:	2c00      	cmp	r4, #0
 80129aa:	f000 808d 	beq.w	8012ac8 <ip4_reass+0x198>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80129ae:	6963      	ldr	r3, [r4, #20]
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d1f8      	bne.n	80129a6 <ip4_reass+0x76>
 80129b4:	692b      	ldr	r3, [r5, #16]
 80129b6:	69a1      	ldr	r1, [r4, #24]
 80129b8:	4299      	cmp	r1, r3
 80129ba:	d1f4      	bne.n	80129a6 <ip4_reass+0x76>
 80129bc:	89a1      	ldrh	r1, [r4, #12]
 80129be:	88ab      	ldrh	r3, [r5, #4]
 80129c0:	4299      	cmp	r1, r3
 80129c2:	d1f0      	bne.n	80129a6 <ip4_reass+0x76>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 80129c4:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
 80129c8:	3301      	adds	r3, #1
 80129ca:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80129ce:	88e8      	ldrh	r0, [r5, #6]
 80129d0:	f7f8 ffde 	bl	800b990 <lwip_htons>
 80129d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80129d8:	2800      	cmp	r0, #0
 80129da:	f000 8105 	beq.w	8012be8 <ip4_reass+0x2b8>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80129de:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 80129e0:	f013 0320 	ands.w	r3, r3, #32
 80129e4:	9303      	str	r3, [sp, #12]
 80129e6:	d10b      	bne.n	8012a00 <ip4_reass+0xd0>
    u16_t datagram_len = (u16_t)(offset + len);
 80129e8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80129ec:	18d3      	adds	r3, r2, r3
 80129ee:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80129f0:	429a      	cmp	r2, r3
 80129f2:	f200 8089 	bhi.w	8012b08 <ip4_reass+0x1d8>
 80129f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80129fa:	4293      	cmp	r3, r2
 80129fc:	f200 8084 	bhi.w	8012b08 <ip4_reass+0x1d8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012a00:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012a04:	8868      	ldrh	r0, [r5, #2]
 8012a06:	f7f8 ffc3 	bl	800b990 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8012a0a:	782b      	ldrb	r3, [r5, #0]
 8012a0c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	4298      	cmp	r0, r3
 8012a14:	d378      	bcc.n	8012b08 <ip4_reass+0x1d8>
  len = (u16_t)(len - hlen);
 8012a16:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a18:	88e8      	ldrh	r0, [r5, #6]
  len = (u16_t)(len - hlen);
 8012a1a:	b29d      	uxth	r5, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a1c:	f7f8 ffb8 	bl	800b990 <lwip_htons>
 8012a20:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012a24:	f8d8 9004 	ldr.w	r9, [r8, #4]
  iprh->next_pbuf = NULL;
 8012a28:	2200      	movs	r2, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a2a:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8012a2c:	f889 2000 	strb.w	r2, [r9]
  iprh->end = (u16_t)(offset + len);
 8012a30:	eb05 0c00 	add.w	ip, r5, r0
  iprh->next_pbuf = NULL;
 8012a34:	f889 2001 	strb.w	r2, [r9, #1]
 8012a38:	f889 2002 	strb.w	r2, [r9, #2]
  iprh->end = (u16_t)(offset + len);
 8012a3c:	fa1f fc8c 	uxth.w	ip, ip
  iprh->next_pbuf = NULL;
 8012a40:	f889 2003 	strb.w	r2, [r9, #3]
  iprh->start = offset;
 8012a44:	f8a9 0004 	strh.w	r0, [r9, #4]
  if (iprh->end < offset) {
 8012a48:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 8012a4a:	f8a9 c006 	strh.w	ip, [r9, #6]
 8012a4e:	6863      	ldr	r3, [r4, #4]
  if (iprh->end < offset) {
 8012a50:	d85b      	bhi.n	8012b0a <ip4_reass+0x1da>
  for (q = ipr->p; q != NULL;) {
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f000 818a 	beq.w	8012d6c <ip4_reass+0x43c>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012a58:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 8012a5a:	88aa      	ldrh	r2, [r5, #4]
 8012a5c:	4290      	cmp	r0, r2
 8012a5e:	f0c0 80b1 	bcc.w	8012bc4 <ip4_reass+0x294>
    } else if (iprh->start == iprh_tmp->start) {
 8012a62:	d062      	beq.n	8012b2a <ip4_reass+0x1fa>
    } else if (iprh->start < iprh_tmp->end) {
 8012a64:	88eb      	ldrh	r3, [r5, #6]
 8012a66:	4283      	cmp	r3, r0
 8012a68:	d85f      	bhi.n	8012b2a <ip4_reass+0x1fa>
    q = iprh_tmp->next_pbuf;
 8012a6a:	682a      	ldr	r2, [r5, #0]
  int valid = 1;
 8012a6c:	2701      	movs	r7, #1
  for (q = ipr->p; q != NULL;) {
 8012a6e:	b182      	cbz	r2, 8012a92 <ip4_reass+0x162>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012a70:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8012a72:	8899      	ldrh	r1, [r3, #4]
 8012a74:	4288      	cmp	r0, r1
 8012a76:	f0c0 8085 	bcc.w	8012b84 <ip4_reass+0x254>
    } else if (iprh->start == iprh_tmp->start) {
 8012a7a:	d056      	beq.n	8012b2a <ip4_reass+0x1fa>
    } else if (iprh->start < iprh_tmp->end) {
 8012a7c:	88da      	ldrh	r2, [r3, #6]
 8012a7e:	4282      	cmp	r2, r0
 8012a80:	d853      	bhi.n	8012b2a <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 8012a82:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8012a84:	461d      	mov	r5, r3
 8012a86:	428a      	cmp	r2, r1
 8012a88:	bf18      	it	ne
 8012a8a:	2700      	movne	r7, #0
    q = iprh_tmp->next_pbuf;
 8012a8c:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	d1ee      	bne.n	8012a70 <ip4_reass+0x140>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012a92:	88eb      	ldrh	r3, [r5, #6]
 8012a94:	4298      	cmp	r0, r3
 8012a96:	f0c0 8177 	bcc.w	8012d88 <ip4_reass+0x458>
      if (iprh_prev->end != iprh->start) {
 8012a9a:	4298      	cmp	r0, r3
      iprh_prev->next_pbuf = new_p;
 8012a9c:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8012aa0:	d07a      	beq.n	8012b98 <ip4_reass+0x268>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012aa2:	9b03      	ldr	r3, [sp, #12]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f040 8134 	bne.w	8012d12 <ip4_reass+0x3e2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012aaa:	f8ba 3000 	ldrh.w	r3, [sl]
 8012aae:	449b      	add	fp, r3
 8012ab0:	f8aa b000 	strh.w	fp, [sl]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012ab4:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8012ab6:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012aba:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8012abe:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012ac0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8012ac2:	83a2      	strh	r2, [r4, #28]
  return NULL;
 8012ac4:	2700      	movs	r7, #0
 8012ac6:	e037      	b.n	8012b38 <ip4_reass+0x208>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012ac8:	2004      	movs	r0, #4
 8012aca:	f7f9 fceb 	bl	800c4a4 <memp_malloc>
  if (ipr == NULL) {
 8012ace:	4604      	mov	r4, r0
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d04a      	beq.n	8012b6a <ip4_reass+0x23a>
  ipr->next = reassdatagrams;
 8012ad4:	494f      	ldr	r1, [pc, #316]	; (8012c14 <ip4_reass+0x2e4>)
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012ad6:	2200      	movs	r2, #0
  ipr->timer = IP_REASS_MAXAGE;
 8012ad8:	270f      	movs	r7, #15
  ipr->next = reassdatagrams;
 8012ada:	6809      	ldr	r1, [r1, #0]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012adc:	60a2      	str	r2, [r4, #8]
 8012ade:	60e2      	str	r2, [r4, #12]
 8012ae0:	6122      	str	r2, [r4, #16]
 8012ae2:	6162      	str	r2, [r4, #20]
 8012ae4:	61a2      	str	r2, [r4, #24]
 8012ae6:	61e2      	str	r2, [r4, #28]
 8012ae8:	6062      	str	r2, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 8012aea:	77e7      	strb	r7, [r4, #31]
  ipr->next = reassdatagrams;
 8012aec:	6021      	str	r1, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012aee:	682b      	ldr	r3, [r5, #0]
 8012af0:	68a9      	ldr	r1, [r5, #8]
 8012af2:	686f      	ldr	r7, [r5, #4]
 8012af4:	68ea      	ldr	r2, [r5, #12]
 8012af6:	6121      	str	r1, [r4, #16]
 8012af8:	60a3      	str	r3, [r4, #8]
 8012afa:	60e7      	str	r7, [r4, #12]
 8012afc:	6162      	str	r2, [r4, #20]
  reassdatagrams = ipr;
 8012afe:	4945      	ldr	r1, [pc, #276]	; (8012c14 <ip4_reass+0x2e4>)
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012b00:	692b      	ldr	r3, [r5, #16]
  reassdatagrams = ipr;
 8012b02:	600c      	str	r4, [r1, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012b04:	61a3      	str	r3, [r4, #24]
 8012b06:	e76a      	b.n	80129de <ip4_reass+0xae>
 8012b08:	6863      	ldr	r3, [r4, #4]
  if (ipr->p == NULL) {
 8012b0a:	b973      	cbnz	r3, 8012b2a <ip4_reass+0x1fa>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012b0c:	4b41      	ldr	r3, [pc, #260]	; (8012c14 <ip4_reass+0x2e4>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	42a3      	cmp	r3, r4
 8012b12:	d006      	beq.n	8012b22 <ip4_reass+0x1f2>
 8012b14:	4b40      	ldr	r3, [pc, #256]	; (8012c18 <ip4_reass+0x2e8>)
 8012b16:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012b1a:	4940      	ldr	r1, [pc, #256]	; (8012c1c <ip4_reass+0x2ec>)
 8012b1c:	4840      	ldr	r0, [pc, #256]	; (8012c20 <ip4_reass+0x2f0>)
 8012b1e:	f000 ff85 	bl	8013a2c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012b22:	4620      	mov	r0, r4
 8012b24:	2100      	movs	r1, #0
 8012b26:	f7ff fdc3 	bl	80126b0 <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 8012b2a:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 8012b2c:	4640      	mov	r0, r8
  return NULL;
 8012b2e:	2700      	movs	r7, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 8012b30:	3301      	adds	r3, #1
 8012b32:	86f3      	strh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 8012b34:	f7f9 ffcc 	bl	800cad0 <pbuf_free>
}
 8012b38:	4638      	mov	r0, r7
 8012b3a:	b005      	add	sp, #20
 8012b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 8012b40:	f8b6 3044 	ldrh.w	r3, [r6, #68]	; 0x44
 8012b44:	3301      	adds	r3, #1
 8012b46:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
    goto nullreturn;
 8012b4a:	e7ee      	b.n	8012b2a <ip4_reass+0x1fa>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b4c:	4601      	mov	r1, r0
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f7ff fe66 	bl	8012820 <ip_reass_remove_oldest_datagram>
 8012b54:	b128      	cbz	r0, 8012b62 <ip4_reass+0x232>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012b56:	f8ba 3000 	ldrh.w	r3, [sl]
 8012b5a:	445b      	add	r3, fp
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b5c:	2b0a      	cmp	r3, #10
 8012b5e:	f77f af1b 	ble.w	8012998 <ip4_reass+0x68>
      IPFRAG_STATS_INC(ip_frag.memerr);
 8012b62:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 8012b64:	3301      	adds	r3, #1
 8012b66:	87b3      	strh	r3, [r6, #60]	; 0x3c
 8012b68:	e7df      	b.n	8012b2a <ip4_reass+0x1fa>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012b6a:	4659      	mov	r1, fp
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f7ff fe57 	bl	8012820 <ip_reass_remove_oldest_datagram>
 8012b72:	4583      	cmp	fp, r0
 8012b74:	dcf5      	bgt.n	8012b62 <ip4_reass+0x232>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b76:	2004      	movs	r0, #4
 8012b78:	f7f9 fc94 	bl	800c4a4 <memp_malloc>
    if (ipr == NULL)
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d1a8      	bne.n	8012ad4 <ip4_reass+0x1a4>
 8012b82:	e7ee      	b.n	8012b62 <ip4_reass+0x232>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012b84:	458c      	cmp	ip, r1
      iprh->next_pbuf = q;
 8012b86:	f8c9 2000 	str.w	r2, [r9]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012b8a:	88eb      	ldrh	r3, [r5, #6]
 8012b8c:	d8cd      	bhi.n	8012b2a <ip4_reass+0x1fa>
 8012b8e:	4298      	cmp	r0, r3
 8012b90:	d3cb      	bcc.n	8012b2a <ip4_reass+0x1fa>
        iprh_prev->next_pbuf = new_p;
 8012b92:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8012b96:	d184      	bne.n	8012aa2 <ip4_reass+0x172>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012b98:	9b03      	ldr	r3, [sp, #12]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d044      	beq.n	8012c28 <ip4_reass+0x2f8>
 8012b9e:	7fa3      	ldrb	r3, [r4, #30]
 8012ba0:	07d9      	lsls	r1, r3, #31
 8012ba2:	d51a      	bpl.n	8012bda <ip4_reass+0x2aa>
    if (valid) {
 8012ba4:	2f00      	cmp	r7, #0
 8012ba6:	f000 80b8 	beq.w	8012d1a <ip4_reass+0x3ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012baa:	6863      	ldr	r3, [r4, #4]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d142      	bne.n	8012c36 <ip4_reass+0x306>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012bb0:	f8ba 3000 	ldrh.w	r3, [sl]
 8012bb4:	449b      	add	fp, r3
  if (is_last) {
 8012bb6:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012bb8:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	f43f af79 	beq.w	8012ab4 <ip4_reass+0x184>
 8012bc2:	e77f      	b.n	8012ac4 <ip4_reass+0x194>
        if (iprh->end > iprh_tmp->start) {
 8012bc4:	4594      	cmp	ip, r2
      iprh->next_pbuf = q;
 8012bc6:	f8c9 3000 	str.w	r3, [r9]
        if (iprh->end > iprh_tmp->start) {
 8012bca:	d8ae      	bhi.n	8012b2a <ip4_reass+0x1fa>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012bcc:	9b03      	ldr	r3, [sp, #12]
        ipr->p = new_p;
 8012bce:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012bd2:	b363      	cbz	r3, 8012c2e <ip4_reass+0x2fe>
 8012bd4:	7fa3      	ldrb	r3, [r4, #30]
 8012bd6:	07db      	lsls	r3, r3, #31
 8012bd8:	d4e7      	bmi.n	8012baa <ip4_reass+0x27a>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012bda:	f8ba 3000 	ldrh.w	r3, [sl]
  return NULL;
 8012bde:	2700      	movs	r7, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012be0:	449b      	add	fp, r3
 8012be2:	f8aa b000 	strh.w	fp, [sl]
 8012be6:	e7a7      	b.n	8012b38 <ip4_reass+0x208>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012be8:	89e0      	ldrh	r0, [r4, #14]
 8012bea:	f7f8 fed1 	bl	800b990 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012bee:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	f43f aef3 	beq.w	80129de <ip4_reass+0xae>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012bf8:	682a      	ldr	r2, [r5, #0]
 8012bfa:	686f      	ldr	r7, [r5, #4]
 8012bfc:	68a8      	ldr	r0, [r5, #8]
 8012bfe:	68e9      	ldr	r1, [r5, #12]
 8012c00:	60a2      	str	r2, [r4, #8]
 8012c02:	60e7      	str	r7, [r4, #12]
 8012c04:	6120      	str	r0, [r4, #16]
 8012c06:	6161      	str	r1, [r4, #20]
 8012c08:	692a      	ldr	r2, [r5, #16]
 8012c0a:	61a2      	str	r2, [r4, #24]
 8012c0c:	e6e7      	b.n	80129de <ip4_reass+0xae>
 8012c0e:	bf00      	nop
 8012c10:	2401bdf8 	.word	0x2401bdf8
 8012c14:	2401416c 	.word	0x2401416c
 8012c18:	08016774 	.word	0x08016774
 8012c1c:	08016754 	.word	0x08016754
 8012c20:	0801487c 	.word	0x0801487c
 8012c24:	24014168 	.word	0x24014168
    if (valid) {
 8012c28:	2f00      	cmp	r7, #0
 8012c2a:	f43f af3e 	beq.w	8012aaa <ip4_reass+0x17a>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012c2e:	6863      	ldr	r3, [r4, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f43f af3a 	beq.w	8012aaa <ip4_reass+0x17a>
 8012c36:	6858      	ldr	r0, [r3, #4]
 8012c38:	8883      	ldrh	r3, [r0, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d1b8      	bne.n	8012bb0 <ip4_reass+0x280>
        q = iprh->next_pbuf;
 8012c3e:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	f000 80ab 	beq.w	8012d9e <ip4_reass+0x46e>
          iprh = (struct ip_reass_helper *)q->payload;
 8012c48:	685d      	ldr	r5, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8012c4a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8012c4e:	88aa      	ldrh	r2, [r5, #4]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d006      	beq.n	8012c62 <ip4_reass+0x332>
 8012c54:	e7ac      	b.n	8012bb0 <ip4_reass+0x280>
          iprh = (struct ip_reass_helper *)q->payload;
 8012c56:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8012c58:	88e9      	ldrh	r1, [r5, #6]
 8012c5a:	889a      	ldrh	r2, [r3, #4]
 8012c5c:	461d      	mov	r5, r3
 8012c5e:	4291      	cmp	r1, r2
 8012c60:	d1a6      	bne.n	8012bb0 <ip4_reass+0x280>
          q = iprh->next_pbuf;
 8012c62:	682b      	ldr	r3, [r5, #0]
        while (q != NULL) {
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d1f6      	bne.n	8012c56 <ip4_reass+0x326>
          LWIP_ASSERT("sanity check",
 8012c68:	4285      	cmp	r5, r0
 8012c6a:	d10f      	bne.n	8012c8c <ip4_reass+0x35c>
 8012c6c:	4b52      	ldr	r3, [pc, #328]	; (8012db8 <ip4_reass+0x488>)
 8012c6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012c72:	4952      	ldr	r1, [pc, #328]	; (8012dbc <ip4_reass+0x48c>)
 8012c74:	4852      	ldr	r0, [pc, #328]	; (8012dc0 <ip4_reass+0x490>)
 8012c76:	f000 fed9 	bl	8013a2c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012c7a:	682b      	ldr	r3, [r5, #0]
 8012c7c:	b133      	cbz	r3, 8012c8c <ip4_reass+0x35c>
 8012c7e:	4b4e      	ldr	r3, [pc, #312]	; (8012db8 <ip4_reass+0x488>)
 8012c80:	f240 12e3 	movw	r2, #483	; 0x1e3
 8012c84:	494f      	ldr	r1, [pc, #316]	; (8012dc4 <ip4_reass+0x494>)
 8012c86:	484e      	ldr	r0, [pc, #312]	; (8012dc0 <ip4_reass+0x490>)
 8012c88:	f000 fed0 	bl	8013a2c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012c8c:	f8ba 3000 	ldrh.w	r3, [sl]
 8012c90:	449b      	add	fp, r3
  if (is_last) {
 8012c92:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012c94:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f000 8082 	beq.w	8012da2 <ip4_reass+0x472>
 8012c9e:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012ca0:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012ca2:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012ca4:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012ca6:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012caa:	684f      	ldr	r7, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012cac:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012cae:	689d      	ldr	r5, [r3, #8]
 8012cb0:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8012cb4:	68d9      	ldr	r1, [r3, #12]
 8012cb6:	60bd      	str	r5, [r7, #8]
 8012cb8:	f8c7 c004 	str.w	ip, [r7, #4]
 8012cbc:	60f9      	str	r1, [r7, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012cbe:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012cc0:	603a      	str	r2, [r7, #0]
 8012cc2:	691a      	ldr	r2, [r3, #16]
 8012cc4:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012cc6:	f7f8 fe63 	bl	800b990 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8012cca:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012ccc:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012cce:	71bb      	strb	r3, [r7, #6]
 8012cd0:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012cd2:	72bb      	strb	r3, [r7, #10]
 8012cd4:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8012cd6:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8012cd8:	b16d      	cbz	r5, 8012cf6 <ip4_reass+0x3c6>
 8012cda:	46a0      	mov	r8, r4
      iprh = (struct ip_reass_helper *)r->payload;
 8012cdc:	686c      	ldr	r4, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8012cde:	2114      	movs	r1, #20
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	f7f9 feb9 	bl	800ca58 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	4638      	mov	r0, r7
 8012cea:	f7fa f88f 	bl	800ce0c <pbuf_cat>
      r = iprh->next_pbuf;
 8012cee:	6825      	ldr	r5, [r4, #0]
    while (r != NULL) {
 8012cf0:	2d00      	cmp	r5, #0
 8012cf2:	d1f3      	bne.n	8012cdc <ip4_reass+0x3ac>
 8012cf4:	4644      	mov	r4, r8
    if (ipr == reassdatagrams) {
 8012cf6:	4b34      	ldr	r3, [pc, #208]	; (8012dc8 <ip4_reass+0x498>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	42a3      	cmp	r3, r4
 8012cfc:	d034      	beq.n	8012d68 <ip4_reass+0x438>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012cfe:	b193      	cbz	r3, 8012d26 <ip4_reass+0x3f6>
        if (ipr_prev->next == ipr) {
 8012d00:	6819      	ldr	r1, [r3, #0]
 8012d02:	428c      	cmp	r4, r1
 8012d04:	d00f      	beq.n	8012d26 <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d06:	b179      	cbz	r1, 8012d28 <ip4_reass+0x3f8>
        if (ipr_prev->next == ipr) {
 8012d08:	680b      	ldr	r3, [r1, #0]
 8012d0a:	42a3      	cmp	r3, r4
 8012d0c:	d00c      	beq.n	8012d28 <ip4_reass+0x3f8>
 8012d0e:	4619      	mov	r1, r3
 8012d10:	e7f9      	b.n	8012d06 <ip4_reass+0x3d6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012d12:	7fa3      	ldrb	r3, [r4, #30]
 8012d14:	07da      	lsls	r2, r3, #31
 8012d16:	f57f af60 	bpl.w	8012bda <ip4_reass+0x2aa>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012d1a:	f8ba 3000 	ldrh.w	r3, [sl]
 8012d1e:	449b      	add	fp, r3
 8012d20:	f8aa b000 	strh.w	fp, [sl]
 8012d24:	e6ce      	b.n	8012ac4 <ip4_reass+0x194>
        if (ipr_prev->next == ipr) {
 8012d26:	4619      	mov	r1, r3
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f7ff fcc1 	bl	80126b0 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8012d2e:	4638      	mov	r0, r7
 8012d30:	f7fa f842 	bl	800cdb8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d34:	f8ba 3000 	ldrh.w	r3, [sl]
    clen = pbuf_clen(p);
 8012d38:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d3a:	4283      	cmp	r3, r0
 8012d3c:	d208      	bcs.n	8012d50 <ip4_reass+0x420>
 8012d3e:	4b1e      	ldr	r3, [pc, #120]	; (8012db8 <ip4_reass+0x488>)
 8012d40:	f240 229b 	movw	r2, #667	; 0x29b
 8012d44:	4921      	ldr	r1, [pc, #132]	; (8012dcc <ip4_reass+0x49c>)
 8012d46:	481e      	ldr	r0, [pc, #120]	; (8012dc0 <ip4_reass+0x490>)
 8012d48:	f000 fe70 	bl	8013a2c <iprintf>
 8012d4c:	f8ba 3000 	ldrh.w	r3, [sl]
    MIB2_STATS_INC(mib2.ipreasmoks);
 8012d50:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012d54:	1b1b      	subs	r3, r3, r4
}
 8012d56:	4638      	mov	r0, r7
    MIB2_STATS_INC(mib2.ipreasmoks);
 8012d58:	3201      	adds	r2, #1
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012d5a:	f8aa 3000 	strh.w	r3, [sl]
    MIB2_STATS_INC(mib2.ipreasmoks);
 8012d5e:	f8c6 2120 	str.w	r2, [r6, #288]	; 0x120
}
 8012d62:	b005      	add	sp, #20
 8012d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ipr_prev = NULL;
 8012d68:	2100      	movs	r1, #0
 8012d6a:	e7dd      	b.n	8012d28 <ip4_reass+0x3f8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012d6c:	9b03      	ldr	r3, [sp, #12]
      ipr->p = new_p;
 8012d6e:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	f43f af5b 	beq.w	8012c2e <ip4_reass+0x2fe>
 8012d78:	7fa3      	ldrb	r3, [r4, #30]
 8012d7a:	07d8      	lsls	r0, r3, #31
 8012d7c:	f57f af2d 	bpl.w	8012bda <ip4_reass+0x2aa>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012d80:	4643      	mov	r3, r8
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d0c9      	beq.n	8012d1a <ip4_reass+0x3ea>
 8012d86:	e756      	b.n	8012c36 <ip4_reass+0x306>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012d88:	4b0b      	ldr	r3, [pc, #44]	; (8012db8 <ip4_reass+0x488>)
 8012d8a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012d8e:	4910      	ldr	r1, [pc, #64]	; (8012dd0 <ip4_reass+0x4a0>)
 8012d90:	480b      	ldr	r0, [pc, #44]	; (8012dc0 <ip4_reass+0x490>)
 8012d92:	f000 fe4b 	bl	8013a2c <iprintf>
 8012d96:	88eb      	ldrh	r3, [r5, #6]
 8012d98:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8012d9c:	e67d      	b.n	8012a9a <ip4_reass+0x16a>
        while (q != NULL) {
 8012d9e:	464d      	mov	r5, r9
 8012da0:	e762      	b.n	8012c68 <ip4_reass+0x338>
    u16_t datagram_len = (u16_t)(offset + len);
 8012da2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8012da6:	4413      	add	r3, r2
 8012da8:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012daa:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8012dac:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012dae:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8012db2:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012db4:	77a3      	strb	r3, [r4, #30]
 8012db6:	e773      	b.n	8012ca0 <ip4_reass+0x370>
 8012db8:	08016774 	.word	0x08016774
 8012dbc:	08016704 	.word	0x08016704
 8012dc0:	0801487c 	.word	0x0801487c
 8012dc4:	08016714 	.word	0x08016714
 8012dc8:	2401416c 	.word	0x2401416c
 8012dcc:	08016738 	.word	0x08016738
 8012dd0:	080166e4 	.word	0x080166e4

08012dd4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012dd8:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8012dda:	b08d      	sub	sp, #52	; 0x34
 8012ddc:	4605      	mov	r5, r0
 8012dde:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012de0:	f1b3 0214 	subs.w	r2, r3, #20
{
 8012de4:	9106      	str	r1, [sp, #24]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012de6:	bf48      	it	mi
 8012de8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012dec:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012dee:	781c      	ldrb	r4, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012df0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  original_iphdr = (struct ip_hdr *)p->payload;
 8012df4:	461e      	mov	r6, r3
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012df6:	f004 040f 	and.w	r4, r4, #15
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012dfa:	9205      	str	r2, [sp, #20]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012dfc:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8012e00:	f1ba 0f14 	cmp.w	sl, #20
 8012e04:	f040 80e5 	bne.w	8012fd2 <ip4_frag+0x1fe>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012e08:	8943      	ldrh	r3, [r0, #10]
 8012e0a:	2b13      	cmp	r3, #19
 8012e0c:	f240 80e7 	bls.w	8012fde <ip4_frag+0x20a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012e10:	88f0      	ldrh	r0, [r6, #6]
 8012e12:	f7f8 fdbd 	bl	800b990 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012e16:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8012e1a:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8012e1e:	f1a9 0914 	sub.w	r9, r9, #20
  ofo = tmp & IP_OFFMASK;
 8012e22:	9304      	str	r3, [sp, #16]
 8012e24:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8012e28:	fa1f f989 	uxth.w	r9, r9
 8012e2c:	930b      	str	r3, [sp, #44]	; 0x2c

  while (left) {
 8012e2e:	f1b9 0f00 	cmp.w	r9, #0
 8012e32:	f000 80d1 	beq.w	8012fd8 <ip4_frag+0x204>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e36:	9b05      	ldr	r3, [sp, #20]
  u16_t newpbuflen = 0;
 8012e38:	2400      	movs	r4, #0
 8012e3a:	4a6e      	ldr	r2, [pc, #440]	; (8012ff4 <ip4_frag+0x220>)
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e3c:	00db      	lsls	r3, r3, #3
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012e3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012e42:	46b1      	mov	r9, r6
 8012e44:	9207      	str	r2, [sp, #28]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	9308      	str	r3, [sp, #32]
 8012e4a:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012e4c:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e50:	9e03      	ldr	r6, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012e52:	2114      	movs	r1, #20
 8012e54:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e56:	42b3      	cmp	r3, r6
 8012e58:	bf28      	it	cs
 8012e5a:	4633      	movcs	r3, r6
 8012e5c:	9302      	str	r3, [sp, #8]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012e5e:	f7f9 feab 	bl	800cbb8 <pbuf_alloc>
    if (rambuf == NULL) {
 8012e62:	4683      	mov	fp, r0
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f000 809e 	beq.w	8012fa6 <ip4_frag+0x1d2>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012e6a:	8943      	ldrh	r3, [r0, #10]
 8012e6c:	2b13      	cmp	r3, #19
 8012e6e:	f240 80a5 	bls.w	8012fbc <ip4_frag+0x1e8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012e72:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012e76:	f8d9 2000 	ldr.w	r2, [r9]
 8012e7a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8012e7e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012e82:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8012e86:	601a      	str	r2, [r3, #0]
 8012e88:	605e      	str	r6, [r3, #4]
 8012e8a:	6098      	str	r0, [r3, #8]
 8012e8c:	60d9      	str	r1, [r3, #12]
 8012e8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012e92:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012e94:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012e98:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 8012e9a:	9b02      	ldr	r3, [sp, #8]
 8012e9c:	b373      	cbz	r3, 8012efc <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012e9e:	896b      	ldrh	r3, [r5, #10]
    while (left_to_copy) {
 8012ea0:	9f02      	ldr	r7, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 8012ea2:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012ea6:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 8012ea8:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012eaa:	d36e      	bcc.n	8012f8a <ip4_frag+0x1b6>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012eac:	42bc      	cmp	r4, r7
 8012eae:	bf28      	it	cs
 8012eb0:	463c      	movcs	r4, r7
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012eb2:	2c00      	cmp	r4, #0
 8012eb4:	d060      	beq.n	8012f78 <ip4_frag+0x1a4>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012eb6:	2005      	movs	r0, #5
 8012eb8:	f7f9 faf4 	bl	800c4a4 <memp_malloc>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ebc:	2241      	movs	r2, #65	; 0x41
      if (pcr == NULL) {
 8012ebe:	4680      	mov	r8, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ec0:	4621      	mov	r1, r4
 8012ec2:	4603      	mov	r3, r0
      if (pcr == NULL) {
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	d06b      	beq.n	8012fa0 <ip4_frag+0x1cc>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ec8:	9401      	str	r4, [sp, #4]
 8012eca:	2000      	movs	r0, #0
 8012ecc:	686e      	ldr	r6, [r5, #4]
 8012ece:	4456      	add	r6, sl
 8012ed0:	9600      	str	r6, [sp, #0]
 8012ed2:	f7f9 fda1 	bl	800ca18 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 8012ed6:	4606      	mov	r6, r0
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	d05e      	beq.n	8012f9a <ip4_frag+0x1c6>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8012edc:	4628      	mov	r0, r5

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012ede:	1b3f      	subs	r7, r7, r4
      pbuf_ref(p);
 8012ee0:	f7f9 ff76 	bl	800cdd0 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012ee4:	4b44      	ldr	r3, [pc, #272]	; (8012ff8 <ip4_frag+0x224>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012ee6:	b2bf      	uxth	r7, r7
      pcr->original = p;
 8012ee8:	f8c8 5014 	str.w	r5, [r8, #20]
      pbuf_cat(rambuf, newpbuf);
 8012eec:	4631      	mov	r1, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012eee:	f8c8 3010 	str.w	r3, [r8, #16]
      pbuf_cat(rambuf, newpbuf);
 8012ef2:	4658      	mov	r0, fp
 8012ef4:	f7f9 ff8a 	bl	800ce0c <pbuf_cat>
      if (left_to_copy) {
 8012ef8:	2f00      	cmp	r7, #0
 8012efa:	d13d      	bne.n	8012f78 <ip4_frag+0x1a4>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012efc:	9b06      	ldr	r3, [sp, #24]
    poff = (u16_t)(poff + newpbuflen);
 8012efe:	44a2      	add	sl, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012f00:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 8012f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8012f04:	fa1f fa8a 	uxth.w	sl, sl
    tmp = (IP_OFFMASK & (ofo));
 8012f08:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8012f0c:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 8012f0e:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8012f10:	4293      	cmp	r3, r2
 8012f12:	dd5b      	ble.n	8012fcc <ip4_frag+0x1f8>
 8012f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d158      	bne.n	8012fcc <ip4_frag+0x1f8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012f1a:	f7f8 fd39 	bl	800b990 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f1e:	9f02      	ldr	r7, [sp, #8]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012f20:	9e09      	ldr	r6, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f22:	463b      	mov	r3, r7
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012f24:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f26:	3314      	adds	r3, #20
 8012f28:	b298      	uxth	r0, r3
 8012f2a:	f7f8 fd31 	bl	800b990 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8012f2e:	2300      	movs	r3, #0
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012f30:	4659      	mov	r1, fp
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012f32:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012f34:	72b3      	strb	r3, [r6, #10]
 8012f36:	72f3      	strb	r3, [r6, #11]
    netif->output(netif, rambuf, dest);
 8012f38:	9b06      	ldr	r3, [sp, #24]
 8012f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	695b      	ldr	r3, [r3, #20]
 8012f40:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8012f42:	9a07      	ldr	r2, [sp, #28]
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012f44:	4658      	mov	r0, fp
    IPFRAG_STATS_INC(ip_frag.xmit);
 8012f46:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8012f48:	3301      	adds	r3, #1
 8012f4a:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 8012f4c:	f7f9 fdc0 	bl	800cad0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012f50:	9b03      	ldr	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 8012f52:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
    left = (u16_t)(left - fragsize);
 8012f56:	1bdb      	subs	r3, r3, r7
    ofo = (u16_t)(ofo + nfb);
 8012f58:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8012f5a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8012f5c:	b292      	uxth	r2, r2
    left = (u16_t)(left - fragsize);
 8012f5e:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 8012f60:	9204      	str	r2, [sp, #16]
  while (left) {
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f47f af71 	bne.w	8012e4a <ip4_frag+0x76>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 8012f68:	9a07      	ldr	r2, [sp, #28]
  return ERR_OK;
 8012f6a:	2000      	movs	r0, #0
  MIB2_STATS_INC(mib2.ipfragoks);
 8012f6c:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
 8012f70:	3301      	adds	r3, #1
 8012f72:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
  return ERR_OK;
 8012f76:	e01e      	b.n	8012fb6 <ip4_frag+0x1e2>
        p = p->next;
 8012f78:	682d      	ldr	r5, [r5, #0]
 8012f7a:	f04f 0a00 	mov.w	sl, #0
      u16_t plen = (u16_t)(p->len - poff);
 8012f7e:	896b      	ldrh	r3, [r5, #10]
 8012f80:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012f84:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 8012f86:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012f88:	d290      	bcs.n	8012eac <ip4_frag+0xd8>
 8012f8a:	4b1c      	ldr	r3, [pc, #112]	; (8012ffc <ip4_frag+0x228>)
 8012f8c:	f240 322d 	movw	r2, #813	; 0x32d
 8012f90:	491b      	ldr	r1, [pc, #108]	; (8013000 <ip4_frag+0x22c>)
 8012f92:	481c      	ldr	r0, [pc, #112]	; (8013004 <ip4_frag+0x230>)
 8012f94:	f000 fd4a 	bl	8013a2c <iprintf>
 8012f98:	e788      	b.n	8012eac <ip4_frag+0xd8>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	f7ff fc7a 	bl	8012894 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012fa0:	4658      	mov	r0, fp
 8012fa2:	f7f9 fd95 	bl	800cad0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 8012fa6:	9a07      	ldr	r2, [sp, #28]
  return ERR_MEM;
 8012fa8:	f04f 30ff 	mov.w	r0, #4294967295
  MIB2_STATS_INC(mib2.ipfragfails);
 8012fac:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
}
 8012fb6:	b00d      	add	sp, #52	; 0x34
 8012fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012fbc:	4b0f      	ldr	r3, [pc, #60]	; (8012ffc <ip4_frag+0x228>)
 8012fbe:	f240 3225 	movw	r2, #805	; 0x325
 8012fc2:	4911      	ldr	r1, [pc, #68]	; (8013008 <ip4_frag+0x234>)
 8012fc4:	480f      	ldr	r0, [pc, #60]	; (8013004 <ip4_frag+0x230>)
 8012fc6:	f000 fd31 	bl	8013a2c <iprintf>
 8012fca:	e752      	b.n	8012e72 <ip4_frag+0x9e>
      tmp = tmp | IP_MF;
 8012fcc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8012fd0:	e7a3      	b.n	8012f1a <ip4_frag+0x146>
    return ERR_VAL;
 8012fd2:	f06f 0005 	mvn.w	r0, #5
 8012fd6:	e7ee      	b.n	8012fb6 <ip4_frag+0x1e2>
 8012fd8:	4b06      	ldr	r3, [pc, #24]	; (8012ff4 <ip4_frag+0x220>)
 8012fda:	9307      	str	r3, [sp, #28]
 8012fdc:	e7c4      	b.n	8012f68 <ip4_frag+0x194>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012fde:	4b07      	ldr	r3, [pc, #28]	; (8012ffc <ip4_frag+0x228>)
 8012fe0:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012fe4:	4909      	ldr	r1, [pc, #36]	; (801300c <ip4_frag+0x238>)
 8012fe6:	4807      	ldr	r0, [pc, #28]	; (8013004 <ip4_frag+0x230>)
 8012fe8:	f000 fd20 	bl	8013a2c <iprintf>
 8012fec:	f06f 0005 	mvn.w	r0, #5
 8012ff0:	e7e1      	b.n	8012fb6 <ip4_frag+0x1e2>
 8012ff2:	bf00      	nop
 8012ff4:	2401bdf8 	.word	0x2401bdf8
 8012ff8:	080128cd 	.word	0x080128cd
 8012ffc:	08016774 	.word	0x08016774
 8013000:	080166d4 	.word	0x080166d4
 8013004:	0801487c 	.word	0x0801487c
 8013008:	080166b4 	.word	0x080166b4
 801300c:	08016698 	.word	0x08016698

08013010 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013010:	8943      	ldrh	r3, [r0, #10]
 8013012:	2b0e      	cmp	r3, #14
{
 8013014:	b570      	push	{r4, r5, r6, lr}
 8013016:	4604      	mov	r4, r0
 8013018:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 801301a:	d80e      	bhi.n	801303a <ethernet_input+0x2a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801301c:	4b32      	ldr	r3, [pc, #200]	; (80130e8 <ethernet_input+0xd8>)
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 801301e:	6d08      	ldr	r0, [r1, #80]	; 0x50
    ETHARP_STATS_INC(etharp.drop);
 8013020:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 8013022:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 8013024:	3001      	adds	r0, #1
    ETHARP_STATS_INC(etharp.drop);
 8013026:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 8013028:	3101      	adds	r1, #1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 801302a:	6528      	str	r0, [r5, #80]	; 0x50
    ETHARP_STATS_INC(etharp.drop);
 801302c:	83da      	strh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801302e:	8519      	strh	r1, [r3, #40]	; 0x28
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8013030:	4620      	mov	r0, r4
 8013032:	f7f9 fd4d 	bl	800cad0 <pbuf_free>
  return ERR_OK;
}
 8013036:	2000      	movs	r0, #0
 8013038:	bd70      	pop	{r4, r5, r6, pc}
  if (p->if_idx == NETIF_NO_INDEX) {
 801303a:	7bc3      	ldrb	r3, [r0, #15]
 801303c:	b91b      	cbnz	r3, 8013046 <ethernet_input+0x36>
    p->if_idx = netif_get_index(netif);
 801303e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8013042:	3301      	adds	r3, #1
 8013044:	73c3      	strb	r3, [r0, #15]
  ethhdr = (struct eth_hdr *)p->payload;
 8013046:	6860      	ldr	r0, [r4, #4]
  if (ethhdr->dest.addr[0] & 1) {
 8013048:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801304a:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801304c:	07d9      	lsls	r1, r3, #31
 801304e:	d50a      	bpl.n	8013066 <ethernet_input+0x56>
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013050:	2b01      	cmp	r3, #1
 8013052:	d039      	beq.n	80130c8 <ethernet_input+0xb8>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013054:	2206      	movs	r2, #6
 8013056:	4925      	ldr	r1, [pc, #148]	; (80130ec <ethernet_input+0xdc>)
 8013058:	f000 fc1e 	bl	8013898 <memcmp>
 801305c:	b918      	cbnz	r0, 8013066 <ethernet_input+0x56>
      p->flags |= PBUF_FLAG_LLBCAST;
 801305e:	7b63      	ldrb	r3, [r4, #13]
 8013060:	f043 0308 	orr.w	r3, r3, #8
 8013064:	7363      	strb	r3, [r4, #13]
  switch (type) {
 8013066:	2e08      	cmp	r6, #8
 8013068:	d01f      	beq.n	80130aa <ethernet_input+0x9a>
 801306a:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801306e:	d111      	bne.n	8013094 <ethernet_input+0x84>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013070:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8013074:	071b      	lsls	r3, r3, #28
 8013076:	d5db      	bpl.n	8013030 <ethernet_input+0x20>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013078:	210e      	movs	r1, #14
 801307a:	4620      	mov	r0, r4
 801307c:	f7f9 fcec 	bl	800ca58 <pbuf_remove_header>
 8013080:	2800      	cmp	r0, #0
 8013082:	d02c      	beq.n	80130de <ethernet_input+0xce>
        ETHARP_STATS_INC(etharp.lenerr);
 8013084:	4b18      	ldr	r3, [pc, #96]	; (80130e8 <ethernet_input+0xd8>)
 8013086:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8013088:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801308a:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801308c:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801308e:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8013090:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8013092:	e7cd      	b.n	8013030 <ethernet_input+0x20>
      ETHARP_STATS_INC(etharp.proterr);
 8013094:	4b14      	ldr	r3, [pc, #80]	; (80130e8 <ethernet_input+0xd8>)
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 8013096:	6d68      	ldr	r0, [r5, #84]	; 0x54
      ETHARP_STATS_INC(etharp.proterr);
 8013098:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801309a:	8bda      	ldrh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 801309c:	3001      	adds	r0, #1
      ETHARP_STATS_INC(etharp.proterr);
 801309e:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 80130a0:	3201      	adds	r2, #1
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 80130a2:	6568      	str	r0, [r5, #84]	; 0x54
      ETHARP_STATS_INC(etharp.proterr);
 80130a4:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 80130a6:	83da      	strh	r2, [r3, #30]
      goto free_and_return;
 80130a8:	e7c2      	b.n	8013030 <ethernet_input+0x20>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80130aa:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80130ae:	071a      	lsls	r2, r3, #28
 80130b0:	d5be      	bpl.n	8013030 <ethernet_input+0x20>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80130b2:	210e      	movs	r1, #14
 80130b4:	4620      	mov	r0, r4
 80130b6:	f7f9 fccf 	bl	800ca58 <pbuf_remove_header>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d1b8      	bne.n	8013030 <ethernet_input+0x20>
        ip4_input(p, netif);
 80130be:	4629      	mov	r1, r5
 80130c0:	4620      	mov	r0, r4
 80130c2:	f7ff f8d1 	bl	8012268 <ip4_input>
      break;
 80130c6:	e7b6      	b.n	8013036 <ethernet_input+0x26>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80130c8:	7843      	ldrb	r3, [r0, #1]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d1cb      	bne.n	8013066 <ethernet_input+0x56>
 80130ce:	7883      	ldrb	r3, [r0, #2]
 80130d0:	2b5e      	cmp	r3, #94	; 0x5e
 80130d2:	d1c8      	bne.n	8013066 <ethernet_input+0x56>
        p->flags |= PBUF_FLAG_LLMCAST;
 80130d4:	7b63      	ldrb	r3, [r4, #13]
 80130d6:	f043 0310 	orr.w	r3, r3, #16
 80130da:	7363      	strb	r3, [r4, #13]
 80130dc:	e7c3      	b.n	8013066 <ethernet_input+0x56>
        etharp_input(p, netif);
 80130de:	4629      	mov	r1, r5
 80130e0:	4620      	mov	r0, r4
 80130e2:	f7fe fc23 	bl	801192c <etharp_input>
      break;
 80130e6:	e7a6      	b.n	8013036 <ethernet_input+0x26>
 80130e8:	2401bdf8 	.word	0x2401bdf8
 80130ec:	0801683c 	.word	0x0801683c

080130f0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80130f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f4:	460c      	mov	r4, r1
 80130f6:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80130f8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80130fc:	4616      	mov	r6, r2
 80130fe:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8013100:	f7f8 fc46 	bl	800b990 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013104:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8013106:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013108:	4620      	mov	r0, r4
 801310a:	f7f9 fca1 	bl	800ca50 <pbuf_add_header>
 801310e:	b9e0      	cbnz	r0, 801314a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013110:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8013112:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	600b      	str	r3, [r1, #0]
 801311a:	88bb      	ldrh	r3, [r7, #4]
 801311c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801311e:	6833      	ldr	r3, [r6, #0]
 8013120:	f8c1 3006 	str.w	r3, [r1, #6]
 8013124:	88b3      	ldrh	r3, [r6, #4]
 8013126:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013128:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801312c:	2b06      	cmp	r3, #6
 801312e:	d006      	beq.n	801313e <ethernet_output+0x4e>
 8013130:	4b0a      	ldr	r3, [pc, #40]	; (801315c <ethernet_output+0x6c>)
 8013132:	f240 1233 	movw	r2, #307	; 0x133
 8013136:	490a      	ldr	r1, [pc, #40]	; (8013160 <ethernet_output+0x70>)
 8013138:	480a      	ldr	r0, [pc, #40]	; (8013164 <ethernet_output+0x74>)
 801313a:	f000 fc77 	bl	8013a2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801313e:	4621      	mov	r1, r4
 8013140:	69ab      	ldr	r3, [r5, #24]
 8013142:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8013144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8013148:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801314a:	4a07      	ldr	r2, [pc, #28]	; (8013168 <ethernet_output+0x78>)
}
 801314c:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 8013150:	8953      	ldrh	r3, [r2, #10]
 8013152:	3301      	adds	r3, #1
 8013154:	8153      	strh	r3, [r2, #10]
}
 8013156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801315a:	bf00      	nop
 801315c:	08016844 	.word	0x08016844
 8013160:	0801687c 	.word	0x0801687c
 8013164:	0801487c 	.word	0x0801487c
 8013168:	2401bdf8 	.word	0x2401bdf8

0801316c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801316c:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801316e:	2200      	movs	r2, #0
 8013170:	2104      	movs	r1, #4
{
 8013172:	b510      	push	{r4, lr}
 8013174:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013176:	4618      	mov	r0, r3
 8013178:	f7f6 f9b0 	bl	80094dc <osMessageQueueNew>
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801317c:	4a09      	ldr	r2, [pc, #36]	; (80131a4 <sys_mbox_new+0x38>)
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801317e:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013180:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 8013184:	f8b2 30f8 	ldrh.w	r3, [r2, #248]	; 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8013188:	f8b2 10fa 	ldrh.w	r1, [r2, #250]	; 0xfa
  if(*mbox == NULL)
 801318c:	0940      	lsrs	r0, r0, #5
  ++lwip_stats.sys.mbox.used;
 801318e:	3301      	adds	r3, #1
    return ERR_MEM;

  return ERR_OK;
}
 8013190:	4240      	negs	r0, r0
  ++lwip_stats.sys.mbox.used;
 8013192:	b29b      	uxth	r3, r3
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8013194:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 8013196:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801319a:	bf38      	it	cc
 801319c:	f8a2 30fa 	strhcc.w	r3, [r2, #250]	; 0xfa
}
 80131a0:	bd10      	pop	{r4, pc}
 80131a2:	bf00      	nop
 80131a4:	2401bdf8 	.word	0x2401bdf8

080131a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80131a8:	b510      	push	{r4, lr}
 80131aa:	b082      	sub	sp, #8
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80131ac:	2300      	movs	r3, #0
 80131ae:	6800      	ldr	r0, [r0, #0]
{
 80131b0:	ac02      	add	r4, sp, #8
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80131b2:	461a      	mov	r2, r3
{
 80131b4:	f844 1d04 	str.w	r1, [r4, #-4]!
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80131b8:	4621      	mov	r1, r4
 80131ba:	f7f6 f9cb 	bl	8009554 <osMessageQueuePut>
 80131be:	b908      	cbnz	r0, 80131c4 <sys_mbox_trypost+0x1c>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80131c0:	b002      	add	sp, #8
 80131c2:	bd10      	pop	{r4, pc}
    lwip_stats.sys.mbox.err++;
 80131c4:	4a04      	ldr	r2, [pc, #16]	; (80131d8 <sys_mbox_trypost+0x30>)
 80131c6:	f04f 30ff 	mov.w	r0, #4294967295
 80131ca:	f8b2 30fc 	ldrh.w	r3, [r2, #252]	; 0xfc
 80131ce:	3301      	adds	r3, #1
 80131d0:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
 80131d4:	e7f4      	b.n	80131c0 <sys_mbox_trypost+0x18>
 80131d6:	bf00      	nop
 80131d8:	2401bdf8 	.word	0x2401bdf8

080131dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80131dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131de:	4615      	mov	r5, r2
 80131e0:	4606      	mov	r6, r0
 80131e2:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80131e4:	f7f6 f818 	bl	8009218 <osKernelGetTickCount>
 80131e8:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 80131ea:	b155      	cbz	r5, 8013202 <sys_arch_mbox_fetch+0x26>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80131ec:	462b      	mov	r3, r5
 80131ee:	4639      	mov	r1, r7
 80131f0:	6830      	ldr	r0, [r6, #0]
 80131f2:	2200      	movs	r2, #0
 80131f4:	f7f6 f9ec 	bl	80095d0 <osMessageQueueGet>
    if (status == osOK)
 80131f8:	b970      	cbnz	r0, 8013218 <sys_arch_mbox_fetch+0x3c>
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
 80131fa:	f7f6 f80d 	bl	8009218 <osKernelGetTickCount>
 80131fe:	1b00      	subs	r0, r0, r4
#endif
  }
}
 8013200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013202:	462a      	mov	r2, r5
 8013204:	4639      	mov	r1, r7
 8013206:	f04f 33ff 	mov.w	r3, #4294967295
 801320a:	6830      	ldr	r0, [r6, #0]
 801320c:	f7f6 f9e0 	bl	80095d0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013210:	f7f6 f802 	bl	8009218 <osKernelGetTickCount>
 8013214:	1b00      	subs	r0, r0, r4
 8013216:	e7f3      	b.n	8013200 <sys_arch_mbox_fetch+0x24>
      return SYS_ARCH_TIMEOUT;
 8013218:	f04f 30ff 	mov.w	r0, #4294967295
}
 801321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801321e:	bf00      	nop

08013220 <sys_mbox_valid>:
 8013220:	6800      	ldr	r0, [r0, #0]
 8013222:	3000      	adds	r0, #0
 8013224:	bf18      	it	ne
 8013226:	2001      	movne	r0, #1
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop

0801322c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801322c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801322e:	2000      	movs	r0, #0
 8013230:	f7f6 f84c 	bl	80092cc <osMutexNew>
 8013234:	4b01      	ldr	r3, [pc, #4]	; (801323c <sys_init+0x10>)
 8013236:	6018      	str	r0, [r3, #0]
#endif
}
 8013238:	bd08      	pop	{r3, pc}
 801323a:	bf00      	nop
 801323c:	2401bfdc 	.word	0x2401bfdc

08013240 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013240:	b510      	push	{r4, lr}
 8013242:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013244:	2000      	movs	r0, #0
 8013246:	f7f6 f841 	bl	80092cc <osMutexNew>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801324a:	4a0c      	ldr	r2, [pc, #48]	; (801327c <sys_mutex_new+0x3c>)
  *mutex = osMutexNew(NULL);
 801324c:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 801324e:	b168      	cbz	r0, 801326c <sys_mutex_new+0x2c>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8013250:	f8b2 30f2 	ldrh.w	r3, [r2, #242]	; 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013254:	2000      	movs	r0, #0
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8013256:	f8b2 10f4 	ldrh.w	r1, [r2, #244]	; 0xf4
  ++lwip_stats.sys.mutex.used;
 801325a:	3301      	adds	r3, #1
 801325c:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801325e:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 8013260:	f8a2 30f2 	strh.w	r3, [r2, #242]	; 0xf2
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8013264:	bf38      	it	cc
 8013266:	f8a2 30f4 	strhcc.w	r3, [r2, #244]	; 0xf4
}
 801326a:	bd10      	pop	{r4, pc}
    ++lwip_stats.sys.mutex.err;
 801326c:	f8b2 30f6 	ldrh.w	r3, [r2, #246]	; 0xf6
    return ERR_MEM;
 8013270:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 8013274:	3301      	adds	r3, #1
 8013276:	f8a2 30f6 	strh.w	r3, [r2, #246]	; 0xf6
}
 801327a:	bd10      	pop	{r4, pc}
 801327c:	2401bdf8 	.word	0x2401bdf8

08013280 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013280:	6800      	ldr	r0, [r0, #0]
 8013282:	f04f 31ff 	mov.w	r1, #4294967295
 8013286:	f7f6 b85f 	b.w	8009348 <osMutexAcquire>
 801328a:	bf00      	nop

0801328c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801328c:	6800      	ldr	r0, [r0, #0]
 801328e:	f7f6 b87f 	b.w	8009390 <osMutexRelease>
 8013292:	bf00      	nop

08013294 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013298:	b08a      	sub	sp, #40	; 0x28
 801329a:	4690      	mov	r8, r2
 801329c:	460f      	mov	r7, r1
 801329e:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80132a0:	2220      	movs	r2, #32
 80132a2:	2100      	movs	r1, #0
 80132a4:	a802      	add	r0, sp, #8
{
 80132a6:	461d      	mov	r5, r3
 80132a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  const osThreadAttr_t attributes = {
 80132aa:	f000 fb0f 	bl	80138cc <memset>
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80132ae:	4641      	mov	r1, r8
 80132b0:	aa01      	add	r2, sp, #4
 80132b2:	4638      	mov	r0, r7
  const osThreadAttr_t attributes = {
 80132b4:	9601      	str	r6, [sp, #4]
 80132b6:	e9cd 5406 	strd	r5, r4, [sp, #24]
  return osThreadNew(thread, arg, &attributes);
 80132ba:	f7f5 ffb5 	bl	8009228 <osThreadNew>
#endif
}
 80132be:	b00a      	add	sp, #40	; 0x28
 80132c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80132c4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80132c6:	4b04      	ldr	r3, [pc, #16]	; (80132d8 <sys_arch_protect+0x14>)
 80132c8:	f04f 31ff 	mov.w	r1, #4294967295
 80132cc:	6818      	ldr	r0, [r3, #0]
 80132ce:	f7f6 f83b 	bl	8009348 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 80132d2:	2001      	movs	r0, #1
 80132d4:	bd08      	pop	{r3, pc}
 80132d6:	bf00      	nop
 80132d8:	2401bfdc 	.word	0x2401bfdc

080132dc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80132dc:	4b01      	ldr	r3, [pc, #4]	; (80132e4 <sys_arch_unprotect+0x8>)
 80132de:	6818      	ldr	r0, [r3, #0]
 80132e0:	f7f6 b856 	b.w	8009390 <osMutexRelease>
 80132e4:	2401bfdc 	.word	0x2401bfdc

080132e8 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 80132e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80132ec:	2100      	movs	r1, #0
 80132ee:	f000 baed 	b.w	80138cc <memset>
 80132f2:	bf00      	nop

080132f4 <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 80132f4:	b570      	push	{r4, r5, r6, lr}
    ctx->source_count = 0;
 80132f6:	2500      	movs	r5, #0
{
 80132f8:	4604      	mov	r4, r0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 80132fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80132fe:	30e4      	adds	r0, #228	; 0xe4
    ctx->source_count = 0;
 8013300:	f840 5c04 	str.w	r5, [r0, #-4]
    memset( ctx->source, 0, sizeof( ctx->source ) );
 8013304:	4629      	mov	r1, r5
 8013306:	f000 fae1 	bl	80138cc <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 801330a:	4620      	mov	r0, r4
 801330c:	f840 5b08 	str.w	r5, [r0], #8
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 8013310:	f000 f816 	bl	8013340 <mbedtls_sha512_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    idx = ctx->source_count;
 8013314:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013318:	2b13      	cmp	r3, #19
 801331a:	dc0d      	bgt.n	8013338 <mbedtls_entropy_init+0x44>
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 801331c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013320:	4e06      	ldr	r6, [pc, #24]	; (801333c <mbedtls_entropy_init+0x48>)
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
    ctx->source[idx].strong    = strong;

    ctx->source_count++;
 8013322:	3301      	adds	r3, #1
    ctx->source[idx].threshold = threshold;
 8013324:	2020      	movs	r0, #32
    ctx->source[idx].f_source  = f_source;
 8013326:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ctx->source[idx].strong    = strong;
 801332a:	2101      	movs	r1, #1
    ctx->source[idx].f_source  = f_source;
 801332c:	e9c2 6539 	strd	r6, r5, [r2, #228]	; 0xe4
    ctx->source[idx].strong    = strong;
 8013330:	e9c2 013c 	strd	r0, r1, [r2, #240]	; 0xf0
    ctx->source_count++;
 8013334:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
}
 8013338:	bd70      	pop	{r4, r5, r6, pc}
 801333a:	bf00      	nop
 801333c:	08008491 	.word	0x08008491

08013340 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8013340:	22d8      	movs	r2, #216	; 0xd8
 8013342:	2100      	movs	r1, #0
 8013344:	f000 bac2 	b.w	80138cc <memset>

08013348 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 8013348:	f44f 728c 	mov.w	r2, #280	; 0x118
 801334c:	2100      	movs	r1, #0
 801334e:	f000 babd 	b.w	80138cc <memset>
 8013352:	bf00      	nop

08013354 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8013354:	22d0      	movs	r2, #208	; 0xd0
 8013356:	2100      	movs	r1, #0
 8013358:	f000 bab8 	b.w	80138cc <memset>

0801335c <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 801335c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013360:	2100      	movs	r1, #0
 8013362:	f000 bab3 	b.w	80138cc <memset>
 8013366:	bf00      	nop

08013368 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013368:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801336a:	2200      	movs	r2, #0
 801336c:	4910      	ldr	r1, [pc, #64]	; (80133b0 <MX_USB_DEVICE_Init+0x48>)
 801336e:	4811      	ldr	r0, [pc, #68]	; (80133b4 <MX_USB_DEVICE_Init+0x4c>)
 8013370:	f7f5 fa6c 	bl	800884c <USBD_Init>
 8013374:	b9c8      	cbnz	r0, 80133aa <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013376:	4910      	ldr	r1, [pc, #64]	; (80133b8 <MX_USB_DEVICE_Init+0x50>)
 8013378:	480e      	ldr	r0, [pc, #56]	; (80133b4 <MX_USB_DEVICE_Init+0x4c>)
 801337a:	f7f5 fa7d 	bl	8008878 <USBD_RegisterClass>
 801337e:	b988      	cbnz	r0, 80133a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013380:	490e      	ldr	r1, [pc, #56]	; (80133bc <MX_USB_DEVICE_Init+0x54>)
 8013382:	480c      	ldr	r0, [pc, #48]	; (80133b4 <MX_USB_DEVICE_Init+0x4c>)
 8013384:	f7f5 fa2c 	bl	80087e0 <USBD_CDC_RegisterInterface>
 8013388:	b948      	cbnz	r0, 801339e <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801338a:	480a      	ldr	r0, [pc, #40]	; (80133b4 <MX_USB_DEVICE_Init+0x4c>)
 801338c:	f7f5 fa8e 	bl	80088ac <USBD_Start>
 8013390:	b108      	cbz	r0, 8013396 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8013392:	f7ed fcbf 	bl	8000d14 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801339a:	f7f1 b8e9 	b.w	8004570 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 801339e:	f7ed fcb9 	bl	8000d14 <Error_Handler>
 80133a2:	e7f2      	b.n	801338a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80133a4:	f7ed fcb6 	bl	8000d14 <Error_Handler>
 80133a8:	e7ea      	b.n	8013380 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80133aa:	f7ed fcb3 	bl	8000d14 <Error_Handler>
 80133ae:	e7e2      	b.n	8013376 <MX_USB_DEVICE_Init+0xe>
 80133b0:	24000154 	.word	0x24000154
 80133b4:	2401bfe0 	.word	0x2401bfe0
 80133b8:	24000024 	.word	0x24000024
 80133bc:	24000140 	.word	0x24000140

080133c0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80133c0:	2000      	movs	r0, #0
 80133c2:	4770      	bx	lr

080133c4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80133c4:	2000      	movs	r0, #0
 80133c6:	4770      	bx	lr

080133c8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80133c8:	2000      	movs	r0, #0
 80133ca:	4770      	bx	lr

080133cc <CDC_Receive_FS>:
{
 80133cc:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80133ce:	4c05      	ldr	r4, [pc, #20]	; (80133e4 <CDC_Receive_FS+0x18>)
 80133d0:	4601      	mov	r1, r0
 80133d2:	4620      	mov	r0, r4
 80133d4:	f7f5 fa18 	bl	8008808 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80133d8:	4620      	mov	r0, r4
 80133da:	f7f5 fa1f 	bl	800881c <USBD_CDC_ReceivePacket>
}
 80133de:	2000      	movs	r0, #0
 80133e0:	bd10      	pop	{r4, pc}
 80133e2:	bf00      	nop
 80133e4:	2401bfe0 	.word	0x2401bfe0

080133e8 <CDC_Init_FS>:
{
 80133e8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80133ea:	4c06      	ldr	r4, [pc, #24]	; (8013404 <CDC_Init_FS+0x1c>)
 80133ec:	2200      	movs	r2, #0
 80133ee:	4906      	ldr	r1, [pc, #24]	; (8013408 <CDC_Init_FS+0x20>)
 80133f0:	4620      	mov	r0, r4
 80133f2:	f7f5 f9fd 	bl	80087f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80133f6:	4620      	mov	r0, r4
 80133f8:	4904      	ldr	r1, [pc, #16]	; (801340c <CDC_Init_FS+0x24>)
 80133fa:	f7f5 fa05 	bl	8008808 <USBD_CDC_SetRxBuffer>
}
 80133fe:	2000      	movs	r0, #0
 8013400:	bd10      	pop	{r4, pc}
 8013402:	bf00      	nop
 8013404:	2401bfe0 	.word	0x2401bfe0
 8013408:	2401cab0 	.word	0x2401cab0
 801340c:	2401c2b0 	.word	0x2401c2b0

08013410 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013410:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8013412:	4801      	ldr	r0, [pc, #4]	; (8013418 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8013414:	800b      	strh	r3, [r1, #0]
}
 8013416:	4770      	bx	lr
 8013418:	24000170 	.word	0x24000170

0801341c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801341c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801341e:	4801      	ldr	r0, [pc, #4]	; (8013424 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8013420:	800b      	strh	r3, [r1, #0]
}
 8013422:	4770      	bx	lr
 8013424:	24000184 	.word	0x24000184

08013428 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013428:	3a01      	subs	r2, #1
 801342a:	b430      	push	{r4, r5}
 801342c:	b2d2      	uxtb	r2, r2
 801342e:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8013430:	2500      	movs	r5, #0
 8013432:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 8013436:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 8013438:	704d      	strb	r5, [r1, #1]
 801343a:	3102      	adds	r1, #2
    value = value << 4;
 801343c:	0100      	lsls	r0, r0, #4
 801343e:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 8013440:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8013442:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013446:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801344a:	bf94      	ite	ls
 801344c:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013450:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 8013454:	428c      	cmp	r4, r1
 8013456:	d1ee      	bne.n	8013436 <IntToUnicode+0xe>
  }
}
 8013458:	bc30      	pop	{r4, r5}
 801345a:	4770      	bx	lr

0801345c <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801345c:	480b      	ldr	r0, [pc, #44]	; (801348c <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 801345e:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013460:	4b0b      	ldr	r3, [pc, #44]	; (8013490 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013462:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 8013464:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8013466:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8013468:	18c0      	adds	r0, r0, r3
 801346a:	d101      	bne.n	8013470 <USBD_FS_SerialStrDescriptor+0x14>
}
 801346c:	4809      	ldr	r0, [pc, #36]	; (8013494 <USBD_FS_SerialStrDescriptor+0x38>)
 801346e:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013470:	4b09      	ldr	r3, [pc, #36]	; (8013498 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013472:	2208      	movs	r2, #8
 8013474:	4909      	ldr	r1, [pc, #36]	; (801349c <USBD_FS_SerialStrDescriptor+0x40>)
{
 8013476:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013478:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801347a:	f7ff ffd5 	bl	8013428 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801347e:	2204      	movs	r2, #4
 8013480:	4907      	ldr	r1, [pc, #28]	; (80134a0 <USBD_FS_SerialStrDescriptor+0x44>)
 8013482:	4620      	mov	r0, r4
 8013484:	f7ff ffd0 	bl	8013428 <IntToUnicode>
}
 8013488:	4802      	ldr	r0, [pc, #8]	; (8013494 <USBD_FS_SerialStrDescriptor+0x38>)
 801348a:	bd10      	pop	{r4, pc}
 801348c:	1ff1e800 	.word	0x1ff1e800
 8013490:	1ff1e808 	.word	0x1ff1e808
 8013494:	24000188 	.word	0x24000188
 8013498:	1ff1e804 	.word	0x1ff1e804
 801349c:	2400018a 	.word	0x2400018a
 80134a0:	2400019a 	.word	0x2400019a

080134a4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80134a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80134a6:	4c04      	ldr	r4, [pc, #16]	; (80134b8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80134a8:	460a      	mov	r2, r1
 80134aa:	4804      	ldr	r0, [pc, #16]	; (80134bc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80134ac:	4621      	mov	r1, r4
 80134ae:	f7f5 fe0d 	bl	80090cc <USBD_GetString>
}
 80134b2:	4620      	mov	r0, r4
 80134b4:	bd10      	pop	{r4, pc}
 80134b6:	bf00      	nop
 80134b8:	2401d2b0 	.word	0x2401d2b0
 80134bc:	080168d4 	.word	0x080168d4

080134c0 <USBD_FS_ProductStrDescriptor>:
{
 80134c0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80134c2:	4c04      	ldr	r4, [pc, #16]	; (80134d4 <USBD_FS_ProductStrDescriptor+0x14>)
 80134c4:	460a      	mov	r2, r1
 80134c6:	4804      	ldr	r0, [pc, #16]	; (80134d8 <USBD_FS_ProductStrDescriptor+0x18>)
 80134c8:	4621      	mov	r1, r4
 80134ca:	f7f5 fdff 	bl	80090cc <USBD_GetString>
}
 80134ce:	4620      	mov	r0, r4
 80134d0:	bd10      	pop	{r4, pc}
 80134d2:	bf00      	nop
 80134d4:	2401d2b0 	.word	0x2401d2b0
 80134d8:	080168e8 	.word	0x080168e8

080134dc <USBD_FS_ConfigStrDescriptor>:
{
 80134dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134de:	4c04      	ldr	r4, [pc, #16]	; (80134f0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80134e0:	460a      	mov	r2, r1
 80134e2:	4804      	ldr	r0, [pc, #16]	; (80134f4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80134e4:	4621      	mov	r1, r4
 80134e6:	f7f5 fdf1 	bl	80090cc <USBD_GetString>
}
 80134ea:	4620      	mov	r0, r4
 80134ec:	bd10      	pop	{r4, pc}
 80134ee:	bf00      	nop
 80134f0:	2401d2b0 	.word	0x2401d2b0
 80134f4:	080168b8 	.word	0x080168b8

080134f8 <USBD_FS_InterfaceStrDescriptor>:
{
 80134f8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134fa:	4c04      	ldr	r4, [pc, #16]	; (801350c <USBD_FS_InterfaceStrDescriptor+0x14>)
 80134fc:	460a      	mov	r2, r1
 80134fe:	4804      	ldr	r0, [pc, #16]	; (8013510 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8013500:	4621      	mov	r1, r4
 8013502:	f7f5 fde3 	bl	80090cc <USBD_GetString>
}
 8013506:	4620      	mov	r0, r4
 8013508:	bd10      	pop	{r4, pc}
 801350a:	bf00      	nop
 801350c:	2401d2b0 	.word	0x2401d2b0
 8013510:	080168c4 	.word	0x080168c4

08013514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013514:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013516:	2300      	movs	r3, #0
{
 8013518:	b0b7      	sub	sp, #220	; 0xdc
 801351a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801351c:	22bc      	movs	r2, #188	; 0xbc
 801351e:	4619      	mov	r1, r3
 8013520:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013522:	9306      	str	r3, [sp, #24]
 8013524:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013528:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801352c:	f000 f9ce 	bl	80138cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013530:	6822      	ldr	r2, [r4, #0]
 8013532:	4b2d      	ldr	r3, [pc, #180]	; (80135e8 <HAL_PCD_MspInit+0xd4>)
 8013534:	429a      	cmp	r2, r3
 8013536:	d001      	beq.n	801353c <HAL_PCD_MspInit+0x28>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013538:	b037      	add	sp, #220	; 0xdc
 801353a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801353c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8013540:	2101      	movs	r1, #1
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 8013542:	2278      	movs	r2, #120	; 0x78
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8013544:	2302      	movs	r3, #2
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013546:	9407      	str	r4, [sp, #28]
    PeriphClkInitStruct.PLL3.PLL3Q = 20;
 8013548:	2414      	movs	r4, #20
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801354a:	9110      	str	r1, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801354c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 8013550:	9211      	str	r2, [sp, #68]	; 0x44
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8013552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013556:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8013558:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801355a:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801355c:	9228      	str	r2, [sp, #160]	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3Q = 20;
 801355e:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013562:	f7f1 fe9d 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8013566:	2800      	cmp	r0, #0
 8013568:	d13b      	bne.n	80135e2 <HAL_PCD_MspInit+0xce>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801356a:	4c20      	ldr	r4, [pc, #128]	; (80135ec <HAL_PCD_MspInit+0xd8>)
    HAL_PWREx_EnableUSBVoltageDetector();
 801356c:	f7f1 f800 	bl	8004570 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8013570:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013574:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013576:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801357a:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801357c:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801357e:	f043 0301 	orr.w	r3, r3, #1
 8013582:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8013586:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801358a:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801358c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013590:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013592:	4817      	ldr	r0, [pc, #92]	; (80135f0 <HAL_PCD_MspInit+0xdc>)
 8013594:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801359a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801359c:	e9cd 5205 	strd	r5, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80135a0:	f7f0 f862 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80135a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80135a8:	a902      	add	r1, sp, #8
 80135aa:	4811      	ldr	r0, [pc, #68]	; (80135f0 <HAL_PCD_MspInit+0xdc>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80135ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135ae:	e9cd 5503 	strd	r5, r5, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80135b2:	f7f0 f859 	bl	8003668 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80135b6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80135ba:	462a      	mov	r2, r5
 80135bc:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80135be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80135c2:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80135c4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80135c8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80135cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135d0:	9301      	str	r3, [sp, #4]
 80135d2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80135d4:	f7ee f88a 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80135d8:	2065      	movs	r0, #101	; 0x65
 80135da:	f7ee f8bd 	bl	8001758 <HAL_NVIC_EnableIRQ>
}
 80135de:	b037      	add	sp, #220	; 0xdc
 80135e0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80135e2:	f7ed fb97 	bl	8000d14 <Error_Handler>
 80135e6:	e7c0      	b.n	801356a <HAL_PCD_MspInit+0x56>
 80135e8:	40080000 	.word	0x40080000
 80135ec:	58024400 	.word	0x58024400
 80135f0:	58020000 	.word	0x58020000

080135f4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80135f4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80135f8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80135fc:	f7f5 b968 	b.w	80088d0 <USBD_LL_SetupStage>

08013600 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013600:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8013604:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013608:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801360c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013610:	f7f5 b98e 	b.w	8008930 <USBD_LL_DataOutStage>

08013614 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013614:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8013618:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801361c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013622:	f7f5 b9bb 	b.w	800899c <USBD_LL_DataInStage>
 8013626:	bf00      	nop

08013628 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013628:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801362c:	f7f5 ba5e 	b.w	8008aec <USBD_LL_SOF>

08013630 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013630:	68c1      	ldr	r1, [r0, #12]
{
 8013632:	b510      	push	{r4, lr}
 8013634:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013636:	b121      	cbz	r1, 8013642 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013638:	2902      	cmp	r1, #2
 801363a:	d00c      	beq.n	8013656 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801363c:	f7ed fb6a 	bl	8000d14 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013640:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013642:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8013646:	f7f5 fa35 	bl	8008ab4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801364a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801364e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013652:	f7f5 ba03 	b.w	8008a5c <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 8013656:	2101      	movs	r1, #1
 8013658:	e7f3      	b.n	8013642 <HAL_PCD_ResetCallback+0x12>
 801365a:	bf00      	nop

0801365c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801365c:	b510      	push	{r4, lr}
 801365e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013660:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013664:	f7f5 fa2a 	bl	8008abc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013668:	6822      	ldr	r2, [r4, #0]
 801366a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801366e:	f043 0301 	orr.w	r3, r3, #1
 8013672:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013676:	6a23      	ldr	r3, [r4, #32]
 8013678:	b123      	cbz	r3, 8013684 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801367a:	4a03      	ldr	r2, [pc, #12]	; (8013688 <HAL_PCD_SuspendCallback+0x2c>)
 801367c:	6913      	ldr	r3, [r2, #16]
 801367e:	f043 0306 	orr.w	r3, r3, #6
 8013682:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013684:	bd10      	pop	{r4, pc}
 8013686:	bf00      	nop
 8013688:	e000ed00 	.word	0xe000ed00

0801368c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801368c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013690:	f7f5 ba20 	b.w	8008ad4 <USBD_LL_Resume>

08013694 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013694:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013698:	f7f5 ba50 	b.w	8008b3c <USBD_LL_IsoOUTIncomplete>

0801369c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801369c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80136a0:	f7f5 ba38 	b.w	8008b14 <USBD_LL_IsoINIncomplete>

080136a4 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80136a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80136a8:	f7f5 ba5c 	b.w	8008b64 <USBD_LL_DevConnected>

080136ac <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80136ac:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80136b0:	f7f5 ba5a 	b.w	8008b68 <USBD_LL_DevDisconnected>

080136b4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80136b4:	7802      	ldrb	r2, [r0, #0]
 80136b6:	b10a      	cbz	r2, 80136bc <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80136b8:	2000      	movs	r0, #0
 80136ba:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 80136bc:	4b15      	ldr	r3, [pc, #84]	; (8013714 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80136be:	2101      	movs	r1, #1
{
 80136c0:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80136c2:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80136c4:	2509      	movs	r5, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80136c6:	4e14      	ldr	r6, [pc, #80]	; (8013718 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 80136c8:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80136cc:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80136d0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80136d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80136d4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80136d6:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80136d8:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80136dc:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80136e0:	e9c3 4106 	strd	r4, r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80136e4:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80136e8:	f7f0 f992 	bl	8003a10 <HAL_PCD_Init>
 80136ec:	b978      	cbnz	r0, 801370e <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80136ee:	2180      	movs	r1, #128	; 0x80
 80136f0:	4808      	ldr	r0, [pc, #32]	; (8013714 <USBD_LL_Init+0x60>)
 80136f2:	f7f0 fefb 	bl	80044ec <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80136f6:	2240      	movs	r2, #64	; 0x40
 80136f8:	2100      	movs	r1, #0
 80136fa:	4806      	ldr	r0, [pc, #24]	; (8013714 <USBD_LL_Init+0x60>)
 80136fc:	f7f0 fed2 	bl	80044a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013700:	2280      	movs	r2, #128	; 0x80
 8013702:	2101      	movs	r1, #1
 8013704:	4803      	ldr	r0, [pc, #12]	; (8013714 <USBD_LL_Init+0x60>)
 8013706:	f7f0 fecd 	bl	80044a4 <HAL_PCDEx_SetTxFiFo>
}
 801370a:	2000      	movs	r0, #0
 801370c:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 801370e:	f7ed fb01 	bl	8000d14 <Error_Handler>
 8013712:	e7ec      	b.n	80136ee <USBD_LL_Init+0x3a>
 8013714:	2401d4b0 	.word	0x2401d4b0
 8013718:	40080000 	.word	0x40080000

0801371c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801371c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801371e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013722:	f7f0 fa0d 	bl	8003b40 <HAL_PCD_Start>
 8013726:	2803      	cmp	r0, #3
 8013728:	d802      	bhi.n	8013730 <USBD_LL_Start+0x14>
 801372a:	4b02      	ldr	r3, [pc, #8]	; (8013734 <USBD_LL_Start+0x18>)
 801372c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801372e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8013730:	2003      	movs	r0, #3
}
 8013732:	bd08      	pop	{r3, pc}
 8013734:	08016900 	.word	0x08016900

08013738 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013738:	b510      	push	{r4, lr}
 801373a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801373c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013740:	4613      	mov	r3, r2
 8013742:	4622      	mov	r2, r4
 8013744:	f7f0 fd6a 	bl	800421c <HAL_PCD_EP_Open>
 8013748:	2803      	cmp	r0, #3
 801374a:	d802      	bhi.n	8013752 <USBD_LL_OpenEP+0x1a>
 801374c:	4b02      	ldr	r3, [pc, #8]	; (8013758 <USBD_LL_OpenEP+0x20>)
 801374e:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013750:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013752:	2003      	movs	r0, #3
}
 8013754:	bd10      	pop	{r4, pc}
 8013756:	bf00      	nop
 8013758:	08016900 	.word	0x08016900

0801375c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801375c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801375e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013762:	f7f0 fd95 	bl	8004290 <HAL_PCD_EP_Close>
 8013766:	2803      	cmp	r0, #3
 8013768:	d802      	bhi.n	8013770 <USBD_LL_CloseEP+0x14>
 801376a:	4b02      	ldr	r3, [pc, #8]	; (8013774 <USBD_LL_CloseEP+0x18>)
 801376c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801376e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013770:	2003      	movs	r0, #3
}
 8013772:	bd08      	pop	{r3, pc}
 8013774:	08016900 	.word	0x08016900

08013778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013778:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801377a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801377e:	f7f0 fe11 	bl	80043a4 <HAL_PCD_EP_SetStall>
 8013782:	2803      	cmp	r0, #3
 8013784:	d802      	bhi.n	801378c <USBD_LL_StallEP+0x14>
 8013786:	4b02      	ldr	r3, [pc, #8]	; (8013790 <USBD_LL_StallEP+0x18>)
 8013788:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801378a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801378c:	2003      	movs	r0, #3
}
 801378e:	bd08      	pop	{r3, pc}
 8013790:	08016900 	.word	0x08016900

08013794 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013794:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013796:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801379a:	f7f0 fe47 	bl	800442c <HAL_PCD_EP_ClrStall>
 801379e:	2803      	cmp	r0, #3
 80137a0:	d802      	bhi.n	80137a8 <USBD_LL_ClearStallEP+0x14>
 80137a2:	4b02      	ldr	r3, [pc, #8]	; (80137ac <USBD_LL_ClearStallEP+0x18>)
 80137a4:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80137a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80137a8:	2003      	movs	r0, #3
}
 80137aa:	bd08      	pop	{r3, pc}
 80137ac:	08016900 	.word	0x08016900

080137b0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 80137b0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80137b2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80137b6:	d406      	bmi.n	80137c6 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80137b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80137bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80137c0:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 80137c4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80137c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80137ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80137ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80137d2:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80137d6:	4770      	bx	lr

080137d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80137d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80137da:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80137de:	f7f0 fd09 	bl	80041f4 <HAL_PCD_SetAddress>
 80137e2:	2803      	cmp	r0, #3
 80137e4:	d802      	bhi.n	80137ec <USBD_LL_SetUSBAddress+0x14>
 80137e6:	4b02      	ldr	r3, [pc, #8]	; (80137f0 <USBD_LL_SetUSBAddress+0x18>)
 80137e8:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80137ea:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80137ec:	2003      	movs	r0, #3
}
 80137ee:	bd08      	pop	{r3, pc}
 80137f0:	08016900 	.word	0x08016900

080137f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80137f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80137fa:	f7f0 fdaf 	bl	800435c <HAL_PCD_EP_Transmit>
 80137fe:	2803      	cmp	r0, #3
 8013800:	d802      	bhi.n	8013808 <USBD_LL_Transmit+0x14>
 8013802:	4b02      	ldr	r3, [pc, #8]	; (801380c <USBD_LL_Transmit+0x18>)
 8013804:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013806:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013808:	2003      	movs	r0, #3
}
 801380a:	bd08      	pop	{r3, pc}
 801380c:	08016900 	.word	0x08016900

08013810 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013810:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013812:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013816:	f7f0 fd6f 	bl	80042f8 <HAL_PCD_EP_Receive>
 801381a:	2803      	cmp	r0, #3
 801381c:	d802      	bhi.n	8013824 <USBD_LL_PrepareReceive+0x14>
 801381e:	4b02      	ldr	r3, [pc, #8]	; (8013828 <USBD_LL_PrepareReceive+0x18>)
 8013820:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013822:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013824:	2003      	movs	r0, #3
}
 8013826:	bd08      	pop	{r3, pc}
 8013828:	08016900 	.word	0x08016900

0801382c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801382c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013830:	f7f0 bd8a 	b.w	8004348 <HAL_PCD_EP_GetRxCount>

08013834 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8013834:	4800      	ldr	r0, [pc, #0]	; (8013838 <USBD_static_malloc+0x4>)
 8013836:	4770      	bx	lr
 8013838:	24014170 	.word	0x24014170

0801383c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop

08013840 <__libc_init_array>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	4e0d      	ldr	r6, [pc, #52]	; (8013878 <__libc_init_array+0x38>)
 8013844:	4c0d      	ldr	r4, [pc, #52]	; (801387c <__libc_init_array+0x3c>)
 8013846:	1ba4      	subs	r4, r4, r6
 8013848:	10a4      	asrs	r4, r4, #2
 801384a:	2500      	movs	r5, #0
 801384c:	42a5      	cmp	r5, r4
 801384e:	d109      	bne.n	8013864 <__libc_init_array+0x24>
 8013850:	4e0b      	ldr	r6, [pc, #44]	; (8013880 <__libc_init_array+0x40>)
 8013852:	4c0c      	ldr	r4, [pc, #48]	; (8013884 <__libc_init_array+0x44>)
 8013854:	f000 ff5a 	bl	801470c <_init>
 8013858:	1ba4      	subs	r4, r4, r6
 801385a:	10a4      	asrs	r4, r4, #2
 801385c:	2500      	movs	r5, #0
 801385e:	42a5      	cmp	r5, r4
 8013860:	d105      	bne.n	801386e <__libc_init_array+0x2e>
 8013862:	bd70      	pop	{r4, r5, r6, pc}
 8013864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013868:	4798      	blx	r3
 801386a:	3501      	adds	r5, #1
 801386c:	e7ee      	b.n	801384c <__libc_init_array+0xc>
 801386e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013872:	4798      	blx	r3
 8013874:	3501      	adds	r5, #1
 8013876:	e7f2      	b.n	801385e <__libc_init_array+0x1e>
 8013878:	080169a4 	.word	0x080169a4
 801387c:	080169a4 	.word	0x080169a4
 8013880:	080169a4 	.word	0x080169a4
 8013884:	080169a8 	.word	0x080169a8

08013888 <malloc>:
 8013888:	4b02      	ldr	r3, [pc, #8]	; (8013894 <malloc+0xc>)
 801388a:	4601      	mov	r1, r0
 801388c:	6818      	ldr	r0, [r3, #0]
 801388e:	f000 b873 	b.w	8013978 <_malloc_r>
 8013892:	bf00      	nop
 8013894:	240001a4 	.word	0x240001a4

08013898 <memcmp>:
 8013898:	b530      	push	{r4, r5, lr}
 801389a:	2400      	movs	r4, #0
 801389c:	42a2      	cmp	r2, r4
 801389e:	d101      	bne.n	80138a4 <memcmp+0xc>
 80138a0:	2000      	movs	r0, #0
 80138a2:	e007      	b.n	80138b4 <memcmp+0x1c>
 80138a4:	5d03      	ldrb	r3, [r0, r4]
 80138a6:	3401      	adds	r4, #1
 80138a8:	190d      	adds	r5, r1, r4
 80138aa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80138ae:	42ab      	cmp	r3, r5
 80138b0:	d0f4      	beq.n	801389c <memcmp+0x4>
 80138b2:	1b58      	subs	r0, r3, r5
 80138b4:	bd30      	pop	{r4, r5, pc}

080138b6 <memcpy>:
 80138b6:	b510      	push	{r4, lr}
 80138b8:	1e43      	subs	r3, r0, #1
 80138ba:	440a      	add	r2, r1
 80138bc:	4291      	cmp	r1, r2
 80138be:	d100      	bne.n	80138c2 <memcpy+0xc>
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138ca:	e7f7      	b.n	80138bc <memcpy+0x6>

080138cc <memset>:
 80138cc:	4402      	add	r2, r0
 80138ce:	4603      	mov	r3, r0
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d100      	bne.n	80138d6 <memset+0xa>
 80138d4:	4770      	bx	lr
 80138d6:	f803 1b01 	strb.w	r1, [r3], #1
 80138da:	e7f9      	b.n	80138d0 <memset+0x4>

080138dc <_free_r>:
 80138dc:	b538      	push	{r3, r4, r5, lr}
 80138de:	4605      	mov	r5, r0
 80138e0:	2900      	cmp	r1, #0
 80138e2:	d045      	beq.n	8013970 <_free_r+0x94>
 80138e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138e8:	1f0c      	subs	r4, r1, #4
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	bfb8      	it	lt
 80138ee:	18e4      	addlt	r4, r4, r3
 80138f0:	f000 fb96 	bl	8014020 <__malloc_lock>
 80138f4:	4a1f      	ldr	r2, [pc, #124]	; (8013974 <_free_r+0x98>)
 80138f6:	6813      	ldr	r3, [r2, #0]
 80138f8:	4610      	mov	r0, r2
 80138fa:	b933      	cbnz	r3, 801390a <_free_r+0x2e>
 80138fc:	6063      	str	r3, [r4, #4]
 80138fe:	6014      	str	r4, [r2, #0]
 8013900:	4628      	mov	r0, r5
 8013902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013906:	f000 bb8c 	b.w	8014022 <__malloc_unlock>
 801390a:	42a3      	cmp	r3, r4
 801390c:	d90c      	bls.n	8013928 <_free_r+0x4c>
 801390e:	6821      	ldr	r1, [r4, #0]
 8013910:	1862      	adds	r2, r4, r1
 8013912:	4293      	cmp	r3, r2
 8013914:	bf04      	itt	eq
 8013916:	681a      	ldreq	r2, [r3, #0]
 8013918:	685b      	ldreq	r3, [r3, #4]
 801391a:	6063      	str	r3, [r4, #4]
 801391c:	bf04      	itt	eq
 801391e:	1852      	addeq	r2, r2, r1
 8013920:	6022      	streq	r2, [r4, #0]
 8013922:	6004      	str	r4, [r0, #0]
 8013924:	e7ec      	b.n	8013900 <_free_r+0x24>
 8013926:	4613      	mov	r3, r2
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	b10a      	cbz	r2, 8013930 <_free_r+0x54>
 801392c:	42a2      	cmp	r2, r4
 801392e:	d9fa      	bls.n	8013926 <_free_r+0x4a>
 8013930:	6819      	ldr	r1, [r3, #0]
 8013932:	1858      	adds	r0, r3, r1
 8013934:	42a0      	cmp	r0, r4
 8013936:	d10b      	bne.n	8013950 <_free_r+0x74>
 8013938:	6820      	ldr	r0, [r4, #0]
 801393a:	4401      	add	r1, r0
 801393c:	1858      	adds	r0, r3, r1
 801393e:	4282      	cmp	r2, r0
 8013940:	6019      	str	r1, [r3, #0]
 8013942:	d1dd      	bne.n	8013900 <_free_r+0x24>
 8013944:	6810      	ldr	r0, [r2, #0]
 8013946:	6852      	ldr	r2, [r2, #4]
 8013948:	605a      	str	r2, [r3, #4]
 801394a:	4401      	add	r1, r0
 801394c:	6019      	str	r1, [r3, #0]
 801394e:	e7d7      	b.n	8013900 <_free_r+0x24>
 8013950:	d902      	bls.n	8013958 <_free_r+0x7c>
 8013952:	230c      	movs	r3, #12
 8013954:	602b      	str	r3, [r5, #0]
 8013956:	e7d3      	b.n	8013900 <_free_r+0x24>
 8013958:	6820      	ldr	r0, [r4, #0]
 801395a:	1821      	adds	r1, r4, r0
 801395c:	428a      	cmp	r2, r1
 801395e:	bf04      	itt	eq
 8013960:	6811      	ldreq	r1, [r2, #0]
 8013962:	6852      	ldreq	r2, [r2, #4]
 8013964:	6062      	str	r2, [r4, #4]
 8013966:	bf04      	itt	eq
 8013968:	1809      	addeq	r1, r1, r0
 801396a:	6021      	streq	r1, [r4, #0]
 801396c:	605c      	str	r4, [r3, #4]
 801396e:	e7c7      	b.n	8013900 <_free_r+0x24>
 8013970:	bd38      	pop	{r3, r4, r5, pc}
 8013972:	bf00      	nop
 8013974:	24014390 	.word	0x24014390

08013978 <_malloc_r>:
 8013978:	b570      	push	{r4, r5, r6, lr}
 801397a:	1ccd      	adds	r5, r1, #3
 801397c:	f025 0503 	bic.w	r5, r5, #3
 8013980:	3508      	adds	r5, #8
 8013982:	2d0c      	cmp	r5, #12
 8013984:	bf38      	it	cc
 8013986:	250c      	movcc	r5, #12
 8013988:	2d00      	cmp	r5, #0
 801398a:	4606      	mov	r6, r0
 801398c:	db01      	blt.n	8013992 <_malloc_r+0x1a>
 801398e:	42a9      	cmp	r1, r5
 8013990:	d903      	bls.n	801399a <_malloc_r+0x22>
 8013992:	230c      	movs	r3, #12
 8013994:	6033      	str	r3, [r6, #0]
 8013996:	2000      	movs	r0, #0
 8013998:	bd70      	pop	{r4, r5, r6, pc}
 801399a:	f000 fb41 	bl	8014020 <__malloc_lock>
 801399e:	4a21      	ldr	r2, [pc, #132]	; (8013a24 <_malloc_r+0xac>)
 80139a0:	6814      	ldr	r4, [r2, #0]
 80139a2:	4621      	mov	r1, r4
 80139a4:	b991      	cbnz	r1, 80139cc <_malloc_r+0x54>
 80139a6:	4c20      	ldr	r4, [pc, #128]	; (8013a28 <_malloc_r+0xb0>)
 80139a8:	6823      	ldr	r3, [r4, #0]
 80139aa:	b91b      	cbnz	r3, 80139b4 <_malloc_r+0x3c>
 80139ac:	4630      	mov	r0, r6
 80139ae:	f000 f889 	bl	8013ac4 <_sbrk_r>
 80139b2:	6020      	str	r0, [r4, #0]
 80139b4:	4629      	mov	r1, r5
 80139b6:	4630      	mov	r0, r6
 80139b8:	f000 f884 	bl	8013ac4 <_sbrk_r>
 80139bc:	1c43      	adds	r3, r0, #1
 80139be:	d124      	bne.n	8013a0a <_malloc_r+0x92>
 80139c0:	230c      	movs	r3, #12
 80139c2:	6033      	str	r3, [r6, #0]
 80139c4:	4630      	mov	r0, r6
 80139c6:	f000 fb2c 	bl	8014022 <__malloc_unlock>
 80139ca:	e7e4      	b.n	8013996 <_malloc_r+0x1e>
 80139cc:	680b      	ldr	r3, [r1, #0]
 80139ce:	1b5b      	subs	r3, r3, r5
 80139d0:	d418      	bmi.n	8013a04 <_malloc_r+0x8c>
 80139d2:	2b0b      	cmp	r3, #11
 80139d4:	d90f      	bls.n	80139f6 <_malloc_r+0x7e>
 80139d6:	600b      	str	r3, [r1, #0]
 80139d8:	50cd      	str	r5, [r1, r3]
 80139da:	18cc      	adds	r4, r1, r3
 80139dc:	4630      	mov	r0, r6
 80139de:	f000 fb20 	bl	8014022 <__malloc_unlock>
 80139e2:	f104 000b 	add.w	r0, r4, #11
 80139e6:	1d23      	adds	r3, r4, #4
 80139e8:	f020 0007 	bic.w	r0, r0, #7
 80139ec:	1ac3      	subs	r3, r0, r3
 80139ee:	d0d3      	beq.n	8013998 <_malloc_r+0x20>
 80139f0:	425a      	negs	r2, r3
 80139f2:	50e2      	str	r2, [r4, r3]
 80139f4:	e7d0      	b.n	8013998 <_malloc_r+0x20>
 80139f6:	428c      	cmp	r4, r1
 80139f8:	684b      	ldr	r3, [r1, #4]
 80139fa:	bf16      	itet	ne
 80139fc:	6063      	strne	r3, [r4, #4]
 80139fe:	6013      	streq	r3, [r2, #0]
 8013a00:	460c      	movne	r4, r1
 8013a02:	e7eb      	b.n	80139dc <_malloc_r+0x64>
 8013a04:	460c      	mov	r4, r1
 8013a06:	6849      	ldr	r1, [r1, #4]
 8013a08:	e7cc      	b.n	80139a4 <_malloc_r+0x2c>
 8013a0a:	1cc4      	adds	r4, r0, #3
 8013a0c:	f024 0403 	bic.w	r4, r4, #3
 8013a10:	42a0      	cmp	r0, r4
 8013a12:	d005      	beq.n	8013a20 <_malloc_r+0xa8>
 8013a14:	1a21      	subs	r1, r4, r0
 8013a16:	4630      	mov	r0, r6
 8013a18:	f000 f854 	bl	8013ac4 <_sbrk_r>
 8013a1c:	3001      	adds	r0, #1
 8013a1e:	d0cf      	beq.n	80139c0 <_malloc_r+0x48>
 8013a20:	6025      	str	r5, [r4, #0]
 8013a22:	e7db      	b.n	80139dc <_malloc_r+0x64>
 8013a24:	24014390 	.word	0x24014390
 8013a28:	24014394 	.word	0x24014394

08013a2c <iprintf>:
 8013a2c:	b40f      	push	{r0, r1, r2, r3}
 8013a2e:	4b0a      	ldr	r3, [pc, #40]	; (8013a58 <iprintf+0x2c>)
 8013a30:	b513      	push	{r0, r1, r4, lr}
 8013a32:	681c      	ldr	r4, [r3, #0]
 8013a34:	b124      	cbz	r4, 8013a40 <iprintf+0x14>
 8013a36:	69a3      	ldr	r3, [r4, #24]
 8013a38:	b913      	cbnz	r3, 8013a40 <iprintf+0x14>
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	f000 fa02 	bl	8013e44 <__sinit>
 8013a40:	ab05      	add	r3, sp, #20
 8013a42:	9a04      	ldr	r2, [sp, #16]
 8013a44:	68a1      	ldr	r1, [r4, #8]
 8013a46:	9301      	str	r3, [sp, #4]
 8013a48:	4620      	mov	r0, r4
 8013a4a:	f000 fb15 	bl	8014078 <_vfiprintf_r>
 8013a4e:	b002      	add	sp, #8
 8013a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a54:	b004      	add	sp, #16
 8013a56:	4770      	bx	lr
 8013a58:	240001a4 	.word	0x240001a4

08013a5c <rand>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4b13      	ldr	r3, [pc, #76]	; (8013aac <rand+0x50>)
 8013a60:	681c      	ldr	r4, [r3, #0]
 8013a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013a64:	b97b      	cbnz	r3, 8013a86 <rand+0x2a>
 8013a66:	2018      	movs	r0, #24
 8013a68:	f7ff ff0e 	bl	8013888 <malloc>
 8013a6c:	4a10      	ldr	r2, [pc, #64]	; (8013ab0 <rand+0x54>)
 8013a6e:	4b11      	ldr	r3, [pc, #68]	; (8013ab4 <rand+0x58>)
 8013a70:	63a0      	str	r0, [r4, #56]	; 0x38
 8013a72:	e9c0 2300 	strd	r2, r3, [r0]
 8013a76:	4b10      	ldr	r3, [pc, #64]	; (8013ab8 <rand+0x5c>)
 8013a78:	6083      	str	r3, [r0, #8]
 8013a7a:	230b      	movs	r3, #11
 8013a7c:	8183      	strh	r3, [r0, #12]
 8013a7e:	2201      	movs	r2, #1
 8013a80:	2300      	movs	r3, #0
 8013a82:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013a86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013a88:	480c      	ldr	r0, [pc, #48]	; (8013abc <rand+0x60>)
 8013a8a:	690a      	ldr	r2, [r1, #16]
 8013a8c:	694b      	ldr	r3, [r1, #20]
 8013a8e:	4c0c      	ldr	r4, [pc, #48]	; (8013ac0 <rand+0x64>)
 8013a90:	4350      	muls	r0, r2
 8013a92:	fb04 0003 	mla	r0, r4, r3, r0
 8013a96:	fba2 2304 	umull	r2, r3, r2, r4
 8013a9a:	4403      	add	r3, r0
 8013a9c:	1c54      	adds	r4, r2, #1
 8013a9e:	f143 0500 	adc.w	r5, r3, #0
 8013aa2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8013aa6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	240001a4 	.word	0x240001a4
 8013ab0:	abcd330e 	.word	0xabcd330e
 8013ab4:	e66d1234 	.word	0xe66d1234
 8013ab8:	0005deec 	.word	0x0005deec
 8013abc:	5851f42d 	.word	0x5851f42d
 8013ac0:	4c957f2d 	.word	0x4c957f2d

08013ac4 <_sbrk_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	4c06      	ldr	r4, [pc, #24]	; (8013ae0 <_sbrk_r+0x1c>)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	4605      	mov	r5, r0
 8013acc:	4608      	mov	r0, r1
 8013ace:	6023      	str	r3, [r4, #0]
 8013ad0:	f7ed fb84 	bl	80011dc <_sbrk>
 8013ad4:	1c43      	adds	r3, r0, #1
 8013ad6:	d102      	bne.n	8013ade <_sbrk_r+0x1a>
 8013ad8:	6823      	ldr	r3, [r4, #0]
 8013ada:	b103      	cbz	r3, 8013ade <_sbrk_r+0x1a>
 8013adc:	602b      	str	r3, [r5, #0]
 8013ade:	bd38      	pop	{r3, r4, r5, pc}
 8013ae0:	2401bfd8 	.word	0x2401bfd8

08013ae4 <__swbuf_r>:
 8013ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ae6:	460e      	mov	r6, r1
 8013ae8:	4614      	mov	r4, r2
 8013aea:	4605      	mov	r5, r0
 8013aec:	b118      	cbz	r0, 8013af6 <__swbuf_r+0x12>
 8013aee:	6983      	ldr	r3, [r0, #24]
 8013af0:	b90b      	cbnz	r3, 8013af6 <__swbuf_r+0x12>
 8013af2:	f000 f9a7 	bl	8013e44 <__sinit>
 8013af6:	4b21      	ldr	r3, [pc, #132]	; (8013b7c <__swbuf_r+0x98>)
 8013af8:	429c      	cmp	r4, r3
 8013afa:	d12a      	bne.n	8013b52 <__swbuf_r+0x6e>
 8013afc:	686c      	ldr	r4, [r5, #4]
 8013afe:	69a3      	ldr	r3, [r4, #24]
 8013b00:	60a3      	str	r3, [r4, #8]
 8013b02:	89a3      	ldrh	r3, [r4, #12]
 8013b04:	071a      	lsls	r2, r3, #28
 8013b06:	d52e      	bpl.n	8013b66 <__swbuf_r+0x82>
 8013b08:	6923      	ldr	r3, [r4, #16]
 8013b0a:	b363      	cbz	r3, 8013b66 <__swbuf_r+0x82>
 8013b0c:	6923      	ldr	r3, [r4, #16]
 8013b0e:	6820      	ldr	r0, [r4, #0]
 8013b10:	1ac0      	subs	r0, r0, r3
 8013b12:	6963      	ldr	r3, [r4, #20]
 8013b14:	b2f6      	uxtb	r6, r6
 8013b16:	4283      	cmp	r3, r0
 8013b18:	4637      	mov	r7, r6
 8013b1a:	dc04      	bgt.n	8013b26 <__swbuf_r+0x42>
 8013b1c:	4621      	mov	r1, r4
 8013b1e:	4628      	mov	r0, r5
 8013b20:	f000 f926 	bl	8013d70 <_fflush_r>
 8013b24:	bb28      	cbnz	r0, 8013b72 <__swbuf_r+0x8e>
 8013b26:	68a3      	ldr	r3, [r4, #8]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	60a3      	str	r3, [r4, #8]
 8013b2c:	6823      	ldr	r3, [r4, #0]
 8013b2e:	1c5a      	adds	r2, r3, #1
 8013b30:	6022      	str	r2, [r4, #0]
 8013b32:	701e      	strb	r6, [r3, #0]
 8013b34:	6963      	ldr	r3, [r4, #20]
 8013b36:	3001      	adds	r0, #1
 8013b38:	4283      	cmp	r3, r0
 8013b3a:	d004      	beq.n	8013b46 <__swbuf_r+0x62>
 8013b3c:	89a3      	ldrh	r3, [r4, #12]
 8013b3e:	07db      	lsls	r3, r3, #31
 8013b40:	d519      	bpl.n	8013b76 <__swbuf_r+0x92>
 8013b42:	2e0a      	cmp	r6, #10
 8013b44:	d117      	bne.n	8013b76 <__swbuf_r+0x92>
 8013b46:	4621      	mov	r1, r4
 8013b48:	4628      	mov	r0, r5
 8013b4a:	f000 f911 	bl	8013d70 <_fflush_r>
 8013b4e:	b190      	cbz	r0, 8013b76 <__swbuf_r+0x92>
 8013b50:	e00f      	b.n	8013b72 <__swbuf_r+0x8e>
 8013b52:	4b0b      	ldr	r3, [pc, #44]	; (8013b80 <__swbuf_r+0x9c>)
 8013b54:	429c      	cmp	r4, r3
 8013b56:	d101      	bne.n	8013b5c <__swbuf_r+0x78>
 8013b58:	68ac      	ldr	r4, [r5, #8]
 8013b5a:	e7d0      	b.n	8013afe <__swbuf_r+0x1a>
 8013b5c:	4b09      	ldr	r3, [pc, #36]	; (8013b84 <__swbuf_r+0xa0>)
 8013b5e:	429c      	cmp	r4, r3
 8013b60:	bf08      	it	eq
 8013b62:	68ec      	ldreq	r4, [r5, #12]
 8013b64:	e7cb      	b.n	8013afe <__swbuf_r+0x1a>
 8013b66:	4621      	mov	r1, r4
 8013b68:	4628      	mov	r0, r5
 8013b6a:	f000 f80d 	bl	8013b88 <__swsetup_r>
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	d0cc      	beq.n	8013b0c <__swbuf_r+0x28>
 8013b72:	f04f 37ff 	mov.w	r7, #4294967295
 8013b76:	4638      	mov	r0, r7
 8013b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	08016928 	.word	0x08016928
 8013b80:	08016948 	.word	0x08016948
 8013b84:	08016908 	.word	0x08016908

08013b88 <__swsetup_r>:
 8013b88:	4b32      	ldr	r3, [pc, #200]	; (8013c54 <__swsetup_r+0xcc>)
 8013b8a:	b570      	push	{r4, r5, r6, lr}
 8013b8c:	681d      	ldr	r5, [r3, #0]
 8013b8e:	4606      	mov	r6, r0
 8013b90:	460c      	mov	r4, r1
 8013b92:	b125      	cbz	r5, 8013b9e <__swsetup_r+0x16>
 8013b94:	69ab      	ldr	r3, [r5, #24]
 8013b96:	b913      	cbnz	r3, 8013b9e <__swsetup_r+0x16>
 8013b98:	4628      	mov	r0, r5
 8013b9a:	f000 f953 	bl	8013e44 <__sinit>
 8013b9e:	4b2e      	ldr	r3, [pc, #184]	; (8013c58 <__swsetup_r+0xd0>)
 8013ba0:	429c      	cmp	r4, r3
 8013ba2:	d10f      	bne.n	8013bc4 <__swsetup_r+0x3c>
 8013ba4:	686c      	ldr	r4, [r5, #4]
 8013ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013baa:	b29a      	uxth	r2, r3
 8013bac:	0715      	lsls	r5, r2, #28
 8013bae:	d42c      	bmi.n	8013c0a <__swsetup_r+0x82>
 8013bb0:	06d0      	lsls	r0, r2, #27
 8013bb2:	d411      	bmi.n	8013bd8 <__swsetup_r+0x50>
 8013bb4:	2209      	movs	r2, #9
 8013bb6:	6032      	str	r2, [r6, #0]
 8013bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bbc:	81a3      	strh	r3, [r4, #12]
 8013bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc2:	e03e      	b.n	8013c42 <__swsetup_r+0xba>
 8013bc4:	4b25      	ldr	r3, [pc, #148]	; (8013c5c <__swsetup_r+0xd4>)
 8013bc6:	429c      	cmp	r4, r3
 8013bc8:	d101      	bne.n	8013bce <__swsetup_r+0x46>
 8013bca:	68ac      	ldr	r4, [r5, #8]
 8013bcc:	e7eb      	b.n	8013ba6 <__swsetup_r+0x1e>
 8013bce:	4b24      	ldr	r3, [pc, #144]	; (8013c60 <__swsetup_r+0xd8>)
 8013bd0:	429c      	cmp	r4, r3
 8013bd2:	bf08      	it	eq
 8013bd4:	68ec      	ldreq	r4, [r5, #12]
 8013bd6:	e7e6      	b.n	8013ba6 <__swsetup_r+0x1e>
 8013bd8:	0751      	lsls	r1, r2, #29
 8013bda:	d512      	bpl.n	8013c02 <__swsetup_r+0x7a>
 8013bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bde:	b141      	cbz	r1, 8013bf2 <__swsetup_r+0x6a>
 8013be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013be4:	4299      	cmp	r1, r3
 8013be6:	d002      	beq.n	8013bee <__swsetup_r+0x66>
 8013be8:	4630      	mov	r0, r6
 8013bea:	f7ff fe77 	bl	80138dc <_free_r>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8013bf2:	89a3      	ldrh	r3, [r4, #12]
 8013bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013bf8:	81a3      	strh	r3, [r4, #12]
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	6063      	str	r3, [r4, #4]
 8013bfe:	6923      	ldr	r3, [r4, #16]
 8013c00:	6023      	str	r3, [r4, #0]
 8013c02:	89a3      	ldrh	r3, [r4, #12]
 8013c04:	f043 0308 	orr.w	r3, r3, #8
 8013c08:	81a3      	strh	r3, [r4, #12]
 8013c0a:	6923      	ldr	r3, [r4, #16]
 8013c0c:	b94b      	cbnz	r3, 8013c22 <__swsetup_r+0x9a>
 8013c0e:	89a3      	ldrh	r3, [r4, #12]
 8013c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c18:	d003      	beq.n	8013c22 <__swsetup_r+0x9a>
 8013c1a:	4621      	mov	r1, r4
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f000 f9bf 	bl	8013fa0 <__smakebuf_r>
 8013c22:	89a2      	ldrh	r2, [r4, #12]
 8013c24:	f012 0301 	ands.w	r3, r2, #1
 8013c28:	d00c      	beq.n	8013c44 <__swsetup_r+0xbc>
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	60a3      	str	r3, [r4, #8]
 8013c2e:	6963      	ldr	r3, [r4, #20]
 8013c30:	425b      	negs	r3, r3
 8013c32:	61a3      	str	r3, [r4, #24]
 8013c34:	6923      	ldr	r3, [r4, #16]
 8013c36:	b953      	cbnz	r3, 8013c4e <__swsetup_r+0xc6>
 8013c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013c40:	d1ba      	bne.n	8013bb8 <__swsetup_r+0x30>
 8013c42:	bd70      	pop	{r4, r5, r6, pc}
 8013c44:	0792      	lsls	r2, r2, #30
 8013c46:	bf58      	it	pl
 8013c48:	6963      	ldrpl	r3, [r4, #20]
 8013c4a:	60a3      	str	r3, [r4, #8]
 8013c4c:	e7f2      	b.n	8013c34 <__swsetup_r+0xac>
 8013c4e:	2000      	movs	r0, #0
 8013c50:	e7f7      	b.n	8013c42 <__swsetup_r+0xba>
 8013c52:	bf00      	nop
 8013c54:	240001a4 	.word	0x240001a4
 8013c58:	08016928 	.word	0x08016928
 8013c5c:	08016948 	.word	0x08016948
 8013c60:	08016908 	.word	0x08016908

08013c64 <__sflush_r>:
 8013c64:	898a      	ldrh	r2, [r1, #12]
 8013c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6a:	4605      	mov	r5, r0
 8013c6c:	0710      	lsls	r0, r2, #28
 8013c6e:	460c      	mov	r4, r1
 8013c70:	d458      	bmi.n	8013d24 <__sflush_r+0xc0>
 8013c72:	684b      	ldr	r3, [r1, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	dc05      	bgt.n	8013c84 <__sflush_r+0x20>
 8013c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	dc02      	bgt.n	8013c84 <__sflush_r+0x20>
 8013c7e:	2000      	movs	r0, #0
 8013c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c86:	2e00      	cmp	r6, #0
 8013c88:	d0f9      	beq.n	8013c7e <__sflush_r+0x1a>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c90:	682f      	ldr	r7, [r5, #0]
 8013c92:	6a21      	ldr	r1, [r4, #32]
 8013c94:	602b      	str	r3, [r5, #0]
 8013c96:	d032      	beq.n	8013cfe <__sflush_r+0x9a>
 8013c98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c9a:	89a3      	ldrh	r3, [r4, #12]
 8013c9c:	075a      	lsls	r2, r3, #29
 8013c9e:	d505      	bpl.n	8013cac <__sflush_r+0x48>
 8013ca0:	6863      	ldr	r3, [r4, #4]
 8013ca2:	1ac0      	subs	r0, r0, r3
 8013ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013ca6:	b10b      	cbz	r3, 8013cac <__sflush_r+0x48>
 8013ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013caa:	1ac0      	subs	r0, r0, r3
 8013cac:	2300      	movs	r3, #0
 8013cae:	4602      	mov	r2, r0
 8013cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cb2:	6a21      	ldr	r1, [r4, #32]
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	47b0      	blx	r6
 8013cb8:	1c43      	adds	r3, r0, #1
 8013cba:	89a3      	ldrh	r3, [r4, #12]
 8013cbc:	d106      	bne.n	8013ccc <__sflush_r+0x68>
 8013cbe:	6829      	ldr	r1, [r5, #0]
 8013cc0:	291d      	cmp	r1, #29
 8013cc2:	d848      	bhi.n	8013d56 <__sflush_r+0xf2>
 8013cc4:	4a29      	ldr	r2, [pc, #164]	; (8013d6c <__sflush_r+0x108>)
 8013cc6:	40ca      	lsrs	r2, r1
 8013cc8:	07d6      	lsls	r6, r2, #31
 8013cca:	d544      	bpl.n	8013d56 <__sflush_r+0xf2>
 8013ccc:	2200      	movs	r2, #0
 8013cce:	6062      	str	r2, [r4, #4]
 8013cd0:	04d9      	lsls	r1, r3, #19
 8013cd2:	6922      	ldr	r2, [r4, #16]
 8013cd4:	6022      	str	r2, [r4, #0]
 8013cd6:	d504      	bpl.n	8013ce2 <__sflush_r+0x7e>
 8013cd8:	1c42      	adds	r2, r0, #1
 8013cda:	d101      	bne.n	8013ce0 <__sflush_r+0x7c>
 8013cdc:	682b      	ldr	r3, [r5, #0]
 8013cde:	b903      	cbnz	r3, 8013ce2 <__sflush_r+0x7e>
 8013ce0:	6560      	str	r0, [r4, #84]	; 0x54
 8013ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ce4:	602f      	str	r7, [r5, #0]
 8013ce6:	2900      	cmp	r1, #0
 8013ce8:	d0c9      	beq.n	8013c7e <__sflush_r+0x1a>
 8013cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cee:	4299      	cmp	r1, r3
 8013cf0:	d002      	beq.n	8013cf8 <__sflush_r+0x94>
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f7ff fdf2 	bl	80138dc <_free_r>
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8013cfc:	e7c0      	b.n	8013c80 <__sflush_r+0x1c>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4628      	mov	r0, r5
 8013d02:	47b0      	blx	r6
 8013d04:	1c41      	adds	r1, r0, #1
 8013d06:	d1c8      	bne.n	8013c9a <__sflush_r+0x36>
 8013d08:	682b      	ldr	r3, [r5, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d0c5      	beq.n	8013c9a <__sflush_r+0x36>
 8013d0e:	2b1d      	cmp	r3, #29
 8013d10:	d001      	beq.n	8013d16 <__sflush_r+0xb2>
 8013d12:	2b16      	cmp	r3, #22
 8013d14:	d101      	bne.n	8013d1a <__sflush_r+0xb6>
 8013d16:	602f      	str	r7, [r5, #0]
 8013d18:	e7b1      	b.n	8013c7e <__sflush_r+0x1a>
 8013d1a:	89a3      	ldrh	r3, [r4, #12]
 8013d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d20:	81a3      	strh	r3, [r4, #12]
 8013d22:	e7ad      	b.n	8013c80 <__sflush_r+0x1c>
 8013d24:	690f      	ldr	r7, [r1, #16]
 8013d26:	2f00      	cmp	r7, #0
 8013d28:	d0a9      	beq.n	8013c7e <__sflush_r+0x1a>
 8013d2a:	0793      	lsls	r3, r2, #30
 8013d2c:	680e      	ldr	r6, [r1, #0]
 8013d2e:	bf08      	it	eq
 8013d30:	694b      	ldreq	r3, [r1, #20]
 8013d32:	600f      	str	r7, [r1, #0]
 8013d34:	bf18      	it	ne
 8013d36:	2300      	movne	r3, #0
 8013d38:	eba6 0807 	sub.w	r8, r6, r7
 8013d3c:	608b      	str	r3, [r1, #8]
 8013d3e:	f1b8 0f00 	cmp.w	r8, #0
 8013d42:	dd9c      	ble.n	8013c7e <__sflush_r+0x1a>
 8013d44:	4643      	mov	r3, r8
 8013d46:	463a      	mov	r2, r7
 8013d48:	6a21      	ldr	r1, [r4, #32]
 8013d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d4c:	4628      	mov	r0, r5
 8013d4e:	47b0      	blx	r6
 8013d50:	2800      	cmp	r0, #0
 8013d52:	dc06      	bgt.n	8013d62 <__sflush_r+0xfe>
 8013d54:	89a3      	ldrh	r3, [r4, #12]
 8013d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d5a:	81a3      	strh	r3, [r4, #12]
 8013d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d60:	e78e      	b.n	8013c80 <__sflush_r+0x1c>
 8013d62:	4407      	add	r7, r0
 8013d64:	eba8 0800 	sub.w	r8, r8, r0
 8013d68:	e7e9      	b.n	8013d3e <__sflush_r+0xda>
 8013d6a:	bf00      	nop
 8013d6c:	20400001 	.word	0x20400001

08013d70 <_fflush_r>:
 8013d70:	b538      	push	{r3, r4, r5, lr}
 8013d72:	690b      	ldr	r3, [r1, #16]
 8013d74:	4605      	mov	r5, r0
 8013d76:	460c      	mov	r4, r1
 8013d78:	b1db      	cbz	r3, 8013db2 <_fflush_r+0x42>
 8013d7a:	b118      	cbz	r0, 8013d84 <_fflush_r+0x14>
 8013d7c:	6983      	ldr	r3, [r0, #24]
 8013d7e:	b90b      	cbnz	r3, 8013d84 <_fflush_r+0x14>
 8013d80:	f000 f860 	bl	8013e44 <__sinit>
 8013d84:	4b0c      	ldr	r3, [pc, #48]	; (8013db8 <_fflush_r+0x48>)
 8013d86:	429c      	cmp	r4, r3
 8013d88:	d109      	bne.n	8013d9e <_fflush_r+0x2e>
 8013d8a:	686c      	ldr	r4, [r5, #4]
 8013d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d90:	b17b      	cbz	r3, 8013db2 <_fflush_r+0x42>
 8013d92:	4621      	mov	r1, r4
 8013d94:	4628      	mov	r0, r5
 8013d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d9a:	f7ff bf63 	b.w	8013c64 <__sflush_r>
 8013d9e:	4b07      	ldr	r3, [pc, #28]	; (8013dbc <_fflush_r+0x4c>)
 8013da0:	429c      	cmp	r4, r3
 8013da2:	d101      	bne.n	8013da8 <_fflush_r+0x38>
 8013da4:	68ac      	ldr	r4, [r5, #8]
 8013da6:	e7f1      	b.n	8013d8c <_fflush_r+0x1c>
 8013da8:	4b05      	ldr	r3, [pc, #20]	; (8013dc0 <_fflush_r+0x50>)
 8013daa:	429c      	cmp	r4, r3
 8013dac:	bf08      	it	eq
 8013dae:	68ec      	ldreq	r4, [r5, #12]
 8013db0:	e7ec      	b.n	8013d8c <_fflush_r+0x1c>
 8013db2:	2000      	movs	r0, #0
 8013db4:	bd38      	pop	{r3, r4, r5, pc}
 8013db6:	bf00      	nop
 8013db8:	08016928 	.word	0x08016928
 8013dbc:	08016948 	.word	0x08016948
 8013dc0:	08016908 	.word	0x08016908

08013dc4 <std>:
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	4604      	mov	r4, r0
 8013dca:	e9c0 3300 	strd	r3, r3, [r0]
 8013dce:	6083      	str	r3, [r0, #8]
 8013dd0:	8181      	strh	r1, [r0, #12]
 8013dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8013dd4:	81c2      	strh	r2, [r0, #14]
 8013dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013dda:	6183      	str	r3, [r0, #24]
 8013ddc:	4619      	mov	r1, r3
 8013dde:	2208      	movs	r2, #8
 8013de0:	305c      	adds	r0, #92	; 0x5c
 8013de2:	f7ff fd73 	bl	80138cc <memset>
 8013de6:	4b05      	ldr	r3, [pc, #20]	; (8013dfc <std+0x38>)
 8013de8:	6263      	str	r3, [r4, #36]	; 0x24
 8013dea:	4b05      	ldr	r3, [pc, #20]	; (8013e00 <std+0x3c>)
 8013dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8013dee:	4b05      	ldr	r3, [pc, #20]	; (8013e04 <std+0x40>)
 8013df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013df2:	4b05      	ldr	r3, [pc, #20]	; (8013e08 <std+0x44>)
 8013df4:	6224      	str	r4, [r4, #32]
 8013df6:	6323      	str	r3, [r4, #48]	; 0x30
 8013df8:	bd10      	pop	{r4, pc}
 8013dfa:	bf00      	nop
 8013dfc:	080145b5 	.word	0x080145b5
 8013e00:	080145d7 	.word	0x080145d7
 8013e04:	0801460f 	.word	0x0801460f
 8013e08:	08014633 	.word	0x08014633

08013e0c <_cleanup_r>:
 8013e0c:	4901      	ldr	r1, [pc, #4]	; (8013e14 <_cleanup_r+0x8>)
 8013e0e:	f000 b885 	b.w	8013f1c <_fwalk_reent>
 8013e12:	bf00      	nop
 8013e14:	08013d71 	.word	0x08013d71

08013e18 <__sfmoreglue>:
 8013e18:	b570      	push	{r4, r5, r6, lr}
 8013e1a:	1e4a      	subs	r2, r1, #1
 8013e1c:	2568      	movs	r5, #104	; 0x68
 8013e1e:	4355      	muls	r5, r2
 8013e20:	460e      	mov	r6, r1
 8013e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e26:	f7ff fda7 	bl	8013978 <_malloc_r>
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	b140      	cbz	r0, 8013e40 <__sfmoreglue+0x28>
 8013e2e:	2100      	movs	r1, #0
 8013e30:	e9c0 1600 	strd	r1, r6, [r0]
 8013e34:	300c      	adds	r0, #12
 8013e36:	60a0      	str	r0, [r4, #8]
 8013e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e3c:	f7ff fd46 	bl	80138cc <memset>
 8013e40:	4620      	mov	r0, r4
 8013e42:	bd70      	pop	{r4, r5, r6, pc}

08013e44 <__sinit>:
 8013e44:	6983      	ldr	r3, [r0, #24]
 8013e46:	b510      	push	{r4, lr}
 8013e48:	4604      	mov	r4, r0
 8013e4a:	bb33      	cbnz	r3, 8013e9a <__sinit+0x56>
 8013e4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013e50:	6503      	str	r3, [r0, #80]	; 0x50
 8013e52:	4b12      	ldr	r3, [pc, #72]	; (8013e9c <__sinit+0x58>)
 8013e54:	4a12      	ldr	r2, [pc, #72]	; (8013ea0 <__sinit+0x5c>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	6282      	str	r2, [r0, #40]	; 0x28
 8013e5a:	4298      	cmp	r0, r3
 8013e5c:	bf04      	itt	eq
 8013e5e:	2301      	moveq	r3, #1
 8013e60:	6183      	streq	r3, [r0, #24]
 8013e62:	f000 f81f 	bl	8013ea4 <__sfp>
 8013e66:	6060      	str	r0, [r4, #4]
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f000 f81b 	bl	8013ea4 <__sfp>
 8013e6e:	60a0      	str	r0, [r4, #8]
 8013e70:	4620      	mov	r0, r4
 8013e72:	f000 f817 	bl	8013ea4 <__sfp>
 8013e76:	2200      	movs	r2, #0
 8013e78:	60e0      	str	r0, [r4, #12]
 8013e7a:	2104      	movs	r1, #4
 8013e7c:	6860      	ldr	r0, [r4, #4]
 8013e7e:	f7ff ffa1 	bl	8013dc4 <std>
 8013e82:	2201      	movs	r2, #1
 8013e84:	2109      	movs	r1, #9
 8013e86:	68a0      	ldr	r0, [r4, #8]
 8013e88:	f7ff ff9c 	bl	8013dc4 <std>
 8013e8c:	2202      	movs	r2, #2
 8013e8e:	2112      	movs	r1, #18
 8013e90:	68e0      	ldr	r0, [r4, #12]
 8013e92:	f7ff ff97 	bl	8013dc4 <std>
 8013e96:	2301      	movs	r3, #1
 8013e98:	61a3      	str	r3, [r4, #24]
 8013e9a:	bd10      	pop	{r4, pc}
 8013e9c:	08016904 	.word	0x08016904
 8013ea0:	08013e0d 	.word	0x08013e0d

08013ea4 <__sfp>:
 8013ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea6:	4b1b      	ldr	r3, [pc, #108]	; (8013f14 <__sfp+0x70>)
 8013ea8:	681e      	ldr	r6, [r3, #0]
 8013eaa:	69b3      	ldr	r3, [r6, #24]
 8013eac:	4607      	mov	r7, r0
 8013eae:	b913      	cbnz	r3, 8013eb6 <__sfp+0x12>
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f7ff ffc7 	bl	8013e44 <__sinit>
 8013eb6:	3648      	adds	r6, #72	; 0x48
 8013eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ebc:	3b01      	subs	r3, #1
 8013ebe:	d503      	bpl.n	8013ec8 <__sfp+0x24>
 8013ec0:	6833      	ldr	r3, [r6, #0]
 8013ec2:	b133      	cbz	r3, 8013ed2 <__sfp+0x2e>
 8013ec4:	6836      	ldr	r6, [r6, #0]
 8013ec6:	e7f7      	b.n	8013eb8 <__sfp+0x14>
 8013ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ecc:	b16d      	cbz	r5, 8013eea <__sfp+0x46>
 8013ece:	3468      	adds	r4, #104	; 0x68
 8013ed0:	e7f4      	b.n	8013ebc <__sfp+0x18>
 8013ed2:	2104      	movs	r1, #4
 8013ed4:	4638      	mov	r0, r7
 8013ed6:	f7ff ff9f 	bl	8013e18 <__sfmoreglue>
 8013eda:	6030      	str	r0, [r6, #0]
 8013edc:	2800      	cmp	r0, #0
 8013ede:	d1f1      	bne.n	8013ec4 <__sfp+0x20>
 8013ee0:	230c      	movs	r3, #12
 8013ee2:	603b      	str	r3, [r7, #0]
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eea:	4b0b      	ldr	r3, [pc, #44]	; (8013f18 <__sfp+0x74>)
 8013eec:	6665      	str	r5, [r4, #100]	; 0x64
 8013eee:	e9c4 5500 	strd	r5, r5, [r4]
 8013ef2:	60a5      	str	r5, [r4, #8]
 8013ef4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013ef8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013efc:	2208      	movs	r2, #8
 8013efe:	4629      	mov	r1, r5
 8013f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f04:	f7ff fce2 	bl	80138cc <memset>
 8013f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f10:	e7e9      	b.n	8013ee6 <__sfp+0x42>
 8013f12:	bf00      	nop
 8013f14:	08016904 	.word	0x08016904
 8013f18:	ffff0001 	.word	0xffff0001

08013f1c <_fwalk_reent>:
 8013f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f20:	4680      	mov	r8, r0
 8013f22:	4689      	mov	r9, r1
 8013f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f28:	2600      	movs	r6, #0
 8013f2a:	b914      	cbnz	r4, 8013f32 <_fwalk_reent+0x16>
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013f36:	3f01      	subs	r7, #1
 8013f38:	d501      	bpl.n	8013f3e <_fwalk_reent+0x22>
 8013f3a:	6824      	ldr	r4, [r4, #0]
 8013f3c:	e7f5      	b.n	8013f2a <_fwalk_reent+0xe>
 8013f3e:	89ab      	ldrh	r3, [r5, #12]
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d907      	bls.n	8013f54 <_fwalk_reent+0x38>
 8013f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	d003      	beq.n	8013f54 <_fwalk_reent+0x38>
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	4640      	mov	r0, r8
 8013f50:	47c8      	blx	r9
 8013f52:	4306      	orrs	r6, r0
 8013f54:	3568      	adds	r5, #104	; 0x68
 8013f56:	e7ee      	b.n	8013f36 <_fwalk_reent+0x1a>

08013f58 <__swhatbuf_r>:
 8013f58:	b570      	push	{r4, r5, r6, lr}
 8013f5a:	460e      	mov	r6, r1
 8013f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f60:	2900      	cmp	r1, #0
 8013f62:	b096      	sub	sp, #88	; 0x58
 8013f64:	4614      	mov	r4, r2
 8013f66:	461d      	mov	r5, r3
 8013f68:	da07      	bge.n	8013f7a <__swhatbuf_r+0x22>
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	602b      	str	r3, [r5, #0]
 8013f6e:	89b3      	ldrh	r3, [r6, #12]
 8013f70:	061a      	lsls	r2, r3, #24
 8013f72:	d410      	bmi.n	8013f96 <__swhatbuf_r+0x3e>
 8013f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f78:	e00e      	b.n	8013f98 <__swhatbuf_r+0x40>
 8013f7a:	466a      	mov	r2, sp
 8013f7c:	f000 fb80 	bl	8014680 <_fstat_r>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	dbf2      	blt.n	8013f6a <__swhatbuf_r+0x12>
 8013f84:	9a01      	ldr	r2, [sp, #4]
 8013f86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f8e:	425a      	negs	r2, r3
 8013f90:	415a      	adcs	r2, r3
 8013f92:	602a      	str	r2, [r5, #0]
 8013f94:	e7ee      	b.n	8013f74 <__swhatbuf_r+0x1c>
 8013f96:	2340      	movs	r3, #64	; 0x40
 8013f98:	2000      	movs	r0, #0
 8013f9a:	6023      	str	r3, [r4, #0]
 8013f9c:	b016      	add	sp, #88	; 0x58
 8013f9e:	bd70      	pop	{r4, r5, r6, pc}

08013fa0 <__smakebuf_r>:
 8013fa0:	898b      	ldrh	r3, [r1, #12]
 8013fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fa4:	079d      	lsls	r5, r3, #30
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	460c      	mov	r4, r1
 8013faa:	d507      	bpl.n	8013fbc <__smakebuf_r+0x1c>
 8013fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013fb0:	6023      	str	r3, [r4, #0]
 8013fb2:	6123      	str	r3, [r4, #16]
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	6163      	str	r3, [r4, #20]
 8013fb8:	b002      	add	sp, #8
 8013fba:	bd70      	pop	{r4, r5, r6, pc}
 8013fbc:	ab01      	add	r3, sp, #4
 8013fbe:	466a      	mov	r2, sp
 8013fc0:	f7ff ffca 	bl	8013f58 <__swhatbuf_r>
 8013fc4:	9900      	ldr	r1, [sp, #0]
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7ff fcd5 	bl	8013978 <_malloc_r>
 8013fce:	b948      	cbnz	r0, 8013fe4 <__smakebuf_r+0x44>
 8013fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fd4:	059a      	lsls	r2, r3, #22
 8013fd6:	d4ef      	bmi.n	8013fb8 <__smakebuf_r+0x18>
 8013fd8:	f023 0303 	bic.w	r3, r3, #3
 8013fdc:	f043 0302 	orr.w	r3, r3, #2
 8013fe0:	81a3      	strh	r3, [r4, #12]
 8013fe2:	e7e3      	b.n	8013fac <__smakebuf_r+0xc>
 8013fe4:	4b0d      	ldr	r3, [pc, #52]	; (801401c <__smakebuf_r+0x7c>)
 8013fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013fe8:	89a3      	ldrh	r3, [r4, #12]
 8013fea:	6020      	str	r0, [r4, #0]
 8013fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ff0:	81a3      	strh	r3, [r4, #12]
 8013ff2:	9b00      	ldr	r3, [sp, #0]
 8013ff4:	6163      	str	r3, [r4, #20]
 8013ff6:	9b01      	ldr	r3, [sp, #4]
 8013ff8:	6120      	str	r0, [r4, #16]
 8013ffa:	b15b      	cbz	r3, 8014014 <__smakebuf_r+0x74>
 8013ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014000:	4630      	mov	r0, r6
 8014002:	f000 fb4f 	bl	80146a4 <_isatty_r>
 8014006:	b128      	cbz	r0, 8014014 <__smakebuf_r+0x74>
 8014008:	89a3      	ldrh	r3, [r4, #12]
 801400a:	f023 0303 	bic.w	r3, r3, #3
 801400e:	f043 0301 	orr.w	r3, r3, #1
 8014012:	81a3      	strh	r3, [r4, #12]
 8014014:	89a3      	ldrh	r3, [r4, #12]
 8014016:	431d      	orrs	r5, r3
 8014018:	81a5      	strh	r5, [r4, #12]
 801401a:	e7cd      	b.n	8013fb8 <__smakebuf_r+0x18>
 801401c:	08013e0d 	.word	0x08013e0d

08014020 <__malloc_lock>:
 8014020:	4770      	bx	lr

08014022 <__malloc_unlock>:
 8014022:	4770      	bx	lr

08014024 <__sfputc_r>:
 8014024:	6893      	ldr	r3, [r2, #8]
 8014026:	3b01      	subs	r3, #1
 8014028:	2b00      	cmp	r3, #0
 801402a:	b410      	push	{r4}
 801402c:	6093      	str	r3, [r2, #8]
 801402e:	da08      	bge.n	8014042 <__sfputc_r+0x1e>
 8014030:	6994      	ldr	r4, [r2, #24]
 8014032:	42a3      	cmp	r3, r4
 8014034:	db01      	blt.n	801403a <__sfputc_r+0x16>
 8014036:	290a      	cmp	r1, #10
 8014038:	d103      	bne.n	8014042 <__sfputc_r+0x1e>
 801403a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801403e:	f7ff bd51 	b.w	8013ae4 <__swbuf_r>
 8014042:	6813      	ldr	r3, [r2, #0]
 8014044:	1c58      	adds	r0, r3, #1
 8014046:	6010      	str	r0, [r2, #0]
 8014048:	7019      	strb	r1, [r3, #0]
 801404a:	4608      	mov	r0, r1
 801404c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014050:	4770      	bx	lr

08014052 <__sfputs_r>:
 8014052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014054:	4606      	mov	r6, r0
 8014056:	460f      	mov	r7, r1
 8014058:	4614      	mov	r4, r2
 801405a:	18d5      	adds	r5, r2, r3
 801405c:	42ac      	cmp	r4, r5
 801405e:	d101      	bne.n	8014064 <__sfputs_r+0x12>
 8014060:	2000      	movs	r0, #0
 8014062:	e007      	b.n	8014074 <__sfputs_r+0x22>
 8014064:	463a      	mov	r2, r7
 8014066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801406a:	4630      	mov	r0, r6
 801406c:	f7ff ffda 	bl	8014024 <__sfputc_r>
 8014070:	1c43      	adds	r3, r0, #1
 8014072:	d1f3      	bne.n	801405c <__sfputs_r+0xa>
 8014074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014078 <_vfiprintf_r>:
 8014078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407c:	460c      	mov	r4, r1
 801407e:	b09d      	sub	sp, #116	; 0x74
 8014080:	4617      	mov	r7, r2
 8014082:	461d      	mov	r5, r3
 8014084:	4606      	mov	r6, r0
 8014086:	b118      	cbz	r0, 8014090 <_vfiprintf_r+0x18>
 8014088:	6983      	ldr	r3, [r0, #24]
 801408a:	b90b      	cbnz	r3, 8014090 <_vfiprintf_r+0x18>
 801408c:	f7ff feda 	bl	8013e44 <__sinit>
 8014090:	4b7c      	ldr	r3, [pc, #496]	; (8014284 <_vfiprintf_r+0x20c>)
 8014092:	429c      	cmp	r4, r3
 8014094:	d158      	bne.n	8014148 <_vfiprintf_r+0xd0>
 8014096:	6874      	ldr	r4, [r6, #4]
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	0718      	lsls	r0, r3, #28
 801409c:	d55e      	bpl.n	801415c <_vfiprintf_r+0xe4>
 801409e:	6923      	ldr	r3, [r4, #16]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d05b      	beq.n	801415c <_vfiprintf_r+0xe4>
 80140a4:	2300      	movs	r3, #0
 80140a6:	9309      	str	r3, [sp, #36]	; 0x24
 80140a8:	2320      	movs	r3, #32
 80140aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140ae:	2330      	movs	r3, #48	; 0x30
 80140b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140b4:	9503      	str	r5, [sp, #12]
 80140b6:	f04f 0b01 	mov.w	fp, #1
 80140ba:	46b8      	mov	r8, r7
 80140bc:	4645      	mov	r5, r8
 80140be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140c2:	b10b      	cbz	r3, 80140c8 <_vfiprintf_r+0x50>
 80140c4:	2b25      	cmp	r3, #37	; 0x25
 80140c6:	d154      	bne.n	8014172 <_vfiprintf_r+0xfa>
 80140c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80140cc:	d00b      	beq.n	80140e6 <_vfiprintf_r+0x6e>
 80140ce:	4653      	mov	r3, sl
 80140d0:	463a      	mov	r2, r7
 80140d2:	4621      	mov	r1, r4
 80140d4:	4630      	mov	r0, r6
 80140d6:	f7ff ffbc 	bl	8014052 <__sfputs_r>
 80140da:	3001      	adds	r0, #1
 80140dc:	f000 80c2 	beq.w	8014264 <_vfiprintf_r+0x1ec>
 80140e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e2:	4453      	add	r3, sl
 80140e4:	9309      	str	r3, [sp, #36]	; 0x24
 80140e6:	f898 3000 	ldrb.w	r3, [r8]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	f000 80ba 	beq.w	8014264 <_vfiprintf_r+0x1ec>
 80140f0:	2300      	movs	r3, #0
 80140f2:	f04f 32ff 	mov.w	r2, #4294967295
 80140f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140fa:	9304      	str	r3, [sp, #16]
 80140fc:	9307      	str	r3, [sp, #28]
 80140fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014102:	931a      	str	r3, [sp, #104]	; 0x68
 8014104:	46a8      	mov	r8, r5
 8014106:	2205      	movs	r2, #5
 8014108:	f818 1b01 	ldrb.w	r1, [r8], #1
 801410c:	485e      	ldr	r0, [pc, #376]	; (8014288 <_vfiprintf_r+0x210>)
 801410e:	f7ec f8ef 	bl	80002f0 <memchr>
 8014112:	9b04      	ldr	r3, [sp, #16]
 8014114:	bb78      	cbnz	r0, 8014176 <_vfiprintf_r+0xfe>
 8014116:	06d9      	lsls	r1, r3, #27
 8014118:	bf44      	itt	mi
 801411a:	2220      	movmi	r2, #32
 801411c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014120:	071a      	lsls	r2, r3, #28
 8014122:	bf44      	itt	mi
 8014124:	222b      	movmi	r2, #43	; 0x2b
 8014126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801412a:	782a      	ldrb	r2, [r5, #0]
 801412c:	2a2a      	cmp	r2, #42	; 0x2a
 801412e:	d02a      	beq.n	8014186 <_vfiprintf_r+0x10e>
 8014130:	9a07      	ldr	r2, [sp, #28]
 8014132:	46a8      	mov	r8, r5
 8014134:	2000      	movs	r0, #0
 8014136:	250a      	movs	r5, #10
 8014138:	4641      	mov	r1, r8
 801413a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801413e:	3b30      	subs	r3, #48	; 0x30
 8014140:	2b09      	cmp	r3, #9
 8014142:	d969      	bls.n	8014218 <_vfiprintf_r+0x1a0>
 8014144:	b360      	cbz	r0, 80141a0 <_vfiprintf_r+0x128>
 8014146:	e024      	b.n	8014192 <_vfiprintf_r+0x11a>
 8014148:	4b50      	ldr	r3, [pc, #320]	; (801428c <_vfiprintf_r+0x214>)
 801414a:	429c      	cmp	r4, r3
 801414c:	d101      	bne.n	8014152 <_vfiprintf_r+0xda>
 801414e:	68b4      	ldr	r4, [r6, #8]
 8014150:	e7a2      	b.n	8014098 <_vfiprintf_r+0x20>
 8014152:	4b4f      	ldr	r3, [pc, #316]	; (8014290 <_vfiprintf_r+0x218>)
 8014154:	429c      	cmp	r4, r3
 8014156:	bf08      	it	eq
 8014158:	68f4      	ldreq	r4, [r6, #12]
 801415a:	e79d      	b.n	8014098 <_vfiprintf_r+0x20>
 801415c:	4621      	mov	r1, r4
 801415e:	4630      	mov	r0, r6
 8014160:	f7ff fd12 	bl	8013b88 <__swsetup_r>
 8014164:	2800      	cmp	r0, #0
 8014166:	d09d      	beq.n	80140a4 <_vfiprintf_r+0x2c>
 8014168:	f04f 30ff 	mov.w	r0, #4294967295
 801416c:	b01d      	add	sp, #116	; 0x74
 801416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014172:	46a8      	mov	r8, r5
 8014174:	e7a2      	b.n	80140bc <_vfiprintf_r+0x44>
 8014176:	4a44      	ldr	r2, [pc, #272]	; (8014288 <_vfiprintf_r+0x210>)
 8014178:	1a80      	subs	r0, r0, r2
 801417a:	fa0b f000 	lsl.w	r0, fp, r0
 801417e:	4318      	orrs	r0, r3
 8014180:	9004      	str	r0, [sp, #16]
 8014182:	4645      	mov	r5, r8
 8014184:	e7be      	b.n	8014104 <_vfiprintf_r+0x8c>
 8014186:	9a03      	ldr	r2, [sp, #12]
 8014188:	1d11      	adds	r1, r2, #4
 801418a:	6812      	ldr	r2, [r2, #0]
 801418c:	9103      	str	r1, [sp, #12]
 801418e:	2a00      	cmp	r2, #0
 8014190:	db01      	blt.n	8014196 <_vfiprintf_r+0x11e>
 8014192:	9207      	str	r2, [sp, #28]
 8014194:	e004      	b.n	80141a0 <_vfiprintf_r+0x128>
 8014196:	4252      	negs	r2, r2
 8014198:	f043 0302 	orr.w	r3, r3, #2
 801419c:	9207      	str	r2, [sp, #28]
 801419e:	9304      	str	r3, [sp, #16]
 80141a0:	f898 3000 	ldrb.w	r3, [r8]
 80141a4:	2b2e      	cmp	r3, #46	; 0x2e
 80141a6:	d10e      	bne.n	80141c6 <_vfiprintf_r+0x14e>
 80141a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80141ac:	2b2a      	cmp	r3, #42	; 0x2a
 80141ae:	d138      	bne.n	8014222 <_vfiprintf_r+0x1aa>
 80141b0:	9b03      	ldr	r3, [sp, #12]
 80141b2:	1d1a      	adds	r2, r3, #4
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	9203      	str	r2, [sp, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	bfb8      	it	lt
 80141bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80141c0:	f108 0802 	add.w	r8, r8, #2
 80141c4:	9305      	str	r3, [sp, #20]
 80141c6:	4d33      	ldr	r5, [pc, #204]	; (8014294 <_vfiprintf_r+0x21c>)
 80141c8:	f898 1000 	ldrb.w	r1, [r8]
 80141cc:	2203      	movs	r2, #3
 80141ce:	4628      	mov	r0, r5
 80141d0:	f7ec f88e 	bl	80002f0 <memchr>
 80141d4:	b140      	cbz	r0, 80141e8 <_vfiprintf_r+0x170>
 80141d6:	2340      	movs	r3, #64	; 0x40
 80141d8:	1b40      	subs	r0, r0, r5
 80141da:	fa03 f000 	lsl.w	r0, r3, r0
 80141de:	9b04      	ldr	r3, [sp, #16]
 80141e0:	4303      	orrs	r3, r0
 80141e2:	f108 0801 	add.w	r8, r8, #1
 80141e6:	9304      	str	r3, [sp, #16]
 80141e8:	f898 1000 	ldrb.w	r1, [r8]
 80141ec:	482a      	ldr	r0, [pc, #168]	; (8014298 <_vfiprintf_r+0x220>)
 80141ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141f2:	2206      	movs	r2, #6
 80141f4:	f108 0701 	add.w	r7, r8, #1
 80141f8:	f7ec f87a 	bl	80002f0 <memchr>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d037      	beq.n	8014270 <_vfiprintf_r+0x1f8>
 8014200:	4b26      	ldr	r3, [pc, #152]	; (801429c <_vfiprintf_r+0x224>)
 8014202:	bb1b      	cbnz	r3, 801424c <_vfiprintf_r+0x1d4>
 8014204:	9b03      	ldr	r3, [sp, #12]
 8014206:	3307      	adds	r3, #7
 8014208:	f023 0307 	bic.w	r3, r3, #7
 801420c:	3308      	adds	r3, #8
 801420e:	9303      	str	r3, [sp, #12]
 8014210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014212:	444b      	add	r3, r9
 8014214:	9309      	str	r3, [sp, #36]	; 0x24
 8014216:	e750      	b.n	80140ba <_vfiprintf_r+0x42>
 8014218:	fb05 3202 	mla	r2, r5, r2, r3
 801421c:	2001      	movs	r0, #1
 801421e:	4688      	mov	r8, r1
 8014220:	e78a      	b.n	8014138 <_vfiprintf_r+0xc0>
 8014222:	2300      	movs	r3, #0
 8014224:	f108 0801 	add.w	r8, r8, #1
 8014228:	9305      	str	r3, [sp, #20]
 801422a:	4619      	mov	r1, r3
 801422c:	250a      	movs	r5, #10
 801422e:	4640      	mov	r0, r8
 8014230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014234:	3a30      	subs	r2, #48	; 0x30
 8014236:	2a09      	cmp	r2, #9
 8014238:	d903      	bls.n	8014242 <_vfiprintf_r+0x1ca>
 801423a:	2b00      	cmp	r3, #0
 801423c:	d0c3      	beq.n	80141c6 <_vfiprintf_r+0x14e>
 801423e:	9105      	str	r1, [sp, #20]
 8014240:	e7c1      	b.n	80141c6 <_vfiprintf_r+0x14e>
 8014242:	fb05 2101 	mla	r1, r5, r1, r2
 8014246:	2301      	movs	r3, #1
 8014248:	4680      	mov	r8, r0
 801424a:	e7f0      	b.n	801422e <_vfiprintf_r+0x1b6>
 801424c:	ab03      	add	r3, sp, #12
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4622      	mov	r2, r4
 8014252:	4b13      	ldr	r3, [pc, #76]	; (80142a0 <_vfiprintf_r+0x228>)
 8014254:	a904      	add	r1, sp, #16
 8014256:	4630      	mov	r0, r6
 8014258:	f3af 8000 	nop.w
 801425c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014260:	4681      	mov	r9, r0
 8014262:	d1d5      	bne.n	8014210 <_vfiprintf_r+0x198>
 8014264:	89a3      	ldrh	r3, [r4, #12]
 8014266:	065b      	lsls	r3, r3, #25
 8014268:	f53f af7e 	bmi.w	8014168 <_vfiprintf_r+0xf0>
 801426c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801426e:	e77d      	b.n	801416c <_vfiprintf_r+0xf4>
 8014270:	ab03      	add	r3, sp, #12
 8014272:	9300      	str	r3, [sp, #0]
 8014274:	4622      	mov	r2, r4
 8014276:	4b0a      	ldr	r3, [pc, #40]	; (80142a0 <_vfiprintf_r+0x228>)
 8014278:	a904      	add	r1, sp, #16
 801427a:	4630      	mov	r0, r6
 801427c:	f000 f888 	bl	8014390 <_printf_i>
 8014280:	e7ec      	b.n	801425c <_vfiprintf_r+0x1e4>
 8014282:	bf00      	nop
 8014284:	08016928 	.word	0x08016928
 8014288:	08016968 	.word	0x08016968
 801428c:	08016948 	.word	0x08016948
 8014290:	08016908 	.word	0x08016908
 8014294:	0801696e 	.word	0x0801696e
 8014298:	08016972 	.word	0x08016972
 801429c:	00000000 	.word	0x00000000
 80142a0:	08014053 	.word	0x08014053

080142a4 <_printf_common>:
 80142a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142a8:	4691      	mov	r9, r2
 80142aa:	461f      	mov	r7, r3
 80142ac:	688a      	ldr	r2, [r1, #8]
 80142ae:	690b      	ldr	r3, [r1, #16]
 80142b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142b4:	4293      	cmp	r3, r2
 80142b6:	bfb8      	it	lt
 80142b8:	4613      	movlt	r3, r2
 80142ba:	f8c9 3000 	str.w	r3, [r9]
 80142be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142c2:	4606      	mov	r6, r0
 80142c4:	460c      	mov	r4, r1
 80142c6:	b112      	cbz	r2, 80142ce <_printf_common+0x2a>
 80142c8:	3301      	adds	r3, #1
 80142ca:	f8c9 3000 	str.w	r3, [r9]
 80142ce:	6823      	ldr	r3, [r4, #0]
 80142d0:	0699      	lsls	r1, r3, #26
 80142d2:	bf42      	ittt	mi
 80142d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80142d8:	3302      	addmi	r3, #2
 80142da:	f8c9 3000 	strmi.w	r3, [r9]
 80142de:	6825      	ldr	r5, [r4, #0]
 80142e0:	f015 0506 	ands.w	r5, r5, #6
 80142e4:	d107      	bne.n	80142f6 <_printf_common+0x52>
 80142e6:	f104 0a19 	add.w	sl, r4, #25
 80142ea:	68e3      	ldr	r3, [r4, #12]
 80142ec:	f8d9 2000 	ldr.w	r2, [r9]
 80142f0:	1a9b      	subs	r3, r3, r2
 80142f2:	42ab      	cmp	r3, r5
 80142f4:	dc28      	bgt.n	8014348 <_printf_common+0xa4>
 80142f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80142fa:	6822      	ldr	r2, [r4, #0]
 80142fc:	3300      	adds	r3, #0
 80142fe:	bf18      	it	ne
 8014300:	2301      	movne	r3, #1
 8014302:	0692      	lsls	r2, r2, #26
 8014304:	d42d      	bmi.n	8014362 <_printf_common+0xbe>
 8014306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801430a:	4639      	mov	r1, r7
 801430c:	4630      	mov	r0, r6
 801430e:	47c0      	blx	r8
 8014310:	3001      	adds	r0, #1
 8014312:	d020      	beq.n	8014356 <_printf_common+0xb2>
 8014314:	6823      	ldr	r3, [r4, #0]
 8014316:	68e5      	ldr	r5, [r4, #12]
 8014318:	f8d9 2000 	ldr.w	r2, [r9]
 801431c:	f003 0306 	and.w	r3, r3, #6
 8014320:	2b04      	cmp	r3, #4
 8014322:	bf08      	it	eq
 8014324:	1aad      	subeq	r5, r5, r2
 8014326:	68a3      	ldr	r3, [r4, #8]
 8014328:	6922      	ldr	r2, [r4, #16]
 801432a:	bf0c      	ite	eq
 801432c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014330:	2500      	movne	r5, #0
 8014332:	4293      	cmp	r3, r2
 8014334:	bfc4      	itt	gt
 8014336:	1a9b      	subgt	r3, r3, r2
 8014338:	18ed      	addgt	r5, r5, r3
 801433a:	f04f 0900 	mov.w	r9, #0
 801433e:	341a      	adds	r4, #26
 8014340:	454d      	cmp	r5, r9
 8014342:	d11a      	bne.n	801437a <_printf_common+0xd6>
 8014344:	2000      	movs	r0, #0
 8014346:	e008      	b.n	801435a <_printf_common+0xb6>
 8014348:	2301      	movs	r3, #1
 801434a:	4652      	mov	r2, sl
 801434c:	4639      	mov	r1, r7
 801434e:	4630      	mov	r0, r6
 8014350:	47c0      	blx	r8
 8014352:	3001      	adds	r0, #1
 8014354:	d103      	bne.n	801435e <_printf_common+0xba>
 8014356:	f04f 30ff 	mov.w	r0, #4294967295
 801435a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801435e:	3501      	adds	r5, #1
 8014360:	e7c3      	b.n	80142ea <_printf_common+0x46>
 8014362:	18e1      	adds	r1, r4, r3
 8014364:	1c5a      	adds	r2, r3, #1
 8014366:	2030      	movs	r0, #48	; 0x30
 8014368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801436c:	4422      	add	r2, r4
 801436e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014372:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014376:	3302      	adds	r3, #2
 8014378:	e7c5      	b.n	8014306 <_printf_common+0x62>
 801437a:	2301      	movs	r3, #1
 801437c:	4622      	mov	r2, r4
 801437e:	4639      	mov	r1, r7
 8014380:	4630      	mov	r0, r6
 8014382:	47c0      	blx	r8
 8014384:	3001      	adds	r0, #1
 8014386:	d0e6      	beq.n	8014356 <_printf_common+0xb2>
 8014388:	f109 0901 	add.w	r9, r9, #1
 801438c:	e7d8      	b.n	8014340 <_printf_common+0x9c>
	...

08014390 <_printf_i>:
 8014390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014394:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014398:	460c      	mov	r4, r1
 801439a:	7e09      	ldrb	r1, [r1, #24]
 801439c:	b085      	sub	sp, #20
 801439e:	296e      	cmp	r1, #110	; 0x6e
 80143a0:	4617      	mov	r7, r2
 80143a2:	4606      	mov	r6, r0
 80143a4:	4698      	mov	r8, r3
 80143a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143a8:	f000 80b3 	beq.w	8014512 <_printf_i+0x182>
 80143ac:	d822      	bhi.n	80143f4 <_printf_i+0x64>
 80143ae:	2963      	cmp	r1, #99	; 0x63
 80143b0:	d036      	beq.n	8014420 <_printf_i+0x90>
 80143b2:	d80a      	bhi.n	80143ca <_printf_i+0x3a>
 80143b4:	2900      	cmp	r1, #0
 80143b6:	f000 80b9 	beq.w	801452c <_printf_i+0x19c>
 80143ba:	2958      	cmp	r1, #88	; 0x58
 80143bc:	f000 8083 	beq.w	80144c6 <_printf_i+0x136>
 80143c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80143c8:	e032      	b.n	8014430 <_printf_i+0xa0>
 80143ca:	2964      	cmp	r1, #100	; 0x64
 80143cc:	d001      	beq.n	80143d2 <_printf_i+0x42>
 80143ce:	2969      	cmp	r1, #105	; 0x69
 80143d0:	d1f6      	bne.n	80143c0 <_printf_i+0x30>
 80143d2:	6820      	ldr	r0, [r4, #0]
 80143d4:	6813      	ldr	r3, [r2, #0]
 80143d6:	0605      	lsls	r5, r0, #24
 80143d8:	f103 0104 	add.w	r1, r3, #4
 80143dc:	d52a      	bpl.n	8014434 <_printf_i+0xa4>
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	6011      	str	r1, [r2, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	da03      	bge.n	80143ee <_printf_i+0x5e>
 80143e6:	222d      	movs	r2, #45	; 0x2d
 80143e8:	425b      	negs	r3, r3
 80143ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80143ee:	486f      	ldr	r0, [pc, #444]	; (80145ac <_printf_i+0x21c>)
 80143f0:	220a      	movs	r2, #10
 80143f2:	e039      	b.n	8014468 <_printf_i+0xd8>
 80143f4:	2973      	cmp	r1, #115	; 0x73
 80143f6:	f000 809d 	beq.w	8014534 <_printf_i+0x1a4>
 80143fa:	d808      	bhi.n	801440e <_printf_i+0x7e>
 80143fc:	296f      	cmp	r1, #111	; 0x6f
 80143fe:	d020      	beq.n	8014442 <_printf_i+0xb2>
 8014400:	2970      	cmp	r1, #112	; 0x70
 8014402:	d1dd      	bne.n	80143c0 <_printf_i+0x30>
 8014404:	6823      	ldr	r3, [r4, #0]
 8014406:	f043 0320 	orr.w	r3, r3, #32
 801440a:	6023      	str	r3, [r4, #0]
 801440c:	e003      	b.n	8014416 <_printf_i+0x86>
 801440e:	2975      	cmp	r1, #117	; 0x75
 8014410:	d017      	beq.n	8014442 <_printf_i+0xb2>
 8014412:	2978      	cmp	r1, #120	; 0x78
 8014414:	d1d4      	bne.n	80143c0 <_printf_i+0x30>
 8014416:	2378      	movs	r3, #120	; 0x78
 8014418:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801441c:	4864      	ldr	r0, [pc, #400]	; (80145b0 <_printf_i+0x220>)
 801441e:	e055      	b.n	80144cc <_printf_i+0x13c>
 8014420:	6813      	ldr	r3, [r2, #0]
 8014422:	1d19      	adds	r1, r3, #4
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	6011      	str	r1, [r2, #0]
 8014428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801442c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014430:	2301      	movs	r3, #1
 8014432:	e08c      	b.n	801454e <_printf_i+0x1be>
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	6011      	str	r1, [r2, #0]
 8014438:	f010 0f40 	tst.w	r0, #64	; 0x40
 801443c:	bf18      	it	ne
 801443e:	b21b      	sxthne	r3, r3
 8014440:	e7cf      	b.n	80143e2 <_printf_i+0x52>
 8014442:	6813      	ldr	r3, [r2, #0]
 8014444:	6825      	ldr	r5, [r4, #0]
 8014446:	1d18      	adds	r0, r3, #4
 8014448:	6010      	str	r0, [r2, #0]
 801444a:	0628      	lsls	r0, r5, #24
 801444c:	d501      	bpl.n	8014452 <_printf_i+0xc2>
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	e002      	b.n	8014458 <_printf_i+0xc8>
 8014452:	0668      	lsls	r0, r5, #25
 8014454:	d5fb      	bpl.n	801444e <_printf_i+0xbe>
 8014456:	881b      	ldrh	r3, [r3, #0]
 8014458:	4854      	ldr	r0, [pc, #336]	; (80145ac <_printf_i+0x21c>)
 801445a:	296f      	cmp	r1, #111	; 0x6f
 801445c:	bf14      	ite	ne
 801445e:	220a      	movne	r2, #10
 8014460:	2208      	moveq	r2, #8
 8014462:	2100      	movs	r1, #0
 8014464:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014468:	6865      	ldr	r5, [r4, #4]
 801446a:	60a5      	str	r5, [r4, #8]
 801446c:	2d00      	cmp	r5, #0
 801446e:	f2c0 8095 	blt.w	801459c <_printf_i+0x20c>
 8014472:	6821      	ldr	r1, [r4, #0]
 8014474:	f021 0104 	bic.w	r1, r1, #4
 8014478:	6021      	str	r1, [r4, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d13d      	bne.n	80144fa <_printf_i+0x16a>
 801447e:	2d00      	cmp	r5, #0
 8014480:	f040 808e 	bne.w	80145a0 <_printf_i+0x210>
 8014484:	4665      	mov	r5, ip
 8014486:	2a08      	cmp	r2, #8
 8014488:	d10b      	bne.n	80144a2 <_printf_i+0x112>
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	07db      	lsls	r3, r3, #31
 801448e:	d508      	bpl.n	80144a2 <_printf_i+0x112>
 8014490:	6923      	ldr	r3, [r4, #16]
 8014492:	6862      	ldr	r2, [r4, #4]
 8014494:	429a      	cmp	r2, r3
 8014496:	bfde      	ittt	le
 8014498:	2330      	movle	r3, #48	; 0x30
 801449a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801449e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80144a2:	ebac 0305 	sub.w	r3, ip, r5
 80144a6:	6123      	str	r3, [r4, #16]
 80144a8:	f8cd 8000 	str.w	r8, [sp]
 80144ac:	463b      	mov	r3, r7
 80144ae:	aa03      	add	r2, sp, #12
 80144b0:	4621      	mov	r1, r4
 80144b2:	4630      	mov	r0, r6
 80144b4:	f7ff fef6 	bl	80142a4 <_printf_common>
 80144b8:	3001      	adds	r0, #1
 80144ba:	d14d      	bne.n	8014558 <_printf_i+0x1c8>
 80144bc:	f04f 30ff 	mov.w	r0, #4294967295
 80144c0:	b005      	add	sp, #20
 80144c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c6:	4839      	ldr	r0, [pc, #228]	; (80145ac <_printf_i+0x21c>)
 80144c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80144cc:	6813      	ldr	r3, [r2, #0]
 80144ce:	6821      	ldr	r1, [r4, #0]
 80144d0:	1d1d      	adds	r5, r3, #4
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	6015      	str	r5, [r2, #0]
 80144d6:	060a      	lsls	r2, r1, #24
 80144d8:	d50b      	bpl.n	80144f2 <_printf_i+0x162>
 80144da:	07ca      	lsls	r2, r1, #31
 80144dc:	bf44      	itt	mi
 80144de:	f041 0120 	orrmi.w	r1, r1, #32
 80144e2:	6021      	strmi	r1, [r4, #0]
 80144e4:	b91b      	cbnz	r3, 80144ee <_printf_i+0x15e>
 80144e6:	6822      	ldr	r2, [r4, #0]
 80144e8:	f022 0220 	bic.w	r2, r2, #32
 80144ec:	6022      	str	r2, [r4, #0]
 80144ee:	2210      	movs	r2, #16
 80144f0:	e7b7      	b.n	8014462 <_printf_i+0xd2>
 80144f2:	064d      	lsls	r5, r1, #25
 80144f4:	bf48      	it	mi
 80144f6:	b29b      	uxthmi	r3, r3
 80144f8:	e7ef      	b.n	80144da <_printf_i+0x14a>
 80144fa:	4665      	mov	r5, ip
 80144fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014500:	fb02 3311 	mls	r3, r2, r1, r3
 8014504:	5cc3      	ldrb	r3, [r0, r3]
 8014506:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801450a:	460b      	mov	r3, r1
 801450c:	2900      	cmp	r1, #0
 801450e:	d1f5      	bne.n	80144fc <_printf_i+0x16c>
 8014510:	e7b9      	b.n	8014486 <_printf_i+0xf6>
 8014512:	6813      	ldr	r3, [r2, #0]
 8014514:	6825      	ldr	r5, [r4, #0]
 8014516:	6961      	ldr	r1, [r4, #20]
 8014518:	1d18      	adds	r0, r3, #4
 801451a:	6010      	str	r0, [r2, #0]
 801451c:	0628      	lsls	r0, r5, #24
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	d501      	bpl.n	8014526 <_printf_i+0x196>
 8014522:	6019      	str	r1, [r3, #0]
 8014524:	e002      	b.n	801452c <_printf_i+0x19c>
 8014526:	066a      	lsls	r2, r5, #25
 8014528:	d5fb      	bpl.n	8014522 <_printf_i+0x192>
 801452a:	8019      	strh	r1, [r3, #0]
 801452c:	2300      	movs	r3, #0
 801452e:	6123      	str	r3, [r4, #16]
 8014530:	4665      	mov	r5, ip
 8014532:	e7b9      	b.n	80144a8 <_printf_i+0x118>
 8014534:	6813      	ldr	r3, [r2, #0]
 8014536:	1d19      	adds	r1, r3, #4
 8014538:	6011      	str	r1, [r2, #0]
 801453a:	681d      	ldr	r5, [r3, #0]
 801453c:	6862      	ldr	r2, [r4, #4]
 801453e:	2100      	movs	r1, #0
 8014540:	4628      	mov	r0, r5
 8014542:	f7eb fed5 	bl	80002f0 <memchr>
 8014546:	b108      	cbz	r0, 801454c <_printf_i+0x1bc>
 8014548:	1b40      	subs	r0, r0, r5
 801454a:	6060      	str	r0, [r4, #4]
 801454c:	6863      	ldr	r3, [r4, #4]
 801454e:	6123      	str	r3, [r4, #16]
 8014550:	2300      	movs	r3, #0
 8014552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014556:	e7a7      	b.n	80144a8 <_printf_i+0x118>
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	462a      	mov	r2, r5
 801455c:	4639      	mov	r1, r7
 801455e:	4630      	mov	r0, r6
 8014560:	47c0      	blx	r8
 8014562:	3001      	adds	r0, #1
 8014564:	d0aa      	beq.n	80144bc <_printf_i+0x12c>
 8014566:	6823      	ldr	r3, [r4, #0]
 8014568:	079b      	lsls	r3, r3, #30
 801456a:	d413      	bmi.n	8014594 <_printf_i+0x204>
 801456c:	68e0      	ldr	r0, [r4, #12]
 801456e:	9b03      	ldr	r3, [sp, #12]
 8014570:	4298      	cmp	r0, r3
 8014572:	bfb8      	it	lt
 8014574:	4618      	movlt	r0, r3
 8014576:	e7a3      	b.n	80144c0 <_printf_i+0x130>
 8014578:	2301      	movs	r3, #1
 801457a:	464a      	mov	r2, r9
 801457c:	4639      	mov	r1, r7
 801457e:	4630      	mov	r0, r6
 8014580:	47c0      	blx	r8
 8014582:	3001      	adds	r0, #1
 8014584:	d09a      	beq.n	80144bc <_printf_i+0x12c>
 8014586:	3501      	adds	r5, #1
 8014588:	68e3      	ldr	r3, [r4, #12]
 801458a:	9a03      	ldr	r2, [sp, #12]
 801458c:	1a9b      	subs	r3, r3, r2
 801458e:	42ab      	cmp	r3, r5
 8014590:	dcf2      	bgt.n	8014578 <_printf_i+0x1e8>
 8014592:	e7eb      	b.n	801456c <_printf_i+0x1dc>
 8014594:	2500      	movs	r5, #0
 8014596:	f104 0919 	add.w	r9, r4, #25
 801459a:	e7f5      	b.n	8014588 <_printf_i+0x1f8>
 801459c:	2b00      	cmp	r3, #0
 801459e:	d1ac      	bne.n	80144fa <_printf_i+0x16a>
 80145a0:	7803      	ldrb	r3, [r0, #0]
 80145a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145aa:	e76c      	b.n	8014486 <_printf_i+0xf6>
 80145ac:	08016979 	.word	0x08016979
 80145b0:	0801698a 	.word	0x0801698a

080145b4 <__sread>:
 80145b4:	b510      	push	{r4, lr}
 80145b6:	460c      	mov	r4, r1
 80145b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145bc:	f000 f894 	bl	80146e8 <_read_r>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	bfab      	itete	ge
 80145c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145c6:	89a3      	ldrhlt	r3, [r4, #12]
 80145c8:	181b      	addge	r3, r3, r0
 80145ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145ce:	bfac      	ite	ge
 80145d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80145d2:	81a3      	strhlt	r3, [r4, #12]
 80145d4:	bd10      	pop	{r4, pc}

080145d6 <__swrite>:
 80145d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145da:	461f      	mov	r7, r3
 80145dc:	898b      	ldrh	r3, [r1, #12]
 80145de:	05db      	lsls	r3, r3, #23
 80145e0:	4605      	mov	r5, r0
 80145e2:	460c      	mov	r4, r1
 80145e4:	4616      	mov	r6, r2
 80145e6:	d505      	bpl.n	80145f4 <__swrite+0x1e>
 80145e8:	2302      	movs	r3, #2
 80145ea:	2200      	movs	r2, #0
 80145ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145f0:	f000 f868 	bl	80146c4 <_lseek_r>
 80145f4:	89a3      	ldrh	r3, [r4, #12]
 80145f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80145fe:	81a3      	strh	r3, [r4, #12]
 8014600:	4632      	mov	r2, r6
 8014602:	463b      	mov	r3, r7
 8014604:	4628      	mov	r0, r5
 8014606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801460a:	f000 b817 	b.w	801463c <_write_r>

0801460e <__sseek>:
 801460e:	b510      	push	{r4, lr}
 8014610:	460c      	mov	r4, r1
 8014612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014616:	f000 f855 	bl	80146c4 <_lseek_r>
 801461a:	1c43      	adds	r3, r0, #1
 801461c:	89a3      	ldrh	r3, [r4, #12]
 801461e:	bf15      	itete	ne
 8014620:	6560      	strne	r0, [r4, #84]	; 0x54
 8014622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801462a:	81a3      	strheq	r3, [r4, #12]
 801462c:	bf18      	it	ne
 801462e:	81a3      	strhne	r3, [r4, #12]
 8014630:	bd10      	pop	{r4, pc}

08014632 <__sclose>:
 8014632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014636:	f000 b813 	b.w	8014660 <_close_r>
	...

0801463c <_write_r>:
 801463c:	b538      	push	{r3, r4, r5, lr}
 801463e:	4c07      	ldr	r4, [pc, #28]	; (801465c <_write_r+0x20>)
 8014640:	4605      	mov	r5, r0
 8014642:	4608      	mov	r0, r1
 8014644:	4611      	mov	r1, r2
 8014646:	2200      	movs	r2, #0
 8014648:	6022      	str	r2, [r4, #0]
 801464a:	461a      	mov	r2, r3
 801464c:	f7ec fdaa 	bl	80011a4 <_write>
 8014650:	1c43      	adds	r3, r0, #1
 8014652:	d102      	bne.n	801465a <_write_r+0x1e>
 8014654:	6823      	ldr	r3, [r4, #0]
 8014656:	b103      	cbz	r3, 801465a <_write_r+0x1e>
 8014658:	602b      	str	r3, [r5, #0]
 801465a:	bd38      	pop	{r3, r4, r5, pc}
 801465c:	2401bfd8 	.word	0x2401bfd8

08014660 <_close_r>:
 8014660:	b538      	push	{r3, r4, r5, lr}
 8014662:	4c06      	ldr	r4, [pc, #24]	; (801467c <_close_r+0x1c>)
 8014664:	2300      	movs	r3, #0
 8014666:	4605      	mov	r5, r0
 8014668:	4608      	mov	r0, r1
 801466a:	6023      	str	r3, [r4, #0]
 801466c:	f7ec fda8 	bl	80011c0 <_close>
 8014670:	1c43      	adds	r3, r0, #1
 8014672:	d102      	bne.n	801467a <_close_r+0x1a>
 8014674:	6823      	ldr	r3, [r4, #0]
 8014676:	b103      	cbz	r3, 801467a <_close_r+0x1a>
 8014678:	602b      	str	r3, [r5, #0]
 801467a:	bd38      	pop	{r3, r4, r5, pc}
 801467c:	2401bfd8 	.word	0x2401bfd8

08014680 <_fstat_r>:
 8014680:	b538      	push	{r3, r4, r5, lr}
 8014682:	4c07      	ldr	r4, [pc, #28]	; (80146a0 <_fstat_r+0x20>)
 8014684:	2300      	movs	r3, #0
 8014686:	4605      	mov	r5, r0
 8014688:	4608      	mov	r0, r1
 801468a:	4611      	mov	r1, r2
 801468c:	6023      	str	r3, [r4, #0]
 801468e:	f7ec fd9b 	bl	80011c8 <_fstat>
 8014692:	1c43      	adds	r3, r0, #1
 8014694:	d102      	bne.n	801469c <_fstat_r+0x1c>
 8014696:	6823      	ldr	r3, [r4, #0]
 8014698:	b103      	cbz	r3, 801469c <_fstat_r+0x1c>
 801469a:	602b      	str	r3, [r5, #0]
 801469c:	bd38      	pop	{r3, r4, r5, pc}
 801469e:	bf00      	nop
 80146a0:	2401bfd8 	.word	0x2401bfd8

080146a4 <_isatty_r>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	4c06      	ldr	r4, [pc, #24]	; (80146c0 <_isatty_r+0x1c>)
 80146a8:	2300      	movs	r3, #0
 80146aa:	4605      	mov	r5, r0
 80146ac:	4608      	mov	r0, r1
 80146ae:	6023      	str	r3, [r4, #0]
 80146b0:	f7ec fd90 	bl	80011d4 <_isatty>
 80146b4:	1c43      	adds	r3, r0, #1
 80146b6:	d102      	bne.n	80146be <_isatty_r+0x1a>
 80146b8:	6823      	ldr	r3, [r4, #0]
 80146ba:	b103      	cbz	r3, 80146be <_isatty_r+0x1a>
 80146bc:	602b      	str	r3, [r5, #0]
 80146be:	bd38      	pop	{r3, r4, r5, pc}
 80146c0:	2401bfd8 	.word	0x2401bfd8

080146c4 <_lseek_r>:
 80146c4:	b538      	push	{r3, r4, r5, lr}
 80146c6:	4c07      	ldr	r4, [pc, #28]	; (80146e4 <_lseek_r+0x20>)
 80146c8:	4605      	mov	r5, r0
 80146ca:	4608      	mov	r0, r1
 80146cc:	4611      	mov	r1, r2
 80146ce:	2200      	movs	r2, #0
 80146d0:	6022      	str	r2, [r4, #0]
 80146d2:	461a      	mov	r2, r3
 80146d4:	f7ec fd80 	bl	80011d8 <_lseek>
 80146d8:	1c43      	adds	r3, r0, #1
 80146da:	d102      	bne.n	80146e2 <_lseek_r+0x1e>
 80146dc:	6823      	ldr	r3, [r4, #0]
 80146de:	b103      	cbz	r3, 80146e2 <_lseek_r+0x1e>
 80146e0:	602b      	str	r3, [r5, #0]
 80146e2:	bd38      	pop	{r3, r4, r5, pc}
 80146e4:	2401bfd8 	.word	0x2401bfd8

080146e8 <_read_r>:
 80146e8:	b538      	push	{r3, r4, r5, lr}
 80146ea:	4c07      	ldr	r4, [pc, #28]	; (8014708 <_read_r+0x20>)
 80146ec:	4605      	mov	r5, r0
 80146ee:	4608      	mov	r0, r1
 80146f0:	4611      	mov	r1, r2
 80146f2:	2200      	movs	r2, #0
 80146f4:	6022      	str	r2, [r4, #0]
 80146f6:	461a      	mov	r2, r3
 80146f8:	f7ec fd46 	bl	8001188 <_read>
 80146fc:	1c43      	adds	r3, r0, #1
 80146fe:	d102      	bne.n	8014706 <_read_r+0x1e>
 8014700:	6823      	ldr	r3, [r4, #0]
 8014702:	b103      	cbz	r3, 8014706 <_read_r+0x1e>
 8014704:	602b      	str	r3, [r5, #0]
 8014706:	bd38      	pop	{r3, r4, r5, pc}
 8014708:	2401bfd8 	.word	0x2401bfd8

0801470c <_init>:
 801470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801470e:	bf00      	nop
 8014710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014712:	bc08      	pop	{r3}
 8014714:	469e      	mov	lr, r3
 8014716:	4770      	bx	lr

08014718 <_fini>:
 8014718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801471a:	bf00      	nop
 801471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801471e:	bc08      	pop	{r3}
 8014720:	469e      	mov	lr, r3
 8014722:	4770      	bx	lr
